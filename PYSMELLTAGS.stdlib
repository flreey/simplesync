{'CLASSES': {'BaseHTTPServer.BaseHTTPRequestHandler': {'bases': ['SocketServer.StreamRequestHandler'],
                                                       'constructor': [],
                                                       'docstring': 'HTTP request handler base class.\n\n    The following explanation of HTTP serves to guide you through the\n    code as well as to expose any misunderstandings I may have about\n    HTTP (so you don\'t need to read the code to figure out I\'m wrong\n    :-).\n\n    HTTP (HyperText Transfer Protocol) is an extensible protocol on\n    top of a reliable stream transport (e.g. TCP/IP).  The protocol\n    recognizes three parts to a request:\n\n    1. One line identifying the request type and path\n    2. An optional set of RFC-822-style headers\n    3. An optional data part\n\n    The headers and data are separated by a blank line.\n\n    The first line of the request has the form\n\n    <command> <path> <version>\n\n    where <command> is a (case-sensitive) keyword such as GET or POST,\n    <path> is a string containing path information for the request,\n    and <version> should be the string "HTTP/1.0" or "HTTP/1.1".\n    <path> is encoded using the URL encoding scheme (using %xx to signify\n    the ASCII character with hex code xx).\n\n    The specification specifies that lines are separated by CRLF but\n    for compatibility with the widest range of clients recommends\n    servers also handle LF.  Similarly, whitespace in the request line\n    is treated sensibly (allowing multiple spaces between components\n    and allowing trailing whitespace).\n\n    Similarly, for output, lines ought to be separated by CRLF pairs\n    but most clients grok LF characters just fine.\n\n    If the first line of the request has the form\n\n    <command> <path>\n\n    (i.e. <version> is left out) then this is assumed to be an HTTP\n    0.9 request; this form has no optional headers and data part and\n    the reply consists of just the data.\n\n    The reply form of the HTTP 1.x protocol again has three parts:\n\n    1. One line giving the response code\n    2. An optional set of RFC-822-style headers\n    3. The data\n\n    Again, the headers and data are separated by a blank line.\n\n    The response code line has the form\n\n    <version> <responsecode> <responsestring>\n\n    where <version> is the protocol version ("HTTP/1.0" or "HTTP/1.1"),\n    <responsecode> is a 3-digit response code indicating success or\n    failure of the request, and <responsestring> is an optional\n    human-readable string explaining what the response code means.\n\n    This server parses the request and the headers, and then calls a\n    function specific to the request type (<command>).  Specifically,\n    a request SPAM will be handled by a method do_SPAM().  If no\n    such method exists the server sends an error response to the\n    client.  If it exists, it is called with no arguments:\n\n    do_SPAM()\n\n    Note that the request name is case sensitive (i.e. SPAM and spam\n    are different requests).\n\n    The various request details are stored in instance variables:\n\n    - client_address is the client IP address in the form (host,\n    port);\n\n    - command, path and version are the broken-down request line;\n\n    - headers is an instance of mimetools.Message (or a derived\n    class) containing the header information;\n\n    - rfile is a file object open for reading positioned at the\n    start of the optional input data part;\n\n    - wfile is a file object open for writing.\n\n    IT IS IMPORTANT TO ADHERE TO THE PROTOCOL FOR WRITING!\n\n    The first thing to be written must be the response line.  Then\n    follow 0 or more header lines, then a blank line, and then the\n    actual data (if any).  The meaning of the header lines depends on\n    the command executed by the server; in most cases, when data is\n    returned, there should be at least one header line of the form\n\n    Content-type: <type>/<subtype>\n\n    where <type> and <subtype> should be registered MIME types,\n    e.g. "text/html" or "text/plain".\n\n    ',
                                                       'methods': [('parse_request',
                                                                    [],
                                                                    'Parse a request (internal).\n\n        The request should be stored in self.raw_requestline; the results\n        are in self.command, self.path, self.request_version and\n        self.headers.\n\n        Return True for success, False for failure; on failure, an\n        error is sent back.\n\n        '),
                                                                   ('handle_one_request',
                                                                    [],
                                                                    "Handle a single HTTP request.\n\n        You normally don't need to override this method; see the class\n        __doc__ string for information on how to handle specific HTTP\n        commands such as GET and POST.\n\n        "),
                                                                   ('handle',
                                                                    [],
                                                                    'Handle multiple requests if necessary.'),
                                                                   ('send_error',
                                                                    ['code', 'message=None'],
                                                                    'Send and log an error reply.\n\n        Arguments are the error code, and a detailed message.\n        The detailed message defaults to the short entry matching the\n        response code.\n\n        This sends an error response (so it must be called before any\n        output has been generated), logs the error, and finally sends\n        a piece of HTML explaining the error to the user.\n\n        '),
                                                                   ('send_response',
                                                                    ['code', 'message=None'],
                                                                    'Send the response header and log the response code.\n\n        Also send two standard headers with the server software\n        version and the current date.\n\n        '),
                                                                   ('send_header',
                                                                    ['keyword', 'value'],
                                                                    'Send a MIME header.'),
                                                                   ('end_headers',
                                                                    [],
                                                                    'Send the blank line ending the MIME headers.'),
                                                                   ('log_request',
                                                                    ["code='-'", "size='-'"],
                                                                    'Log an accepted request.\n\n        This is called by send_response().\n\n        '),
                                                                   ('log_error',
                                                                    ['format', '*args'],
                                                                    'Log an error.\n\n        This is called when a request cannot be fulfilled.  By\n        default it passes the message on to log_message().\n\n        Arguments are the same as for log_message().\n\n        XXX This should go to the separate error log.\n\n        '),
                                                                   ('log_message',
                                                                    ['format', '*args'],
                                                                    "Log an arbitrary message.\n\n        This is used by all other logging functions.  Override\n        it if you have specific logging wishes.\n\n        The first argument, FORMAT, is a format string for the\n        message to be logged.  If the format string contains\n        any % escapes requiring parameters, they should be\n        specified as subsequent arguments (it's just like\n        printf!).\n\n        The client host and current date/time are prefixed to\n        every message.\n\n        "),
                                                                   ('version_string',
                                                                    [],
                                                                    'Return the server software version string.'),
                                                                   ('date_time_string',
                                                                    ['timestamp=None'],
                                                                    'Return the current date and time formatted for a message header.'),
                                                                   ('log_date_time_string',
                                                                    [],
                                                                    'Return the current time formatted for logging.'),
                                                                   ('address_string',
                                                                    [],
                                                                    'Return the client address formatted for logging.\n\n        This version looks up the full hostname using gethostbyaddr(),\n        and tries to find a name that contains at least one dot.\n\n        ')],
                                                       'properties': ['sys_version',
                                                                      'server_version',
                                                                      'default_request_version',
                                                                      'command',
                                                                      'request_version',
                                                                      'close_connection',
                                                                      'requestline',
                                                                      'path',
                                                                      'headers',
                                                                      'raw_requestline',
                                                                      'error_message_format',
                                                                      'error_content_type',
                                                                      'weekdayname',
                                                                      'monthname',
                                                                      'protocol_version',
                                                                      'MessageClass',
                                                                      'responses']},
             'BaseHTTPServer.HTTPServer': {'bases': ['SocketServer.TCPServer'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('server_bind',
                                                        [],
                                                        'Override server_bind to store the server name.')],
                                           'properties': ['allow_reuse_address',
                                                          'server_name',
                                                          'server_port']},
             'Bastion.BastionClass': {'bases': [],
                                      'constructor': ['get', 'name'],
                                      'docstring': 'Helper class used by the Bastion() function.\n\n    You could subclass this and pass the subclass as the bastionclass\n    argument to the Bastion() function, as long as the constructor has\n    the same signature (a get() function and a name for the object).\n\n    ',
                                      'methods': [('__repr__',
                                                   [],
                                                   'Return a representation string.\n\n        This includes the name passed in to the constructor, so that\n        if you print the bastion during debugging, at least you have\n        some idea of what it is.\n\n        '),
                                                  ('__getattr__',
                                                   ['name'],
                                                   "Get an as-yet undefined attribute value.\n\n        This calls the get() function that was passed to the\n        constructor.  The result is stored as an instance variable so\n        that the next time the same attribute is requested,\n        __getattr__() won't be invoked.\n\n        If the get() function raises an exception, this is simply\n        passed on -- exceptions are not cached.\n\n        ")],
                                      'properties': ['_get_', '_name_']},
             'CGIHTTPServer.CGIHTTPRequestHandler': {'bases': ['SimpleHTTPServer.SimpleHTTPRequestHandler'],
                                                     'constructor': [],
                                                     'docstring': 'Complete HTTP server with GET, HEAD and POST commands.\n\n    GET and HEAD also support running CGI scripts.\n\n    The POST command is *only* implemented for CGI scripts.\n\n    ',
                                                     'methods': [('do_POST',
                                                                  [],
                                                                  'Serve a POST request.\n\n        This is only implemented for CGI scripts.\n\n        '),
                                                                 ('send_head',
                                                                  [],
                                                                  'Version of send_head that support CGI scripts'),
                                                                 ('is_cgi',
                                                                  [],
                                                                  "Test whether self.path corresponds to a CGI script.\n\n        Returns True and updates the cgi_info attribute to the tuple\n        (dir, rest) if self.path requires running a CGI script.\n        Returns False otherwise.\n\n        If any exception is raised, the caller should assume that\n        self.path was rejected as invalid and act accordingly.\n\n        The default implementation tests whether the normalized url\n        path begins with one of the strings in self.cgi_directories\n        (and the next character is a '/' or the end of the string).\n        "),
                                                                 ('is_executable',
                                                                  ['path'],
                                                                  'Test whether argument path is an executable file.'),
                                                                 ('is_python',
                                                                  ['path'],
                                                                  'Test whether argument path is a Python script.'),
                                                                 ('run_cgi',
                                                                  [],
                                                                  'Execute a CGI script.')],
                                                     'properties': ['have_fork',
                                                                    'have_popen2',
                                                                    'have_popen3',
                                                                    'rbufsize',
                                                                    'cgi_info',
                                                                    'cgi_directories']},
             'ConfigParser.ConfigParser': {'bases': ['ConfigParser.RawConfigParser'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('get',
                                                        ['section',
                                                         'option',
                                                         'raw=False',
                                                         'vars=None'],
                                                        "Get an option value for a given section.\n\n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `defaults' in that order.\n\n        All % interpolations are expanded in the return values, unless the\n        optional argument `raw' is true. Values for interpolation keys are\n        looked up in the same manner as the option.\n\n        The section DEFAULT is special.\n        "),
                                                       ('items',
                                                        ['section', 'raw=False', 'vars=None'],
                                                        "Return a list of tuples with (name, value) for each option\n        in the section.\n\n        All % interpolations are expanded in the return values, based on the\n        defaults passed into the constructor, unless the optional argument\n        `raw' is true.  Additional substitutions may be provided using the\n        `vars' argument, which must be a dictionary whose contents overrides\n        any pre-existing defaults.\n\n        The section DEFAULT is special.\n        "),
                                                       ('_interpolate',
                                                        ['section',
                                                         'option',
                                                         'rawval',
                                                         'vars'],
                                                        ''),
                                                       ('_interpolation_replace',
                                                        ['match'],
                                                        '')],
                                           'properties': ['_KEYCRE']},
             'ConfigParser.DuplicateSectionError': {'bases': ['ConfigParser.Error'],
                                                    'constructor': ['section'],
                                                    'docstring': 'Raised when a section is multiply-created.',
                                                    'methods': [],
                                                    'properties': ['section']},
             'ConfigParser.Error': {'bases': ['Exception'],
                                    'constructor': ["msg=''"],
                                    'docstring': 'Base class for ConfigParser exceptions.',
                                    'methods': [('_get_message',
                                                 [],
                                                 "Getter for 'message'; needed only to override deprecation in\n        BaseException."),
                                                ('_set_message',
                                                 ['value'],
                                                 "Setter for 'message'; needed only to override deprecation in\n        BaseException."),
                                                ('__repr__', [], '')],
                                    'properties': ['__message', 'message', '__str__']},
             'ConfigParser.InterpolationDepthError': {'bases': ['ConfigParser.InterpolationError'],
                                                      'constructor': ['option',
                                                                      'section',
                                                                      'rawval'],
                                                      'docstring': 'Raised when substitutions are nested too deeply.',
                                                      'methods': [],
                                                      'properties': []},
             'ConfigParser.InterpolationError': {'bases': ['ConfigParser.Error'],
                                                 'constructor': ['option', 'section', 'msg'],
                                                 'docstring': 'Base class for interpolation-related exceptions.',
                                                 'methods': [],
                                                 'properties': ['option', 'section']},
             'ConfigParser.InterpolationMissingOptionError': {'bases': ['ConfigParser.InterpolationError'],
                                                              'constructor': ['option',
                                                                              'section',
                                                                              'rawval',
                                                                              'reference'],
                                                              'docstring': 'A string substitution required a setting which was not available.',
                                                              'methods': [],
                                                              'properties': ['reference']},
             'ConfigParser.InterpolationSyntaxError': {'bases': ['ConfigParser.InterpolationError'],
                                                       'constructor': [],
                                                       'docstring': 'Raised when the source text into which substitutions are made\n    does not conform to the required syntax.',
                                                       'methods': [],
                                                       'properties': []},
             'ConfigParser.MissingSectionHeaderError': {'bases': ['ConfigParser.ParsingError'],
                                                        'constructor': ['filename',
                                                                        'lineno',
                                                                        'line'],
                                                        'docstring': 'Raised when a key-value pair is found before any section header.',
                                                        'methods': [],
                                                        'properties': ['filename',
                                                                       'lineno',
                                                                       'line']},
             'ConfigParser.NoOptionError': {'bases': ['ConfigParser.Error'],
                                            'constructor': ['option', 'section'],
                                            'docstring': 'A requested option was not found.',
                                            'methods': [],
                                            'properties': ['option', 'section']},
             'ConfigParser.NoSectionError': {'bases': ['ConfigParser.Error'],
                                             'constructor': ['section'],
                                             'docstring': 'Raised when no section matches a requested option.',
                                             'methods': [],
                                             'properties': ['section']},
             'ConfigParser.ParsingError': {'bases': ['ConfigParser.Error'],
                                           'constructor': ['filename'],
                                           'docstring': 'Raised when a configuration file does not follow legal syntax.',
                                           'methods': [('append', ['lineno', 'line'], '')],
                                           'properties': ['filename', 'errors']},
             'ConfigParser.RawConfigParser': {'bases': [],
                                              'constructor': ['defaults=None',
                                                              'dict_type=_default_dict',
                                                              'allow_no_value=False'],
                                              'docstring': '',
                                              'methods': [('defaults', [], ''),
                                                          ('sections',
                                                           [],
                                                           'Return a list of section names, excluding [DEFAULT]'),
                                                          ('add_section',
                                                           ['section'],
                                                           "Create a new section in the configuration.\n\n        Raise DuplicateSectionError if a section by the specified name\n        already exists. Raise ValueError if name is DEFAULT or any of it's\n        case-insensitive variants.\n        "),
                                                          ('has_section',
                                                           ['section'],
                                                           'Indicate whether the named section is present in the configuration.\n\n        The DEFAULT section is not acknowledged.\n        '),
                                                          ('options',
                                                           ['section'],
                                                           'Return a list of option names for the given section name.'),
                                                          ('read',
                                                           ['filenames'],
                                                           "Read and parse a filename or a list of filenames.\n\n        Files that cannot be opened are silently ignored; this is\n        designed so that you can specify a list of potential\n        configuration file locations (e.g. current directory, user's\n        home directory, systemwide directory), and all existing\n        configuration files in the list will be read.  A single\n        filename may also be given.\n\n        Return list of successfully read files.\n        "),
                                                          ('readfp',
                                                           ['fp', 'filename=None'],
                                                           "Like read() but the argument must be a file-like object.\n\n        The `fp' argument must have a `readline' method.  Optional\n        second argument is the `filename', which if not given, is\n        taken from fp.name.  If fp has no `name' attribute, `<???>' is\n        used.\n\n        "),
                                                          ('get', ['section', 'option'], ''),
                                                          ('items', ['section'], ''),
                                                          ('_get',
                                                           ['section', 'conv', 'option'],
                                                           ''),
                                                          ('getint', ['section', 'option'], ''),
                                                          ('getfloat',
                                                           ['section', 'option'],
                                                           ''),
                                                          ('getboolean',
                                                           ['section', 'option'],
                                                           ''),
                                                          ('optionxform', ['optionstr'], ''),
                                                          ('has_option',
                                                           ['section', 'option'],
                                                           'Check for the existence of a given option in a given section.'),
                                                          ('set',
                                                           ['section', 'option', 'value=None'],
                                                           'Set an option.'),
                                                          ('write',
                                                           ['fp'],
                                                           'Write an .ini-format representation of the configuration state.'),
                                                          ('remove_option',
                                                           ['section', 'option'],
                                                           'Remove an option.'),
                                                          ('remove_section',
                                                           ['section'],
                                                           'Remove a file section.'),
                                                          ('_read',
                                                           ['fp', 'fpname'],
                                                           "Parse a sectioned setup file.\n\n        The sections in setup file contains a title line at the top,\n        indicated by a name in square brackets (`[]'), plus key/value\n        options lines, indicated by `name: value' format lines.\n        Continuations are represented by an embedded newline then\n        leading whitespace.  Blank lines, lines beginning with a '#',\n        and just about everything else are ignored.\n        ")],
                                              'properties': ['_dict',
                                                             '_sections',
                                                             '_defaults',
                                                             '_optcre',
                                                             '_boolean_states',
                                                             'SECTCRE',
                                                             'OPTCRE',
                                                             'OPTCRE_NV']},
             'ConfigParser.SafeConfigParser': {'bases': ['ConfigParser.ConfigParser'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('_interpolate',
                                                            ['section',
                                                             'option',
                                                             'rawval',
                                                             'vars'],
                                                            ''),
                                                           ('_interpolate_some',
                                                            ['option',
                                                             'accum',
                                                             'rest',
                                                             'section',
                                                             'map',
                                                             'depth'],
                                                            ''),
                                                           ('set',
                                                            ['section',
                                                             'option',
                                                             'value=None'],
                                                            'Set an option.  Extend ConfigParser.set: check for string values.')],
                                               'properties': ['_interpvar_re']},
             'ConfigParser._Chainmap': {'bases': ['UserDict.DictMixin'],
                                        'constructor': ['*maps'],
                                        'docstring': "Combine multiple mappings for successive lookups.\n\n    For example, to emulate Python's normal lookup sequence:\n\n        import __builtin__\n        pylookup = _Chainmap(locals(), globals(), vars(__builtin__))\n    ",
                                        'methods': [('__getitem__', ['key'], ''),
                                                    ('keys', [], '')],
                                        'properties': ['_maps']},
             'Cookie.BaseCookie': {'bases': ['dict'],
                                   'constructor': ['input=None'],
                                   'docstring': '',
                                   'methods': [('value_decode',
                                                ['val'],
                                                "real_value, coded_value = value_decode(STRING)\n        Called prior to setting a cookie's value from the network\n        representation.  The VALUE is the value read from HTTP\n        header.\n        Override this function to modify the behavior of cookies.\n        "),
                                               ('value_encode',
                                                ['val'],
                                                "real_value, coded_value = value_encode(VALUE)\n        Called prior to setting a cookie's value from the dictionary\n        representation.  The VALUE is the value being assigned.\n        Override this function to modify the behavior of cookies.\n        "),
                                               ('__set',
                                                ['key', 'real_value', 'coded_value'],
                                                "Private method for setting a cookie's value"),
                                               ('__setitem__',
                                                ['key', 'value'],
                                                'Dictionary style assignment.'),
                                               ('output',
                                                ['attrs=None',
                                                 "header='Set-Cookie:'",
                                                 "sep='\\r\\n'"],
                                                'Return a string suitable for HTTP.'),
                                               ('__repr__', [], ''),
                                               ('js_output',
                                                ['attrs=None'],
                                                'Return a string suitable for JavaScript.'),
                                               ('load',
                                                ['rawdata'],
                                                "Load cookies from a string (presumably HTTP_COOKIE) or\n        from a dictionary.  Loading cookies from a dictionary 'd'\n        is equivalent to calling:\n            map(Cookie.__setitem__, d.keys(), d.values())\n        "),
                                               ('__ParseString',
                                                ['str', 'patt=_CookiePattern'],
                                                '')],
                                   'properties': ['__str__']},
             'Cookie.CookieError': {'bases': ['Exception'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'Cookie.Morsel': {'bases': ['dict'],
                               'constructor': [],
                               'docstring': '',
                               'methods': [('__setitem__', ['K', 'V'], ''),
                                           ('isReservedKey', ['K'], ''),
                                           ('set',
                                            ['key',
                                             'val',
                                             'coded_val',
                                             'LegalChars=_LegalChars',
                                             'idmap=_idmap',
                                             'translate=string.translate'],
                                            ''),
                                           ('output',
                                            ['attrs=None', "header='Set-Cookie:'"],
                                            ''),
                                           ('__repr__', [], ''),
                                           ('js_output', ['attrs=None'], ''),
                                           ('OutputString', ['attrs=None'], '')],
                               'properties': ['_reserved',
                                              'key',
                                              'value',
                                              'coded_value',
                                              '__str__']},
             'Cookie.SerialCookie': {'bases': ['Cookie.BaseCookie'],
                                     'constructor': ['input=None'],
                                     'docstring': 'SerialCookie\n    SerialCookie supports arbitrary objects as cookie values. All\n    values are serialized (using cPickle) before being sent to the\n    client.  All incoming values are assumed to be valid Pickle\n    representations.  IF AN INCOMING VALUE IS NOT IN A VALID PICKLE\n    FORMAT, THEN AN EXCEPTION WILL BE RAISED.\n\n    Note: Large cookie values add overhead because they must be\n    retransmitted on every HTTP transaction.\n\n    Note: HTTP has a 2k limit on the size of a cookie.  This class\n    does not check for this limit, so be careful!!!\n    ',
                                     'methods': [('value_decode', ['val'], ''),
                                                 ('value_encode', ['val'], '')],
                                     'properties': []},
             'Cookie.SimpleCookie': {'bases': ['Cookie.BaseCookie'],
                                     'constructor': [],
                                     'docstring': 'SimpleCookie\n    SimpleCookie supports strings as cookie values.  When setting\n    the value using the dictionary assignment notation, SimpleCookie\n    calls the builtin str() to convert the value to a string.  Values\n    received from HTTP are kept as strings.\n    ',
                                     'methods': [('value_decode', ['val'], ''),
                                                 ('value_encode', ['val'], '')],
                                     'properties': []},
             'Cookie.SmartCookie': {'bases': ['Cookie.BaseCookie'],
                                    'constructor': ['input=None'],
                                    'docstring': 'SmartCookie\n    SmartCookie supports arbitrary objects as cookie values.  If the\n    object is a string, then it is quoted.  If the object is not a\n    string, however, then SmartCookie will use cPickle to serialize\n    the object into a string representation.\n\n    Note: Large cookie values add overhead because they must be\n    retransmitted on every HTTP transaction.\n\n    Note: HTTP has a 2k limit on the size of a cookie.  This class\n    does not check for this limit, so be careful!!!\n    ',
                                    'methods': [('value_decode', ['val'], ''),
                                                ('value_encode', ['val'], '')],
                                    'properties': []},
             'DocXMLRPCServer.DocCGIXMLRPCRequestHandler': {'bases': ['SimpleXMLRPCServer.CGIXMLRPCRequestHandler',
                                                                      'DocXMLRPCServer.XMLRPCDocGenerator'],
                                                            'constructor': [],
                                                            'docstring': 'Handler for XML-RPC data and documentation requests passed through\n    CGI',
                                                            'methods': [('handle_get',
                                                                         [],
                                                                         'Handles the HTTP GET request.\n\n        Interpret all HTTP GET requests as requests for server\n        documentation.\n        ')],
                                                            'properties': []},
             'DocXMLRPCServer.DocXMLRPCRequestHandler': {'bases': ['SimpleXMLRPCServer.SimpleXMLRPCRequestHandler'],
                                                         'constructor': [],
                                                         'docstring': 'XML-RPC and documentation request handler class.\n\n    Handles all HTTP POST requests and attempts to decode them as\n    XML-RPC requests.\n\n    Handles all HTTP GET requests and interprets them as requests\n    for documentation.\n    ',
                                                         'methods': [('do_GET',
                                                                      [],
                                                                      'Handles the HTTP GET request.\n\n        Interpret all HTTP GET requests as requests for server\n        documentation.\n        ')],
                                                         'properties': []},
             'DocXMLRPCServer.DocXMLRPCServer': {'bases': ['SimpleXMLRPCServer.SimpleXMLRPCServer',
                                                           'DocXMLRPCServer.XMLRPCDocGenerator'],
                                                 'constructor': ['addr',
                                                                 'requestHandler=DocXMLRPCRequestHandler',
                                                                 'logRequests=1',
                                                                 'allow_none=False',
                                                                 'encoding=None',
                                                                 'bind_and_activate=True'],
                                                 'docstring': 'XML-RPC and HTML documentation server.\n\n    Adds the ability to serve server documentation to the capabilities\n    of SimpleXMLRPCServer.\n    ',
                                                 'methods': [],
                                                 'properties': []},
             'DocXMLRPCServer.ServerHTMLDoc': {'bases': ['pydoc.HTMLDoc'],
                                               'constructor': [],
                                               'docstring': 'Class used to generate pydoc HTML document for a server',
                                               'methods': [('markup',
                                                            ['text',
                                                             'escape=None',
                                                             'funcs={}',
                                                             'classes={}',
                                                             'methods={}'],
                                                            'Mark up some plain text, given a context of symbols to look for.\n        Each context dictionary maps object names to anchor names.'),
                                                           ('docroutine',
                                                            ['object',
                                                             'name',
                                                             'mod=None',
                                                             'funcs={}',
                                                             'classes={}',
                                                             'methods={}',
                                                             'cl=None'],
                                                            'Produce HTML documentation for a function or method object.'),
                                                           ('docserver',
                                                            ['server_name',
                                                             'package_documentation',
                                                             'methods'],
                                                            'Produce HTML documentation for an XML-RPC server.')],
                                               'properties': []},
             'DocXMLRPCServer.XMLRPCDocGenerator': {'bases': [],
                                                    'constructor': [],
                                                    'docstring': 'Generates documentation for an XML-RPC server.\n\n    This class is designed as mix-in and should not\n    be constructed directly.\n    ',
                                                    'methods': [('set_server_title',
                                                                 ['server_title'],
                                                                 'Set the HTML title of the generated server documentation'),
                                                                ('set_server_name',
                                                                 ['server_name'],
                                                                 'Set the name of the generated HTML server documentation'),
                                                                ('set_server_documentation',
                                                                 ['server_documentation'],
                                                                 'Set the documentation string for the entire server.'),
                                                                ('generate_html_documentation',
                                                                 [],
                                                                 'generate_html_documentation() => html documentation for the server\n\n        Generates HTML documentation for the server using introspection for\n        installed functions and instances that do not implement the\n        _dispatch method. Alternatively, instances can choose to implement\n        the _get_method_argstring(method_name) method to provide the\n        argument string used in the documentation and the\n        _methodHelp(method_name) method to provide the help text used\n        in the documentation.')],
                                                    'properties': ['server_name',
                                                                   'server_documentation',
                                                                   'server_title']},
             'HTMLParser.HTMLParseError': {'bases': ['Exception'],
                                           'constructor': ['msg', 'position=(None, None)'],
                                           'docstring': 'Exception raised for all parse errors.',
                                           'methods': [('__str__', [], '')],
                                           'properties': ['msg', 'lineno', 'offset']},
             'HTMLParser.HTMLParser': {'bases': ['markupbase.ParserBase'],
                                       'constructor': [],
                                       'docstring': 'Find tags and other markup and call handler functions.\n\n    Usage:\n        p = HTMLParser()\n        p.feed(data)\n        ...\n        p.close()\n\n    Start tags are handled by calling self.handle_starttag() or\n    self.handle_startendtag(); end tags by self.handle_endtag().  The\n    data between tags is passed from the parser to the derived class\n    by calling self.handle_data() with the data as argument (the data\n    may be split up in arbitrary chunks).  Entity references are\n    passed by calling self.handle_entityref() with the entity\n    reference as the argument.  Numeric character references are\n    passed to self.handle_charref() with the string containing the\n    reference as the argument.\n    ',
                                       'methods': [('reset',
                                                    [],
                                                    'Reset this instance.  Loses all unprocessed data.'),
                                                   ('feed',
                                                    ['data'],
                                                    "Feed data to the parser.\n\n        Call this as often as you want, with as little or as much text\n        as you want (may include '\n').\n        "),
                                                   ('close', [], 'Handle any buffered data.'),
                                                   ('error', ['message'], ''),
                                                   ('get_starttag_text',
                                                    [],
                                                    "Return full source of start tag: '<...>'."),
                                                   ('set_cdata_mode', [], ''),
                                                   ('clear_cdata_mode', [], ''),
                                                   ('goahead', ['end'], ''),
                                                   ('parse_pi', ['i'], ''),
                                                   ('parse_starttag', ['i'], ''),
                                                   ('check_for_whole_start_tag', ['i'], ''),
                                                   ('parse_endtag', ['i'], ''),
                                                   ('handle_startendtag', ['tag', 'attrs'], ''),
                                                   ('handle_starttag', ['tag', 'attrs'], ''),
                                                   ('handle_endtag', ['tag'], ''),
                                                   ('handle_charref', ['name'], ''),
                                                   ('handle_entityref', ['name'], ''),
                                                   ('handle_data', ['data'], ''),
                                                   ('handle_comment', ['data'], ''),
                                                   ('handle_decl', ['decl'], ''),
                                                   ('handle_pi', ['data'], ''),
                                                   ('unknown_decl', ['data'], ''),
                                                   ('unescape', ['s'], '')],
                                       'properties': ['CDATA_CONTENT_ELEMENTS',
                                                      'rawdata',
                                                      'lasttag',
                                                      'interesting',
                                                      '__starttag_text',
                                                      'entitydefs']},
             'MimeWriter.MimeWriter': {'bases': [],
                                       'constructor': ['fp'],
                                       'docstring': "Generic MIME writer.\n\n    Methods:\n\n    __init__()\n    addheader()\n    flushheaders()\n    startbody()\n    startmultipartbody()\n    nextpart()\n    lastpart()\n\n    A MIME writer is much more primitive than a MIME parser.  It\n    doesn't seek around on the output file, and it doesn't use large\n    amounts of buffer space, so you have to write the parts in the\n    order they should occur on the output file.  It does buffer the\n    headers you add, allowing you to rearrange their order.\n\n    General usage is:\n\n    f = <open the output file>\n    w = MimeWriter(f)\n    ...call w.addheader(key, value) 0 or more times...\n\n    followed by either:\n\n    f = w.startbody(content_type)\n    ...call f.write(data) for body data...\n\n    or:\n\n    w.startmultipartbody(subtype)\n    for each part:\n        subwriter = w.nextpart()\n        ...use the subwriter's methods to create the subpart...\n    w.lastpart()\n\n    The subwriter is another MimeWriter instance, and should be\n    treated in the same way as the toplevel MimeWriter.  This way,\n    writing recursive body parts is easy.\n\n    Warning: don't forget to call lastpart()!\n\n    XXX There should be more state so calls made in the wrong order\n    are detected.\n\n    Some special cases:\n\n    - startbody() just returns the file passed to the constructor;\n      but don't use this knowledge, as it may be changed.\n\n    - startmultipartbody() actually returns a file as well;\n      this can be used to write the initial 'if you can read this your\n      mailer is not MIME-aware' message.\n\n    - If you call flushheaders(), the headers accumulated so far are\n      written out (and forgotten); this is useful if you don't need a\n      body part at all, e.g. for a subpart of type message/rfc822\n      that's (mis)used to store some header-like information.\n\n    - Passing a keyword argument 'prefix=<flag>' to addheader(),\n      start*body() affects where the header is inserted; 0 means\n      append at the end, 1 means insert at the start; default is\n      append for addheader(), but insert for start*body(), which use\n      it to determine where the Content-Type header goes.\n\n    ",
                                       'methods': [('addheader',
                                                    ['key', 'value', 'prefix=0'],
                                                    'Add a header line to the MIME message.\n\n        The key is the name of the header, where the value obviously provides\n        the value of the header. The optional argument prefix determines\n        where the header is inserted; 0 means append at the end, 1 means\n        insert at the start. The default is to append.\n\n        '),
                                                   ('flushheaders',
                                                    [],
                                                    "Writes out and forgets all headers accumulated so far.\n\n        This is useful if you don't need a body part at all; for example,\n        for a subpart of type message/rfc822 that's (mis)used to store some\n        header-like information.\n\n        "),
                                                   ('startbody',
                                                    ['ctype', 'plist=[]', 'prefix=1'],
                                                    'Returns a file-like object for writing the body of the message.\n\n        The content-type is set to the provided ctype, and the optional\n        parameter, plist, provides additional parameters for the\n        content-type declaration.  The optional argument prefix determines\n        where the header is inserted; 0 means append at the end, 1 means\n        insert at the start. The default is to insert at the start.\n\n        '),
                                                   ('startmultipartbody',
                                                    ['subtype',
                                                     'boundary=None',
                                                     'plist=[]',
                                                     'prefix=1'],
                                                    'Returns a file-like object for writing the body of the message.\n\n        Additionally, this method initializes the multi-part code, where the\n        subtype parameter provides the multipart subtype, the boundary\n        parameter may provide a user-defined boundary specification, and the\n        plist parameter provides optional parameters for the subtype.  The\n        optional argument, prefix, determines where the header is inserted;\n        0 means append at the end, 1 means insert at the start. The default\n        is to insert at the start.  Subparts should be created using the\n        nextpart() method.\n\n        '),
                                                   ('nextpart',
                                                    [],
                                                    'Returns a new instance of MimeWriter which represents an\n        individual part in a multipart message.\n\n        This may be used to write the part as well as used for creating\n        recursively complex multipart messages. The message must first be\n        initialized with the startmultipartbody() method before using the\n        nextpart() method.\n\n        '),
                                                   ('lastpart',
                                                    [],
                                                    'This is used to designate the last part of a multipart message.\n\n        It should always be used when writing multipart messages.\n\n        ')],
                                       'properties': ['_fp', '_headers', '_boundary']},
             'Queue.Empty': {'bases': ['Exception'],
                             'constructor': [],
                             'docstring': 'Exception raised by Queue.get(block=0)/get_nowait().',
                             'methods': [],
                             'properties': []},
             'Queue.Full': {'bases': ['Exception'],
                            'constructor': [],
                            'docstring': 'Exception raised by Queue.put(block=0)/put_nowait().',
                            'methods': [],
                            'properties': []},
             'Queue.LifoQueue': {'bases': ['Queue.Queue'],
                                 'constructor': [],
                                 'docstring': 'Variant of Queue that retrieves most recently added entries first.',
                                 'methods': [('_init', ['maxsize'], ''),
                                             ('_qsize', ['len=len'], ''),
                                             ('_put', ['item'], ''),
                                             ('_get', [], '')],
                                 'properties': ['queue']},
             'Queue.PriorityQueue': {'bases': ['Queue.Queue'],
                                     'constructor': [],
                                     'docstring': 'Variant of Queue that retrieves open entries in priority order (lowest first).\n\n    Entries are typically tuples of the form:  (priority number, data).\n    ',
                                     'methods': [('_init', ['maxsize'], ''),
                                                 ('_qsize', ['len=len'], ''),
                                                 ('_put',
                                                  ['item', 'heappush=heapq.heappush'],
                                                  ''),
                                                 ('_get', ['heappop=heapq.heappop'], '')],
                                     'properties': ['queue']},
             'Queue.Queue': {'bases': [],
                             'constructor': ['maxsize=0'],
                             'docstring': 'Create a queue object with a given maximum size.\n\n    If maxsize is <= 0, the queue size is infinite.\n    ',
                             'methods': [('task_done',
                                          [],
                                          'Indicate that a formerly enqueued task is complete.\n\n        Used by Queue consumer threads.  For each get() used to fetch a task,\n        a subsequent call to task_done() tells the queue that the processing\n        on the task is complete.\n\n        If a join() is currently blocking, it will resume when all items\n        have been processed (meaning that a task_done() call was received\n        for every item that had been put() into the queue).\n\n        Raises a ValueError if called more times than there were items\n        placed in the queue.\n        '),
                                         ('join',
                                          [],
                                          'Blocks until all items in the Queue have been gotten and processed.\n\n        The count of unfinished tasks goes up whenever an item is added to the\n        queue. The count goes down whenever a consumer thread calls task_done()\n        to indicate the item was retrieved and all work on it is complete.\n\n        When the count of unfinished tasks drops to zero, join() unblocks.\n        '),
                                         ('qsize',
                                          [],
                                          'Return the approximate size of the queue (not reliable!).'),
                                         ('empty',
                                          [],
                                          'Return True if the queue is empty, False otherwise (not reliable!).'),
                                         ('full',
                                          [],
                                          'Return True if the queue is full, False otherwise (not reliable!).'),
                                         ('put',
                                          ['item', 'block=True', 'timeout=None'],
                                          "Put an item into the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until a free slot is available. If 'timeout' is\n        a positive number, it blocks at most 'timeout' seconds and raises\n        the Full exception if no free slot was available within that time.\n        Otherwise ('block' is false), put an item on the queue if a free slot\n        is immediately available, else raise the Full exception ('timeout'\n        is ignored in that case).\n        "),
                                         ('put_nowait',
                                          ['item'],
                                          'Put an item into the queue without blocking.\n\n        Only enqueue the item if a free slot is immediately available.\n        Otherwise raise the Full exception.\n        '),
                                         ('get',
                                          ['block=True', 'timeout=None'],
                                          "Remove and return an item from the queue.\n\n        If optional args 'block' is true and 'timeout' is None (the default),\n        block if necessary until an item is available. If 'timeout' is\n        a positive number, it blocks at most 'timeout' seconds and raises\n        the Empty exception if no item was available within that time.\n        Otherwise ('block' is false), return an item if one is immediately\n        available, else raise the Empty exception ('timeout' is ignored\n        in that case).\n        "),
                                         ('get_nowait',
                                          [],
                                          'Remove and return an item from the queue without blocking.\n\n        Only get an item if one is immediately available. Otherwise\n        raise the Empty exception.\n        '),
                                         ('_init', ['maxsize'], ''),
                                         ('_qsize', ['len=len'], ''),
                                         ('_put', ['item'], ''),
                                         ('_get', [], '')],
                             'properties': ['maxsize',
                                            'mutex',
                                            'not_empty',
                                            'not_full',
                                            'all_tasks_done',
                                            'unfinished_tasks',
                                            'queue']},
             'SimpleHTTPServer.SimpleHTTPRequestHandler': {'bases': ['BaseHTTPServer.BaseHTTPRequestHandler'],
                                                           'constructor': [],
                                                           'docstring': 'Simple HTTP request handler with GET and HEAD commands.\n\n    This serves files from the current directory and any of its\n    subdirectories.  The MIME type for files is determined by\n    calling the .guess_type() method.\n\n    The GET and HEAD requests are identical except that the HEAD\n    request omits the actual contents of the file.\n\n    ',
                                                           'methods': [('do_GET',
                                                                        [],
                                                                        'Serve a GET request.'),
                                                                       ('do_HEAD',
                                                                        [],
                                                                        'Serve a HEAD request.'),
                                                                       ('send_head',
                                                                        [],
                                                                        'Common code for GET and HEAD commands.\n\n        This sends the response code and MIME headers.\n\n        Return value is either a file object (which has to be copied\n        to the outputfile by the caller unless the command was HEAD,\n        and must be closed by the caller under all circumstances), or\n        None, in which case the caller has nothing further to do.\n\n        '),
                                                                       ('list_directory',
                                                                        ['path'],
                                                                        'Helper to produce a directory listing (absent index.html).\n\n        Return value is either a file object, or None (indicating an\n        error).  In either case, the headers are sent, making the\n        interface the same as for send_head().\n\n        '),
                                                                       ('translate_path',
                                                                        ['path'],
                                                                        'Translate a /-separated PATH to the local filename syntax.\n\n        Components that mean special things to the local file system\n        (e.g. drive or directory names) are ignored.  (XXX They should\n        probably be diagnosed.)\n\n        '),
                                                                       ('copyfile',
                                                                        ['source',
                                                                         'outputfile'],
                                                                        'Copy all data between two file objects.\n\n        The SOURCE argument is a file object open for reading\n        (or anything with a read() method) and the DESTINATION\n        argument is a file object open for writing (or\n        anything with a write() method).\n\n        The only reason for overriding this would be to change\n        the block size or perhaps to replace newlines by CRLF\n        -- note however that this the default server uses this\n        to copy binary data as well.\n\n        '),
                                                                       ('guess_type',
                                                                        ['path'],
                                                                        "Guess the type of a file.\n\n        Argument is a PATH (a filename).\n\n        Return value is a string of the form type/subtype,\n        usable for a MIME Content-type header.\n\n        The default implementation looks the file's extension\n        up in the table self.extensions_map, using application/octet-stream\n        as a default; however it would be permissible (if\n        slow) to look inside the data to make a better guess.\n\n        ")],
                                                           'properties': ['server_version',
                                                                          'extensions_map']},
             'SimpleXMLRPCServer.CGIXMLRPCRequestHandler': {'bases': ['SimpleXMLRPCServer.SimpleXMLRPCDispatcher'],
                                                            'constructor': ['allow_none=False',
                                                                            'encoding=None'],
                                                            'docstring': 'Simple handler for XML-RPC data passed through CGI.',
                                                            'methods': [('handle_xmlrpc',
                                                                         ['request_text'],
                                                                         'Handle a single XML-RPC request'),
                                                                        ('handle_get',
                                                                         [],
                                                                         'Handle a single HTTP GET request.\n\n        Default implementation indicates an error because\n        XML-RPC uses the POST method.\n        '),
                                                                        ('handle_request',
                                                                         ['request_text=None'],
                                                                         'Handle a single XML-RPC request passed through a CGI post method.\n\n        If no XML data is given then it is read from stdin. The resulting\n        XML-RPC response is printed to stdout along with the correct HTTP\n        headers.\n        ')],
                                                            'properties': []},
             'SimpleXMLRPCServer.MultiPathXMLRPCServer': {'bases': ['SimpleXMLRPCServer.SimpleXMLRPCServer'],
                                                          'constructor': ['addr',
                                                                          'requestHandler=SimpleXMLRPCRequestHandler',
                                                                          'logRequests=True',
                                                                          'allow_none=False',
                                                                          'encoding=None',
                                                                          'bind_and_activate=True'],
                                                          'docstring': "Multipath XML-RPC Server\n    This specialization of SimpleXMLRPCServer allows the user to create\n    multiple Dispatcher instances and assign them to different\n    HTTP request paths.  This makes it possible to run two or more\n    'virtual XML-RPC servers' at the same port.\n    Make sure that the requestHandler accepts the paths in question.\n    ",
                                                          'methods': [('add_dispatcher',
                                                                       ['path', 'dispatcher'],
                                                                       ''),
                                                                      ('get_dispatcher',
                                                                       ['path'],
                                                                       ''),
                                                                      ('_marshaled_dispatch',
                                                                       ['data',
                                                                        'dispatch_method=None',
                                                                        'path=None'],
                                                                       '')],
                                                          'properties': ['dispatchers',
                                                                         'allow_none',
                                                                         'encoding']},
             'SimpleXMLRPCServer.SimpleXMLRPCDispatcher': {'bases': [],
                                                           'constructor': ['allow_none=False',
                                                                           'encoding=None'],
                                                           'docstring': "Mix-in class that dispatches XML-RPC requests.\n\n    This class is used to register XML-RPC method handlers\n    and then to dispatch them. This class doesn't need to be\n    instanced directly when used by SimpleXMLRPCServer but it\n    can be instanced when used by the MultiPathXMLRPCServer.\n    ",
                                                           'methods': [('register_instance',
                                                                        ['instance',
                                                                         'allow_dotted_names=False'],
                                                                        "Registers an instance to respond to XML-RPC requests.\n\n        Only one instance can be installed at a time.\n\n        If the registered instance has a _dispatch method then that\n        method will be called with the name of the XML-RPC method and\n        its parameters as a tuple\n        e.g. instance._dispatch('add',(2,3))\n\n        If the registered instance does not have a _dispatch method\n        then the instance will be searched to find a matching method\n        and, if found, will be called. Methods beginning with an '_'\n        are considered private and will not be called by\n        SimpleXMLRPCServer.\n\n        If a registered function matches a XML-RPC request, then it\n        will be called instead of the registered instance.\n\n        If the optional allow_dotted_names argument is true and the\n        instance does not have a _dispatch method, method names\n        containing dots are supported and resolved, as long as none of\n        the name segments start with an '_'.\n\n            *** SECURITY WARNING: ***\n\n            Enabling the allow_dotted_names options allows intruders\n            to access your module's global variables and may allow\n            intruders to execute arbitrary code on your machine.  Only\n            use this option on a secure, closed network.\n\n        "),
                                                                       ('register_function',
                                                                        ['function',
                                                                         'name=None'],
                                                                        'Registers a function to respond to XML-RPC requests.\n\n        The optional name argument can be used to set a Unicode name\n        for the function.\n        '),
                                                                       ('register_introspection_functions',
                                                                        [],
                                                                        'Registers the XML-RPC introspection methods in the system\n        namespace.\n\n        see http://xmlrpc.usefulinc.com/doc/reserved.html\n        '),
                                                                       ('register_multicall_functions',
                                                                        [],
                                                                        'Registers the XML-RPC multicall method in the system\n        namespace.\n\n        see http://www.xmlrpc.com/discuss/msgReader$1208'),
                                                                       ('_marshaled_dispatch',
                                                                        ['data',
                                                                         'dispatch_method=None',
                                                                         'path=None'],
                                                                        'Dispatches an XML-RPC method from marshalled (XML) data.\n\n        XML-RPC methods are dispatched from the marshalled (XML) data\n        using the _dispatch method and the result is returned as\n        marshalled data. For backwards compatibility, a dispatch\n        function can be provided as an argument (see comment in\n        SimpleXMLRPCRequestHandler.do_POST) but overriding the\n        existing method through subclassing is the prefered means\n        of changing method dispatch behavior.\n        '),
                                                                       ('system_listMethods',
                                                                        [],
                                                                        "system.listMethods() => ['add', 'subtract', 'multiple']\n\n        Returns a list of the methods supported by the server."),
                                                                       ('system_methodSignature',
                                                                        ['method_name'],
                                                                        "system.methodSignature('add') => [double, int, int]\n\n        Returns a list describing the signature of the method. In the\n        above example, the add method takes two integers as arguments\n        and returns a double result.\n\n        This server does NOT support system.methodSignature."),
                                                                       ('system_methodHelp',
                                                                        ['method_name'],
                                                                        'system.methodHelp(\'add\') => "Adds two integers together"\n\n        Returns a string containing documentation for the specified method.'),
                                                                       ('system_multicall',
                                                                        ['call_list'],
                                                                        "system.multicall([{'methodName': 'add', 'params': [2, 2]}, ...]) => [[4], ...]\n\n        Allows the caller to package multiple XML-RPC calls into a single\n        request.\n\n        See http://www.xmlrpc.com/discuss/msgReader$1208\n        "),
                                                                       ('_dispatch',
                                                                        ['method', 'params'],
                                                                        "Dispatches the XML-RPC method.\n\n        XML-RPC calls are forwarded to a registered function that\n        matches the called XML-RPC method name. If no such function\n        exists then the call is forwarded to the registered instance,\n        if available.\n\n        If the registered instance has a _dispatch method then that\n        method will be called with the name of the XML-RPC method and\n        its parameters as a tuple\n        e.g. instance._dispatch('add',(2,3))\n\n        If the registered instance does not have a _dispatch method\n        then the instance will be searched to find a matching method\n        and, if found, will be called.\n\n        Methods beginning with an '_' are considered private and will\n        not be called.\n        ")],
                                                           'properties': ['funcs',
                                                                          'instance',
                                                                          'allow_none',
                                                                          'encoding',
                                                                          'allow_dotted_names']},
             'SimpleXMLRPCServer.SimpleXMLRPCRequestHandler': {'bases': ['BaseHTTPServer.BaseHTTPRequestHandler'],
                                                               'constructor': [],
                                                               'docstring': 'Simple XML-RPC request handler class.\n\n    Handles all HTTP POST requests and attempts to decode them as\n    XML-RPC requests.\n    ',
                                                               'methods': [('accept_encodings',
                                                                            [],
                                                                            ''),
                                                                           ('is_rpc_path_valid',
                                                                            [],
                                                                            ''),
                                                                           ('do_POST',
                                                                            [],
                                                                            "Handles the HTTP POST request.\n\n        Attempts to interpret all HTTP POST requests as XML-RPC calls,\n        which are forwarded to the server's _dispatch method for handling.\n        "),
                                                                           ('decode_request_content',
                                                                            ['data'],
                                                                            ''),
                                                                           ('report_404',
                                                                            [],
                                                                            ''),
                                                                           ('log_request',
                                                                            ["code='-'",
                                                                             "size='-'"],
                                                                            'Selectively log an accepted request.')],
                                                               'properties': ['rpc_paths',
                                                                              'encode_threshold',
                                                                              'wbufsize',
                                                                              'disable_nagle_algorithm',
                                                                              'aepattern']},
             'SimpleXMLRPCServer.SimpleXMLRPCServer': {'bases': ['SocketServer.TCPServer',
                                                                 'SimpleXMLRPCServer.SimpleXMLRPCDispatcher'],
                                                       'constructor': ['addr',
                                                                       'requestHandler=SimpleXMLRPCRequestHandler',
                                                                       'logRequests=True',
                                                                       'allow_none=False',
                                                                       'encoding=None',
                                                                       'bind_and_activate=True'],
                                                       'docstring': 'Simple XML-RPC server.\n\n    Simple XML-RPC server that allows functions and a single instance\n    to be installed to handle requests. The default implementation\n    attempts to dispatch XML-RPC calls to the functions or instance\n    installed in the server. Override the _dispatch method inhereted\n    from SimpleXMLRPCDispatcher to change this behavior.\n    ',
                                                       'methods': [],
                                                       'properties': ['allow_reuse_address',
                                                                      '_send_traceback_header',
                                                                      'logRequests']},
             'SocketServer.BaseRequestHandler': {'bases': [],
                                                 'constructor': ['request',
                                                                 'client_address',
                                                                 'server'],
                                                 'docstring': 'Base class for request handler classes.\n\n    This class is instantiated for each request to be handled.  The\n    constructor sets the instance variables request, client_address\n    and server, and then calls the handle() method.  To implement a\n    specific service, all you need to do is to derive a class which\n    defines a handle() method.\n\n    The handle() method can find the request as self.request, the\n    client address as self.client_address, and the server (in case it\n    needs access to per-server information) as self.server.  Since a\n    separate instance is created for each request, the handle() method\n    can define arbitrary other instance variariables.\n\n    ',
                                                 'methods': [('setup', [], ''),
                                                             ('handle', [], ''),
                                                             ('finish', [], '')],
                                                 'properties': ['request',
                                                                'client_address',
                                                                'server']},
             'SocketServer.BaseServer': {'bases': [],
                                         'constructor': ['server_address',
                                                         'RequestHandlerClass'],
                                         'docstring': 'Base class for server classes.\n\n    Methods for the caller:\n\n    - __init__(server_address, RequestHandlerClass)\n    - serve_forever(poll_interval=0.5)\n    - shutdown()\n    - handle_request()  # if you do not use serve_forever()\n    - fileno() -> int   # for select()\n\n    Methods that may be overridden:\n\n    - server_bind()\n    - server_activate()\n    - get_request() -> request, client_address\n    - handle_timeout()\n    - verify_request(request, client_address)\n    - server_close()\n    - process_request(request, client_address)\n    - shutdown_request(request)\n    - close_request(request)\n    - handle_error()\n\n    Methods for derived classes:\n\n    - finish_request(request, client_address)\n\n    Class variables that may be overridden by derived classes or\n    instances:\n\n    - timeout\n    - address_family\n    - socket_type\n    - allow_reuse_address\n\n    Instance variables:\n\n    - RequestHandlerClass\n    - socket\n\n    ',
                                         'methods': [('server_activate',
                                                      [],
                                                      'Called by constructor to activate the server.\n\n        May be overridden.\n\n        '),
                                                     ('serve_forever',
                                                      ['poll_interval=0.5'],
                                                      'Handle one request at a time until shutdown.\n\n        Polls for shutdown every poll_interval seconds. Ignores\n        self.timeout. If you need to do periodic tasks, do them in\n        another thread.\n        '),
                                                     ('shutdown',
                                                      [],
                                                      'Stops the serve_forever loop.\n\n        Blocks until the loop has finished. This must be called while\n        serve_forever() is running in another thread, or it will\n        deadlock.\n        '),
                                                     ('handle_request',
                                                      [],
                                                      'Handle one request, possibly blocking.\n\n        Respects self.timeout.\n        '),
                                                     ('_handle_request_noblock',
                                                      [],
                                                      'Handle one request, without blocking.\n\n        I assume that select.select has returned that the socket is\n        readable before this function was called, so there should be\n        no risk of blocking in get_request().\n        '),
                                                     ('handle_timeout',
                                                      [],
                                                      'Called if no new request arrives within self.timeout.\n\n        Overridden by ForkingMixIn.\n        '),
                                                     ('verify_request',
                                                      ['request', 'client_address'],
                                                      'Verify the request.  May be overridden.\n\n        Return True if we should proceed with this request.\n\n        '),
                                                     ('process_request',
                                                      ['request', 'client_address'],
                                                      'Call finish_request.\n\n        Overridden by ForkingMixIn and ThreadingMixIn.\n\n        '),
                                                     ('server_close',
                                                      [],
                                                      'Called to clean-up the server.\n\n        May be overridden.\n\n        '),
                                                     ('finish_request',
                                                      ['request', 'client_address'],
                                                      'Finish one request by instantiating RequestHandlerClass.'),
                                                     ('shutdown_request',
                                                      ['request'],
                                                      'Called to shutdown and close an individual request.'),
                                                     ('close_request',
                                                      ['request'],
                                                      'Called to clean up an individual request.'),
                                                     ('handle_error',
                                                      ['request', 'client_address'],
                                                      'Handle an error gracefully.  May be overridden.\n\n        The default is to print a traceback and continue.\n\n        ')],
                                         'properties': ['timeout',
                                                        'server_address',
                                                        'RequestHandlerClass',
                                                        '__is_shut_down',
                                                        '__shutdown_request']},
             'SocketServer.DatagramRequestHandler': {'bases': ['SocketServer.BaseRequestHandler'],
                                                     'constructor': [],
                                                     'docstring': 'Define self.rfile and self.wfile for datagram sockets.',
                                                     'methods': [('setup', [], ''),
                                                                 ('finish', [], '')],
                                                     'properties': ['packet',
                                                                    'socket',
                                                                    'rfile',
                                                                    'wfile']},
             'SocketServer.ForkingMixIn': {'bases': [],
                                           'constructor': [],
                                           'docstring': 'Mix-in class to handle each request in a new process.',
                                           'methods': [('collect_children',
                                                        [],
                                                        'Internal routine to wait for children that have exited.'),
                                                       ('handle_timeout',
                                                        [],
                                                        'Wait for zombies after self.timeout seconds of inactivity.\n\n        May be extended, do not override.\n        '),
                                                       ('process_request',
                                                        ['request', 'client_address'],
                                                        'Fork a new subprocess to process the request.')],
                                           'properties': ['timeout',
                                                          'active_children',
                                                          'max_children']},
             'SocketServer.ForkingTCPServer': {'bases': ['SocketServer.ForkingMixIn',
                                                         'SocketServer.TCPServer'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'SocketServer.ForkingUDPServer': {'bases': ['SocketServer.ForkingMixIn',
                                                         'SocketServer.UDPServer'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'SocketServer.StreamRequestHandler': {'bases': ['SocketServer.BaseRequestHandler'],
                                                   'constructor': [],
                                                   'docstring': 'Define self.rfile and self.wfile for stream sockets.',
                                                   'methods': [('setup', [], ''),
                                                               ('finish', [], '')],
                                                   'properties': ['rbufsize',
                                                                  'wbufsize',
                                                                  'timeout',
                                                                  'disable_nagle_algorithm',
                                                                  'connection',
                                                                  'rfile',
                                                                  'wfile']},
             'SocketServer.TCPServer': {'bases': ['SocketServer.BaseServer'],
                                        'constructor': ['server_address',
                                                        'RequestHandlerClass',
                                                        'bind_and_activate=True'],
                                        'docstring': "Base class for various socket-based server classes.\n\n    Defaults to synchronous IP stream (i.e., TCP).\n\n    Methods for the caller:\n\n    - __init__(server_address, RequestHandlerClass, bind_and_activate=True)\n    - serve_forever(poll_interval=0.5)\n    - shutdown()\n    - handle_request()  # if you don't use serve_forever()\n    - fileno() -> int   # for select()\n\n    Methods that may be overridden:\n\n    - server_bind()\n    - server_activate()\n    - get_request() -> request, client_address\n    - handle_timeout()\n    - verify_request(request, client_address)\n    - process_request(request, client_address)\n    - shutdown_request(request)\n    - close_request(request)\n    - handle_error()\n\n    Methods for derived classes:\n\n    - finish_request(request, client_address)\n\n    Class variables that may be overridden by derived classes or\n    instances:\n\n    - timeout\n    - address_family\n    - socket_type\n    - request_queue_size (only for stream sockets)\n    - allow_reuse_address\n\n    Instance variables:\n\n    - server_address\n    - RequestHandlerClass\n    - socket\n\n    ",
                                        'methods': [('server_bind',
                                                     [],
                                                     'Called by constructor to bind the socket.\n\n        May be overridden.\n\n        '),
                                                    ('server_activate',
                                                     [],
                                                     'Called by constructor to activate the server.\n\n        May be overridden.\n\n        '),
                                                    ('server_close',
                                                     [],
                                                     'Called to clean-up the server.\n\n        May be overridden.\n\n        '),
                                                    ('fileno',
                                                     [],
                                                     'Return socket file number.\n\n        Interface required by select().\n\n        '),
                                                    ('get_request',
                                                     [],
                                                     'Get the request and client address from the socket.\n\n        May be overridden.\n\n        '),
                                                    ('shutdown_request',
                                                     ['request'],
                                                     'Called to shutdown and close an individual request.'),
                                                    ('close_request',
                                                     ['request'],
                                                     'Called to clean up an individual request.')],
                                        'properties': ['address_family',
                                                       'socket_type',
                                                       'request_queue_size',
                                                       'allow_reuse_address',
                                                       'socket',
                                                       'server_address']},
             'SocketServer.ThreadingMixIn': {'bases': [],
                                             'constructor': [],
                                             'docstring': 'Mix-in class to handle each request in a new thread.',
                                             'methods': [('process_request_thread',
                                                          ['request', 'client_address'],
                                                          'Same as in BaseServer but as a thread.\n\n        In addition, exception handling is done here.\n\n        '),
                                                         ('process_request',
                                                          ['request', 'client_address'],
                                                          'Start a new thread to process the request.')],
                                             'properties': ['daemon_threads']},
             'SocketServer.ThreadingTCPServer': {'bases': ['SocketServer.ThreadingMixIn',
                                                           'SocketServer.TCPServer'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'SocketServer.ThreadingUDPServer': {'bases': ['SocketServer.ThreadingMixIn',
                                                           'SocketServer.UDPServer'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'SocketServer.ThreadingUnixDatagramServer': {'bases': ['SocketServer.ThreadingMixIn',
                                                                    'SocketServer.UnixDatagramServer'],
                                                          'constructor': [],
                                                          'docstring': '',
                                                          'methods': [],
                                                          'properties': []},
             'SocketServer.ThreadingUnixStreamServer': {'bases': ['SocketServer.ThreadingMixIn',
                                                                  'SocketServer.UnixStreamServer'],
                                                        'constructor': [],
                                                        'docstring': '',
                                                        'methods': [],
                                                        'properties': []},
             'SocketServer.UDPServer': {'bases': ['SocketServer.TCPServer'],
                                        'constructor': [],
                                        'docstring': 'UDP server class.',
                                        'methods': [('get_request', [], ''),
                                                    ('server_activate', [], ''),
                                                    ('shutdown_request', ['request'], ''),
                                                    ('close_request', ['request'], '')],
                                        'properties': ['allow_reuse_address',
                                                       'socket_type',
                                                       'max_packet_size']},
             'SocketServer.UnixDatagramServer': {'bases': ['SocketServer.UDPServer'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': ['address_family']},
             'SocketServer.UnixStreamServer': {'bases': ['SocketServer.TCPServer'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': ['address_family']},
             'StringIO.StringIO': {'bases': [],
                                   'constructor': ["buf=''"],
                                   'docstring': 'class StringIO([buffer])\n\n    When a StringIO object is created, it can be initialized to an existing\n    string by passing the string to the constructor. If no string is given,\n    the StringIO will start empty.\n\n    The StringIO object can accept either Unicode or 8-bit strings, but\n    mixing the two may take some care. If both are used, 8-bit strings that\n    cannot be interpreted as 7-bit ASCII (that use the 8th bit) will cause\n    a UnicodeError to be raised when getvalue() is called.\n    ',
                                   'methods': [('__iter__', [], ''),
                                               ('next',
                                                [],
                                                'A file object is its own iterator, for example iter(f) returns f\n        (unless f is closed). When a file is used as an iterator, typically\n        in a for loop (for example, for line in f: print line), the next()\n        method is called repeatedly. This method returns the next input line,\n        or raises StopIteration when EOF is hit.\n        '),
                                               ('close',
                                                [],
                                                'Free the memory buffer.\n        '),
                                               ('isatty',
                                                [],
                                                'Returns False because StringIO objects are not connected to a\n        tty-like device.\n        '),
                                               ('seek',
                                                ['pos', 'mode=0'],
                                                "Set the file's current position.\n\n        The mode argument is optional and defaults to 0 (absolute file\n        positioning); other values are 1 (seek relative to the current\n        position) and 2 (seek relative to the file's end).\n\n        There is no return value.\n        "),
                                               ('tell',
                                                [],
                                                "Return the file's current position."),
                                               ('read',
                                                ['n=-1'],
                                                'Read at most size bytes from the file\n        (less if the read hits EOF before obtaining size bytes).\n\n        If the size argument is negative or omitted, read all data until EOF\n        is reached. The bytes are returned as a string object. An empty\n        string is returned when EOF is encountered immediately.\n        '),
                                               ('readline',
                                                ['length=None'],
                                                "Read one entire line from the file.\n\n        A trailing newline character is kept in the string (but may be absent\n        when a file ends with an incomplete line). If the size argument is\n        present and non-negative, it is a maximum byte count (including the\n        trailing newline) and an incomplete line may be returned.\n\n        An empty string is returned only when EOF is encountered immediately.\n\n        Note: Unlike stdio's fgets(), the returned string contains null\n        characters ('\\0') if they occurred in the input.\n        "),
                                               ('readlines',
                                                ['sizehint=0'],
                                                'Read until EOF using readline() and return a list containing the\n        lines thus read.\n\n        If the optional sizehint argument is present, instead of reading up\n        to EOF, whole lines totalling approximately sizehint bytes (or more\n        to accommodate a final whole line).\n        '),
                                               ('truncate',
                                                ['size=None'],
                                                "Truncate the file's size.\n\n        If the optional size argument is present, the file is truncated to\n        (at most) that size. The size defaults to the current position.\n        The current file position is not changed unless the position\n        is beyond the new file size.\n\n        If the specified size exceeds the file's current size, the\n        file remains unchanged.\n        "),
                                               ('write',
                                                ['s'],
                                                'Write a string to the file.\n\n        There is no return value.\n        '),
                                               ('writelines',
                                                ['iterable'],
                                                'Write a sequence of strings to the file. The sequence can be any\n        iterable object producing strings, typically a list of strings. There\n        is no return value.\n\n        (The name is intended to match readlines(); writelines() does not add\n        line separators.)\n        '),
                                               ('flush',
                                                [],
                                                'Flush the internal buffer\n        '),
                                               ('getvalue',
                                                [],
                                                '\n        Retrieve the entire contents of the "file" at any time before\n        the StringIO object\'s close() method is called.\n\n        The StringIO object can accept either Unicode or 8-bit strings,\n        but mixing the two may take some care. If both are used, 8-bit\n        strings that cannot be interpreted as 7-bit ASCII (that use the\n        8th bit) will cause a UnicodeError to be raised when getvalue()\n        is called.\n        ')],
                                   'properties': ['buf',
                                                  'len',
                                                  'buflist',
                                                  'pos',
                                                  'closed',
                                                  'softspace']},
             'UserDict.DictMixin': {'bases': [],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('__iter__', [], ''),
                                                ('has_key', ['key'], ''),
                                                ('__contains__', ['key'], ''),
                                                ('iteritems', [], ''),
                                                ('iterkeys', [], ''),
                                                ('itervalues', [], ''),
                                                ('values', [], ''),
                                                ('items', [], ''),
                                                ('clear', [], ''),
                                                ('setdefault', ['key', 'default=None'], ''),
                                                ('pop', ['key', '*args'], ''),
                                                ('popitem', [], ''),
                                                ('update', ['other=None', '**kwargs'], ''),
                                                ('get', ['key', 'default=None'], ''),
                                                ('__repr__', [], ''),
                                                ('__cmp__', ['other'], ''),
                                                ('__len__', [], '')],
                                    'properties': []},
             'UserDict.IterableUserDict': {'bases': ['UserDict.UserDict'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('__iter__', [], '')],
                                           'properties': []},
             'UserDict.UserDict': {'bases': [],
                                   'constructor': ['dict=None', '**kwargs'],
                                   'docstring': '',
                                   'methods': [('__repr__', [], ''),
                                               ('__cmp__', ['dict'], ''),
                                               ('__len__', [], ''),
                                               ('__getitem__', ['key'], ''),
                                               ('__setitem__', ['key', 'item'], ''),
                                               ('__delitem__', ['key'], ''),
                                               ('clear', [], ''),
                                               ('copy', [], ''),
                                               ('keys', [], ''),
                                               ('items', [], ''),
                                               ('iteritems', [], ''),
                                               ('iterkeys', [], ''),
                                               ('itervalues', [], ''),
                                               ('values', [], ''),
                                               ('has_key', ['key'], ''),
                                               ('update', ['dict=None', '**kwargs'], ''),
                                               ('get', ['key', 'failobj=None'], ''),
                                               ('setdefault', ['key', 'failobj=None'], ''),
                                               ('pop', ['key', '*args'], ''),
                                               ('popitem', [], ''),
                                               ('__contains__', ['key'], ''),
                                               ('fromkeys', ['iterable', 'value=None'], '')],
                                   'properties': ['data', '__hash__']},
             'UserList.UserList': {'bases': ['collections.MutableSequence'],
                                   'constructor': ['initlist=None'],
                                   'docstring': '',
                                   'methods': [('__repr__', [], ''),
                                               ('__lt__', ['other'], ''),
                                               ('__le__', ['other'], ''),
                                               ('__eq__', ['other'], ''),
                                               ('__ne__', ['other'], ''),
                                               ('__gt__', ['other'], ''),
                                               ('__ge__', ['other'], ''),
                                               ('__cast', ['other'], ''),
                                               ('__cmp__', ['other'], ''),
                                               ('__contains__', ['item'], ''),
                                               ('__len__', [], ''),
                                               ('__getitem__', ['i'], ''),
                                               ('__setitem__', ['i', 'item'], ''),
                                               ('__delitem__', ['i'], ''),
                                               ('__getslice__', ['i', 'j'], ''),
                                               ('__setslice__', ['i', 'j', 'other'], ''),
                                               ('__delslice__', ['i', 'j'], ''),
                                               ('__add__', ['other'], ''),
                                               ('__radd__', ['other'], ''),
                                               ('__iadd__', ['other'], ''),
                                               ('__mul__', ['n'], ''),
                                               ('__imul__', ['n'], ''),
                                               ('append', ['item'], ''),
                                               ('insert', ['i', 'item'], ''),
                                               ('pop', ['i=-1'], ''),
                                               ('remove', ['item'], ''),
                                               ('count', ['item'], ''),
                                               ('index', ['item', '*args'], ''),
                                               ('reverse', [], ''),
                                               ('sort', ['*args', '**kwds'], ''),
                                               ('extend', ['other'], '')],
                                   'properties': ['data', '__hash__', '__rmul__']},
             'UserString.MutableString': {'bases': ['UserString.UserString',
                                                    'collections.MutableSequence'],
                                          'constructor': ["string=''"],
                                          'docstring': "mutable string objects\n\n    Python strings are immutable objects.  This has the advantage, that\n    strings may be used as dictionary keys.  If this property isn't needed\n    and you insist on changing string values in place instead, you may cheat\n    and use MutableString.\n\n    But the purpose of this class is an educational one: to prevent\n    people from inventing their own mutable string class derived\n    from UserString and than forget thereby to remove (override) the\n    __hash__ method inherited from UserString.  This would lead to\n    errors that would be very hard to track down.\n\n    A faster and better solution is to rewrite your program using lists.",
                                          'methods': [('__setitem__', ['index', 'sub'], ''),
                                                      ('__delitem__', ['index'], ''),
                                                      ('__setslice__',
                                                       ['start', 'end', 'sub'],
                                                       ''),
                                                      ('__delslice__', ['start', 'end'], ''),
                                                      ('immutable', [], ''),
                                                      ('__iadd__', ['other'], ''),
                                                      ('__imul__', ['n'], ''),
                                                      ('insert', ['index', 'value'], '')],
                                          'properties': ['data', '__hash__']},
             'UserString.UserString': {'bases': ['collections.Sequence'],
                                       'constructor': ['seq'],
                                       'docstring': '',
                                       'methods': [('__str__', [], ''),
                                                   ('__repr__', [], ''),
                                                   ('__int__', [], ''),
                                                   ('__long__', [], ''),
                                                   ('__float__', [], ''),
                                                   ('__complex__', [], ''),
                                                   ('__hash__', [], ''),
                                                   ('__cmp__', ['string'], ''),
                                                   ('__contains__', ['char'], ''),
                                                   ('__len__', [], ''),
                                                   ('__getitem__', ['index'], ''),
                                                   ('__getslice__', ['start', 'end'], ''),
                                                   ('__add__', ['other'], ''),
                                                   ('__radd__', ['other'], ''),
                                                   ('__mul__', ['n'], ''),
                                                   ('__mod__', ['args'], ''),
                                                   ('capitalize', [], ''),
                                                   ('center', ['width', '*args'], ''),
                                                   ('count',
                                                    ['sub', 'start=0', 'end=sys.maxint'],
                                                    ''),
                                                   ('decode',
                                                    ['encoding=None', 'errors=None'],
                                                    ''),
                                                   ('encode',
                                                    ['encoding=None', 'errors=None'],
                                                    ''),
                                                   ('endswith',
                                                    ['suffix', 'start=0', 'end=sys.maxint'],
                                                    ''),
                                                   ('expandtabs', ['tabsize=8'], ''),
                                                   ('find',
                                                    ['sub', 'start=0', 'end=sys.maxint'],
                                                    ''),
                                                   ('index',
                                                    ['sub', 'start=0', 'end=sys.maxint'],
                                                    ''),
                                                   ('isalpha', [], ''),
                                                   ('isalnum', [], ''),
                                                   ('isdecimal', [], ''),
                                                   ('isdigit', [], ''),
                                                   ('islower', [], ''),
                                                   ('isnumeric', [], ''),
                                                   ('isspace', [], ''),
                                                   ('istitle', [], ''),
                                                   ('isupper', [], ''),
                                                   ('join', ['seq'], ''),
                                                   ('ljust', ['width', '*args'], ''),
                                                   ('lower', [], ''),
                                                   ('lstrip', ['chars=None'], ''),
                                                   ('partition', ['sep'], ''),
                                                   ('replace',
                                                    ['old', 'new', 'maxsplit=-1'],
                                                    ''),
                                                   ('rfind',
                                                    ['sub', 'start=0', 'end=sys.maxint'],
                                                    ''),
                                                   ('rindex',
                                                    ['sub', 'start=0', 'end=sys.maxint'],
                                                    ''),
                                                   ('rjust', ['width', '*args'], ''),
                                                   ('rpartition', ['sep'], ''),
                                                   ('rstrip', ['chars=None'], ''),
                                                   ('split', ['sep=None', 'maxsplit=-1'], ''),
                                                   ('rsplit', ['sep=None', 'maxsplit=-1'], ''),
                                                   ('splitlines', ['keepends=0'], ''),
                                                   ('startswith',
                                                    ['prefix', 'start=0', 'end=sys.maxint'],
                                                    ''),
                                                   ('strip', ['chars=None'], ''),
                                                   ('swapcase', [], ''),
                                                   ('title', [], ''),
                                                   ('translate', ['*args'], ''),
                                                   ('upper', [], ''),
                                                   ('zfill', ['width'], '')],
                                       'properties': ['data', '__rmul__']},
             '_LWPCookieJar.LWPCookieJar': {'bases': ['cookielib.FileCookieJar'],
                                            'constructor': [],
                                            'docstring': '\n    The LWPCookieJar saves a sequence of"Set-Cookie3" lines.\n    "Set-Cookie3" is the format used by the libwww-perl libary, not known\n    to be compatible with any browser, but which is easy to read and\n    doesn\'t lose information about RFC 2965 cookies.\n\n    Additional methods\n\n    as_lwp_str(ignore_discard=True, ignore_expired=True)\n\n    ',
                                            'methods': [('as_lwp_str',
                                                         ['ignore_discard=True',
                                                          'ignore_expires=True'],
                                                         'Return cookies as a string of "\n"-separated "Set-Cookie3" headers.\n\n        ignore_discard and ignore_expires: see docstring for FileCookieJar.save\n\n        '),
                                                        ('save',
                                                         ['filename=None',
                                                          'ignore_discard=False',
                                                          'ignore_expires=False'],
                                                         ''),
                                                        ('_really_load',
                                                         ['f',
                                                          'filename',
                                                          'ignore_discard',
                                                          'ignore_expires'],
                                                         '')],
                                            'properties': []},
             '_MozillaCookieJar.MozillaCookieJar': {'bases': ['cookielib.FileCookieJar'],
                                                    'constructor': [],
                                                    'docstring': "\n\n    WARNING: you may want to backup your browser's cookies file if you use\n    this class to save cookies.  I *think* it works, but there have been\n    bugs in the past!\n\n    This class differs from CookieJar only in the format it uses to save and\n    load cookies to and from a file.  This class uses the Mozilla/Netscape\n    `cookies.txt' format.  lynx uses this file format, too.\n\n    Don't expect cookies saved while the browser is running to be noticed by\n    the browser (in fact, Mozilla on unix will overwrite your saved cookies if\n    you change them on disk while it's running; on Windows, you probably can't\n    save at all while the browser is running).\n\n    Note that the Mozilla/Netscape format will downgrade RFC2965 cookies to\n    Netscape cookies on saving.\n\n    In particular, the cookie version and port number information is lost,\n    together with information about whether or not Path, Port and Discard were\n    specified by the Set-Cookie2 (or Set-Cookie) header, and whether or not the\n    domain as set in the HTTP header started with a dot (yes, I'm aware some\n    domains in Netscape files start with a dot and some don't -- trust me, you\n    really don't want to know any more about this).\n\n    Note that though Mozilla and Netscape use the same format, they use\n    slightly different headers.  The class saves cookies using the Netscape\n    header by default (Mozilla can cope with that).\n\n    ",
                                                    'methods': [('_really_load',
                                                                 ['f',
                                                                  'filename',
                                                                  'ignore_discard',
                                                                  'ignore_expires'],
                                                                 ''),
                                                                ('save',
                                                                 ['filename=None',
                                                                  'ignore_discard=False',
                                                                  'ignore_expires=False'],
                                                                 '')],
                                                    'properties': ['magic_re', 'header']},
             '__future__._Feature': {'bases': [],
                                     'constructor': ['optionalRelease',
                                                     'mandatoryRelease',
                                                     'compiler_flag'],
                                     'docstring': '',
                                     'methods': [('getOptionalRelease',
                                                  [],
                                                  'Return first release in which this feature was recognized.\n\n        This is a 5-tuple, of the same form as sys.version_info.\n        '),
                                                 ('getMandatoryRelease',
                                                  [],
                                                  'Return release in which this feature will become mandatory.\n\n        This is a 5-tuple, of the same form as sys.version_info, or, if\n        the feature was dropped, is None.\n        '),
                                                 ('__repr__', [], '')],
                                     'properties': ['optional', 'mandatory', 'compiler_flag']},
             '_abcoll.Callable': {'bases': [],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [('__call__', ['*args', '**kwds'], ''),
                                              ('__subclasshook__', ['C'], '')],
                                  'properties': ['__metaclass__']},
             '_abcoll.Container': {'bases': [],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [('__contains__', ['x'], ''),
                                               ('__subclasshook__', ['C'], '')],
                                   'properties': ['__metaclass__']},
             '_abcoll.Hashable': {'bases': [],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [('__hash__', [], ''),
                                              ('__subclasshook__', ['C'], '')],
                                  'properties': ['__metaclass__']},
             '_abcoll.ItemsView': {'bases': ['_abcoll.MappingView', '_abcoll.Set'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [('_from_iterable', ['it'], ''),
                                               ('__contains__', ['item'], ''),
                                               ('__iter__', [], '')],
                                   'properties': []},
             '_abcoll.Iterable': {'bases': [],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [('__iter__', [], ''),
                                              ('__subclasshook__', ['C'], '')],
                                  'properties': ['__metaclass__']},
             '_abcoll.Iterator': {'bases': ['_abcoll.Iterable'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [('next', [], ''),
                                              ('__iter__', [], ''),
                                              ('__subclasshook__', ['C'], '')],
                                  'properties': []},
             '_abcoll.KeysView': {'bases': ['_abcoll.MappingView', '_abcoll.Set'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [('_from_iterable', ['it'], ''),
                                              ('__contains__', ['key'], ''),
                                              ('__iter__', [], '')],
                                  'properties': []},
             '_abcoll.Mapping': {'bases': ['_abcoll.Sized',
                                           '_abcoll.Iterable',
                                           '_abcoll.Container'],
                                 'constructor': [],
                                 'docstring': '',
                                 'methods': [('__getitem__', ['key'], ''),
                                             ('get', ['key', 'default=None'], ''),
                                             ('__contains__', ['key'], ''),
                                             ('iterkeys', [], ''),
                                             ('itervalues', [], ''),
                                             ('iteritems', [], ''),
                                             ('keys', [], ''),
                                             ('items', [], ''),
                                             ('values', [], ''),
                                             ('__eq__', ['other'], ''),
                                             ('__ne__', ['other'], '')],
                                 'properties': ['__hash__']},
             '_abcoll.MappingView': {'bases': ['_abcoll.Sized'],
                                     'constructor': ['mapping'],
                                     'docstring': '',
                                     'methods': [('__len__', [], ''), ('__repr__', [], '')],
                                     'properties': ['_mapping']},
             '_abcoll.MutableMapping': {'bases': ['_abcoll.Mapping'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('__setitem__', ['key', 'value'], ''),
                                                    ('__delitem__', ['key'], ''),
                                                    ('pop', ['key', 'default=__marker'], ''),
                                                    ('popitem', [], ''),
                                                    ('clear', [], ''),
                                                    ('update', ['**kwds'], ''),
                                                    ('setdefault', ['key', 'default=None'], '')],
                                        'properties': ['__marker']},
             '_abcoll.MutableSequence': {'bases': ['_abcoll.Sequence'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('__setitem__', ['index', 'value'], ''),
                                                     ('__delitem__', ['index'], ''),
                                                     ('insert', ['index', 'value'], ''),
                                                     ('append', ['value'], ''),
                                                     ('reverse', [], ''),
                                                     ('extend', ['values'], ''),
                                                     ('pop', ['index=-1'], ''),
                                                     ('remove', ['value'], ''),
                                                     ('__iadd__', ['values'], '')],
                                         'properties': []},
             '_abcoll.MutableSet': {'bases': ['_abcoll.Set'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('add', ['value'], 'Add an element.'),
                                                ('discard',
                                                 ['value'],
                                                 'Remove an element.  Do not raise an exception if absent.'),
                                                ('remove',
                                                 ['value'],
                                                 'Remove an element. If not a member, raise a KeyError.'),
                                                ('pop',
                                                 [],
                                                 'Return the popped value.  Raise KeyError if empty.'),
                                                ('clear',
                                                 [],
                                                 'This is slow (creates N new iterators!) but effective.'),
                                                ('__ior__', ['it'], ''),
                                                ('__iand__', ['it'], ''),
                                                ('__ixor__', ['it'], ''),
                                                ('__isub__', ['it'], '')],
                                    'properties': []},
             '_abcoll.Sequence': {'bases': ['_abcoll.Sized',
                                            '_abcoll.Iterable',
                                            '_abcoll.Container'],
                                  'constructor': [],
                                  'docstring': 'All the operations on a read-only sequence.\n\n    Concrete subclasses must override __new__ or __init__,\n    __getitem__, and __len__.\n    ',
                                  'methods': [('__getitem__', ['index'], ''),
                                              ('__iter__', [], ''),
                                              ('__contains__', ['value'], ''),
                                              ('__reversed__', [], ''),
                                              ('index', ['value'], ''),
                                              ('count', ['value'], '')],
                                  'properties': []},
             '_abcoll.Set': {'bases': ['_abcoll.Sized', '_abcoll.Iterable', '_abcoll.Container'],
                             'constructor': [],
                             'docstring': 'A set is a finite, iterable container.\n\n    This class provides concrete generic implementations of all\n    methods except for __contains__, __iter__ and __len__.\n\n    To override the comparisons (presumably for speed, as the\n    semantics are fixed), all you have to do is redefine __le__ and\n    then the other operations will automatically follow suit.\n    ',
                             'methods': [('__le__', ['other'], ''),
                                         ('__lt__', ['other'], ''),
                                         ('__gt__', ['other'], ''),
                                         ('__ge__', ['other'], ''),
                                         ('__eq__', ['other'], ''),
                                         ('__ne__', ['other'], ''),
                                         ('_from_iterable',
                                          ['it'],
                                          'Construct an instance of the class from any iterable input.\n\n        Must override this method if the class constructor signature\n        does not accept an iterable for an input.\n        '),
                                         ('__and__', ['other'], ''),
                                         ('isdisjoint', ['other'], ''),
                                         ('__or__', ['other'], ''),
                                         ('__sub__', ['other'], ''),
                                         ('__xor__', ['other'], ''),
                                         ('_hash',
                                          [],
                                          "Compute the hash value of a set.\n\n        Note that we don't define __hash__: not all sets are hashable.\n        But if you define a hashable set type, its __hash__ should\n        call this function.\n\n        This must be compatible __eq__.\n\n        All sets ought to compare equal if they contain the same\n        elements, regardless of how they are implemented, and\n        regardless of the order of the elements; so there's not much\n        freedom for __eq__ or __hash__.  We match the algorithm used\n        by the built-in frozenset type.\n        ")],
                             'properties': ['__hash__']},
             '_abcoll.Sized': {'bases': [],
                               'constructor': [],
                               'docstring': '',
                               'methods': [('__len__', [], ''), ('__subclasshook__', ['C'], '')],
                               'properties': ['__metaclass__']},
             '_abcoll.ValuesView': {'bases': ['_abcoll.MappingView'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('__contains__', ['value'], ''),
                                                ('__iter__', [], '')],
                                    'properties': []},
             '_pyio.BlockingIOError': {'bases': ['IOError'],
                                       'constructor': ['errno',
                                                       'strerror',
                                                       'characters_written=0'],
                                       'docstring': 'Exception raised when I/O would block on a non-blocking I/O stream.',
                                       'methods': [],
                                       'properties': ['characters_written']},
             '_pyio.BufferedIOBase': {'bases': ['_pyio.IOBase'],
                                      'constructor': [],
                                      'docstring': 'Base class for buffered IO objects.\n\n    The main difference with RawIOBase is that the read() method\n    supports omitting the size argument, and does not have a default\n    implementation that defers to readinto().\n\n    In addition, read(), readinto() and write() may raise\n    BlockingIOError if the underlying raw stream is in non-blocking\n    mode and not ready; unlike their raw counterparts, they will never\n    return None.\n\n    A typical implementation should not inherit from a RawIOBase\n    implementation, but wrap one.\n    ',
                                      'methods': [('read',
                                                   ['n=None'],
                                                   "Read and return up to n bytes.\n\n        If the argument is omitted, None, or negative, reads and\n        returns all data until EOF.\n\n        If the argument is positive, and the underlying raw stream is\n        not 'interactive', multiple raw reads may be issued to satisfy\n        the byte count (unless EOF is reached first).  But for\n        interactive raw streams (XXX and for pipes?), at most one raw\n        read will be issued, and a short result does not imply that\n        EOF is imminent.\n\n        Returns an empty bytes array on EOF.\n\n        Raises BlockingIOError if the underlying raw stream has no\n        data at the moment.\n        "),
                                                  ('read1',
                                                   ['n=None'],
                                                   'Read up to n bytes with at most one read() system call.'),
                                                  ('readinto',
                                                   ['b'],
                                                   "Read up to len(b) bytes into b.\n\n        Like read(), this may issue multiple reads to the underlying raw\n        stream, unless the latter is 'interactive'.\n\n        Returns the number of bytes read (0 for EOF).\n\n        Raises BlockingIOError if the underlying raw stream has no\n        data at the moment.\n        "),
                                                  ('write',
                                                   ['b'],
                                                   'Write the given buffer to the IO stream.\n\n        Return the number of bytes written, which is never less than\n        len(b).\n\n        Raises BlockingIOError if the buffer is full and the\n        underlying raw stream cannot accept more data at the moment.\n        '),
                                                  ('detach',
                                                   [],
                                                   '\n        Separate the underlying raw stream from the buffer and return it.\n\n        After the raw stream has been detached, the buffer is in an unusable\n        state.\n        ')],
                                      'properties': []},
             '_pyio.BufferedRWPair': {'bases': ['_pyio.BufferedIOBase'],
                                      'constructor': ['reader',
                                                      'writer',
                                                      'buffer_size=DEFAULT_BUFFER_SIZE',
                                                      'max_buffer_size=None'],
                                      'docstring': 'A buffered reader and writer object together.\n\n    A buffered reader object and buffered writer object put together to\n    form a sequential IO object that can read and write. This is typically\n    used with a socket or two-way pipe.\n\n    reader and writer are RawIOBase objects that are readable and\n    writeable respectively. If the buffer_size is omitted it defaults to\n    DEFAULT_BUFFER_SIZE.\n    ',
                                      'methods': [('read', ['n=None'], ''),
                                                  ('readinto', ['b'], ''),
                                                  ('write', ['b'], ''),
                                                  ('peek', ['n=0'], ''),
                                                  ('read1', ['n'], ''),
                                                  ('readable', [], ''),
                                                  ('writable', [], ''),
                                                  ('flush', [], ''),
                                                  ('close', [], ''),
                                                  ('isatty', [], '')],
                                      'properties': ['reader', 'writer', 'closed']},
             '_pyio.BufferedRandom': {'bases': ['_pyio.BufferedWriter', '_pyio.BufferedReader'],
                                      'constructor': ['raw',
                                                      'buffer_size=DEFAULT_BUFFER_SIZE',
                                                      'max_buffer_size=None'],
                                      'docstring': 'A buffered interface to random access streams.\n\n    The constructor creates a reader and writer for a seekable stream,\n    raw, given in the first argument. If the buffer_size is omitted it\n    defaults to DEFAULT_BUFFER_SIZE.\n    ',
                                      'methods': [('seek', ['pos', 'whence=0'], ''),
                                                  ('tell', [], ''),
                                                  ('truncate', ['pos=None'], ''),
                                                  ('read', ['n=None'], ''),
                                                  ('readinto', ['b'], ''),
                                                  ('peek', ['n=0'], ''),
                                                  ('read1', ['n'], ''),
                                                  ('write', ['b'], '')],
                                      'properties': ['_warning_stack_offset']},
             '_pyio.BufferedReader': {'bases': ['_pyio._BufferedIOMixin'],
                                      'constructor': ['raw', 'buffer_size=DEFAULT_BUFFER_SIZE'],
                                      'docstring': 'BufferedReader(raw[, buffer_size])\n\n    A buffer for a readable, sequential BaseRawIO object.\n\n    The constructor creates a BufferedReader for the given readable raw\n    stream and buffer_size. If buffer_size is omitted, DEFAULT_BUFFER_SIZE\n    is used.\n    ',
                                      'methods': [('_reset_read_buf', [], ''),
                                                  ('read',
                                                   ['n=None'],
                                                   'Read n bytes.\n\n        Returns exactly n bytes of data unless the underlying raw IO\n        stream reaches EOF or if the call would block in non-blocking\n        mode. If n is negative, read until EOF or until read() would\n        block.\n        '),
                                                  ('_read_unlocked', ['n=None'], ''),
                                                  ('peek',
                                                   ['n=0'],
                                                   'Returns buffered bytes without advancing the position.\n\n        The argument indicates a desired minimal number of bytes; we\n        do at most one raw read to satisfy it.  We never return more\n        than self.buffer_size.\n        '),
                                                  ('_peek_unlocked', ['n=0'], ''),
                                                  ('read1',
                                                   ['n'],
                                                   'Reads up to n bytes, with at most one read() system call.'),
                                                  ('tell', [], ''),
                                                  ('seek', ['pos', 'whence=0'], '')],
                                      'properties': ['buffer_size',
                                                     '_read_lock',
                                                     '_read_buf',
                                                     '_read_pos']},
             '_pyio.BufferedWriter': {'bases': ['_pyio._BufferedIOMixin'],
                                      'constructor': ['raw',
                                                      'buffer_size=DEFAULT_BUFFER_SIZE',
                                                      'max_buffer_size=None'],
                                      'docstring': 'A buffer for a writeable sequential RawIO object.\n\n    The constructor creates a BufferedWriter for the given writeable raw\n    stream. If the buffer_size is not given, it defaults to\n    DEFAULT_BUFFER_SIZE.\n    ',
                                      'methods': [('write', ['b'], ''),
                                                  ('truncate', ['pos=None'], ''),
                                                  ('flush', [], ''),
                                                  ('_flush_unlocked', [], ''),
                                                  ('tell', [], ''),
                                                  ('seek', ['pos', 'whence=0'], '')],
                                      'properties': ['_warning_stack_offset',
                                                     'buffer_size',
                                                     '_write_buf',
                                                     '_write_lock']},
             '_pyio.BytesIO': {'bases': ['_pyio.BufferedIOBase'],
                               'constructor': ['initial_bytes=None'],
                               'docstring': 'Buffered I/O implementation using an in-memory bytes buffer.',
                               'methods': [('__getstate__', [], ''),
                                           ('getvalue',
                                            [],
                                            'Return the bytes value (contents) of the buffer\n        '),
                                           ('read', ['n=None'], ''),
                                           ('read1',
                                            ['n'],
                                            'This is the same as read.\n        '),
                                           ('write', ['b'], ''),
                                           ('seek', ['pos', 'whence=0'], ''),
                                           ('tell', [], ''),
                                           ('truncate', ['pos=None'], ''),
                                           ('readable', [], ''),
                                           ('writable', [], ''),
                                           ('seekable', [], '')],
                               'properties': ['_buffer', '_pos']},
             '_pyio.DocDescriptor': {'bases': [],
                                     'constructor': [],
                                     'docstring': 'Helper for builtins.open.__doc__\n    ',
                                     'methods': [('__get__', ['obj', 'typ'], '')],
                                     'properties': []},
             '_pyio.IOBase': {'bases': [],
                              'constructor': [],
                              'docstring': '',
                              'methods': [('_unsupported',
                                           ['name'],
                                           'Internal: raise an exception for unsupported operations.'),
                                          ('seek',
                                           ['pos', 'whence=0'],
                                           'Change stream position.\n\n        Change the stream position to byte offset offset. offset is\n        interpreted relative to the position indicated by whence.  Values\n        for whence are:\n\n        * 0 -- start of stream (the default); offset should be zero or positive\n        * 1 -- current stream position; offset may be negative\n        * 2 -- end of stream; offset is usually negative\n\n        Return the new absolute position.\n        '),
                                          ('tell', [], 'Return current stream position.'),
                                          ('truncate',
                                           ['pos=None'],
                                           'Truncate file to size bytes.\n\n        Size defaults to the current IO position as reported by tell().  Return\n        the new size.\n        '),
                                          ('flush',
                                           [],
                                           'Flush write buffers, if applicable.\n\n        This is not implemented for read-only and non-blocking streams.\n        '),
                                          ('close',
                                           [],
                                           'Flush and close the IO object.\n\n        This method has no effect if the file is already closed.\n        '),
                                          ('__del__', [], 'Destructor.  Calls close().'),
                                          ('seekable',
                                           [],
                                           'Return whether object supports random access.\n\n        If False, seek(), tell() and truncate() will raise IOError.\n        This method may need to do a test seek().\n        '),
                                          ('_checkSeekable',
                                           ['msg=None'],
                                           'Internal: raise an IOError if file is not seekable\n        '),
                                          ('readable',
                                           [],
                                           'Return whether object was opened for reading.\n\n        If False, read() will raise IOError.\n        '),
                                          ('_checkReadable',
                                           ['msg=None'],
                                           'Internal: raise an IOError if file is not readable\n        '),
                                          ('writable',
                                           [],
                                           'Return whether object was opened for writing.\n\n        If False, write() and truncate() will raise IOError.\n        '),
                                          ('_checkWritable',
                                           ['msg=None'],
                                           'Internal: raise an IOError if file is not writable\n        '),
                                          ('_checkClosed',
                                           ['msg=None'],
                                           'Internal: raise an ValueError if file is closed\n        '),
                                          ('__enter__',
                                           [],
                                           'Context management protocol.  Returns self.'),
                                          ('__exit__',
                                           ['*args'],
                                           'Context management protocol.  Calls close()'),
                                          ('fileno',
                                           [],
                                           'Returns underlying file descriptor if one exists.\n\n        An IOError is raised if the IO object does not use a file descriptor.\n        '),
                                          ('isatty',
                                           [],
                                           "Return whether this is an 'interactive' stream.\n\n        Return False if it can't be determined.\n        "),
                                          ('readline',
                                           ['limit=-1'],
                                           "Read and return a line from the stream.\n\n        If limit is specified, at most limit bytes will be read.\n\n        The line terminator is always b'\\n' for binary files; for text\n        files, the newlines argument to open can be used to select the line\n        terminator(s) recognized.\n        "),
                                          ('__iter__', [], ''),
                                          ('next', [], ''),
                                          ('readlines',
                                           ['hint=None'],
                                           'Return a list of lines from the stream.\n\n        hint can be specified to control the number of lines read: no more\n        lines will be read if the total size (in bytes/characters) of all\n        lines so far exceeds hint.\n        '),
                                          ('writelines', ['lines'], '')],
                              'properties': ['__metaclass__', '__closed', 'closed']},
             '_pyio.IncrementalNewlineDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                 'constructor': ['decoder',
                                                                 'translate',
                                                                 "errors='strict'"],
                                                 'docstring': 'Codec used when reading a file in universal newlines mode.  It wraps\n    another incremental decoder, translating \\r\\n and \\r into \\n.  It also\n    records the types of newlines encountered.  When used with\n    translate=False, it ensures that the newline sequence is returned in\n    one piece.\n    ',
                                                 'methods': [('decode',
                                                              ['input', 'final=False'],
                                                              ''),
                                                             ('getstate', [], ''),
                                                             ('setstate', ['state'], ''),
                                                             ('reset', [], '')],
                                                 'properties': ['translate',
                                                                'decoder',
                                                                'seennl',
                                                                'pendingcr',
                                                                '_LF',
                                                                '_CR',
                                                                '_CRLF',
                                                                'newlines']},
             '_pyio.OpenWrapper': {'bases': [],
                                   'constructor': [],
                                   'docstring': "Wrapper for builtins.open\n\n    Trick so that open won't become a bound method when stored\n    as a class variable (as dbm.dumb does).\n\n    See initstdio() in Python/pythonrun.c.\n    ",
                                   'methods': [('__new__', ['*args', '**kwargs'], '')],
                                   'properties': ['__doc__']},
             '_pyio.RawIOBase': {'bases': ['_pyio.IOBase'],
                                 'constructor': [],
                                 'docstring': 'Base class for raw binary I/O.',
                                 'methods': [('read',
                                              ['n=-1'],
                                              'Read and return up to n bytes.\n\n        Returns an empty bytes object on EOF, or None if the object is\n        set not to block and has no data to read.\n        '),
                                             ('readall',
                                              [],
                                              'Read until EOF, using multiple read() call.'),
                                             ('readinto',
                                              ['b'],
                                              'Read up to len(b) bytes into b.\n\n        Returns number of bytes read (0 for EOF), or None if the object\n        is set not to block and has no data to read.\n        '),
                                             ('write',
                                              ['b'],
                                              'Write the given buffer to the IO stream.\n\n        Returns the number of bytes written, which may be less than len(b).\n        ')],
                                 'properties': []},
             '_pyio.StringIO': {'bases': ['_pyio.TextIOWrapper'],
                                'constructor': ["initial_value=''", "newline='\\n'"],
                                'docstring': "Text I/O implementation using an in-memory buffer.\n\n    The initial_value argument sets the value of object.  The newline\n    argument is like the one of TextIOWrapper's constructor.\n    ",
                                'methods': [('getvalue', [], ''),
                                            ('__repr__', [], ''),
                                            ('detach', [], '')],
                                'properties': ['_writetranslate', 'errors', 'encoding']},
             '_pyio.TextIOBase': {'bases': ['_pyio.IOBase'],
                                  'constructor': [],
                                  'docstring': "Base class for text I/O.\n\n    This class provides a character and line based interface to stream\n    I/O. There is no readinto method because Python's character strings\n    are immutable. There is no public constructor.\n    ",
                                  'methods': [('read',
                                               ['n=-1'],
                                               'Read at most n characters from stream.\n\n        Read from underlying buffer until we have n characters or we hit EOF.\n        If n is negative or omitted, read until EOF.\n        '),
                                              ('write', ['s'], 'Write string s to stream.'),
                                              ('truncate',
                                               ['pos=None'],
                                               'Truncate size to pos.'),
                                              ('readline',
                                               [],
                                               'Read until newline or EOF.\n\n        Returns an empty string if EOF is hit immediately.\n        '),
                                              ('detach',
                                               [],
                                               '\n        Separate the underlying buffer from the TextIOBase and return it.\n\n        After the underlying buffer has been detached, the TextIO is in an\n        unusable state.\n        ')],
                                  'properties': ['encoding', 'newlines', 'errors']},
             '_pyio.TextIOWrapper': {'bases': ['_pyio.TextIOBase'],
                                     'constructor': ['buffer',
                                                     'encoding=None',
                                                     'errors=None',
                                                     'newline=None',
                                                     'line_buffering=False'],
                                     'docstring': 'Character and line based layer over a BufferedIOBase object, buffer.\n\n    encoding gives the name of the encoding that the stream will be\n    decoded or encoded with. It defaults to locale.getpreferredencoding.\n\n    errors determines the strictness of encoding and decoding (see the\n    codecs.register) and defaults to "strict".\n\n    newline can be None, \'\', \'\\n\', \'\\r\', or \'\\r\\n\'.  It controls the\n    handling of line endings. If it is None, universal newlines is\n    enabled.  With this enabled, on input, the lines endings \'\\n\', \'\\r\',\n    or \'\\r\\n\' are translated to \'\\n\' before being returned to the\n    caller. Conversely, on output, \'\\n\' is translated to the system\n    default line seperator, os.linesep. If newline is any other of its\n    legal values, that newline becomes the newline when the file is read\n    and it is returned untranslated. On output, \'\\n\' is converted to the\n    newline.\n\n    If line_buffering is True, a call to flush is implied when a call to\n    write contains a newline character.\n    ',
                                     'methods': [('__repr__', [], ''),
                                                 ('seekable', [], ''),
                                                 ('readable', [], ''),
                                                 ('writable', [], ''),
                                                 ('flush', [], ''),
                                                 ('close', [], ''),
                                                 ('fileno', [], ''),
                                                 ('isatty', [], ''),
                                                 ('write', ['s'], ''),
                                                 ('_get_encoder', [], ''),
                                                 ('_get_decoder', [], ''),
                                                 ('_set_decoded_chars',
                                                  ['chars'],
                                                  'Set the _decoded_chars buffer.'),
                                                 ('_get_decoded_chars',
                                                  ['n=None'],
                                                  'Advance into the _decoded_chars buffer.'),
                                                 ('_rewind_decoded_chars',
                                                  ['n'],
                                                  'Rewind the _decoded_chars buffer.'),
                                                 ('_read_chunk',
                                                  [],
                                                  '\n        Read and decode the next chunk of data from the BufferedReader.\n        '),
                                                 ('_pack_cookie',
                                                  ['position',
                                                   'dec_flags=0',
                                                   'bytes_to_feed=0',
                                                   'need_eof=0',
                                                   'chars_to_skip=0'],
                                                  ''),
                                                 ('_unpack_cookie', ['bigint'], ''),
                                                 ('tell', [], ''),
                                                 ('truncate', ['pos=None'], ''),
                                                 ('detach', [], ''),
                                                 ('seek', ['cookie', 'whence=0'], ''),
                                                 ('read', ['n=None'], ''),
                                                 ('next', [], ''),
                                                 ('readline', ['limit=None'], '')],
                                     'properties': ['_CHUNK_SIZE',
                                                    '_buffer',
                                                    '_line_buffering',
                                                    '_encoding',
                                                    '_errors',
                                                    '_readuniversal',
                                                    '_readtranslate',
                                                    '_readnl',
                                                    '_writetranslate',
                                                    '_writenl',
                                                    '_encoder',
                                                    '_decoder',
                                                    '_decoded_chars',
                                                    '_decoded_chars_used',
                                                    '_snapshot',
                                                    '_seekable',
                                                    '_telling',
                                                    'encoding',
                                                    'errors',
                                                    'line_buffering',
                                                    'buffer',
                                                    'closed',
                                                    'name',
                                                    'newlines']},
             '_pyio.UnsupportedOperation': {'bases': ['ValueError', 'IOError'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': []},
             '_pyio._BufferedIOMixin': {'bases': ['_pyio.BufferedIOBase'],
                                        'constructor': ['raw'],
                                        'docstring': 'A mixin implementation of BufferedIOBase with an underlying raw stream.\n\n    This passes most requests on to the underlying raw stream.  It\n    does *not* provide implementations of read(), readinto() or\n    write().\n    ',
                                        'methods': [('seek', ['pos', 'whence=0'], ''),
                                                    ('tell', [], ''),
                                                    ('truncate', ['pos=None'], ''),
                                                    ('flush', [], ''),
                                                    ('close', [], ''),
                                                    ('detach', [], ''),
                                                    ('seekable', [], ''),
                                                    ('readable', [], ''),
                                                    ('writable', [], ''),
                                                    ('__repr__', [], ''),
                                                    ('fileno', [], ''),
                                                    ('isatty', [], '')],
                                        'properties': ['_raw', 'raw', 'closed', 'name', 'mode']},
             '_strptime.LocaleTime': {'bases': ['object'],
                                      'constructor': [],
                                      'docstring': 'Stores and handles locale-specific information related to time.\n\n    ATTRIBUTES:\n        f_weekday -- full weekday names (7-item list)\n        a_weekday -- abbreviated weekday names (7-item list)\n        f_month -- full month names (13-item list; dummy value in [0], which\n                    is added by code)\n        a_month -- abbreviated month names (13-item list, dummy value in\n                    [0], which is added by code)\n        am_pm -- AM/PM representation (2-item list)\n        LC_date_time -- format string for date/time representation (string)\n        LC_date -- format string for date representation (string)\n        LC_time -- format string for time representation (string)\n        timezone -- daylight- and non-daylight-savings timezone representation\n                    (2-item list of sets)\n        lang -- Language used by instance (2-item tuple)\n    ',
                                      'methods': [('__pad', ['seq', 'front'], ''),
                                                  ('__calc_weekday', [], ''),
                                                  ('__calc_month', [], ''),
                                                  ('__calc_am_pm', [], ''),
                                                  ('__calc_date_time', [], ''),
                                                  ('__calc_timezone', [], '')],
                                      'properties': ['lang',
                                                     'a_weekday',
                                                     'f_weekday',
                                                     'a_month',
                                                     'f_month',
                                                     'am_pm',
                                                     'LC_date_time',
                                                     'LC_date',
                                                     'LC_time',
                                                     'timezone']},
             '_strptime.TimeRE': {'bases': ['dict'],
                                  'constructor': ['locale_time=None'],
                                  'docstring': 'Handle conversion from format directives to regexes.',
                                  'methods': [('__seqToRE',
                                               ['to_convert', 'directive'],
                                               "Convert a list to a regex string for matching a directive.\n\n        Want possible matching values to be from longest to shortest.  This\n        prevents the possibility of a match occuring for a value that also\n        a substring of a larger value that should have matched (e.g., 'abc'\n        matching when 'abcdef' should have been the match).\n\n        "),
                                              ('pattern',
                                               ['format'],
                                               'Return regex pattern for the format string.\n\n        Need to make sure that any characters that might be interpreted as\n        regex syntax are escaped.\n\n        '),
                                              ('compile',
                                               ['format'],
                                               'Return a compiled re object for the format string.')],
                                  'properties': ['locale_time']},
             '_threading_local._localbase': {'bases': ['object'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('__new__', ['*args', '**kw'], '')],
                                             'properties': ['__slots__']},
             '_threading_local.local': {'bases': ['_threading_local._localbase'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('__getattribute__', ['name'], ''),
                                                    ('__setattr__', ['name', 'value'], ''),
                                                    ('__delattr__', ['name'], ''),
                                                    ('__del__', [], '')],
                                        'properties': []},
             '_weakrefset.WeakSet': {'bases': ['object'],
                                     'constructor': ['data=None'],
                                     'docstring': '',
                                     'methods': [('_commit_removals', [], ''),
                                                 ('__iter__', [], ''),
                                                 ('__len__', [], ''),
                                                 ('__contains__', ['item'], ''),
                                                 ('__reduce__', [], ''),
                                                 ('add', ['item'], ''),
                                                 ('clear', [], ''),
                                                 ('copy', [], ''),
                                                 ('pop', [], ''),
                                                 ('remove', ['item'], ''),
                                                 ('discard', ['item'], ''),
                                                 ('update', ['other'], ''),
                                                 ('__ior__', ['other'], ''),
                                                 ('_apply', ['other', 'method'], ''),
                                                 ('difference', ['other'], ''),
                                                 ('difference_update', ['other'], ''),
                                                 ('__isub__', ['other'], ''),
                                                 ('intersection', ['other'], ''),
                                                 ('intersection_update', ['other'], ''),
                                                 ('__iand__', ['other'], ''),
                                                 ('issubset', ['other'], ''),
                                                 ('__le__', ['other'], ''),
                                                 ('issuperset', ['other'], ''),
                                                 ('__ge__', ['other'], ''),
                                                 ('__eq__', ['other'], ''),
                                                 ('symmetric_difference', ['other'], ''),
                                                 ('symmetric_difference_update', ['other'], ''),
                                                 ('__ixor__', ['other'], ''),
                                                 ('union', ['other'], ''),
                                                 ('isdisjoint', ['other'], '')],
                                     'properties': ['data',
                                                    '_remove',
                                                    '_pending_removals',
                                                    '_iterating',
                                                    '__hash__',
                                                    '__sub__',
                                                    '__and__',
                                                    '__lt__',
                                                    '__gt__',
                                                    '__xor__',
                                                    '__or__']},
             '_weakrefset._IterationGuard': {'bases': ['object'],
                                             'constructor': ['weakcontainer'],
                                             'docstring': '',
                                             'methods': [('__enter__', [], ''),
                                                         ('__exit__', ['e', 't', 'b'], '')],
                                             'properties': ['weakcontainer']},
             'abc.ABCMeta': {'bases': ['type'],
                             'constructor': [],
                             'docstring': "Metaclass for defining Abstract Base Classes (ABCs).\n\n    Use this metaclass to create an ABC.  An ABC can be subclassed\n    directly, and then acts as a mix-in class.  You can also register\n    unrelated concrete classes (even built-in classes) and unrelated\n    ABCs as 'virtual subclasses' -- these and their descendants will\n    be considered subclasses of the registering ABC by the built-in\n    issubclass() function, but the registering ABC won't show up in\n    their MRO (Method Resolution Order) nor will method\n    implementations defined by the registering ABC be callable (not\n    even via super()).\n\n    ",
                             'methods': [('__new__', ['name', 'bases', 'namespace'], ''),
                                         ('register',
                                          ['subclass'],
                                          'Register a virtual subclass of an ABC.'),
                                         ('_dump_registry',
                                          ['file=None'],
                                          'Debug helper to print the ABC registry.'),
                                         ('__instancecheck__',
                                          ['instance'],
                                          'Override for isinstance(instance, cls).'),
                                         ('__subclasscheck__',
                                          ['subclass'],
                                          'Override for issubclass(subclass, cls).')],
                             'properties': ['_abc_invalidation_counter']},
             'abc._C': {'bases': [],
                        'constructor': [],
                        'docstring': '',
                        'methods': [],
                        'properties': []},
             'abc.abstractproperty': {'bases': ['property'],
                                      'constructor': [],
                                      'docstring': "A decorator indicating abstract properties.\n\n    Requires that the metaclass is ABCMeta or derived from it.  A\n    class that has a metaclass derived from ABCMeta cannot be\n    instantiated unless all of its abstract properties are overridden.\n    The abstract properties can be called using any of the normal\n    'super' call mechanisms.\n\n    Usage:\n\n        class C:\n            __metaclass__ = ABCMeta\n            @abstractproperty\n            def my_abstract_property(self):\n                ...\n\n    This defines a read-only property; you can also define a read-write\n    abstract property using the 'long' form of property declaration:\n\n        class C:\n            __metaclass__ = ABCMeta\n            def getx(self): ...\n            def setx(self, value): ...\n            x = abstractproperty(getx, setx)\n    ",
                                      'methods': [],
                                      'properties': ['__isabstractmethod__']},
             'aifc.Aifc_read': {'bases': [],
                                'constructor': ['f'],
                                'docstring': '',
                                'methods': [('initfp', ['file'], ''),
                                            ('getfp', [], ''),
                                            ('rewind', [], ''),
                                            ('close', [], ''),
                                            ('tell', [], ''),
                                            ('getnchannels', [], ''),
                                            ('getnframes', [], ''),
                                            ('getsampwidth', [], ''),
                                            ('getframerate', [], ''),
                                            ('getcomptype', [], ''),
                                            ('getcompname', [], ''),
                                            ('getparams', [], ''),
                                            ('getmarkers', [], ''),
                                            ('getmark', ['id'], ''),
                                            ('setpos', ['pos'], ''),
                                            ('readframes', ['nframes'], ''),
                                            ('_decomp_data', ['data'], ''),
                                            ('_ulaw2lin', ['data'], ''),
                                            ('_adpcm2lin', ['data'], ''),
                                            ('_read_comm_chunk', ['chunk'], ''),
                                            ('_readmark', ['chunk'], '')],
                                'properties': ['_version',
                                               '_decomp',
                                               '_convert',
                                               '_markers',
                                               '_soundpos',
                                               '_file',
                                               '_aifc',
                                               '_comm_chunk_read',
                                               '_ssnd_seek_needed',
                                               '_ssnd_chunk',
                                               '_adpcmstate',
                                               '_nchannels',
                                               '_nframes',
                                               '_sampwidth',
                                               '_framerate',
                                               '_framesize',
                                               '_comptype',
                                               '_compname']},
             'aifc.Aifc_write': {'bases': [],
                                 'constructor': ['f'],
                                 'docstring': '',
                                 'methods': [('initfp', ['file'], ''),
                                             ('__del__', [], ''),
                                             ('aiff', [], ''),
                                             ('aifc', [], ''),
                                             ('setnchannels', ['nchannels'], ''),
                                             ('getnchannels', [], ''),
                                             ('setsampwidth', ['sampwidth'], ''),
                                             ('getsampwidth', [], ''),
                                             ('setframerate', ['framerate'], ''),
                                             ('getframerate', [], ''),
                                             ('setnframes', ['nframes'], ''),
                                             ('getnframes', [], ''),
                                             ('setcomptype', ['comptype', 'compname'], ''),
                                             ('getcomptype', [], ''),
                                             ('getcompname', [], ''),
                                             ('setparams', ['info'], ''),
                                             ('getparams', [], ''),
                                             ('setmark', ['id', 'pos', 'name'], ''),
                                             ('getmark', ['id'], ''),
                                             ('getmarkers', [], ''),
                                             ('tell', [], ''),
                                             ('writeframesraw', ['data'], ''),
                                             ('writeframes', ['data'], ''),
                                             ('close', [], ''),
                                             ('_comp_data', ['data'], ''),
                                             ('_lin2ulaw', ['data'], ''),
                                             ('_lin2adpcm', ['data'], ''),
                                             ('_ensure_header_written', ['datasize'], ''),
                                             ('_init_compression', [], ''),
                                             ('_write_header', ['initlength'], ''),
                                             ('_write_form_length', ['datalength'], ''),
                                             ('_patchheader', [], ''),
                                             ('_writemarkers', [], '')],
                                 'properties': ['_aifc',
                                                '_file',
                                                '_version',
                                                '_comptype',
                                                '_compname',
                                                '_comp',
                                                '_convert',
                                                '_nchannels',
                                                '_sampwidth',
                                                '_framerate',
                                                '_nframes',
                                                '_nframeswritten',
                                                '_datawritten',
                                                '_datalength',
                                                '_markers',
                                                '_marklength',
                                                '_adpcmstate',
                                                '_form_length_pos',
                                                '_nframes_pos',
                                                '_ssnd_length_pos']},
             'aifc.Error': {'bases': ['Exception'],
                            'constructor': [],
                            'docstring': '',
                            'methods': [],
                            'properties': []},
             'anydbm.error': {'bases': ['Exception'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': []},
             'argparse.Action': {'bases': ['gettext.gettextAttributeHolder'],
                                 'constructor': ['option_strings',
                                                 'dest',
                                                 'nargs=None',
                                                 'const=None',
                                                 'default=None',
                                                 'type=None',
                                                 'choices=None',
                                                 'required=False',
                                                 'help=None',
                                                 'metavar=None'],
                                 'docstring': "Information about how to convert command line strings to Python objects.\n\n    Action objects are used by an ArgumentParser to represent the information\n    needed to parse a single argument from one or more strings from the\n    command line. The keyword arguments to the Action constructor are also\n    all attributes of Action instances.\n\n    Keyword Arguments:\n\n        - option_strings -- A list of command-line option strings which\n            should be associated with this action.\n\n        - dest -- The name of the attribute to hold the created object(s)\n\n        - nargs -- The number of command-line arguments that should be\n            consumed. By default, one argument will be consumed and a single\n            value will be produced.  Other values include:\n                - N (an integer) consumes N arguments (and produces a list)\n                - '?' consumes zero or one arguments\n                - '*' consumes zero or more arguments (and produces a list)\n                - '+' consumes one or more arguments (and produces a list)\n            Note that the difference between the default and nargs=1 is that\n            with the default, a single value will be produced, while with\n            nargs=1, a list containing a single value will be produced.\n\n        - const -- The value to be produced if the option is specified and the\n            option uses an action that takes no values.\n\n        - default -- The value to be produced if the option is not specified.\n\n        - type -- The type which the command-line arguments should be converted\n            to, should be one of 'string', 'int', 'float', 'complex' or a\n            callable object that accepts a single string argument. If None,\n            'string' is assumed.\n\n        - choices -- A container of values that should be allowed. If not None,\n            after a command-line argument has been converted to the appropriate\n            type, an exception will be raised if it is not a member of this\n            collection.\n\n        - required -- True if the action must always be specified at the\n            command line. This is only meaningful for optional command-line\n            arguments.\n\n        - help -- The help string describing the argument.\n\n        - metavar -- The name to be used for the option's argument with the\n            help string. If None, the 'dest' value will be used as the name.\n    ",
                                 'methods': [('_get_kwargs', [], ''),
                                             ('__call__',
                                              ['parser',
                                               'namespace',
                                               'values',
                                               'option_string=None'],
                                              '')],
                                 'properties': ['option_strings',
                                                'dest',
                                                'nargs',
                                                'const',
                                                'default',
                                                'type',
                                                'choices',
                                                'required',
                                                'help',
                                                'metavar']},
             'argparse.ArgumentDefaultsHelpFormatter': {'bases': ['argparse.HelpFormatter'],
                                                        'constructor': [],
                                                        'docstring': 'Help message formatter which adds default values to argument help.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    ',
                                                        'methods': [('_get_help_string',
                                                                     ['action'],
                                                                     '')],
                                                        'properties': []},
             'argparse.ArgumentError': {'bases': ['Exception'],
                                        'constructor': ['argument', 'message'],
                                        'docstring': 'An error from creating or using an argument (optional or positional).\n\n    The string value of this exception is the message, augmented with\n    information about the argument that caused it.\n    ',
                                        'methods': [('__str__', [], '')],
                                        'properties': ['argument_name', 'message']},
             'argparse.ArgumentParser': {'bases': ['gettext.gettextAttributeHolder',
                                                   'gettext.gettextActionsContainer'],
                                         'constructor': ['prog=None',
                                                         'usage=None',
                                                         'description=None',
                                                         'epilog=None',
                                                         'version=None',
                                                         'parents=[]',
                                                         'formatter_class=HelpFormatter',
                                                         "prefix_chars='-'",
                                                         'fromfile_prefix_chars=None',
                                                         'argument_default=None',
                                                         "conflict_handler='error'",
                                                         'add_help=True'],
                                         'docstring': 'Object for parsing command line strings into Python objects.\n\n    Keyword Arguments:\n        - prog -- The name of the program (default: sys.argv[0])\n        - usage -- A usage message (default: auto-generated from arguments)\n        - description -- A description of what the program does\n        - epilog -- Text following the argument descriptions\n        - parents -- Parsers whose arguments should be copied into this one\n        - formatter_class -- HelpFormatter class for printing help messages\n        - prefix_chars -- Characters that prefix optional arguments\n        - fromfile_prefix_chars -- Characters that prefix files containing\n            additional arguments\n        - argument_default -- The default value for all arguments\n        - conflict_handler -- String indicating how to handle conflicts\n        - add_help -- Add a -h/-help option\n    ',
                                         'methods': [('_get_kwargs', [], ''),
                                                     ('add_subparsers', ['**kwargs'], ''),
                                                     ('_add_action', ['action'], ''),
                                                     ('_get_optional_actions', [], ''),
                                                     ('_get_positional_actions', [], ''),
                                                     ('parse_args',
                                                      ['args=None', 'namespace=None'],
                                                      ''),
                                                     ('parse_known_args',
                                                      ['args=None', 'namespace=None'],
                                                      ''),
                                                     ('_parse_known_args',
                                                      ['arg_strings', 'namespace'],
                                                      ''),
                                                     ('_read_args_from_files',
                                                      ['arg_strings'],
                                                      ''),
                                                     ('convert_arg_line_to_args',
                                                      ['arg_line'],
                                                      ''),
                                                     ('_match_argument',
                                                      ['action', 'arg_strings_pattern'],
                                                      ''),
                                                     ('_match_arguments_partial',
                                                      ['actions', 'arg_strings_pattern'],
                                                      ''),
                                                     ('_parse_optional', ['arg_string'], ''),
                                                     ('_get_option_tuples',
                                                      ['option_string'],
                                                      ''),
                                                     ('_get_nargs_pattern', ['action'], ''),
                                                     ('_get_values',
                                                      ['action', 'arg_strings'],
                                                      ''),
                                                     ('_get_value',
                                                      ['action', 'arg_string'],
                                                      ''),
                                                     ('_check_value', ['action', 'value'], ''),
                                                     ('format_usage', [], ''),
                                                     ('format_help', [], ''),
                                                     ('format_version', [], ''),
                                                     ('_get_formatter', [], ''),
                                                     ('print_usage', ['file=None'], ''),
                                                     ('print_help', ['file=None'], ''),
                                                     ('print_version', ['file=None'], ''),
                                                     ('_print_message',
                                                      ['message', 'file=None'],
                                                      ''),
                                                     ('exit', ['status=0', 'message=None'], ''),
                                                     ('error',
                                                      ['message'],
                                                      'error(message: string)\n\n        Prints a usage message incorporating the message to stderr and\n        exits.\n\n        If you override this in a subclass, it should not return -- it\n        should either exit or raise an exception.\n        ')],
                                         'properties': ['prog',
                                                        'usage',
                                                        'epilog',
                                                        'version',
                                                        'formatter_class',
                                                        'fromfile_prefix_chars',
                                                        'add_help',
                                                        '_positionals',
                                                        '_optionals',
                                                        '_subparsers']},
             'argparse.ArgumentTypeError': {'bases': ['Exception'],
                                            'constructor': [],
                                            'docstring': 'An error from trying to convert a command line string to a type.',
                                            'methods': [],
                                            'properties': []},
             'argparse.FileType': {'bases': ['object'],
                                   'constructor': ["mode='r'", 'bufsize=-1'],
                                   'docstring': "Factory for creating file object types\n\n    Instances of FileType are typically passed as type= arguments to the\n    ArgumentParser add_argument() method.\n\n    Keyword Arguments:\n        - mode -- A string indicating how the file is to be opened. Accepts the\n            same values as the builtin open() function.\n        - bufsize -- The file's desired buffer size. Accepts the same values as\n            the builtin open() function.\n    ",
                                   'methods': [('__call__', ['string'], ''),
                                               ('__repr__', [], '')],
                                   'properties': ['_mode', '_bufsize']},
             'argparse.HelpFormatter': {'bases': ['object'],
                                        'constructor': ['prog',
                                                        'indent_increment=2',
                                                        'max_help_position=24',
                                                        'width=None'],
                                        'docstring': 'Formatter for generating usage messages and argument help strings.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    ',
                                        'methods': [('_indent', [], ''),
                                                    ('_dedent', [], ''),
                                                    ('_add_item', ['func', 'args'], ''),
                                                    ('start_section', ['heading'], ''),
                                                    ('end_section', [], ''),
                                                    ('add_text', ['text'], ''),
                                                    ('add_usage',
                                                     ['usage',
                                                      'actions',
                                                      'groups',
                                                      'prefix=None'],
                                                     ''),
                                                    ('add_argument', ['action'], ''),
                                                    ('add_arguments', ['actions'], ''),
                                                    ('format_help', [], ''),
                                                    ('_join_parts', ['part_strings'], ''),
                                                    ('_format_usage',
                                                     ['usage', 'actions', 'groups', 'prefix'],
                                                     ''),
                                                    ('_format_actions_usage',
                                                     ['actions', 'groups'],
                                                     ''),
                                                    ('_format_text', ['text'], ''),
                                                    ('_format_action', ['action'], ''),
                                                    ('_format_action_invocation',
                                                     ['action'],
                                                     ''),
                                                    ('_metavar_formatter',
                                                     ['action', 'default_metavar'],
                                                     ''),
                                                    ('_format_args',
                                                     ['action', 'default_metavar'],
                                                     ''),
                                                    ('_expand_help', ['action'], ''),
                                                    ('_iter_indented_subactions',
                                                     ['action'],
                                                     ''),
                                                    ('_split_lines', ['text', 'width'], ''),
                                                    ('_fill_text',
                                                     ['text', 'width', 'indent'],
                                                     ''),
                                                    ('_get_help_string', ['action'], '')],
                                        'properties': ['_prog',
                                                       '_indent_increment',
                                                       '_max_help_position',
                                                       '_width',
                                                       '_current_indent',
                                                       '_level',
                                                       '_action_max_length',
                                                       '_root_section',
                                                       '_current_section',
                                                       '_whitespace_matcher',
                                                       '_long_break_matcher']},
             'argparse.Namespace': {'bases': ['gettext.gettextAttributeHolder'],
                                    'constructor': ['**kwargs'],
                                    'docstring': 'Simple object for storing attributes.\n\n    Implements equality by attribute names and values, and provides a simple\n    string representation.\n    ',
                                    'methods': [('__eq__', ['other'], ''),
                                                ('__ne__', ['other'], ''),
                                                ('__contains__', ['key'], '')],
                                    'properties': ['__hash__']},
             'argparse.RawDescriptionHelpFormatter': {'bases': ['argparse.HelpFormatter'],
                                                      'constructor': [],
                                                      'docstring': 'Help message formatter which retains any formatting in descriptions.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    ',
                                                      'methods': [('_fill_text',
                                                                   ['text', 'width', 'indent'],
                                                                   '')],
                                                      'properties': []},
             'argparse.RawTextHelpFormatter': {'bases': ['argparse.RawDescriptionHelpFormatter'],
                                               'constructor': [],
                                               'docstring': 'Help message formatter which retains formatting of all help text.\n\n    Only the name of this class is considered a public API. All the methods\n    provided by the class are considered an implementation detail.\n    ',
                                               'methods': [('_split_lines',
                                                            ['text', 'width'],
                                                            '')],
                                               'properties': []},
             'argparse._ActionsContainer': {'bases': ['object'],
                                            'constructor': ['description',
                                                            'prefix_chars',
                                                            'argument_default',
                                                            'conflict_handler'],
                                            'docstring': '',
                                            'methods': [('register',
                                                         ['registry_name', 'value', 'object'],
                                                         ''),
                                                        ('_registry_get',
                                                         ['registry_name',
                                                          'value',
                                                          'default=None'],
                                                         ''),
                                                        ('set_defaults', ['**kwargs'], ''),
                                                        ('get_default', ['dest'], ''),
                                                        ('add_argument',
                                                         ['*args', '**kwargs'],
                                                         '\n        add_argument(dest, ..., name=value, ...)\n        add_argument(option_string, option_string, ..., name=value, ...)\n        '),
                                                        ('add_argument_group',
                                                         ['*args', '**kwargs'],
                                                         ''),
                                                        ('add_mutually_exclusive_group',
                                                         ['**kwargs'],
                                                         ''),
                                                        ('_add_action', ['action'], ''),
                                                        ('_remove_action', ['action'], ''),
                                                        ('_add_container_actions',
                                                         ['container'],
                                                         ''),
                                                        ('_get_positional_kwargs',
                                                         ['dest', '**kwargs'],
                                                         ''),
                                                        ('_get_optional_kwargs',
                                                         ['*args', '**kwargs'],
                                                         ''),
                                                        ('_pop_action_class',
                                                         ['kwargs', 'default=None'],
                                                         ''),
                                                        ('_get_handler', [], ''),
                                                        ('_check_conflict', ['action'], ''),
                                                        ('_handle_conflict_error',
                                                         ['action', 'conflicting_actions'],
                                                         ''),
                                                        ('_handle_conflict_resolve',
                                                         ['action', 'conflicting_actions'],
                                                         '')],
                                            'properties': ['description',
                                                           'argument_default',
                                                           'prefix_chars',
                                                           'conflict_handler',
                                                           '_registries',
                                                           '_actions',
                                                           '_option_string_actions',
                                                           '_action_groups',
                                                           '_mutually_exclusive_groups',
                                                           '_defaults',
                                                           '_negative_number_matcher',
                                                           '_has_negative_number_optionals']},
             'argparse._AppendAction': {'bases': ['argparse.Action'],
                                        'constructor': ['option_strings',
                                                        'dest',
                                                        'nargs=None',
                                                        'const=None',
                                                        'default=None',
                                                        'type=None',
                                                        'choices=None',
                                                        'required=False',
                                                        'help=None',
                                                        'metavar=None'],
                                        'docstring': '',
                                        'methods': [('__call__',
                                                     ['parser',
                                                      'namespace',
                                                      'values',
                                                      'option_string=None'],
                                                     '')],
                                        'properties': []},
             'argparse._AppendConstAction': {'bases': ['argparse.Action'],
                                             'constructor': ['option_strings',
                                                             'dest',
                                                             'const',
                                                             'default=None',
                                                             'required=False',
                                                             'help=None',
                                                             'metavar=None'],
                                             'docstring': '',
                                             'methods': [('__call__',
                                                          ['parser',
                                                           'namespace',
                                                           'values',
                                                           'option_string=None'],
                                                          '')],
                                             'properties': []},
             'argparse._ArgumentGroup': {'bases': ['gettext.gettextActionsContainer'],
                                         'constructor': ['container',
                                                         'title=None',
                                                         'description=None',
                                                         '**kwargs'],
                                         'docstring': '',
                                         'methods': [('_add_action', ['action'], ''),
                                                     ('_remove_action', ['action'], '')],
                                         'properties': ['title',
                                                        '_group_actions',
                                                        '_registries',
                                                        '_actions',
                                                        '_option_string_actions',
                                                        '_defaults',
                                                        '_has_negative_number_optionals',
                                                        '_mutually_exclusive_groups']},
             'argparse._AttributeHolder': {'bases': ['object'],
                                           'constructor': [],
                                           'docstring': "Abstract base class that provides __repr__.\n\n    The __repr__ method returns a string in the format::\n        ClassName(attr=name, attr=name, ...)\n    The attributes are determined either by a class-level attribute,\n    '_kwarg_names', or by inspecting the instance __dict__.\n    ",
                                           'methods': [('__repr__', [], ''),
                                                       ('_get_kwargs', [], ''),
                                                       ('_get_args', [], '')],
                                           'properties': []},
             'argparse._CountAction': {'bases': ['argparse.Action'],
                                       'constructor': ['option_strings',
                                                       'dest',
                                                       'default=None',
                                                       'required=False',
                                                       'help=None'],
                                       'docstring': '',
                                       'methods': [('__call__',
                                                    ['parser',
                                                     'namespace',
                                                     'values',
                                                     'option_string=None'],
                                                    '')],
                                       'properties': []},
             'argparse._HelpAction': {'bases': ['argparse.Action'],
                                      'constructor': ['option_strings',
                                                      'dest=SUPPRESS',
                                                      'default=SUPPRESS',
                                                      'help=None'],
                                      'docstring': '',
                                      'methods': [('__call__',
                                                   ['parser',
                                                    'namespace',
                                                    'values',
                                                    'option_string=None'],
                                                   '')],
                                      'properties': []},
             'argparse._MutuallyExclusiveGroup': {'bases': ['gettext.gettextArgumentGroup'],
                                                  'constructor': ['container', 'required=False'],
                                                  'docstring': '',
                                                  'methods': [('_add_action', ['action'], ''),
                                                              ('_remove_action',
                                                               ['action'],
                                                               '')],
                                                  'properties': ['required', '_container']},
             'argparse._StoreAction': {'bases': ['argparse.Action'],
                                       'constructor': ['option_strings',
                                                       'dest',
                                                       'nargs=None',
                                                       'const=None',
                                                       'default=None',
                                                       'type=None',
                                                       'choices=None',
                                                       'required=False',
                                                       'help=None',
                                                       'metavar=None'],
                                       'docstring': '',
                                       'methods': [('__call__',
                                                    ['parser',
                                                     'namespace',
                                                     'values',
                                                     'option_string=None'],
                                                    '')],
                                       'properties': []},
             'argparse._StoreConstAction': {'bases': ['argparse.Action'],
                                            'constructor': ['option_strings',
                                                            'dest',
                                                            'const',
                                                            'default=None',
                                                            'required=False',
                                                            'help=None',
                                                            'metavar=None'],
                                            'docstring': '',
                                            'methods': [('__call__',
                                                         ['parser',
                                                          'namespace',
                                                          'values',
                                                          'option_string=None'],
                                                         '')],
                                            'properties': []},
             'argparse._StoreFalseAction': {'bases': ['gettext.gettextStoreConstAction'],
                                            'constructor': ['option_strings',
                                                            'dest',
                                                            'default=True',
                                                            'required=False',
                                                            'help=None'],
                                            'docstring': '',
                                            'methods': [],
                                            'properties': []},
             'argparse._StoreTrueAction': {'bases': ['gettext.gettextStoreConstAction'],
                                           'constructor': ['option_strings',
                                                           'dest',
                                                           'default=False',
                                                           'required=False',
                                                           'help=None'],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': []},
             'argparse._SubParsersAction': {'bases': ['argparse.Action'],
                                            'constructor': ['option_strings',
                                                            'prog',
                                                            'parser_class',
                                                            'dest=SUPPRESS',
                                                            'help=None',
                                                            'metavar=None'],
                                            'docstring': '',
                                            'methods': [('add_parser',
                                                         ['name', '**kwargs'],
                                                         ''),
                                                        ('_get_subactions', [], ''),
                                                        ('__call__',
                                                         ['parser',
                                                          'namespace',
                                                          'values',
                                                          'option_string=None'],
                                                         '')],
                                            'properties': ['_prog_prefix',
                                                           '_parser_class',
                                                           '_name_parser_map',
                                                           '_choices_actions']},
             'argparse._VersionAction': {'bases': ['argparse.Action'],
                                         'constructor': ['option_strings',
                                                         'version=None',
                                                         'dest=SUPPRESS',
                                                         'default=SUPPRESS',
                                                         'help="show program\'s version number and exit"'],
                                         'docstring': '',
                                         'methods': [('__call__',
                                                      ['parser',
                                                       'namespace',
                                                       'values',
                                                       'option_string=None'],
                                                      '')],
                                         'properties': ['version']},
             'ast.NodeTransformer': {'bases': ['ast.NodeVisitor'],
                                     'constructor': [],
                                     'docstring': "\n    A :class:`NodeVisitor` subclass that walks the abstract syntax tree and\n    allows modification of nodes.\n\n    The `NodeTransformer` will walk the AST and use the return value of the\n    visitor methods to replace or remove the old node.  If the return value of\n    the visitor method is ``None``, the node will be removed from its location,\n    otherwise it is replaced with the return value.  The return value may be the\n    original node in which case no replacement takes place.\n\n    Here is an example transformer that rewrites all occurrences of name lookups\n    (``foo``) to ``data['foo']``::\n\n       class RewriteName(NodeTransformer):\n\n           def visit_Name(self, node):\n               return copy_location(Subscript(\n                   value=Name(id='data', ctx=Load()),\n                   slice=Index(value=Str(s=node.id)),\n                   ctx=node.ctx\n               ), node)\n\n    Keep in mind that if the node you're operating on has child nodes you must\n    either transform the child nodes yourself or call the :meth:`generic_visit`\n    method for the node first.\n\n    For nodes that were part of a collection of statements (that applies to all\n    statement nodes), the visitor may also return a list of nodes rather than\n    just a single node.\n\n    Usually you use the transformer like this::\n\n       node = YourTransformer().visit(node)\n    ",
                                     'methods': [('generic_visit', ['node'], '')],
                                     'properties': []},
             'ast.NodeVisitor': {'bases': ['object'],
                                 'constructor': [],
                                 'docstring': "\n    A node visitor base class that walks the abstract syntax tree and calls a\n    visitor function for every node found.  This function may return a value\n    which is forwarded by the `visit` method.\n\n    This class is meant to be subclassed, with the subclass adding visitor\n    methods.\n\n    Per default the visitor functions for the nodes are ``'visit_'`` +\n    class name of the node.  So a `TryFinally` node visit function would\n    be `visit_TryFinally`.  This behavior can be changed by overriding\n    the `visit` method.  If no visitor function exists for a node\n    (return value `None`) the `generic_visit` visitor is used instead.\n\n    Don't use the `NodeVisitor` if you want to apply changes to nodes during\n    traversing.  For this a special visitor exists (`NodeTransformer`) that\n    allows modifications.\n    ",
                                 'methods': [('visit', ['node'], 'Visit a node.'),
                                             ('generic_visit',
                                              ['node'],
                                              'Called if no explicit visitor function exists for a node.')],
                                 'properties': []},
             'asynchat.async_chat': {'bases': ['asyncore.dispatcher'],
                                     'constructor': ['sock=None', 'map=None'],
                                     'docstring': 'This is an abstract class.  You must derive from this class, and add\n    the two methods collect_incoming_data() and found_terminator()',
                                     'methods': [('collect_incoming_data', ['data'], ''),
                                                 ('_collect_incoming_data', ['data'], ''),
                                                 ('_get_data', [], ''),
                                                 ('found_terminator', [], ''),
                                                 ('set_terminator',
                                                  ['term'],
                                                  'Set the input delimiter.  Can be a fixed string of any length, an integer, or None'),
                                                 ('get_terminator', [], ''),
                                                 ('handle_read', [], ''),
                                                 ('handle_write', [], ''),
                                                 ('handle_close', [], ''),
                                                 ('push', ['data'], ''),
                                                 ('push_with_producer', ['producer'], ''),
                                                 ('readable',
                                                  [],
                                                  'predicate for inclusion in the readable for select()'),
                                                 ('writable',
                                                  [],
                                                  'predicate for inclusion in the writable for select()'),
                                                 ('close_when_done',
                                                  [],
                                                  'automatically close this channel once the outgoing queue is empty'),
                                                 ('initiate_send', [], ''),
                                                 ('discard_buffers', [], '')],
                                     'properties': ['ac_in_buffer_size',
                                                    'ac_out_buffer_size',
                                                    'ac_in_buffer',
                                                    'incoming',
                                                    'producer_fifo',
                                                    'terminator']},
             'asynchat.fifo': {'bases': [],
                               'constructor': ['list=None'],
                               'docstring': '',
                               'methods': [('__len__', [], ''),
                                           ('is_empty', [], ''),
                                           ('first', [], ''),
                                           ('push', ['data'], ''),
                                           ('pop', [], '')],
                               'properties': ['list']},
             'asynchat.simple_producer': {'bases': [],
                                          'constructor': ['data', 'buffer_size=512'],
                                          'docstring': '',
                                          'methods': [('more', [], '')],
                                          'properties': ['data', 'buffer_size']},
             'asyncore.ExitNow': {'bases': ['Exception'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [],
                                  'properties': []},
             'asyncore.dispatcher': {'bases': [],
                                     'constructor': ['sock=None', 'map=None'],
                                     'docstring': '',
                                     'methods': [('__repr__', [], ''),
                                                 ('add_channel', ['map=None'], ''),
                                                 ('del_channel', ['map=None'], ''),
                                                 ('create_socket', ['family', 'type'], ''),
                                                 ('set_socket', ['sock', 'map=None'], ''),
                                                 ('set_reuse_addr', [], ''),
                                                 ('readable', [], ''),
                                                 ('writable', [], ''),
                                                 ('listen', ['num'], ''),
                                                 ('bind', ['addr'], ''),
                                                 ('connect', ['address'], ''),
                                                 ('accept', [], ''),
                                                 ('send', ['data'], ''),
                                                 ('recv', ['buffer_size'], ''),
                                                 ('close', [], ''),
                                                 ('__getattr__', ['attr'], ''),
                                                 ('log', ['message'], ''),
                                                 ('log_info', ['message', "type='info'"], ''),
                                                 ('handle_read_event', [], ''),
                                                 ('handle_connect_event', [], ''),
                                                 ('handle_write_event', [], ''),
                                                 ('handle_expt_event', [], ''),
                                                 ('handle_error', [], ''),
                                                 ('handle_expt', [], ''),
                                                 ('handle_read', [], ''),
                                                 ('handle_write', [], ''),
                                                 ('handle_connect', [], ''),
                                                 ('handle_accept', [], ''),
                                                 ('handle_close', [], '')],
                                     'properties': ['debug',
                                                    'connected',
                                                    'accepting',
                                                    'closing',
                                                    'addr',
                                                    'ignore_log_types',
                                                    '_map',
                                                    '_fileno',
                                                    'socket',
                                                    '__str__',
                                                    'family_and_type']},
             'asyncore.dispatcher_with_send': {'bases': ['asyncore.dispatcher'],
                                               'constructor': ['sock=None', 'map=None'],
                                               'docstring': '',
                                               'methods': [('initiate_send', [], ''),
                                                           ('handle_write', [], ''),
                                                           ('writable', [], ''),
                                                           ('send', ['data'], '')],
                                               'properties': ['out_buffer']},
             'asyncore.file_dispatcher': {'bases': ['asyncore.dispatcher'],
                                          'constructor': ['fd', 'map=None'],
                                          'docstring': '',
                                          'methods': [('set_file', ['fd'], '')],
                                          'properties': ['connected', 'socket', '_fileno']},
             'asyncore.file_wrapper': {'bases': [],
                                       'constructor': ['fd'],
                                       'docstring': '',
                                       'methods': [('recv', ['*args'], ''),
                                                   ('send', ['*args'], ''),
                                                   ('getsockopt',
                                                    ['level', 'optname', 'buflen=None'],
                                                    ''),
                                                   ('close', [], ''),
                                                   ('fileno', [], '')],
                                       'properties': ['fd', 'read', 'write']},
             'audiodev.Play_Audio_sgi': {'bases': [],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('initclass', [], ''),
                                                     ('__del__', [], ''),
                                                     ('wait', [], ''),
                                                     ('stop', [], ''),
                                                     ('setoutrate', ['rate'], ''),
                                                     ('setsampwidth', ['width'], ''),
                                                     ('setnchannels', ['nchannels'], ''),
                                                     ('writeframes', ['data'], ''),
                                                     ('getfilled', [], ''),
                                                     ('getfillable', [], ''),
                                                     ('ulaw2lin', ['data'], '')],
                                         'properties': ['classinited',
                                                        'frameratelist',
                                                        'nchannelslist',
                                                        'sampwidthlist',
                                                        'oldparams',
                                                        'params',
                                                        'config',
                                                        'inited_outrate',
                                                        'inited_width',
                                                        'inited_nchannels',
                                                        'converter',
                                                        'port']},
             'audiodev.Play_Audio_sun': {'bases': [],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('__del__', [], ''),
                                                     ('setoutrate', ['rate'], ''),
                                                     ('setsampwidth', ['width'], ''),
                                                     ('setnchannels', ['nchannels'], ''),
                                                     ('writeframes', ['data'], ''),
                                                     ('wait', [], ''),
                                                     ('stop', [], ''),
                                                     ('getfilled', [], '')],
                                         'properties': ['outrate',
                                                        'sampwidth',
                                                        'nchannels',
                                                        'inited_outrate',
                                                        'inited_width',
                                                        'inited_nchannels',
                                                        'converter',
                                                        'port',
                                                        'o_encoding']},
             'audiodev.error': {'bases': ['Exception'],
                                'constructor': [],
                                'docstring': '',
                                'methods': [],
                                'properties': []},
             'bdb.Bdb': {'bases': [],
                         'constructor': ['skip=None'],
                         'docstring': 'Generic Python debugger base class.\n\n    This class takes care of details of the trace facility;\n    a derived class should implement user interaction.\n    The standard debugger class (pdb.Pdb) is an example.\n    ',
                         'methods': [('canonic', ['filename'], ''),
                                     ('reset', [], ''),
                                     ('trace_dispatch', ['frame', 'event', 'arg'], ''),
                                     ('dispatch_line', ['frame'], ''),
                                     ('dispatch_call', ['frame', 'arg'], ''),
                                     ('dispatch_return', ['frame', 'arg'], ''),
                                     ('dispatch_exception', ['frame', 'arg'], ''),
                                     ('is_skipped_module', ['module_name'], ''),
                                     ('stop_here', ['frame'], ''),
                                     ('break_here', ['frame'], ''),
                                     ('do_clear', ['arg'], ''),
                                     ('break_anywhere', ['frame'], ''),
                                     ('user_call',
                                      ['frame', 'argument_list'],
                                      'This method is called when there is the remote possibility\n        that we ever need to stop in this function.'),
                                     ('user_line',
                                      ['frame'],
                                      'This method is called when we stop or break at this line.'),
                                     ('user_return',
                                      ['frame', 'return_value'],
                                      'This method is called when a return trap is set here.'),
                                     ('user_exception', ['frame', 'exc_info'], ''),
                                     ('_set_stopinfo',
                                      ['stopframe', 'returnframe', 'stoplineno=0'],
                                      ''),
                                     ('set_until',
                                      ['frame'],
                                      'Stop when the line with the line no greater than the current one is\n        reached or when returning from current frame'),
                                     ('set_step', [], 'Stop after one line of code.'),
                                     ('set_next',
                                      ['frame'],
                                      'Stop on the next line in or below the given frame.'),
                                     ('set_return',
                                      ['frame'],
                                      'Stop when returning from the given frame.'),
                                     ('set_trace',
                                      ['frame=None'],
                                      "Start debugging from `frame`.\n\n        If frame is not specified, debugging starts from caller's frame.\n        "),
                                     ('set_continue', [], ''),
                                     ('set_quit', [], ''),
                                     ('set_break',
                                      ['filename',
                                       'lineno',
                                       'temporary=0',
                                       'cond=None',
                                       'funcname=None'],
                                      ''),
                                     ('_prune_breaks', ['filename', 'lineno'], ''),
                                     ('clear_break', ['filename', 'lineno'], ''),
                                     ('clear_bpbynumber', ['arg'], ''),
                                     ('clear_all_file_breaks', ['filename'], ''),
                                     ('clear_all_breaks', [], ''),
                                     ('get_break', ['filename', 'lineno'], ''),
                                     ('get_breaks', ['filename', 'lineno'], ''),
                                     ('get_file_breaks', ['filename'], ''),
                                     ('get_all_breaks', [], ''),
                                     ('get_stack', ['f', 't'], ''),
                                     ('format_stack_entry',
                                      ['frame_lineno', "lprefix=': '"],
                                      ''),
                                     ('run', ['cmd', 'globals=None', 'locals=None'], ''),
                                     ('runeval', ['expr', 'globals=None', 'locals=None'], ''),
                                     ('runctx', ['cmd', 'globals', 'locals'], ''),
                                     ('runcall', ['func', '*args', '**kwds'], '')],
                         'properties': ['skip',
                                        'breaks',
                                        'fncache',
                                        'botframe',
                                        'currentbp',
                                        'stopframe',
                                        'returnframe',
                                        'quitting',
                                        'stoplineno']},
             'bdb.BdbQuit': {'bases': ['Exception'],
                             'constructor': [],
                             'docstring': 'Exception to give up completely',
                             'methods': [],
                             'properties': []},
             'bdb.Breakpoint': {'bases': [],
                                'constructor': ['file',
                                                'line',
                                                'temporary=0',
                                                'cond=None',
                                                'funcname=None'],
                                'docstring': 'Breakpoint class\n\n    Implements temporary breakpoints, ignore counts, disabling and\n    (re)-enabling, and conditionals.\n\n    Breakpoints are indexed by number through bpbynumber and by\n    the file,line tuple using bplist.  The former points to a\n    single instance of class Breakpoint.  The latter points to a\n    list of such instances since there may be more than one\n    breakpoint per line.\n\n    ',
                                'methods': [('deleteMe', [], ''),
                                            ('enable', [], ''),
                                            ('disable', [], ''),
                                            ('bpprint', ['out=None'], '')],
                                'properties': ['next',
                                               'bplist',
                                               'bpbynumber',
                                               'funcname',
                                               'func_first_executable_line',
                                               'file',
                                               'line',
                                               'temporary',
                                               'cond',
                                               'enabled',
                                               'ignore',
                                               'hits',
                                               'number']},
             'bdb.Tdb': {'bases': ['bdb.Bdb'],
                         'constructor': [],
                         'docstring': '',
                         'methods': [('user_call', ['frame', 'args'], ''),
                                     ('user_line', ['frame'], ''),
                                     ('user_return', ['frame', 'retval'], ''),
                                     ('user_exception', ['frame', 'exc_stuff'], '')],
                         'properties': []},
             'binhex.BinHex': {'bases': [],
                               'constructor': ['name_finfo_dlen_rlen', 'ofp'],
                               'docstring': '',
                               'methods': [('_writeinfo', ['name', 'finfo'], ''),
                                           ('_write', ['data'], ''),
                                           ('_writecrc', [], ''),
                                           ('write', ['data'], ''),
                                           ('close_data', [], ''),
                                           ('write_rsrc', ['data'], ''),
                                           ('close', [], '')],
                               'properties': ['ofp', 'crc', 'dlen', 'rlen', 'state']},
             'binhex.Error': {'bases': ['Exception'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': []},
             'binhex.FInfo': {'bases': [],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': ['Type', 'Creator', 'Flags']},
             'binhex.HexBin': {'bases': [],
                               'constructor': ['ifp'],
                               'docstring': '',
                               'methods': [('_read', ['len'], ''),
                                           ('_checkcrc', [], ''),
                                           ('_readheader', [], ''),
                                           ('read', ['*n'], ''),
                                           ('close_data', [], ''),
                                           ('read_rsrc', ['*n'], ''),
                                           ('close', [], '')],
                               'properties': ['ifp',
                                              'crc',
                                              'dlen',
                                              'rlen',
                                              'FName',
                                              'FInfo',
                                              'state']},
             'binhex._Hqxcoderengine': {'bases': [],
                                        'constructor': ['ofp'],
                                        'docstring': 'Write data to the coder in 3-byte chunks',
                                        'methods': [('write', ['data'], ''),
                                                    ('_flush', ['force'], ''),
                                                    ('close', [], '')],
                                        'properties': ['ofp', 'data', 'hqxdata', 'linelen']},
             'binhex._Hqxdecoderengine': {'bases': [],
                                          'constructor': ['ifp'],
                                          'docstring': 'Read data via the decoder in 4-byte chunks',
                                          'methods': [('read',
                                                       ['totalwtd'],
                                                       'Read at least wtd bytes (or until EOF)'),
                                                      ('close', [], '')],
                                          'properties': ['ifp', 'eof']},
             'binhex._Rlecoderengine': {'bases': [],
                                        'constructor': ['ofp'],
                                        'docstring': 'Write data to the RLE-coder in suitably large chunks',
                                        'methods': [('write', ['data'], ''), ('close', [], '')],
                                        'properties': ['ofp', 'data']},
             'binhex._Rledecoderengine': {'bases': [],
                                          'constructor': ['ifp'],
                                          'docstring': 'Read data via the RLE-coder',
                                          'methods': [('read', ['wtd'], ''),
                                                      ('_fill', ['wtd'], ''),
                                                      ('close', [], '')],
                                          'properties': ['ifp',
                                                         'pre_buffer',
                                                         'post_buffer',
                                                         'eof']},
             'binhex.openrsrc': {'bases': [],
                                 'constructor': ['*args'],
                                 'docstring': '',
                                 'methods': [('read', ['*args'], ''),
                                             ('write', ['*args'], ''),
                                             ('close', [], '')],
                                 'properties': []},
             'cProfile.Profile': {'bases': ['_lsprof.Profiler'],
                                  'constructor': [],
                                  'docstring': 'Profile(custom_timer=None, time_unit=None, subcalls=True, builtins=True)\n\n    Builds a profiler object using the specified timer function.\n    The default timer is a fast built-in one based on real time.\n    For custom timer functions returning integers, time_unit can\n    be a float specifying a scale (i.e. how long each integer unit\n    is, in seconds).\n    ',
                                  'methods': [('print_stats', ['sort=-1'], ''),
                                              ('dump_stats', ['file'], ''),
                                              ('create_stats', [], ''),
                                              ('snapshot_stats', [], ''),
                                              ('run', ['cmd'], ''),
                                              ('runctx', ['cmd', 'globals', 'locals'], ''),
                                              ('runcall', ['func', '*args', '**kw'], '')],
                                  'properties': ['stats']},
             'calendar.Calendar': {'bases': ['object'],
                                   'constructor': ['firstweekday=0'],
                                   'docstring': "\n    Base calendar class. This class doesn't do any formatting. It simply\n    provides data to subclasses.\n    ",
                                   'methods': [('getfirstweekday', [], ''),
                                               ('setfirstweekday', ['firstweekday'], ''),
                                               ('iterweekdays',
                                                [],
                                                '\n        Return a iterator for one week of weekday numbers starting with the\n        configured first one.\n        '),
                                               ('itermonthdates',
                                                ['year', 'month'],
                                                '\n        Return an iterator for one month. The iterator will yield datetime.date\n        values and will always iterate through complete weeks, so it will yield\n        dates outside the specified month.\n        '),
                                               ('itermonthdays2',
                                                ['year', 'month'],
                                                '\n        Like itermonthdates(), but will yield (day number, weekday number)\n        tuples. For days outside the specified month the day number is 0.\n        '),
                                               ('itermonthdays',
                                                ['year', 'month'],
                                                '\n        Like itermonthdates(), but will yield day numbers. For days outside\n        the specified month the day number is 0.\n        '),
                                               ('monthdatescalendar',
                                                ['year', 'month'],
                                                "\n        Return a matrix (list of lists) representing a month's calendar.\n        Each row represents a week; week entries are datetime.date values.\n        "),
                                               ('monthdays2calendar',
                                                ['year', 'month'],
                                                "\n        Return a matrix representing a month's calendar.\n        Each row represents a week; week entries are\n        (day number, weekday number) tuples. Day numbers outside this month\n        are zero.\n        "),
                                               ('monthdayscalendar',
                                                ['year', 'month'],
                                                "\n        Return a matrix representing a month's calendar.\n        Each row represents a week; days outside this month are zero.\n        "),
                                               ('yeardatescalendar',
                                                ['year', 'width=3'],
                                                '\n        Return the data for the specified year ready for formatting. The return\n        value is a list of month rows. Each month row contains upto width months.\n        Each month contains between 4 and 6 weeks and each week contains 1-7\n        days. Days are datetime.date objects.\n        '),
                                               ('yeardays2calendar',
                                                ['year', 'width=3'],
                                                '\n        Return the data for the specified year ready for formatting (similar to\n        yeardatescalendar()). Entries in the week lists are\n        (day number, weekday number) tuples. Day numbers outside this month are\n        zero.\n        '),
                                               ('yeardayscalendar',
                                                ['year', 'width=3'],
                                                '\n        Return the data for the specified year ready for formatting (similar to\n        yeardatescalendar()). Entries in the week lists are day numbers.\n        Day numbers outside this month are zero.\n        ')],
                                   'properties': ['firstweekday', '_firstweekday']},
             'calendar.HTMLCalendar': {'bases': ['calendar.Calendar'],
                                       'constructor': [],
                                       'docstring': '\n    This calendar returns complete HTML pages.\n    ',
                                       'methods': [('formatday',
                                                    ['day', 'weekday'],
                                                    '\n        Return a day as a table cell.\n        '),
                                                   ('formatweek',
                                                    ['theweek'],
                                                    '\n        Return a complete week as a table row.\n        '),
                                                   ('formatweekday',
                                                    ['day'],
                                                    '\n        Return a weekday name as a table header.\n        '),
                                                   ('formatweekheader',
                                                    [],
                                                    '\n        Return a header for a week as a table row.\n        '),
                                                   ('formatmonthname',
                                                    ['theyear', 'themonth', 'withyear=True'],
                                                    '\n        Return a month name as a table row.\n        '),
                                                   ('formatmonth',
                                                    ['theyear', 'themonth', 'withyear=True'],
                                                    '\n        Return a formatted month as a table.\n        '),
                                                   ('formatyear',
                                                    ['theyear', 'width=3'],
                                                    '\n        Return a formatted year as a table of tables.\n        '),
                                                   ('formatyearpage',
                                                    ['theyear',
                                                     'width=3',
                                                     "css='calendar.css'",
                                                     'encoding=None'],
                                                    '\n        Return a formatted year as a complete HTML page.\n        ')],
                                       'properties': ['cssclasses']},
             'calendar.IllegalMonthError': {'bases': ['ValueError'],
                                            'constructor': ['month'],
                                            'docstring': '',
                                            'methods': [('__str__', [], '')],
                                            'properties': ['month']},
             'calendar.IllegalWeekdayError': {'bases': ['ValueError'],
                                              'constructor': ['weekday'],
                                              'docstring': '',
                                              'methods': [('__str__', [], '')],
                                              'properties': ['weekday']},
             'calendar.LocaleHTMLCalendar': {'bases': ['calendar.HTMLCalendar'],
                                             'constructor': ['firstweekday=0', 'locale=None'],
                                             'docstring': '\n    This class can be passed a locale name in the constructor and will return\n    month and weekday names in the specified locale. If this locale includes\n    an encoding all strings containing month and weekday names will be returned\n    as unicode.\n    ',
                                             'methods': [('formatweekday', ['day'], ''),
                                                         ('formatmonthname',
                                                          ['theyear',
                                                           'themonth',
                                                           'withyear=True'],
                                                          '')],
                                             'properties': ['locale']},
             'calendar.LocaleTextCalendar': {'bases': ['calendar.TextCalendar'],
                                             'constructor': ['firstweekday=0', 'locale=None'],
                                             'docstring': '\n    This class can be passed a locale name in the constructor and will return\n    month and weekday names in the specified locale. If this locale includes\n    an encoding all strings containing month and weekday names will be returned\n    as unicode.\n    ',
                                             'methods': [('formatweekday',
                                                          ['day', 'width'],
                                                          ''),
                                                         ('formatmonthname',
                                                          ['theyear',
                                                           'themonth',
                                                           'width',
                                                           'withyear=True'],
                                                          '')],
                                             'properties': ['locale']},
             'calendar.TextCalendar': {'bases': ['calendar.Calendar'],
                                       'constructor': [],
                                       'docstring': '\n    Subclass of Calendar that outputs a calendar as a simple plain text\n    similar to the UNIX program cal.\n    ',
                                       'methods': [('prweek',
                                                    ['theweek', 'width'],
                                                    '\n        Print a single week (no newline).\n        '),
                                                   ('formatday',
                                                    ['day', 'weekday', 'width'],
                                                    '\n        Returns a formatted day.\n        '),
                                                   ('formatweek',
                                                    ['theweek', 'width'],
                                                    '\n        Returns a single week in a string (no newline).\n        '),
                                                   ('formatweekday',
                                                    ['day', 'width'],
                                                    '\n        Returns a formatted week day name.\n        '),
                                                   ('formatweekheader',
                                                    ['width'],
                                                    '\n        Return a header for a week.\n        '),
                                                   ('formatmonthname',
                                                    ['theyear',
                                                     'themonth',
                                                     'width',
                                                     'withyear=True'],
                                                    '\n        Return a formatted month name.\n        '),
                                                   ('prmonth',
                                                    ['theyear', 'themonth', 'w=0', 'l=0'],
                                                    "\n        Print a month's calendar.\n        "),
                                                   ('formatmonth',
                                                    ['theyear', 'themonth', 'w=0', 'l=0'],
                                                    "\n        Return a month's calendar string (multi-line).\n        "),
                                                   ('formatyear',
                                                    ['theyear', 'w=2', 'l=1', 'c=6', 'm=3'],
                                                    "\n        Returns a year's calendar as a multi-line string.\n        "),
                                                   ('pryear',
                                                    ['theyear', 'w=0', 'l=0', 'c=6', 'm=3'],
                                                    "Print a year's calendar.")],
                                       'properties': []},
             'calendar.TimeEncoding': {'bases': [],
                                       'constructor': ['locale'],
                                       'docstring': '',
                                       'methods': [('__enter__', [], ''),
                                                   ('__exit__', ['*args'], '')],
                                       'properties': ['locale', 'oldlocale']},
             'calendar._localized_day': {'bases': [],
                                         'constructor': ['format'],
                                         'docstring': '',
                                         'methods': [('__getitem__', ['i'], ''),
                                                     ('__len__', [], '')],
                                         'properties': ['_days', 'i', 'format']},
             'calendar._localized_month': {'bases': [],
                                           'constructor': ['format'],
                                           'docstring': '',
                                           'methods': [('__getitem__', ['i'], ''),
                                                       ('__len__', [], '')],
                                           'properties': ['_months', 'i', 'format']},
             'cgi.FieldStorage': {'bases': [],
                                  'constructor': ['fp=None',
                                                  'headers=None',
                                                  "outerboundary=''",
                                                  'environ=os.environ',
                                                  'keep_blank_values=0',
                                                  'strict_parsing=0'],
                                  'docstring': "Store a sequence of fields, reading multipart/form-data.\n\n    This class provides naming, typing, files stored on disk, and\n    more.  At the top level, it is accessible like a dictionary, whose\n    keys are the field names.  (Note: None can occur as a field name.)\n    The items are either a Python list (if there's multiple values) or\n    another FieldStorage or MiniFieldStorage object.  If it's a single\n    object, it has the following attributes:\n\n    name: the field name, if specified; otherwise None\n\n    filename: the filename, if specified; otherwise None; this is the\n        client side filename, *not* the file name on which it is\n        stored (that's a temporary file you don't deal with)\n\n    value: the value as a *string*; for file uploads, this\n        transparently reads the file every time you request the value\n\n    file: the file(-like) object from which you can read the data;\n        None if the data is stored a simple string\n\n    type: the content-type, or None if not specified\n\n    type_options: dictionary of options specified on the content-type\n        line\n\n    disposition: content-disposition, or None if not specified\n\n    disposition_options: dictionary of corresponding options\n\n    headers: a dictionary(-like) object (sometimes rfc822.Message or a\n        subclass thereof) containing *all* headers\n\n    The class is subclassable, mostly for the purpose of overriding\n    the make_file() method, which is called internally to come up with\n    a file open for reading and writing.  This makes it possible to\n    override the default choice of storing all files in a temporary\n    directory and unlinking them as soon as they have been opened.\n\n    ",
                                  'methods': [('__repr__',
                                               [],
                                               'Return a printable representation.'),
                                              ('__iter__', [], ''),
                                              ('__getattr__', ['name'], ''),
                                              ('__getitem__',
                                               ['key'],
                                               'Dictionary style indexing.'),
                                              ('getvalue',
                                               ['key', 'default=None'],
                                               "Dictionary style get() method, including 'value' lookup."),
                                              ('getfirst',
                                               ['key', 'default=None'],
                                               ' Return the first value received.'),
                                              ('getlist',
                                               ['key'],
                                               ' Return list of received values.'),
                                              ('keys', [], 'Dictionary style keys() method.'),
                                              ('has_key',
                                               ['key'],
                                               'Dictionary style has_key() method.'),
                                              ('__contains__',
                                               ['key'],
                                               'Dictionary style __contains__ method.'),
                                              ('__len__',
                                               [],
                                               'Dictionary style len(x) support.'),
                                              ('__nonzero__', [], ''),
                                              ('read_urlencoded',
                                               [],
                                               'Internal: read data in query string format.'),
                                              ('read_multi',
                                               ['environ',
                                                'keep_blank_values',
                                                'strict_parsing'],
                                               'Internal: read a part that is itself multipart.'),
                                              ('read_single',
                                               [],
                                               'Internal: read an atomic part.'),
                                              ('read_binary',
                                               [],
                                               'Internal: read binary data.'),
                                              ('read_lines',
                                               [],
                                               'Internal: read lines until EOF or outerboundary.'),
                                              ('__write', ['line'], ''),
                                              ('read_lines_to_eof',
                                               [],
                                               'Internal: read lines until EOF.'),
                                              ('read_lines_to_outerboundary',
                                               [],
                                               'Internal: read lines until outerboundary.'),
                                              ('skip_lines',
                                               [],
                                               'Internal: skip lines until outer boundary if defined.'),
                                              ('make_file',
                                               ['binary=None'],
                                               "Overridable: return a readable & writable file.\n\n        The file will be used as follows:\n        - data is written to it\n        - seek(0)\n        - data is read from it\n\n        The 'binary' argument is unused -- the file is always opened\n        in binary mode.\n\n        This version opens a temporary file for reading and writing,\n        and immediately deletes (unlinks) it.  The trick (on Unix!) is\n        that the file can still be used, but it can't be opened by\n        another process, and it will automatically be deleted when it\n        is closed or when the current process terminates.\n\n        If you want a more permanent file, you derive a class which\n        overrides this method.  If you want a visible temporary file\n        that is nevertheless automatically deleted when the script\n        terminates, try defining a __del__ method in a derived class\n        which unlinks the temporary files you have created.\n\n        ")],
                                  'properties': ['keep_blank_values',
                                                 'strict_parsing',
                                                 'qs_on_post',
                                                 'fp',
                                                 'headers',
                                                 'outerboundary',
                                                 'disposition',
                                                 'disposition_options',
                                                 'name',
                                                 'filename',
                                                 'type',
                                                 'type_options',
                                                 'innerboundary',
                                                 'length',
                                                 'list',
                                                 'file',
                                                 'done',
                                                 'FieldStorageClass',
                                                 'bufsize',
                                                 '__file']},
             'cgi.FormContent': {'bases': ['cgi.FormContentDict'],
                                 'constructor': [],
                                 'docstring': 'This class is present for backwards compatibility only.',
                                 'methods': [('values', ['key'], ''),
                                             ('indexed_value', ['key', 'location'], ''),
                                             ('value', ['key'], ''),
                                             ('length', ['key'], ''),
                                             ('stripped', ['key'], ''),
                                             ('pars', [], '')],
                                 'properties': []},
             'cgi.FormContentDict': {'bases': ['UserDict.UserDict'],
                                     'constructor': ['environ=os.environ',
                                                     'keep_blank_values=0',
                                                     'strict_parsing=0'],
                                     'docstring': 'Form content as dictionary with a list of values per field.\n\n    form = FormContentDict()\n\n    form[key] -> [value, value, ...]\n    key in form -> Boolean\n    form.keys() -> [key, key, ...]\n    form.values() -> [[val, val, ...], [val, val, ...], ...]\n    form.items() ->  [(key, [val, val, ...]), (key, [val, val, ...]), ...]\n    form.dict == {key: [val, val, ...], ...}\n\n    ',
                                     'methods': [],
                                     'properties': ['dict', 'data', 'query_string']},
             'cgi.InterpFormContentDict': {'bases': ['cgi.SvFormContentDict'],
                                           'constructor': [],
                                           'docstring': 'This class is present for backwards compatibility only.',
                                           'methods': [('__getitem__', ['key'], ''),
                                                       ('values', [], ''),
                                                       ('items', [], '')],
                                           'properties': []},
             'cgi.MiniFieldStorage': {'bases': [],
                                      'constructor': ['name', 'value'],
                                      'docstring': 'Like FieldStorage, for use when no file uploads are possible.',
                                      'methods': [('__repr__',
                                                   [],
                                                   'Return printable representation.')],
                                      'properties': ['filename',
                                                     'list',
                                                     'type',
                                                     'file',
                                                     'type_options',
                                                     'disposition',
                                                     'disposition_options',
                                                     'headers',
                                                     'name',
                                                     'value']},
             'cgi.SvFormContentDict': {'bases': ['cgi.FormContentDict'],
                                       'constructor': [],
                                       'docstring': 'Form content as dictionary expecting a single value per field.\n\n    If you only expect a single value for each field, then form[key]\n    will return that single value.  It will raise an IndexError if\n    that expectation is not true.  If you expect a field to have\n    possible multiple values, than you can use form.getlist(key) to\n    get all of the values.  values() and items() are a compromise:\n    they return single strings where there is a single value, and\n    lists of strings otherwise.\n\n    ',
                                       'methods': [('__getitem__', ['key'], ''),
                                                   ('getlist', ['key'], ''),
                                                   ('values', [], ''),
                                                   ('items', [], '')],
                                       'properties': []},
             'cgitb.Hook': {'bases': [],
                            'constructor': ['display=1',
                                            'logdir=None',
                                            'context=5',
                                            'file=None',
                                            "format='html'"],
                            'docstring': 'A hook to replace sys.excepthook that shows tracebacks in HTML.',
                            'methods': [('__call__', ['etype', 'evalue', 'etb'], ''),
                                        ('handle', ['info=None'], '')],
                            'properties': ['display', 'logdir', 'context', 'file', 'format']},
             'chunk.Chunk': {'bases': [],
                             'constructor': ['file',
                                             'align=True',
                                             'bigendian=True',
                                             'inclheader=False'],
                             'docstring': '',
                             'methods': [('getname',
                                          [],
                                          'Return the name (ID) of the current chunk.'),
                                         ('getsize',
                                          [],
                                          'Return the size of the current chunk.'),
                                         ('close', [], ''),
                                         ('isatty', [], ''),
                                         ('seek',
                                          ['pos', 'whence=0'],
                                          'Seek to specified position into the chunk.\n        Default position is 0 (start of chunk).\n        If the file is not seekable, this will result in an error.\n        '),
                                         ('tell', [], ''),
                                         ('read',
                                          ['size=-1'],
                                          'Read at most size bytes from the chunk.\n        If size is omitted or negative, read until the end\n        of the chunk.\n        '),
                                         ('skip',
                                          [],
                                          'Skip the rest of the chunk.\n        If you are not interested in the contents of the chunk,\n        this method should be called so that the file points to\n        the start of the next chunk.\n        ')],
                             'properties': ['closed',
                                            'align',
                                            'file',
                                            'chunkname',
                                            'chunksize',
                                            'size_read',
                                            'offset',
                                            'seekable']},
             'cmd.Cmd': {'bases': [],
                         'constructor': ["completekey='tab'", 'stdin=None', 'stdout=None'],
                         'docstring': "A simple framework for writing line-oriented command interpreters.\n\n    These are often useful for test harnesses, administrative tools, and\n    prototypes that will later be wrapped in a more sophisticated interface.\n\n    A Cmd instance or subclass instance is a line-oriented interpreter\n    framework.  There is no good reason to instantiate Cmd itself; rather,\n    it's useful as a superclass of an interpreter class you define yourself\n    in order to inherit Cmd's methods and encapsulate action methods.\n\n    ",
                         'methods': [('cmdloop',
                                      ['intro=None'],
                                      'Repeatedly issue a prompt, accept input, parse an initial prefix\n        off the received input, and dispatch to action methods, passing them\n        the remainder of the line as argument.\n\n        '),
                                     ('precmd',
                                      ['line'],
                                      'Hook method executed just before the command line is\n        interpreted, but after the input prompt is generated and issued.\n\n        '),
                                     ('postcmd',
                                      ['stop', 'line'],
                                      'Hook method executed just after a command dispatch is finished.'),
                                     ('preloop',
                                      [],
                                      'Hook method executed once when the cmdloop() method is called.'),
                                     ('postloop',
                                      [],
                                      'Hook method executed once when the cmdloop() method is about to\n        return.\n\n        '),
                                     ('parseline',
                                      ['line'],
                                      "Parse the line into a command name and a string containing\n        the arguments.  Returns a tuple containing (command, args, line).\n        'command' and 'args' may be None if the line couldn't be parsed.\n        "),
                                     ('onecmd',
                                      ['line'],
                                      'Interpret the argument as though it had been typed in response\n        to the prompt.\n\n        This may be overridden, but should not normally need to be;\n        see the precmd() and postcmd() methods for useful execution hooks.\n        The return value is a flag indicating whether interpretation of\n        commands by the interpreter should stop.\n\n        '),
                                     ('emptyline',
                                      [],
                                      'Called when an empty line is entered in response to the prompt.\n\n        If this method is not overridden, it repeats the last nonempty\n        command entered.\n\n        '),
                                     ('default',
                                      ['line'],
                                      'Called on an input line when the command prefix is not recognized.\n\n        If this method is not overridden, it prints an error message and\n        returns.\n\n        '),
                                     ('completedefault',
                                      ['*ignored'],
                                      'Method called to complete an input line when no command-specific\n        complete_*() method is available.\n\n        By default, it returns an empty list.\n\n        '),
                                     ('completenames', ['text', '*ignored'], ''),
                                     ('complete',
                                      ['text', 'state'],
                                      "Return the next possible completion for 'text'.\n\n        If a command has not been entered, then complete against command list.\n        Otherwise try to call complete_<command> to get list of completions.\n        "),
                                     ('get_names', [], ''),
                                     ('complete_help', ['*args'], ''),
                                     ('do_help', ['arg'], ''),
                                     ('print_topics',
                                      ['header', 'cmds', 'cmdlen', 'maxcol'],
                                      ''),
                                     ('columnize',
                                      ['list', 'displaywidth=80'],
                                      'Display a list of strings as a compact set of columns.\n\n        Each column is only as wide as necessary.\n        Columns are separated by two spaces (one was not legible enough).\n        ')],
                         'properties': ['prompt',
                                        'identchars',
                                        'ruler',
                                        'lastcmd',
                                        'intro',
                                        'doc_leader',
                                        'doc_header',
                                        'misc_header',
                                        'undoc_header',
                                        'nohelp',
                                        'use_rawinput',
                                        'stdin',
                                        'stdout',
                                        'cmdqueue',
                                        'completekey',
                                        'old_completer',
                                        'completion_matches']},
             'code.InteractiveConsole': {'bases': ['code.InteractiveInterpreter'],
                                         'constructor': ['locals=None', "filename='<console>'"],
                                         'docstring': 'Closely emulate the behavior of the interactive Python interpreter.\n\n    This class builds on InteractiveInterpreter and adds prompting\n    using the familiar sys.ps1 and sys.ps2, and input buffering.\n\n    ',
                                         'methods': [('resetbuffer',
                                                      [],
                                                      'Reset the input buffer.'),
                                                     ('interact',
                                                      ['banner=None'],
                                                      "Closely emulate the interactive Python console.\n\n        The optional banner argument specify the banner to print\n        before the first interaction; by default it prints a banner\n        similar to the one printed by the real Python interpreter,\n        followed by the current class name in parentheses (so as not\n        to confuse this with the real interpreter -- since it's so\n        close!).\n\n        "),
                                                     ('push',
                                                      ['line'],
                                                      "Push a line to the interpreter.\n\n        The line should not have a trailing newline; it may have\n        internal newlines.  The line is appended to a buffer and the\n        interpreter's runsource() method is called with the\n        concatenated contents of the buffer as source.  If this\n        indicates that the command was executed or invalid, the buffer\n        is reset; otherwise, the command is incomplete, and the buffer\n        is left as it was after the line was appended.  The return\n        value is 1 if more input is required, 0 if the line was dealt\n        with in some way (this is the same as runsource()).\n\n        "),
                                                     ('raw_input',
                                                      ["prompt=''"],
                                                      'Write a prompt and read a line.\n\n        The returned line does not include the trailing newline.\n        When the user enters the EOF key sequence, EOFError is raised.\n\n        The base implementation uses the built-in function\n        raw_input(); a subclass may replace this with a different\n        implementation.\n\n        ')],
                                         'properties': ['filename', 'buffer']},
             'code.InteractiveInterpreter': {'bases': [],
                                             'constructor': ['locals=None'],
                                             'docstring': "Base class for InteractiveConsole.\n\n    This class deals with parsing and interpreter state (the user's\n    namespace); it doesn't deal with input buffering or prompting or\n    input file naming (the filename is always passed in explicitly).\n\n    ",
                                             'methods': [('runsource',
                                                          ['source',
                                                           "filename='<input>'",
                                                           "symbol='single'"],
                                                          'Compile and run some source in the interpreter.\n\n        Arguments are as for compile_command().\n\n        One several things can happen:\n\n        1) The input is incorrect; compile_command() raised an\n        exception (SyntaxError or OverflowError).  A syntax traceback\n        will be printed by calling the showsyntaxerror() method.\n\n        2) The input is incomplete, and more input is required;\n        compile_command() returned None.  Nothing happens.\n\n        3) The input is complete; compile_command() returned a code\n        object.  The code is executed by calling self.runcode() (which\n        also handles run-time exceptions, except for SystemExit).\n\n        The return value is True in case 2, False in the other cases (unless\n        an exception is raised).  The return value can be used to\n        decide whether to use sys.ps1 or sys.ps2 to prompt the next\n        line.\n\n        '),
                                                         ('runcode',
                                                          ['code'],
                                                          'Execute a code object.\n\n        When an exception occurs, self.showtraceback() is called to\n        display a traceback.  All exceptions are caught except\n        SystemExit, which is reraised.\n\n        A note about KeyboardInterrupt: this exception may occur\n        elsewhere in this code, and may not always be caught.  The\n        caller should be prepared to deal with it.\n\n        '),
                                                         ('showsyntaxerror',
                                                          ['filename=None'],
                                                          'Display the syntax error that just occurred.\n\n        This doesn\'t display a stack trace because there isn\'t one.\n\n        If a filename is given, it is stuffed in the exception instead\n        of what was there before (because Python\'s parser always uses\n        "<string>" when reading from a string).\n\n        The output is written by self.write(), below.\n\n        '),
                                                         ('showtraceback',
                                                          [],
                                                          'Display the exception that just occurred.\n\n        We remove the first stack item because it is our own code.\n\n        The output is written by self.write(), below.\n\n        '),
                                                         ('write',
                                                          ['data'],
                                                          'Write a string.\n\n        The base implementation writes to sys.stderr; a subclass may\n        replace this with a different implementation.\n\n        ')],
                                             'properties': ['locals', 'compile']},
             'codecs.BufferedIncrementalDecoder': {'bases': ['codecs.IncrementalDecoder'],
                                                   'constructor': ["errors='strict'"],
                                                   'docstring': '\n    This subclass of IncrementalDecoder can be used as the baseclass for an\n    incremental decoder if the decoder must be able to handle incomplete byte\n    sequences.\n    ',
                                                   'methods': [('_buffer_decode',
                                                                ['input', 'errors', 'final'],
                                                                ''),
                                                               ('decode',
                                                                ['input', 'final=False'],
                                                                ''),
                                                               ('reset', [], ''),
                                                               ('getstate', [], ''),
                                                               ('setstate', ['state'], '')],
                                                   'properties': ['buffer']},
             'codecs.BufferedIncrementalEncoder': {'bases': ['codecs.IncrementalEncoder'],
                                                   'constructor': ["errors='strict'"],
                                                   'docstring': '\n    This subclass of IncrementalEncoder can be used as the baseclass for an\n    incremental encoder if the encoder must keep some of the output in a\n    buffer between calls to encode().\n    ',
                                                   'methods': [('_buffer_encode',
                                                                ['input', 'errors', 'final'],
                                                                ''),
                                                               ('encode',
                                                                ['input', 'final=False'],
                                                                ''),
                                                               ('reset', [], ''),
                                                               ('getstate', [], ''),
                                                               ('setstate', ['state'], '')],
                                                   'properties': ['buffer']},
             'codecs.Codec': {'bases': [],
                              'constructor': [],
                              'docstring': " Defines the interface for stateless encoders/decoders.\n\n        The .encode()/.decode() methods may use different error\n        handling schemes by providing the errors argument. These\n        string values are predefined:\n\n         'strict' - raise a ValueError error (or a subclass)\n         'ignore' - ignore the character and continue with the next\n         'replace' - replace with a suitable replacement character;\n                    Python will use the official U+FFFD REPLACEMENT\n                    CHARACTER for the builtin Unicode codecs on\n                    decoding and '?' on encoding.\n         'xmlcharrefreplace' - Replace with the appropriate XML\n                               character reference (only for encoding).\n         'backslashreplace'  - Replace with backslashed escape sequences\n                               (only for encoding).\n\n        The set of allowed values can be extended via register_error.\n\n    ",
                              'methods': [('encode',
                                           ['input', "errors='strict'"],
                                           " Encodes the object input and returns a tuple (output\n            object, length consumed).\n\n            errors defines the error handling to apply. It defaults to\n            'strict' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamCodec for codecs which have to keep state in order to\n            make encoding/decoding efficient.\n\n            The encoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        "),
                                          ('decode',
                                           ['input', "errors='strict'"],
                                           " Decodes the object input and returns a tuple (output\n            object, length consumed).\n\n            input must be an object which provides the bf_getreadbuf\n            buffer slot. Python strings, buffer objects and memory\n            mapped files are examples of objects providing this slot.\n\n            errors defines the error handling to apply. It defaults to\n            'strict' handling.\n\n            The method may not store state in the Codec instance. Use\n            StreamCodec for codecs which have to keep state in order to\n            make encoding/decoding efficient.\n\n            The decoder must be able to handle zero length input and\n            return an empty object of the output object type in this\n            situation.\n\n        ")],
                              'properties': []},
             'codecs.CodecInfo': {'bases': ['tuple'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [('__new__',
                                               ['encode',
                                                'decode',
                                                'streamreader=None',
                                                'streamwriter=None',
                                                'incrementalencoder=None',
                                                'incrementaldecoder=None',
                                                'name=None'],
                                               ''),
                                              ('__repr__', [], '')],
                                  'properties': ['name',
                                                 'encode',
                                                 'decode',
                                                 'incrementalencoder',
                                                 'incrementaldecoder',
                                                 'streamwriter',
                                                 'streamreader']},
             'codecs.IncrementalDecoder': {'bases': ['object'],
                                           'constructor': ["errors='strict'"],
                                           'docstring': '\n    An IncrementalDecoder decodes an input in multiple steps. The input can be\n    passed piece by piece to the decode() method. The IncrementalDecoder\n    remembers the state of the decoding process between calls to decode().\n    ',
                                           'methods': [('decode',
                                                        ['input', 'final=False'],
                                                        '\n        Decodes input and returns the resulting object.\n        '),
                                                       ('reset',
                                                        [],
                                                        '\n        Resets the decoder to the initial state.\n        '),
                                                       ('getstate',
                                                        [],
                                                        '\n        Return the current state of the decoder.\n\n        This must be a (buffered_input, additional_state_info) tuple.\n        buffered_input must be a bytes object containing bytes that\n        were passed to decode() that have not yet been converted.\n        additional_state_info must be a non-negative integer\n        representing the state of the decoder WITHOUT yet having\n        processed the contents of buffered_input.  In the initial state\n        and after reset(), getstate() must return (b"", 0).\n        '),
                                                       ('setstate',
                                                        ['state'],
                                                        '\n        Set the current state of the decoder.\n\n        state must have been returned by getstate().  The effect of\n        setstate((b"", 0)) must be equivalent to reset().\n        ')],
                                           'properties': ['errors']},
             'codecs.IncrementalEncoder': {'bases': ['object'],
                                           'constructor': ["errors='strict'"],
                                           'docstring': '\n    An IncrementalEncoder encodes an input in multiple steps. The input can be\n    passed piece by piece to the encode() method. The IncrementalEncoder remembers\n    the state of the Encoding process between calls to encode().\n    ',
                                           'methods': [('encode',
                                                        ['input', 'final=False'],
                                                        '\n        Encodes input and returns the resulting object.\n        '),
                                                       ('reset',
                                                        [],
                                                        '\n        Resets the encoder to the initial state.\n        '),
                                                       ('getstate',
                                                        [],
                                                        '\n        Return the current state of the encoder.\n        '),
                                                       ('setstate',
                                                        ['state'],
                                                        '\n        Set the current state of the encoder. state must have been\n        returned by getstate().\n        ')],
                                           'properties': ['errors', 'buffer']},
             'codecs.StreamReader': {'bases': ['codecs.Codec'],
                                     'constructor': ['stream', "errors='strict'"],
                                     'docstring': '',
                                     'methods': [('decode', ['input', "errors='strict'"], ''),
                                                 ('read',
                                                  ['size=-1', 'chars=-1', 'firstline=False'],
                                                  ' Decodes data from the stream self.stream and returns the\n            resulting object.\n\n            chars indicates the number of characters to read from the\n            stream. read() will never return more than chars\n            characters, but it might return less, if there are not enough\n            characters available.\n\n            size indicates the approximate maximum number of bytes to\n            read from the stream for decoding purposes. The decoder\n            can modify this setting as appropriate. The default value\n            -1 indicates to read and decode as much as possible.  size\n            is intended to prevent having to decode huge files in one\n            step.\n\n            If firstline is true, and a UnicodeDecodeError happens\n            after the first line terminator in the input only the first line\n            will be returned, the rest of the input will be kept until the\n            next call to read().\n\n            The method should use a greedy read strategy meaning that\n            it should read as much data as is allowed within the\n            definition of the encoding and the given size, e.g.  if\n            optional encoding endings or state markers are available\n            on the stream, these should be read too.\n        '),
                                                 ('readline',
                                                  ['size=None', 'keepends=True'],
                                                  ' Read one line from the input stream and return the\n            decoded data.\n\n            size, if given, is passed as size argument to the\n            read() method.\n\n        '),
                                                 ('readlines',
                                                  ['sizehint=None', 'keepends=True'],
                                                  " Read all lines available on the input stream\n            and return them as list of lines.\n\n            Line breaks are implemented using the codec's decoder\n            method and are included in the list entries.\n\n            sizehint, if given, is ignored since there is no efficient\n            way to finding the true end-of-line.\n\n        "),
                                                 ('reset',
                                                  [],
                                                  ' Resets the codec buffers used for keeping state.\n\n            Note that no stream repositioning should take place.\n            This method is primarily intended to be able to recover\n            from decoding errors.\n\n        '),
                                                 ('seek',
                                                  ['offset', 'whence=0'],
                                                  " Set the input stream's current position.\n\n            Resets the codec buffers used for keeping state.\n        "),
                                                 ('next',
                                                  [],
                                                  ' Return the next decoded line from the input stream.'),
                                                 ('__iter__', [], ''),
                                                 ('__getattr__',
                                                  ['name', 'getattr=getattr'],
                                                  ' Inherit all other methods from the underlying stream.\n        '),
                                                 ('__enter__', [], ''),
                                                 ('__exit__', ['type', 'value', 'tb'], '')],
                                     'properties': ['stream',
                                                    'errors',
                                                    'bytebuffer',
                                                    'charbuffer',
                                                    'linebuffer']},
             'codecs.StreamReaderWriter': {'bases': [],
                                           'constructor': ['stream',
                                                           'Reader',
                                                           'Writer',
                                                           "errors='strict'"],
                                           'docstring': ' StreamReaderWriter instances allow wrapping streams which\n        work in both read and write modes.\n\n        The design is such that one can use the factory functions\n        returned by the codec.lookup() function to construct the\n        instance.\n\n    ',
                                           'methods': [('read', ['size=-1'], ''),
                                                       ('readline', ['size=None'], ''),
                                                       ('readlines', ['sizehint=None'], ''),
                                                       ('next',
                                                        [],
                                                        ' Return the next decoded line from the input stream.'),
                                                       ('__iter__', [], ''),
                                                       ('write', ['data'], ''),
                                                       ('writelines', ['list'], ''),
                                                       ('reset', [], ''),
                                                       ('seek', ['offset', 'whence=0'], ''),
                                                       ('__getattr__',
                                                        ['name', 'getattr=getattr'],
                                                        ' Inherit all other methods from the underlying stream.\n        '),
                                                       ('__enter__', [], ''),
                                                       ('__exit__',
                                                        ['type', 'value', 'tb'],
                                                        '')],
                                           'properties': ['encoding',
                                                          'stream',
                                                          'reader',
                                                          'writer',
                                                          'errors']},
             'codecs.StreamRecoder': {'bases': [],
                                      'constructor': ['stream',
                                                      'encode',
                                                      'decode',
                                                      'Reader',
                                                      'Writer',
                                                      "errors='strict'"],
                                      'docstring': ' StreamRecoder instances provide a frontend - backend\n        view of encoding data.\n\n        They use the complete set of APIs returned by the\n        codecs.lookup() function to implement their task.\n\n        Data written to the stream is first decoded into an\n        intermediate format (which is dependent on the given codec\n        combination) and then written to the stream using an instance\n        of the provided Writer class.\n\n        In the other direction, data is read from the stream using a\n        Reader instance and then return encoded data to the caller.\n\n    ',
                                      'methods': [('read', ['size=-1'], ''),
                                                  ('readline', ['size=None'], ''),
                                                  ('readlines', ['sizehint=None'], ''),
                                                  ('next',
                                                   [],
                                                   ' Return the next decoded line from the input stream.'),
                                                  ('__iter__', [], ''),
                                                  ('write', ['data'], ''),
                                                  ('writelines', ['list'], ''),
                                                  ('reset', [], ''),
                                                  ('__getattr__',
                                                   ['name', 'getattr=getattr'],
                                                   ' Inherit all other methods from the underlying stream.\n        '),
                                                  ('__enter__', [], ''),
                                                  ('__exit__', ['type', 'value', 'tb'], '')],
                                      'properties': ['data_encoding',
                                                     'file_encoding',
                                                     'stream',
                                                     'encode',
                                                     'decode',
                                                     'reader',
                                                     'writer',
                                                     'errors']},
             'codecs.StreamWriter': {'bases': ['codecs.Codec'],
                                     'constructor': ['stream', "errors='strict'"],
                                     'docstring': '',
                                     'methods': [('write',
                                                  ['object'],
                                                  " Writes the object's contents encoded to self.stream.\n        "),
                                                 ('writelines',
                                                  ['list'],
                                                  ' Writes the concatenated list of strings to the stream\n            using .write().\n        '),
                                                 ('reset',
                                                  [],
                                                  ' Flushes and resets the codec buffers used for keeping state.\n\n            Calling this method should ensure that the data on the\n            output is put into a clean state, that allows appending\n            of new fresh data without having to rescan the whole\n            stream to recover state.\n\n        '),
                                                 ('seek', ['offset', 'whence=0'], ''),
                                                 ('__getattr__',
                                                  ['name', 'getattr=getattr'],
                                                  ' Inherit all other methods from the underlying stream.\n        '),
                                                 ('__enter__', [], ''),
                                                 ('__exit__', ['type', 'value', 'tb'], '')],
                                     'properties': ['stream', 'errors']},
             'codeop.CommandCompiler': {'bases': [],
                                        'constructor': [],
                                        'docstring': "Instances of this class have __call__ methods identical in\n    signature to compile_command; the difference is that if the\n    instance compiles program text containing a __future__ statement,\n    the instance 'remembers' and compiles all subsequent program texts\n    with the statement in force.",
                                        'methods': [('__call__',
                                                     ['source',
                                                      "filename='<input>'",
                                                      "symbol='single'"],
                                                     'Compile a command and determine whether it is incomplete.\n\n        Arguments:\n\n        source -- the source string; may contain \\n characters\n        filename -- optional filename from which source was read;\n                    default "<input>"\n        symbol -- optional grammar start symbol; "single" (default) or\n                  "eval"\n\n        Return value / exceptions raised:\n\n        - Return a code object if the command is complete and valid\n        - Return None if the command is incomplete\n        - Raise SyntaxError, ValueError or OverflowError if the command is a\n          syntax error (OverflowError and ValueError can be produced by\n          malformed literals).\n        ')],
                                        'properties': ['compiler']},
             'codeop.Compile': {'bases': [],
                                'constructor': [],
                                'docstring': 'Instances of this class behave much like the built-in compile\n    function, but if one is used to compile text containing a future\n    statement, it "remembers" and compiles all subsequent program texts\n    with the statement in force.',
                                'methods': [('__call__', ['source', 'filename', 'symbol'], '')],
                                'properties': ['flags']},
             'collections.Counter': {'bases': ['dict'],
                                     'constructor': ['iterable=None', '**kwds'],
                                     'docstring': "Dict subclass for counting hashable items.  Sometimes called a bag\n    or multiset.  Elements are stored as dictionary keys and their counts\n    are stored as dictionary values.\n\n    >>> c = Counter('abcdeabcdabcaba')  # count elements from a string\n\n    >>> c.most_common(3)                # three most common elements\n    [('a', 5), ('b', 4), ('c', 3)]\n    >>> sorted(c)                       # list all unique elements\n    ['a', 'b', 'c', 'd', 'e']\n    >>> ''.join(sorted(c.elements()))   # list elements with repetitions\n    'aaaaabbbbcccdde'\n    >>> sum(c.values())                 # total of all counts\n    15\n\n    >>> c['a']                          # count of letter 'a'\n    5\n    >>> for elem in 'shazam':           # update counts from an iterable\n    ...     c[elem] += 1                # by adding 1 to each element's count\n    >>> c['a']                          # now there are seven 'a'\n    7\n    >>> del c['b']                      # remove all 'b'\n    >>> c['b']                          # now there are zero 'b'\n    0\n\n    >>> d = Counter('simsalabim')       # make another counter\n    >>> c.update(d)                     # add in the second counter\n    >>> c['a']                          # now there are nine 'a'\n    9\n\n    >>> c.clear()                       # empty the counter\n    >>> c\n    Counter()\n\n    Note:  If a count is set to zero or reduced to zero, it will remain\n    in the counter until the entry is deleted or the counter is cleared:\n\n    >>> c = Counter('aaabbc')\n    >>> c['b'] -= 2                     # reduce the count of 'b' by two\n    >>> c.most_common()                 # 'b' is still in, but its count is zero\n    [('a', 3), ('c', 1), ('b', 0)]\n\n    ",
                                     'methods': [('__missing__',
                                                  ['key'],
                                                  'The count of elements not in the Counter is zero.'),
                                                 ('most_common',
                                                  ['n=None'],
                                                  "List the n most common elements and their counts from the most\n        common to the least.  If n is None, then list all element counts.\n\n        >>> Counter('abcdeabcdabcaba').most_common(3)\n        [('a', 5), ('b', 4), ('c', 3)]\n\n        "),
                                                 ('elements',
                                                  [],
                                                  "Iterator over elements repeating each as many times as its count.\n\n        >>> c = Counter('ABCABC')\n        >>> sorted(c.elements())\n        ['A', 'A', 'B', 'B', 'C', 'C']\n\n        # Knuth's example for prime factors of 1836:  2**2 * 3**3 * 17**1\n        >>> prime_factors = Counter({2: 2, 3: 3, 17: 1})\n        >>> product = 1\n        >>> for factor in prime_factors.elements():     # loop over factors\n        ...     product *= factor                       # and multiply them\n        >>> product\n        1836\n\n        Note, if an element's count has been set to zero or is a negative\n        number, elements() will ignore it.\n\n        "),
                                                 ('fromkeys', ['iterable', 'v=None'], ''),
                                                 ('update',
                                                  ['iterable=None', '**kwds'],
                                                  "Like dict.update() but add counts instead of replacing them.\n\n        Source can be an iterable, a dictionary, or another Counter instance.\n\n        >>> c = Counter('which')\n        >>> c.update('witch')           # add elements from another iterable\n        >>> d = Counter('watch')\n        >>> c.update(d)                 # add elements from another counter\n        >>> c['h']                      # four 'h' in which, witch, and watch\n        4\n\n        "),
                                                 ('subtract',
                                                  ['iterable=None', '**kwds'],
                                                  "Like dict.update() but subtracts counts instead of replacing them.\n        Counts can be reduced below zero.  Both the inputs and outputs are\n        allowed to contain zero and negative counts.\n\n        Source can be an iterable, a dictionary, or another Counter instance.\n\n        >>> c = Counter('which')\n        >>> c.subtract('witch')             # subtract elements from another iterable\n        >>> c.subtract(Counter('watch'))    # subtract elements from another counter\n        >>> c['h']                          # 2 in which, minus 1 in witch, minus 1 in watch\n        0\n        >>> c['w']                          # 1 in which, minus 1 in witch, minus 1 in watch\n        -1\n\n        "),
                                                 ('copy',
                                                  [],
                                                  'Like dict.copy() but returns a Counter instance instead of a dict.'),
                                                 ('__reduce__', [], ''),
                                                 ('__delitem__',
                                                  ['elem'],
                                                  'Like dict.__delitem__() but does not raise KeyError for missing values.'),
                                                 ('__repr__', [], ''),
                                                 ('__add__',
                                                  ['other'],
                                                  "Add counts from two counters.\n\n        >>> Counter('abbb') + Counter('bcc')\n        Counter({'b': 4, 'c': 2, 'a': 1})\n\n        "),
                                                 ('__sub__',
                                                  ['other'],
                                                  " Subtract count, but keep only results with positive counts.\n\n        >>> Counter('abbbc') - Counter('bccd')\n        Counter({'b': 2, 'a': 1})\n\n        "),
                                                 ('__or__',
                                                  ['other'],
                                                  "Union is the maximum of value in either of the input counters.\n\n        >>> Counter('abbb') | Counter('bcc')\n        Counter({'b': 3, 'c': 2, 'a': 1})\n\n        "),
                                                 ('__and__',
                                                  ['other'],
                                                  " Intersection is the minimum of corresponding counts.\n\n        >>> Counter('abbb') & Counter('bcc')\n        Counter({'b': 1})\n\n        ")],
                                     'properties': []},
             'collections.OrderedDict': {'bases': ['dict'],
                                         'constructor': ['*args', '**kwds'],
                                         'docstring': 'Dictionary that remembers insertion order',
                                         'methods': [('__setitem__',
                                                      ['key',
                                                       'value',
                                                       'PREV=0',
                                                       'NEXT=1',
                                                       'dict_setitem=dict.__setitem__'],
                                                      'od.__setitem__(i, y) <==> od[i]=y'),
                                                     ('__delitem__',
                                                      ['key',
                                                       'PREV=0',
                                                       'NEXT=1',
                                                       'dict_delitem=dict.__delitem__'],
                                                      'od.__delitem__(y) <==> del od[y]'),
                                                     ('__iter__',
                                                      ['NEXT=1', 'KEY=2'],
                                                      'od.__iter__() <==> iter(od)'),
                                                     ('__reversed__',
                                                      ['PREV=0', 'KEY=2'],
                                                      'od.__reversed__() <==> reversed(od)'),
                                                     ('__reduce__',
                                                      [],
                                                      'Return state information for pickling'),
                                                     ('clear',
                                                      [],
                                                      'od.clear() -> None.  Remove all items from od.'),
                                                     ('viewkeys',
                                                      [],
                                                      "od.viewkeys() -> a set-like object providing a view on od's keys"),
                                                     ('viewvalues',
                                                      [],
                                                      "od.viewvalues() -> an object providing a view on od's values"),
                                                     ('viewitems',
                                                      [],
                                                      "od.viewitems() -> a set-like object providing a view on od's items"),
                                                     ('pop', ['key', 'default=__marker'], ''),
                                                     ('setdefault',
                                                      ['key', 'default=None'],
                                                      'od.setdefault(k[,d]) -> od.get(k,d), also set od[k]=d if k not in od'),
                                                     ('popitem',
                                                      ['last=True'],
                                                      'od.popitem() -> (k, v), return and remove a (key, value) pair.\n        Pairs are returned in LIFO order if last is true or FIFO order if false.\n\n        '),
                                                     ('__repr__',
                                                      [],
                                                      'od.__repr__() <==> repr(od)'),
                                                     ('copy',
                                                      [],
                                                      'od.copy() -> a shallow copy of od'),
                                                     ('fromkeys',
                                                      ['iterable', 'value=None'],
                                                      'OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S\n        and values equal to v (which defaults to None).\n\n        '),
                                                     ('__eq__',
                                                      ['other'],
                                                      'od.__eq__(y) <==> od==y.  Comparison to another OD is order-sensitive\n        while comparison to a regular mapping is order-insensitive.\n\n        ')],
                                         'properties': ['__root',
                                                        '__map',
                                                        'update',
                                                        '__update',
                                                        'keys',
                                                        'values',
                                                        'items',
                                                        'iterkeys',
                                                        'itervalues',
                                                        'iteritems',
                                                        '__ne__',
                                                        '__marker']},
             'collections.Point': {'bases': ["collections.namedtuple('Point', 'x y')"],
                                   'constructor': [],
                                   'docstring': 'Point class with optimized _make() and _replace() without error-checking',
                                   'methods': [('_replace', ['_map=map', '**kwds'], '')],
                                   'properties': ['__slots__', '_make']},
             'contextlib.GeneratorContextManager': {'bases': ['object'],
                                                    'constructor': ['gen'],
                                                    'docstring': 'Helper for @contextmanager decorator.',
                                                    'methods': [('__enter__', [], ''),
                                                                ('__exit__',
                                                                 ['type',
                                                                  'value',
                                                                  'traceback'],
                                                                 '')],
                                                    'properties': ['gen']},
             'contextlib.closing': {'bases': ['object'],
                                    'constructor': ['thing'],
                                    'docstring': 'Context to automatically close something at the end of a block.\n\n    Code like this:\n\n        with closing(<module>.open(<arguments>)) as f:\n            <block>\n\n    is equivalent to this:\n\n        f = <module>.open(<arguments>)\n        try:\n            <block>\n        finally:\n            f.close()\n\n    ',
                                    'methods': [('__enter__', [], ''),
                                                ('__exit__', ['*exc_info'], '')],
                                    'properties': ['thing']},
             'cookielib.Absent': {'bases': [],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [],
                                  'properties': []},
             'cookielib.Cookie': {'bases': [],
                                  'constructor': ['version',
                                                  'name',
                                                  'value',
                                                  'port',
                                                  'port_specified',
                                                  'domain',
                                                  'domain_specified',
                                                  'domain_initial_dot',
                                                  'path',
                                                  'path_specified',
                                                  'secure',
                                                  'expires',
                                                  'discard',
                                                  'comment',
                                                  'comment_url',
                                                  'rest',
                                                  'rfc2109=False'],
                                  'docstring': 'HTTP Cookie.\n\n    This class represents both Netscape and RFC 2965 cookies.\n\n    This is deliberately a very simple class.  It just holds attributes.  It\'s\n    possible to construct Cookie instances that don\'t comply with the cookie\n    standards.  CookieJar.make_cookies is the factory function for Cookie\n    objects -- it deals with cookie parsing, supplying defaults, and\n    normalising to the representation used in this class.  CookiePolicy is\n    responsible for checking them to see whether they should be accepted from\n    and returned to the server.\n\n    Note that the port may be present in the headers, but unspecified ("Port"\n    rather than"Port=80", for example); if this is the case, port is None.\n\n    ',
                                  'methods': [('has_nonstandard_attr', ['name'], ''),
                                              ('get_nonstandard_attr',
                                               ['name', 'default=None'],
                                               ''),
                                              ('set_nonstandard_attr', ['name', 'value'], ''),
                                              ('is_expired', ['now=None'], ''),
                                              ('__str__', [], ''),
                                              ('__repr__', [], '')],
                                  'properties': ['version',
                                                 'name',
                                                 'value',
                                                 'port',
                                                 'port_specified',
                                                 'domain',
                                                 'domain_specified',
                                                 'domain_initial_dot',
                                                 'path',
                                                 'path_specified',
                                                 'secure',
                                                 'expires',
                                                 'discard',
                                                 'comment',
                                                 'comment_url',
                                                 'rfc2109',
                                                 '_rest']},
             'cookielib.CookieJar': {'bases': [],
                                     'constructor': ['policy=None'],
                                     'docstring': 'Collection of HTTP cookies.\n\n    You may not need to know about this class: try\n    urllib2.build_opener(HTTPCookieProcessor).open(url).\n\n    ',
                                     'methods': [('set_policy', ['policy'], ''),
                                                 ('_cookies_for_domain',
                                                  ['domain', 'request'],
                                                  ''),
                                                 ('_cookies_for_request',
                                                  ['request'],
                                                  'Return a list of cookies to be returned to server.'),
                                                 ('_cookie_attrs',
                                                  ['cookies'],
                                                  'Return a list of cookie-attributes to be returned to server.\n\n        like [\'foo="bar"; $Path="/"\', ...]\n\n        The $Version attribute is also added when appropriate (currently only\n        once per request).\n\n        '),
                                                 ('add_cookie_header',
                                                  ['request'],
                                                  'Add correct Cookie: header to request (urllib2.Request object).\n\n        The Cookie2 header is also added unless policy.hide_cookie2 is true.\n\n        '),
                                                 ('_normalized_cookie_tuples',
                                                  ['attrs_set'],
                                                  'Return list of tuples containing normalised cookie information.\n\n        attrs_set is the list of lists of key,value pairs extracted from\n        the Set-Cookie or Set-Cookie2 headers.\n\n        Tuples are name, value, standard, rest, where name and value are the\n        cookie name and value, standard is a dictionary containing the standard\n        cookie-attributes (discard, secure, version, expires or max-age,\n        domain, path and port) and rest is a dictionary containing the rest of\n        the cookie-attributes.\n\n        '),
                                                 ('_cookie_from_cookie_tuple',
                                                  ['tup', 'request'],
                                                  ''),
                                                 ('_cookies_from_attrs_set',
                                                  ['attrs_set', 'request'],
                                                  ''),
                                                 ('_process_rfc2109_cookies', ['cookies'], ''),
                                                 ('make_cookies',
                                                  ['response', 'request'],
                                                  'Return sequence of Cookie objects extracted from response object.'),
                                                 ('set_cookie_if_ok',
                                                  ['cookie', 'request'],
                                                  "Set a cookie if policy says it's OK to do so."),
                                                 ('set_cookie',
                                                  ['cookie'],
                                                  'Set a cookie, without checking whether or not it should be set.'),
                                                 ('extract_cookies',
                                                  ['response', 'request'],
                                                  'Extract cookies from response, where allowable given the request.'),
                                                 ('clear',
                                                  ['domain=None', 'path=None', 'name=None'],
                                                  'Clear some cookies.\n\n        Invoking this method without arguments will clear all cookies.  If\n        given a single argument, only cookies belonging to that domain will be\n        removed.  If given two arguments, cookies belonging to the specified\n        path within that domain are removed.  If given three arguments, then\n        the cookie with the specified name, path and domain is removed.\n\n        Raises KeyError if no matching cookie exists.\n\n        '),
                                                 ('clear_session_cookies',
                                                  [],
                                                  "Discard all session cookies.\n\n        Note that the .save() method won't save session cookies anyway, unless\n        you ask otherwise by passing a true ignore_discard argument.\n\n        "),
                                                 ('clear_expired_cookies',
                                                  [],
                                                  "Discard all expired cookies.\n\n        You probably don't need to call this method: expired cookies are never\n        sent back to the server (provided you're using DefaultCookiePolicy),\n        this method is called by CookieJar itself every so often, and the\n        .save() method won't save expired cookies anyway (unless you ask\n        otherwise by passing a true ignore_expires argument).\n\n        "),
                                                 ('__iter__', [], ''),
                                                 ('__len__',
                                                  [],
                                                  'Return number of contained cookies.'),
                                                 ('__repr__', [], ''),
                                                 ('__str__', [], '')],
                                     'properties': ['non_word_re',
                                                    'quote_re',
                                                    'strict_domain_re',
                                                    'domain_re',
                                                    'dots_re',
                                                    'magic_re',
                                                    '_policy',
                                                    '_cookies_lock',
                                                    '_cookies',
                                                    '_now']},
             'cookielib.CookiePolicy': {'bases': [],
                                        'constructor': [],
                                        'docstring': 'Defines which cookies get accepted from and returned to server.\n\n    May also modify cookies, though this is probably a bad idea.\n\n    The subclass DefaultCookiePolicy defines the standard rules for Netscape\n    and RFC 2965 cookies -- override that if you want a customised policy.\n\n    ',
                                        'methods': [('set_ok',
                                                     ['cookie', 'request'],
                                                     'Return true if (and only if) cookie should be accepted from server.\n\n        Currently, pre-expired cookies never get this far -- the CookieJar\n        class deletes such cookies itself.\n\n        '),
                                                    ('return_ok',
                                                     ['cookie', 'request'],
                                                     'Return true if (and only if) cookie should be returned to server.'),
                                                    ('domain_return_ok',
                                                     ['domain', 'request'],
                                                     'Return false if cookies should not be returned, given cookie domain.\n        '),
                                                    ('path_return_ok',
                                                     ['path', 'request'],
                                                     'Return false if cookies should not be returned, given cookie path.\n        ')],
                                        'properties': []},
             'cookielib.DefaultCookiePolicy': {'bases': ['cookielib.CookiePolicy'],
                                               'constructor': ['blocked_domains=None',
                                                               'allowed_domains=None',
                                                               'netscape=True',
                                                               'rfc2965=False',
                                                               'rfc2109_as_netscape=None',
                                                               'hide_cookie2=False',
                                                               'strict_domain=False',
                                                               'strict_rfc2965_unverifiable=True',
                                                               'strict_ns_unverifiable=False',
                                                               'strict_ns_domain=DomainLiberal',
                                                               'strict_ns_set_initial_dollar=False',
                                                               'strict_ns_set_path=False'],
                                               'docstring': 'Implements the standard rules for accepting and returning cookies.',
                                               'methods': [('blocked_domains',
                                                            [],
                                                            'Return the sequence of blocked domains (as a tuple).'),
                                                           ('set_blocked_domains',
                                                            ['blocked_domains'],
                                                            'Set the sequence of blocked domains.'),
                                                           ('is_blocked', ['domain'], ''),
                                                           ('allowed_domains',
                                                            [],
                                                            'Return None, or the sequence of allowed domains (as a tuple).'),
                                                           ('set_allowed_domains',
                                                            ['allowed_domains'],
                                                            'Set the sequence of allowed domains, or None.'),
                                                           ('is_not_allowed', ['domain'], ''),
                                                           ('set_ok',
                                                            ['cookie', 'request'],
                                                            '\n        If you override .set_ok(), be sure to call this method.  If it returns\n        false, so should your subclass (assuming your subclass wants to be more\n        strict about which cookies to accept).\n\n        '),
                                                           ('set_ok_version',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('set_ok_verifiability',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('set_ok_name',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('set_ok_path',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('set_ok_domain',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('set_ok_port',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('return_ok',
                                                            ['cookie', 'request'],
                                                            '\n        If you override .return_ok(), be sure to call this method.  If it\n        returns false, so should your subclass (assuming your subclass wants to\n        be more strict about which cookies to return).\n\n        '),
                                                           ('return_ok_version',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('return_ok_verifiability',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('return_ok_secure',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('return_ok_expires',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('return_ok_port',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('return_ok_domain',
                                                            ['cookie', 'request'],
                                                            ''),
                                                           ('domain_return_ok',
                                                            ['domain', 'request'],
                                                            ''),
                                                           ('path_return_ok',
                                                            ['path', 'request'],
                                                            '')],
                                               'properties': ['DomainStrictNoDots',
                                                              'DomainStrictNonDomain',
                                                              'DomainRFC2965Match',
                                                              'DomainLiberal',
                                                              'DomainStrict',
                                                              'netscape',
                                                              'rfc2965',
                                                              'rfc2109_as_netscape',
                                                              'hide_cookie2',
                                                              'strict_domain',
                                                              'strict_rfc2965_unverifiable',
                                                              'strict_ns_unverifiable',
                                                              'strict_ns_domain',
                                                              'strict_ns_set_initial_dollar',
                                                              'strict_ns_set_path',
                                                              '_blocked_domains',
                                                              '_allowed_domains']},
             'cookielib.FileCookieJar': {'bases': ['cookielib.CookieJar'],
                                         'constructor': ['filename=None',
                                                         'delayload=False',
                                                         'policy=None'],
                                         'docstring': 'CookieJar that can be loaded from and saved to a file.',
                                         'methods': [('save',
                                                      ['filename=None',
                                                       'ignore_discard=False',
                                                       'ignore_expires=False'],
                                                      'Save cookies to a file.'),
                                                     ('load',
                                                      ['filename=None',
                                                       'ignore_discard=False',
                                                       'ignore_expires=False'],
                                                      'Load cookies from a file.'),
                                                     ('revert',
                                                      ['filename=None',
                                                       'ignore_discard=False',
                                                       'ignore_expires=False'],
                                                      "Clear all cookies and reload cookies from a saved file.\n\n        Raises LoadError (or IOError) if reversion is not successful; the\n        object's state will not be altered if this happens.\n\n        ")],
                                         'properties': ['filename', 'delayload', '_cookies']},
             'cookielib.LoadError': {'bases': ['IOError'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': []},
             'copy.Error': {'bases': ['Exception'],
                            'constructor': [],
                            'docstring': '',
                            'methods': [],
                            'properties': []},
             'copy._EmptyClass': {'bases': [],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [],
                                  'properties': []},
             'csv.Dialect': {'bases': [],
                             'constructor': [],
                             'docstring': 'Describe an Excel dialect.\n\n    This must be subclassed (see csv.excel).  Valid attributes are:\n    delimiter, quotechar, escapechar, doublequote, skipinitialspace,\n    lineterminator, quoting.\n\n    ',
                             'methods': [('_validate', [], '')],
                             'properties': ['_name',
                                            '_valid',
                                            'delimiter',
                                            'quotechar',
                                            'escapechar',
                                            'doublequote',
                                            'skipinitialspace',
                                            'lineterminator',
                                            'quoting']},
             'csv.DictReader': {'bases': [],
                                'constructor': ['f',
                                                'fieldnames=None',
                                                'restkey=None',
                                                'restval=None',
                                                "dialect='excel'",
                                                '*args',
                                                '**kwds'],
                                'docstring': '',
                                'methods': [('__iter__', [], ''),
                                            ('fieldnames', ['value'], ''),
                                            ('next', [], '')],
                                'properties': ['_fieldnames',
                                               'restkey',
                                               'restval',
                                               'reader',
                                               'dialect',
                                               'line_num',
                                               'fieldnames']},
             'csv.DictWriter': {'bases': [],
                                'constructor': ['f',
                                                'fieldnames',
                                                "restval=''",
                                                "extrasaction='raise'",
                                                "dialect='excel'",
                                                '*args',
                                                '**kwds'],
                                'docstring': '',
                                'methods': [('writeheader', [], ''),
                                            ('_dict_to_list', ['rowdict'], ''),
                                            ('writerow', ['rowdict'], ''),
                                            ('writerows', ['rowdicts'], '')],
                                'properties': ['fieldnames',
                                               'restval',
                                               'extrasaction',
                                               'writer']},
             'csv.Sniffer': {'bases': [],
                             'constructor': [],
                             'docstring': '\n    "Sniffs" the format of a CSV file (i.e. delimiter, quotechar)\n    Returns a Dialect object.\n    ',
                             'methods': [('sniff',
                                          ['sample', 'delimiters=None'],
                                          '\n        Returns a dialect (or None) corresponding to the sample\n        '),
                                         ('_guess_quote_and_delimiter',
                                          ['data', 'delimiters'],
                                          "\n        Looks for text enclosed between two identical quotes\n        (the probable quotechar) which are preceded and followed\n        by the same character (the probable delimiter).\n        For example:\n                         ,'some text',\n        The quote with the most wins, same with the delimiter.\n        If there is no quotechar the delimiter can't be determined\n        this way.\n        "),
                                         ('_guess_delimiter',
                                          ['data', 'delimiters'],
                                          "\n        The delimiter /should/ occur the same number of times on\n        each row. However, due to malformed data, it may not. We don't want\n        an all or nothing approach, so we allow for small variations in this\n        number.\n          1) build a table of the frequency of each character on every line.\n          2) build a table of freqencies of this frequency (meta-frequency?),\n             e.g.  'x occurred 5 times in 10 rows, 6 times in 1000 rows,\n             7 times in 2 rows'\n          3) use the mode of the meta-frequency to determine the /expected/\n             frequency for that character\n          4) find out how often the character actually meets that goal\n          5) the character that best meets its goal is the delimiter\n        For performance reasons, the data is evaluated in chunks, so it can\n        try and evaluate the smallest portion of the data possible, evaluating\n        additional chunks as necessary.\n        "),
                                         ('has_header', ['sample'], '')],
                             'properties': ['preferred']},
             'csv.excel': {'bases': ['csv.Dialect'],
                           'constructor': [],
                           'docstring': 'Describe the usual properties of Excel-generated CSV files.',
                           'methods': [],
                           'properties': ['delimiter',
                                          'quotechar',
                                          'doublequote',
                                          'skipinitialspace',
                                          'lineterminator',
                                          'quoting']},
             'csv.excel_tab': {'bases': ['csv.excel'],
                               'constructor': [],
                               'docstring': 'Describe the usual properties of Excel-generated TAB-delimited files.',
                               'methods': [],
                               'properties': ['delimiter']},
             'decimal.Clamped': {'bases': ['decimal.DecimalException'],
                                 'constructor': [],
                                 'docstring': 'Exponent of a 0 changed to fit bounds.\n\n    This occurs and signals clamped if the exponent of a result has been\n    altered in order to fit the constraints of a specific concrete\n    representation.  This may occur when the exponent of a zero result would\n    be outside the bounds of a representation, or when a large normal\n    number would have an encoded exponent that cannot be represented.  In\n    this latter case, the exponent is reduced to fit and the corresponding\n    number of zero digits are appended to the coefficient ("fold-down").\n    ',
                                 'methods': [],
                                 'properties': []},
             'decimal.Context': {'bases': ['object'],
                                 'constructor': ['prec=None',
                                                 'rounding=None',
                                                 'traps=None',
                                                 'flags=None',
                                                 'Emin=None',
                                                 'Emax=None',
                                                 'capitals=None',
                                                 '_clamp=0',
                                                 '_ignored_flags=None'],
                                 'docstring': 'Contains the context for a Decimal instance.\n\n    Contains:\n    prec - precision (for use in rounding, division, square roots..)\n    rounding - rounding type (how you round)\n    traps - If traps[exception] = 1, then the exception is\n                    raised when it is caused.  Otherwise, a value is\n                    substituted in.\n    flags  - When an exception is caused, flags[exception] is set.\n             (Whether or not the trap_enabler is set)\n             Should be reset by user of Decimal instance.\n    Emin -   Minimum exponent\n    Emax -   Maximum exponent\n    capitals -      If 1, 1*10^1 is printed as 1E+1.\n                    If 0, printed as 1e1\n    _clamp - If 1, change exponents if too high (Default 0)\n    ',
                                 'methods': [('__repr__', [], 'Show the current context.'),
                                             ('clear_flags', [], 'Reset all flags to zero'),
                                             ('_shallow_copy',
                                              [],
                                              'Returns a shallow copy from self.'),
                                             ('copy', [], 'Returns a deep copy from self.'),
                                             ('_raise_error',
                                              ['condition', 'explanation=None', '*args'],
                                              'Handles an error\n\n        If the flag is in _ignored_flags, returns the default response.\n        Otherwise, it sets the flag, then, if the corresponding\n        trap_enabler is set, it reraises the exception.  Otherwise, it returns\n        the default value after setting the flag.\n        '),
                                             ('_ignore_all_flags',
                                              [],
                                              'Ignore all flags, if they are raised'),
                                             ('_ignore_flags',
                                              ['*flags'],
                                              'Ignore the flags, if they are raised'),
                                             ('_regard_flags',
                                              ['*flags'],
                                              'Stop ignoring the flags, if they are raised'),
                                             ('Etiny', [], 'Returns Etiny (= Emin - prec + 1)'),
                                             ('Etop',
                                              [],
                                              'Returns maximum exponent (= Emax - prec + 1)'),
                                             ('_set_rounding',
                                              ['type'],
                                              "Sets the rounding type.\n\n        Sets the rounding type, and returns the current (previous)\n        rounding type.  Often used like:\n\n        context = context.copy()\n        # so you don't change the calling context\n        # if an error occurs in the middle.\n        rounding = context._set_rounding(ROUND_UP)\n        val = self.__sub__(other, context=context)\n        context._set_rounding(rounding)\n\n        This will make it round up for that operation.\n        "),
                                             ('create_decimal',
                                              ["num='0'"],
                                              'Creates a new Decimal instance but using self as context.\n\n        This method implements the to-number operation of the\n        IBM Decimal specification.'),
                                             ('create_decimal_from_float',
                                              ['f'],
                                              "Creates a new Decimal instance from a float but rounding using self\n        as the context.\n\n        >>> context = Context(prec=5, rounding=ROUND_DOWN)\n        >>> context.create_decimal_from_float(3.1415926535897932)\n        Decimal('3.1415')\n        >>> context = Context(prec=5, traps=[Inexact])\n        >>> context.create_decimal_from_float(3.1415926535897932)\n        Traceback (most recent call last):\n            ...\n        Inexact: None\n\n        "),
                                             ('abs',
                                              ['a'],
                                              "Returns the absolute value of the operand.\n\n        If the operand is negative, the result is the same as using the minus\n        operation on the operand.  Otherwise, the result is the same as using\n        the plus operation on the operand.\n\n        >>> ExtendedContext.abs(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.abs(Decimal('-100'))\n        Decimal('100')\n        >>> ExtendedContext.abs(Decimal('101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.abs(Decimal('-101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.abs(-1)\n        Decimal('1')\n        "),
                                             ('add',
                                              ['a', 'b'],
                                              "Return the sum of the two operands.\n\n        >>> ExtendedContext.add(Decimal('12'), Decimal('7.00'))\n        Decimal('19.00')\n        >>> ExtendedContext.add(Decimal('1E+2'), Decimal('1.01E+4'))\n        Decimal('1.02E+4')\n        >>> ExtendedContext.add(1, Decimal(2))\n        Decimal('3')\n        >>> ExtendedContext.add(Decimal(8), 5)\n        Decimal('13')\n        >>> ExtendedContext.add(5, 5)\n        Decimal('10')\n        "),
                                             ('_apply', ['a'], ''),
                                             ('canonical',
                                              ['a'],
                                              "Returns the same Decimal object.\n\n        As we do not have different encodings for the same number, the\n        received object already is in its canonical form.\n\n        >>> ExtendedContext.canonical(Decimal('2.50'))\n        Decimal('2.50')\n        "),
                                             ('compare',
                                              ['a', 'b'],
                                              "Compares values numerically.\n\n        If the signs of the operands differ, a value representing each operand\n        ('-1' if the operand is less than zero, '0' if the operand is zero or\n        negative zero, or '1' if the operand is greater than zero) is used in\n        place of that operand for the comparison instead of the actual\n        operand.\n\n        The comparison is then effected by subtracting the second operand from\n        the first and then returning a value according to the result of the\n        subtraction: '-1' if the result is less than zero, '0' if the result is\n        zero or negative zero, or '1' if the result is greater than zero.\n\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('3'))\n        Decimal('-1')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.1'))\n        Decimal('0')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('2.10'))\n        Decimal('0')\n        >>> ExtendedContext.compare(Decimal('3'), Decimal('2.1'))\n        Decimal('1')\n        >>> ExtendedContext.compare(Decimal('2.1'), Decimal('-3'))\n        Decimal('1')\n        >>> ExtendedContext.compare(Decimal('-3'), Decimal('2.1'))\n        Decimal('-1')\n        >>> ExtendedContext.compare(1, 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare(Decimal(1), 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare(1, Decimal(2))\n        Decimal('-1')\n        "),
                                             ('compare_signal',
                                              ['a', 'b'],
                                              "Compares the values of the two operands numerically.\n\n        It's pretty much like compare(), but all NaNs signal, with signaling\n        NaNs taking precedence over quiet NaNs.\n\n        >>> c = ExtendedContext\n        >>> c.compare_signal(Decimal('2.1'), Decimal('3'))\n        Decimal('-1')\n        >>> c.compare_signal(Decimal('2.1'), Decimal('2.1'))\n        Decimal('0')\n        >>> c.flags[InvalidOperation] = 0\n        >>> print c.flags[InvalidOperation]\n        0\n        >>> c.compare_signal(Decimal('NaN'), Decimal('2.1'))\n        Decimal('NaN')\n        >>> print c.flags[InvalidOperation]\n        1\n        >>> c.flags[InvalidOperation] = 0\n        >>> print c.flags[InvalidOperation]\n        0\n        >>> c.compare_signal(Decimal('sNaN'), Decimal('2.1'))\n        Decimal('NaN')\n        >>> print c.flags[InvalidOperation]\n        1\n        >>> c.compare_signal(-1, 2)\n        Decimal('-1')\n        >>> c.compare_signal(Decimal(-1), 2)\n        Decimal('-1')\n        >>> c.compare_signal(-1, Decimal(2))\n        Decimal('-1')\n        "),
                                             ('compare_total',
                                              ['a', 'b'],
                                              "Compares two operands using their abstract representation.\n\n        This is not like the standard compare, which use their numerical\n        value. Note that a total ordering is defined for all possible abstract\n        representations.\n\n        >>> ExtendedContext.compare_total(Decimal('12.73'), Decimal('127.9'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('-127'),  Decimal('12'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.3'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal('12.30'), Decimal('12.30'))\n        Decimal('0')\n        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('12.300'))\n        Decimal('1')\n        >>> ExtendedContext.compare_total(Decimal('12.3'),  Decimal('NaN'))\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(1, 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(Decimal(1), 2)\n        Decimal('-1')\n        >>> ExtendedContext.compare_total(1, Decimal(2))\n        Decimal('-1')\n        "),
                                             ('compare_total_mag',
                                              ['a', 'b'],
                                              "Compares two operands using their abstract representation ignoring sign.\n\n        Like compare_total, but with operand's sign ignored and assumed to be 0.\n        "),
                                             ('copy_abs',
                                              ['a'],
                                              "Returns a copy of the operand with the sign set to 0.\n\n        >>> ExtendedContext.copy_abs(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.copy_abs(Decimal('-100'))\n        Decimal('100')\n        >>> ExtendedContext.copy_abs(-1)\n        Decimal('1')\n        "),
                                             ('copy_decimal',
                                              ['a'],
                                              "Returns a copy of the decimal object.\n\n        >>> ExtendedContext.copy_decimal(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.copy_decimal(Decimal('-1.00'))\n        Decimal('-1.00')\n        >>> ExtendedContext.copy_decimal(1)\n        Decimal('1')\n        "),
                                             ('copy_negate',
                                              ['a'],
                                              "Returns a copy of the operand with the sign inverted.\n\n        >>> ExtendedContext.copy_negate(Decimal('101.5'))\n        Decimal('-101.5')\n        >>> ExtendedContext.copy_negate(Decimal('-101.5'))\n        Decimal('101.5')\n        >>> ExtendedContext.copy_negate(1)\n        Decimal('-1')\n        "),
                                             ('copy_sign',
                                              ['a', 'b'],
                                              "Copies the second operand's sign to the first one.\n\n        In detail, it returns a copy of the first operand with the sign\n        equal to the sign of the second operand.\n\n        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('7.33'))\n        Decimal('1.50')\n        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('7.33'))\n        Decimal('1.50')\n        >>> ExtendedContext.copy_sign(Decimal( '1.50'), Decimal('-7.33'))\n        Decimal('-1.50')\n        >>> ExtendedContext.copy_sign(Decimal('-1.50'), Decimal('-7.33'))\n        Decimal('-1.50')\n        >>> ExtendedContext.copy_sign(1, -2)\n        Decimal('-1')\n        >>> ExtendedContext.copy_sign(Decimal(1), -2)\n        Decimal('-1')\n        >>> ExtendedContext.copy_sign(1, Decimal(-2))\n        Decimal('-1')\n        "),
                                             ('divide',
                                              ['a', 'b'],
                                              "Decimal division in a specified context.\n\n        >>> ExtendedContext.divide(Decimal('1'), Decimal('3'))\n        Decimal('0.333333333')\n        >>> ExtendedContext.divide(Decimal('2'), Decimal('3'))\n        Decimal('0.666666667')\n        >>> ExtendedContext.divide(Decimal('5'), Decimal('2'))\n        Decimal('2.5')\n        >>> ExtendedContext.divide(Decimal('1'), Decimal('10'))\n        Decimal('0.1')\n        >>> ExtendedContext.divide(Decimal('12'), Decimal('12'))\n        Decimal('1')\n        >>> ExtendedContext.divide(Decimal('8.00'), Decimal('2'))\n        Decimal('4.00')\n        >>> ExtendedContext.divide(Decimal('2.400'), Decimal('2.0'))\n        Decimal('1.20')\n        >>> ExtendedContext.divide(Decimal('1000'), Decimal('100'))\n        Decimal('10')\n        >>> ExtendedContext.divide(Decimal('1000'), Decimal('1'))\n        Decimal('1000')\n        >>> ExtendedContext.divide(Decimal('2.40E+6'), Decimal('2'))\n        Decimal('1.20E+6')\n        >>> ExtendedContext.divide(5, 5)\n        Decimal('1')\n        >>> ExtendedContext.divide(Decimal(5), 5)\n        Decimal('1')\n        >>> ExtendedContext.divide(5, Decimal(5))\n        Decimal('1')\n        "),
                                             ('divide_int',
                                              ['a', 'b'],
                                              "Divides two numbers and returns the integer part of the result.\n\n        >>> ExtendedContext.divide_int(Decimal('2'), Decimal('3'))\n        Decimal('0')\n        >>> ExtendedContext.divide_int(Decimal('10'), Decimal('3'))\n        Decimal('3')\n        >>> ExtendedContext.divide_int(Decimal('1'), Decimal('0.3'))\n        Decimal('3')\n        >>> ExtendedContext.divide_int(10, 3)\n        Decimal('3')\n        >>> ExtendedContext.divide_int(Decimal(10), 3)\n        Decimal('3')\n        >>> ExtendedContext.divide_int(10, Decimal(3))\n        Decimal('3')\n        "),
                                             ('divmod',
                                              ['a', 'b'],
                                              "Return (a // b, a % b).\n\n        >>> ExtendedContext.divmod(Decimal(8), Decimal(3))\n        (Decimal('2'), Decimal('2'))\n        >>> ExtendedContext.divmod(Decimal(8), Decimal(4))\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(8, 4)\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(Decimal(8), 4)\n        (Decimal('2'), Decimal('0'))\n        >>> ExtendedContext.divmod(8, Decimal(4))\n        (Decimal('2'), Decimal('0'))\n        "),
                                             ('exp',
                                              ['a'],
                                              "Returns e ** a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.exp(Decimal('-Infinity'))\n        Decimal('0')\n        >>> c.exp(Decimal('-1'))\n        Decimal('0.367879441')\n        >>> c.exp(Decimal('0'))\n        Decimal('1')\n        >>> c.exp(Decimal('1'))\n        Decimal('2.71828183')\n        >>> c.exp(Decimal('0.693147181'))\n        Decimal('2.00000000')\n        >>> c.exp(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.exp(10)\n        Decimal('22026.4658')\n        "),
                                             ('fma',
                                              ['a', 'b', 'c'],
                                              "Returns a multiplied by b, plus c.\n\n        The first two operands are multiplied together, using multiply,\n        the third operand is then added to the result of that\n        multiplication, using add, all with only one final rounding.\n\n        >>> ExtendedContext.fma(Decimal('3'), Decimal('5'), Decimal('7'))\n        Decimal('22')\n        >>> ExtendedContext.fma(Decimal('3'), Decimal('-5'), Decimal('7'))\n        Decimal('-8')\n        >>> ExtendedContext.fma(Decimal('888565290'), Decimal('1557.96930'), Decimal('-86087.7578'))\n        Decimal('1.38435736E+12')\n        >>> ExtendedContext.fma(1, 3, 4)\n        Decimal('7')\n        >>> ExtendedContext.fma(1, Decimal(3), 4)\n        Decimal('7')\n        >>> ExtendedContext.fma(1, 3, Decimal(4))\n        Decimal('7')\n        "),
                                             ('is_canonical',
                                              ['a'],
                                              "Return True if the operand is canonical; otherwise return False.\n\n        Currently, the encoding of a Decimal instance is always\n        canonical, so this method returns True for any Decimal.\n\n        >>> ExtendedContext.is_canonical(Decimal('2.50'))\n        True\n        "),
                                             ('is_finite',
                                              ['a'],
                                              "Return True if the operand is finite; otherwise return False.\n\n        A Decimal instance is considered finite if it is neither\n        infinite nor a NaN.\n\n        >>> ExtendedContext.is_finite(Decimal('2.50'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('-0.3'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('0'))\n        True\n        >>> ExtendedContext.is_finite(Decimal('Inf'))\n        False\n        >>> ExtendedContext.is_finite(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_finite(1)\n        True\n        "),
                                             ('is_infinite',
                                              ['a'],
                                              "Return True if the operand is infinite; otherwise return False.\n\n        >>> ExtendedContext.is_infinite(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_infinite(Decimal('-Inf'))\n        True\n        >>> ExtendedContext.is_infinite(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_infinite(1)\n        False\n        "),
                                             ('is_nan',
                                              ['a'],
                                              "Return True if the operand is a qNaN or sNaN;\n        otherwise return False.\n\n        >>> ExtendedContext.is_nan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_nan(Decimal('NaN'))\n        True\n        >>> ExtendedContext.is_nan(Decimal('-sNaN'))\n        True\n        >>> ExtendedContext.is_nan(1)\n        False\n        "),
                                             ('is_normal',
                                              ['a'],
                                              "Return True if the operand is a normal number;\n        otherwise return False.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.is_normal(Decimal('2.50'))\n        True\n        >>> c.is_normal(Decimal('0.1E-999'))\n        False\n        >>> c.is_normal(Decimal('0.00'))\n        False\n        >>> c.is_normal(Decimal('-Inf'))\n        False\n        >>> c.is_normal(Decimal('NaN'))\n        False\n        >>> c.is_normal(1)\n        True\n        "),
                                             ('is_qnan',
                                              ['a'],
                                              "Return True if the operand is a quiet NaN; otherwise return False.\n\n        >>> ExtendedContext.is_qnan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_qnan(Decimal('NaN'))\n        True\n        >>> ExtendedContext.is_qnan(Decimal('sNaN'))\n        False\n        >>> ExtendedContext.is_qnan(1)\n        False\n        "),
                                             ('is_signed',
                                              ['a'],
                                              "Return True if the operand is negative; otherwise return False.\n\n        >>> ExtendedContext.is_signed(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_signed(Decimal('-12'))\n        True\n        >>> ExtendedContext.is_signed(Decimal('-0'))\n        True\n        >>> ExtendedContext.is_signed(8)\n        False\n        >>> ExtendedContext.is_signed(-8)\n        True\n        "),
                                             ('is_snan',
                                              ['a'],
                                              "Return True if the operand is a signaling NaN;\n        otherwise return False.\n\n        >>> ExtendedContext.is_snan(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_snan(Decimal('NaN'))\n        False\n        >>> ExtendedContext.is_snan(Decimal('sNaN'))\n        True\n        >>> ExtendedContext.is_snan(1)\n        False\n        "),
                                             ('is_subnormal',
                                              ['a'],
                                              "Return True if the operand is subnormal; otherwise return False.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.is_subnormal(Decimal('2.50'))\n        False\n        >>> c.is_subnormal(Decimal('0.1E-999'))\n        True\n        >>> c.is_subnormal(Decimal('0.00'))\n        False\n        >>> c.is_subnormal(Decimal('-Inf'))\n        False\n        >>> c.is_subnormal(Decimal('NaN'))\n        False\n        >>> c.is_subnormal(1)\n        False\n        "),
                                             ('is_zero',
                                              ['a'],
                                              "Return True if the operand is a zero; otherwise return False.\n\n        >>> ExtendedContext.is_zero(Decimal('0'))\n        True\n        >>> ExtendedContext.is_zero(Decimal('2.50'))\n        False\n        >>> ExtendedContext.is_zero(Decimal('-0E+2'))\n        True\n        >>> ExtendedContext.is_zero(1)\n        False\n        >>> ExtendedContext.is_zero(0)\n        True\n        "),
                                             ('ln',
                                              ['a'],
                                              "Returns the natural (base e) logarithm of the operand.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.ln(Decimal('0'))\n        Decimal('-Infinity')\n        >>> c.ln(Decimal('1.000'))\n        Decimal('0')\n        >>> c.ln(Decimal('2.71828183'))\n        Decimal('1.00000000')\n        >>> c.ln(Decimal('10'))\n        Decimal('2.30258509')\n        >>> c.ln(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.ln(1)\n        Decimal('0')\n        "),
                                             ('log10',
                                              ['a'],
                                              "Returns the base 10 logarithm of the operand.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.log10(Decimal('0'))\n        Decimal('-Infinity')\n        >>> c.log10(Decimal('0.001'))\n        Decimal('-3')\n        >>> c.log10(Decimal('1.000'))\n        Decimal('0')\n        >>> c.log10(Decimal('2'))\n        Decimal('0.301029996')\n        >>> c.log10(Decimal('10'))\n        Decimal('1')\n        >>> c.log10(Decimal('70'))\n        Decimal('1.84509804')\n        >>> c.log10(Decimal('+Infinity'))\n        Decimal('Infinity')\n        >>> c.log10(0)\n        Decimal('-Infinity')\n        >>> c.log10(1)\n        Decimal('0')\n        "),
                                             ('logb',
                                              ['a'],
                                              " Returns the exponent of the magnitude of the operand's MSD.\n\n        The result is the integer which is the exponent of the magnitude\n        of the most significant digit of the operand (as though the\n        operand were truncated to a single digit while maintaining the\n        value of that digit and without limiting the resulting exponent).\n\n        >>> ExtendedContext.logb(Decimal('250'))\n        Decimal('2')\n        >>> ExtendedContext.logb(Decimal('2.50'))\n        Decimal('0')\n        >>> ExtendedContext.logb(Decimal('0.03'))\n        Decimal('-2')\n        >>> ExtendedContext.logb(Decimal('0'))\n        Decimal('-Infinity')\n        >>> ExtendedContext.logb(1)\n        Decimal('0')\n        >>> ExtendedContext.logb(10)\n        Decimal('1')\n        >>> ExtendedContext.logb(100)\n        Decimal('2')\n        "),
                                             ('logical_and',
                                              ['a', 'b'],
                                              "Applies the logical operation 'and' between each operand's digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('0'), Decimal('1'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_and(Decimal('1'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_and(Decimal('1100'), Decimal('1010'))\n        Decimal('1000')\n        >>> ExtendedContext.logical_and(Decimal('1111'), Decimal('10'))\n        Decimal('10')\n        >>> ExtendedContext.logical_and(110, 1101)\n        Decimal('100')\n        >>> ExtendedContext.logical_and(Decimal(110), 1101)\n        Decimal('100')\n        >>> ExtendedContext.logical_and(110, Decimal(1101))\n        Decimal('100')\n        "),
                                             ('logical_invert',
                                              ['a'],
                                              "Invert all the digits in the operand.\n\n        The operand must be a logical number.\n\n        >>> ExtendedContext.logical_invert(Decimal('0'))\n        Decimal('111111111')\n        >>> ExtendedContext.logical_invert(Decimal('1'))\n        Decimal('111111110')\n        >>> ExtendedContext.logical_invert(Decimal('111111111'))\n        Decimal('0')\n        >>> ExtendedContext.logical_invert(Decimal('101010101'))\n        Decimal('10101010')\n        >>> ExtendedContext.logical_invert(1101)\n        Decimal('111110010')\n        "),
                                             ('logical_or',
                                              ['a', 'b'],
                                              "Applies the logical operation 'or' between each operand's digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_or(Decimal('0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('0'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_or(Decimal('1100'), Decimal('1010'))\n        Decimal('1110')\n        >>> ExtendedContext.logical_or(Decimal('1110'), Decimal('10'))\n        Decimal('1110')\n        >>> ExtendedContext.logical_or(110, 1101)\n        Decimal('1111')\n        >>> ExtendedContext.logical_or(Decimal(110), 1101)\n        Decimal('1111')\n        >>> ExtendedContext.logical_or(110, Decimal(1101))\n        Decimal('1111')\n        "),
                                             ('logical_xor',
                                              ['a', 'b'],
                                              "Applies the logical operation 'xor' between each operand's digits.\n\n        The operands must be both logical numbers.\n\n        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.logical_xor(Decimal('0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('0'))\n        Decimal('1')\n        >>> ExtendedContext.logical_xor(Decimal('1'), Decimal('1'))\n        Decimal('0')\n        >>> ExtendedContext.logical_xor(Decimal('1100'), Decimal('1010'))\n        Decimal('110')\n        >>> ExtendedContext.logical_xor(Decimal('1111'), Decimal('10'))\n        Decimal('1101')\n        >>> ExtendedContext.logical_xor(110, 1101)\n        Decimal('1011')\n        >>> ExtendedContext.logical_xor(Decimal(110), 1101)\n        Decimal('1011')\n        >>> ExtendedContext.logical_xor(110, Decimal(1101))\n        Decimal('1011')\n        "),
                                             ('max',
                                              ['a', 'b'],
                                              "max compares two values numerically and returns the maximum.\n\n        If either operand is a NaN then the general rules apply.\n        Otherwise, the operands are compared as though by the compare\n        operation.  If they are numerically equal then the left-hand operand\n        is chosen as the result.  Otherwise the maximum (closer to positive\n        infinity) of the two operands is chosen as the result.\n\n        >>> ExtendedContext.max(Decimal('3'), Decimal('2'))\n        Decimal('3')\n        >>> ExtendedContext.max(Decimal('-10'), Decimal('3'))\n        Decimal('3')\n        >>> ExtendedContext.max(Decimal('1.0'), Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.max(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.max(1, 2)\n        Decimal('2')\n        >>> ExtendedContext.max(Decimal(1), 2)\n        Decimal('2')\n        >>> ExtendedContext.max(1, Decimal(2))\n        Decimal('2')\n        "),
                                             ('max_mag',
                                              ['a', 'b'],
                                              "Compares the values numerically with their sign ignored.\n\n        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.max_mag(Decimal('7'), Decimal('-10'))\n        Decimal('-10')\n        >>> ExtendedContext.max_mag(1, -2)\n        Decimal('-2')\n        >>> ExtendedContext.max_mag(Decimal(1), -2)\n        Decimal('-2')\n        >>> ExtendedContext.max_mag(1, Decimal(-2))\n        Decimal('-2')\n        "),
                                             ('min',
                                              ['a', 'b'],
                                              "min compares two values numerically and returns the minimum.\n\n        If either operand is a NaN then the general rules apply.\n        Otherwise, the operands are compared as though by the compare\n        operation.  If they are numerically equal then the left-hand operand\n        is chosen as the result.  Otherwise the minimum (closer to negative\n        infinity) of the two operands is chosen as the result.\n\n        >>> ExtendedContext.min(Decimal('3'), Decimal('2'))\n        Decimal('2')\n        >>> ExtendedContext.min(Decimal('-10'), Decimal('3'))\n        Decimal('-10')\n        >>> ExtendedContext.min(Decimal('1.0'), Decimal('1'))\n        Decimal('1.0')\n        >>> ExtendedContext.min(Decimal('7'), Decimal('NaN'))\n        Decimal('7')\n        >>> ExtendedContext.min(1, 2)\n        Decimal('1')\n        >>> ExtendedContext.min(Decimal(1), 2)\n        Decimal('1')\n        >>> ExtendedContext.min(1, Decimal(29))\n        Decimal('1')\n        "),
                                             ('min_mag',
                                              ['a', 'b'],
                                              "Compares the values numerically with their sign ignored.\n\n        >>> ExtendedContext.min_mag(Decimal('3'), Decimal('-2'))\n        Decimal('-2')\n        >>> ExtendedContext.min_mag(Decimal('-3'), Decimal('NaN'))\n        Decimal('-3')\n        >>> ExtendedContext.min_mag(1, -2)\n        Decimal('1')\n        >>> ExtendedContext.min_mag(Decimal(1), -2)\n        Decimal('1')\n        >>> ExtendedContext.min_mag(1, Decimal(-2))\n        Decimal('1')\n        "),
                                             ('minus',
                                              ['a'],
                                              "Minus corresponds to unary prefix minus in Python.\n\n        The operation is evaluated using the same rules as subtract; the\n        operation minus(a) is calculated as subtract('0', a) where the '0'\n        has the same exponent as the operand.\n\n        >>> ExtendedContext.minus(Decimal('1.3'))\n        Decimal('-1.3')\n        >>> ExtendedContext.minus(Decimal('-1.3'))\n        Decimal('1.3')\n        >>> ExtendedContext.minus(1)\n        Decimal('-1')\n        "),
                                             ('multiply',
                                              ['a', 'b'],
                                              "multiply multiplies two operands.\n\n        If either operand is a special value then the general rules apply.\n        Otherwise, the operands are multiplied together\n        ('long multiplication'), resulting in a number which may be as long as\n        the sum of the lengths of the two operands.\n\n        >>> ExtendedContext.multiply(Decimal('1.20'), Decimal('3'))\n        Decimal('3.60')\n        >>> ExtendedContext.multiply(Decimal('7'), Decimal('3'))\n        Decimal('21')\n        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('0.8'))\n        Decimal('0.72')\n        >>> ExtendedContext.multiply(Decimal('0.9'), Decimal('-0'))\n        Decimal('-0.0')\n        >>> ExtendedContext.multiply(Decimal('654321'), Decimal('654321'))\n        Decimal('4.28135971E+11')\n        >>> ExtendedContext.multiply(7, 7)\n        Decimal('49')\n        >>> ExtendedContext.multiply(Decimal(7), 7)\n        Decimal('49')\n        >>> ExtendedContext.multiply(7, Decimal(7))\n        Decimal('49')\n        "),
                                             ('next_minus',
                                              ['a'],
                                              "Returns the largest representable number smaller than a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> ExtendedContext.next_minus(Decimal('1'))\n        Decimal('0.999999999')\n        >>> c.next_minus(Decimal('1E-1007'))\n        Decimal('0E-1007')\n        >>> ExtendedContext.next_minus(Decimal('-1.00000003'))\n        Decimal('-1.00000004')\n        >>> c.next_minus(Decimal('Infinity'))\n        Decimal('9.99999999E+999')\n        >>> c.next_minus(1)\n        Decimal('0.999999999')\n        "),
                                             ('next_plus',
                                              ['a'],
                                              "Returns the smallest representable number larger than a.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> ExtendedContext.next_plus(Decimal('1'))\n        Decimal('1.00000001')\n        >>> c.next_plus(Decimal('-1E-1007'))\n        Decimal('-0E-1007')\n        >>> ExtendedContext.next_plus(Decimal('-1.00000003'))\n        Decimal('-1.00000002')\n        >>> c.next_plus(Decimal('-Infinity'))\n        Decimal('-9.99999999E+999')\n        >>> c.next_plus(1)\n        Decimal('1.00000001')\n        "),
                                             ('next_toward',
                                              ['a', 'b'],
                                              "Returns the number closest to a, in direction towards b.\n\n        The result is the closest representable number from the first\n        operand (but not the first operand) that is in the direction\n        towards the second operand, unless the operands have the same\n        value.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.next_toward(Decimal('1'), Decimal('2'))\n        Decimal('1.00000001')\n        >>> c.next_toward(Decimal('-1E-1007'), Decimal('1'))\n        Decimal('-0E-1007')\n        >>> c.next_toward(Decimal('-1.00000003'), Decimal('0'))\n        Decimal('-1.00000002')\n        >>> c.next_toward(Decimal('1'), Decimal('0'))\n        Decimal('0.999999999')\n        >>> c.next_toward(Decimal('1E-1007'), Decimal('-100'))\n        Decimal('0E-1007')\n        >>> c.next_toward(Decimal('-1.00000003'), Decimal('-10'))\n        Decimal('-1.00000004')\n        >>> c.next_toward(Decimal('0.00'), Decimal('-0.0000'))\n        Decimal('-0.00')\n        >>> c.next_toward(0, 1)\n        Decimal('1E-1007')\n        >>> c.next_toward(Decimal(0), 1)\n        Decimal('1E-1007')\n        >>> c.next_toward(0, Decimal(1))\n        Decimal('1E-1007')\n        "),
                                             ('normalize',
                                              ['a'],
                                              "normalize reduces an operand to its simplest form.\n\n        Essentially a plus operation with all trailing zeros removed from the\n        result.\n\n        >>> ExtendedContext.normalize(Decimal('2.1'))\n        Decimal('2.1')\n        >>> ExtendedContext.normalize(Decimal('-2.0'))\n        Decimal('-2')\n        >>> ExtendedContext.normalize(Decimal('1.200'))\n        Decimal('1.2')\n        >>> ExtendedContext.normalize(Decimal('-120'))\n        Decimal('-1.2E+2')\n        >>> ExtendedContext.normalize(Decimal('120.00'))\n        Decimal('1.2E+2')\n        >>> ExtendedContext.normalize(Decimal('0.00'))\n        Decimal('0')\n        >>> ExtendedContext.normalize(6)\n        Decimal('6')\n        "),
                                             ('number_class',
                                              ['a'],
                                              "Returns an indication of the class of the operand.\n\n        The class is one of the following strings:\n          -sNaN\n          -NaN\n          -Infinity\n          -Normal\n          -Subnormal\n          -Zero\n          +Zero\n          +Subnormal\n          +Normal\n          +Infinity\n\n        >>> c = Context(ExtendedContext)\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.number_class(Decimal('Infinity'))\n        '+Infinity'\n        >>> c.number_class(Decimal('1E-10'))\n        '+Normal'\n        >>> c.number_class(Decimal('2.50'))\n        '+Normal'\n        >>> c.number_class(Decimal('0.1E-999'))\n        '+Subnormal'\n        >>> c.number_class(Decimal('0'))\n        '+Zero'\n        >>> c.number_class(Decimal('-0'))\n        '-Zero'\n        >>> c.number_class(Decimal('-0.1E-999'))\n        '-Subnormal'\n        >>> c.number_class(Decimal('-1E-10'))\n        '-Normal'\n        >>> c.number_class(Decimal('-2.50'))\n        '-Normal'\n        >>> c.number_class(Decimal('-Infinity'))\n        '-Infinity'\n        >>> c.number_class(Decimal('NaN'))\n        'NaN'\n        >>> c.number_class(Decimal('-NaN'))\n        'NaN'\n        >>> c.number_class(Decimal('sNaN'))\n        'sNaN'\n        >>> c.number_class(123)\n        '+Normal'\n        "),
                                             ('plus',
                                              ['a'],
                                              "Plus corresponds to unary prefix plus in Python.\n\n        The operation is evaluated using the same rules as add; the\n        operation plus(a) is calculated as add('0', a) where the '0'\n        has the same exponent as the operand.\n\n        >>> ExtendedContext.plus(Decimal('1.3'))\n        Decimal('1.3')\n        >>> ExtendedContext.plus(Decimal('-1.3'))\n        Decimal('-1.3')\n        >>> ExtendedContext.plus(-1)\n        Decimal('-1')\n        "),
                                             ('power',
                                              ['a', 'b', 'modulo=None'],
                                              "Raises a to the power of b, to modulo if given.\n\n        With two arguments, compute a**b.  If a is negative then b\n        must be integral.  The result will be inexact unless b is\n        integral and the result is finite and can be expressed exactly\n        in 'precision' digits.\n\n        With three arguments, compute (a**b) % modulo.  For the\n        three argument form, the following restrictions on the\n        arguments hold:\n\n         - all three arguments must be integral\n         - b must be nonnegative\n         - at least one of a or b must be nonzero\n         - modulo must be nonzero and have at most 'precision' digits\n\n        The result of pow(a, b, modulo) is identical to the result\n        that would be obtained by computing (a**b) % modulo with\n        unbounded precision, but is computed more efficiently.  It is\n        always exact.\n\n        >>> c = ExtendedContext.copy()\n        >>> c.Emin = -999\n        >>> c.Emax = 999\n        >>> c.power(Decimal('2'), Decimal('3'))\n        Decimal('8')\n        >>> c.power(Decimal('-2'), Decimal('3'))\n        Decimal('-8')\n        >>> c.power(Decimal('2'), Decimal('-3'))\n        Decimal('0.125')\n        >>> c.power(Decimal('1.7'), Decimal('8'))\n        Decimal('69.7575744')\n        >>> c.power(Decimal('10'), Decimal('0.301029996'))\n        Decimal('2.00000000')\n        >>> c.power(Decimal('Infinity'), Decimal('-1'))\n        Decimal('0')\n        >>> c.power(Decimal('Infinity'), Decimal('0'))\n        Decimal('1')\n        >>> c.power(Decimal('Infinity'), Decimal('1'))\n        Decimal('Infinity')\n        >>> c.power(Decimal('-Infinity'), Decimal('-1'))\n        Decimal('-0')\n        >>> c.power(Decimal('-Infinity'), Decimal('0'))\n        Decimal('1')\n        >>> c.power(Decimal('-Infinity'), Decimal('1'))\n        Decimal('-Infinity')\n        >>> c.power(Decimal('-Infinity'), Decimal('2'))\n        Decimal('Infinity')\n        >>> c.power(Decimal('0'), Decimal('0'))\n        Decimal('NaN')\n\n        >>> c.power(Decimal('3'), Decimal('7'), Decimal('16'))\n        Decimal('11')\n        >>> c.power(Decimal('-3'), Decimal('7'), Decimal('16'))\n        Decimal('-11')\n        >>> c.power(Decimal('-3'), Decimal('8'), Decimal('16'))\n        Decimal('1')\n        >>> c.power(Decimal('3'), Decimal('7'), Decimal('-16'))\n        Decimal('11')\n        >>> c.power(Decimal('23E12345'), Decimal('67E189'), Decimal('123456789'))\n        Decimal('11729830')\n        >>> c.power(Decimal('-0'), Decimal('17'), Decimal('1729'))\n        Decimal('-0')\n        >>> c.power(Decimal('-23'), Decimal('0'), Decimal('65537'))\n        Decimal('1')\n        >>> ExtendedContext.power(7, 7)\n        Decimal('823543')\n        >>> ExtendedContext.power(Decimal(7), 7)\n        Decimal('823543')\n        >>> ExtendedContext.power(7, Decimal(7), 2)\n        Decimal('1')\n        "),
                                             ('quantize',
                                              ['a', 'b'],
                                              "Returns a value equal to 'a' (rounded), having the exponent of 'b'.\n\n        The coefficient of the result is derived from that of the left-hand\n        operand.  It may be rounded using the current rounding setting (if the\n        exponent is being increased), multiplied by a positive power of ten (if\n        the exponent is being decreased), or is unchanged (if the exponent is\n        already equal to that of the right-hand operand).\n\n        Unlike other operations, if the length of the coefficient after the\n        quantize operation would be greater than precision then an Invalid\n        operation condition is raised.  This guarantees that, unless there is\n        an error condition, the exponent of the result of a quantize is always\n        equal to that of the right-hand operand.\n\n        Also unlike other operations, quantize will never raise Underflow, even\n        if the result is subnormal and inexact.\n\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.001'))\n        Decimal('2.170')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.01'))\n        Decimal('2.17')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('0.1'))\n        Decimal('2.2')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+0'))\n        Decimal('2')\n        >>> ExtendedContext.quantize(Decimal('2.17'), Decimal('1e+1'))\n        Decimal('0E+1')\n        >>> ExtendedContext.quantize(Decimal('-Inf'), Decimal('Infinity'))\n        Decimal('-Infinity')\n        >>> ExtendedContext.quantize(Decimal('2'), Decimal('Infinity'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('-0.1'), Decimal('1'))\n        Decimal('-0')\n        >>> ExtendedContext.quantize(Decimal('-0'), Decimal('1e+5'))\n        Decimal('-0E+5')\n        >>> ExtendedContext.quantize(Decimal('+35236450.6'), Decimal('1e-2'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('-35236450.6'), Decimal('1e-2'))\n        Decimal('NaN')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-1'))\n        Decimal('217.0')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e-0'))\n        Decimal('217')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+1'))\n        Decimal('2.2E+2')\n        >>> ExtendedContext.quantize(Decimal('217'), Decimal('1e+2'))\n        Decimal('2E+2')\n        >>> ExtendedContext.quantize(1, 2)\n        Decimal('1')\n        >>> ExtendedContext.quantize(Decimal(1), 2)\n        Decimal('1')\n        >>> ExtendedContext.quantize(1, Decimal(2))\n        Decimal('1')\n        "),
                                             ('radix',
                                              [],
                                              "Just returns 10, as this is Decimal, :)\n\n        >>> ExtendedContext.radix()\n        Decimal('10')\n        "),
                                             ('remainder',
                                              ['a', 'b'],
                                              "Returns the remainder from integer division.\n\n        The result is the residue of the dividend after the operation of\n        calculating integer division as described for divide-integer, rounded\n        to precision digits if necessary.  The sign of the result, if\n        non-zero, is the same as that of the original dividend.\n\n        This operation will fail under the same conditions as integer division\n        (that is, if integer division on the same two operands would fail, the\n        remainder cannot be calculated).\n\n        >>> ExtendedContext.remainder(Decimal('2.1'), Decimal('3'))\n        Decimal('2.1')\n        >>> ExtendedContext.remainder(Decimal('10'), Decimal('3'))\n        Decimal('1')\n        >>> ExtendedContext.remainder(Decimal('-10'), Decimal('3'))\n        Decimal('-1')\n        >>> ExtendedContext.remainder(Decimal('10.2'), Decimal('1'))\n        Decimal('0.2')\n        >>> ExtendedContext.remainder(Decimal('10'), Decimal('0.3'))\n        Decimal('0.1')\n        >>> ExtendedContext.remainder(Decimal('3.6'), Decimal('1.3'))\n        Decimal('1.0')\n        >>> ExtendedContext.remainder(22, 6)\n        Decimal('4')\n        >>> ExtendedContext.remainder(Decimal(22), 6)\n        Decimal('4')\n        >>> ExtendedContext.remainder(22, Decimal(6))\n        Decimal('4')\n        "),
                                             ('remainder_near',
                                              ['a', 'b'],
                                              'Returns to be "a - b * n", where n is the integer nearest the exact\n        value of "x / b" (if two integers are equally near then the even one\n        is chosen).  If the result is equal to 0 then its sign will be the\n        sign of a.\n\n        This operation will fail under the same conditions as integer division\n        (that is, if integer division on the same two operands would fail, the\n        remainder cannot be calculated).\n\n        >>> ExtendedContext.remainder_near(Decimal(\'2.1\'), Decimal(\'3\'))\n        Decimal(\'-0.9\')\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'6\'))\n        Decimal(\'-2\')\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'3\'))\n        Decimal(\'1\')\n        >>> ExtendedContext.remainder_near(Decimal(\'-10\'), Decimal(\'3\'))\n        Decimal(\'-1\')\n        >>> ExtendedContext.remainder_near(Decimal(\'10.2\'), Decimal(\'1\'))\n        Decimal(\'0.2\')\n        >>> ExtendedContext.remainder_near(Decimal(\'10\'), Decimal(\'0.3\'))\n        Decimal(\'0.1\')\n        >>> ExtendedContext.remainder_near(Decimal(\'3.6\'), Decimal(\'1.3\'))\n        Decimal(\'-0.3\')\n        >>> ExtendedContext.remainder_near(3, 11)\n        Decimal(\'3\')\n        >>> ExtendedContext.remainder_near(Decimal(3), 11)\n        Decimal(\'3\')\n        >>> ExtendedContext.remainder_near(3, Decimal(11))\n        Decimal(\'3\')\n        '),
                                             ('rotate',
                                              ['a', 'b'],
                                              "Returns a rotated copy of a, b times.\n\n        The coefficient of the result is a rotated copy of the digits in\n        the coefficient of the first operand.  The number of places of\n        rotation is taken from the absolute value of the second operand,\n        with the rotation being to the left if the second operand is\n        positive or to the right otherwise.\n\n        >>> ExtendedContext.rotate(Decimal('34'), Decimal('8'))\n        Decimal('400000003')\n        >>> ExtendedContext.rotate(Decimal('12'), Decimal('9'))\n        Decimal('12')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('-2'))\n        Decimal('891234567')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('0'))\n        Decimal('123456789')\n        >>> ExtendedContext.rotate(Decimal('123456789'), Decimal('+2'))\n        Decimal('345678912')\n        >>> ExtendedContext.rotate(1333333, 1)\n        Decimal('13333330')\n        >>> ExtendedContext.rotate(Decimal(1333333), 1)\n        Decimal('13333330')\n        >>> ExtendedContext.rotate(1333333, Decimal(1))\n        Decimal('13333330')\n        "),
                                             ('same_quantum',
                                              ['a', 'b'],
                                              "Returns True if the two operands have the same exponent.\n\n        The result is never affected by either the sign or the coefficient of\n        either operand.\n\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.001'))\n        False\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('0.01'))\n        True\n        >>> ExtendedContext.same_quantum(Decimal('2.17'), Decimal('1'))\n        False\n        >>> ExtendedContext.same_quantum(Decimal('Inf'), Decimal('-Inf'))\n        True\n        >>> ExtendedContext.same_quantum(10000, -1)\n        True\n        >>> ExtendedContext.same_quantum(Decimal(10000), -1)\n        True\n        >>> ExtendedContext.same_quantum(10000, Decimal(-1))\n        True\n        "),
                                             ('scaleb',
                                              ['a', 'b'],
                                              "Returns the first operand after adding the second value its exp.\n\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('-2'))\n        Decimal('0.0750')\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('0'))\n        Decimal('7.50')\n        >>> ExtendedContext.scaleb(Decimal('7.50'), Decimal('3'))\n        Decimal('7.50E+3')\n        >>> ExtendedContext.scaleb(1, 4)\n        Decimal('1E+4')\n        >>> ExtendedContext.scaleb(Decimal(1), 4)\n        Decimal('1E+4')\n        >>> ExtendedContext.scaleb(1, Decimal(4))\n        Decimal('1E+4')\n        "),
                                             ('shift',
                                              ['a', 'b'],
                                              "Returns a shifted copy of a, b times.\n\n        The coefficient of the result is a shifted copy of the digits\n        in the coefficient of the first operand.  The number of places\n        to shift is taken from the absolute value of the second operand,\n        with the shift being to the left if the second operand is\n        positive or to the right otherwise.  Digits shifted into the\n        coefficient are zeros.\n\n        >>> ExtendedContext.shift(Decimal('34'), Decimal('8'))\n        Decimal('400000000')\n        >>> ExtendedContext.shift(Decimal('12'), Decimal('9'))\n        Decimal('0')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('-2'))\n        Decimal('1234567')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('0'))\n        Decimal('123456789')\n        >>> ExtendedContext.shift(Decimal('123456789'), Decimal('+2'))\n        Decimal('345678900')\n        >>> ExtendedContext.shift(88888888, 2)\n        Decimal('888888800')\n        >>> ExtendedContext.shift(Decimal(88888888), 2)\n        Decimal('888888800')\n        >>> ExtendedContext.shift(88888888, Decimal(2))\n        Decimal('888888800')\n        "),
                                             ('sqrt',
                                              ['a'],
                                              "Square root of a non-negative number to context precision.\n\n        If the result must be inexact, it is rounded using the round-half-even\n        algorithm.\n\n        >>> ExtendedContext.sqrt(Decimal('0'))\n        Decimal('0')\n        >>> ExtendedContext.sqrt(Decimal('-0'))\n        Decimal('-0')\n        >>> ExtendedContext.sqrt(Decimal('0.39'))\n        Decimal('0.624499800')\n        >>> ExtendedContext.sqrt(Decimal('100'))\n        Decimal('10')\n        >>> ExtendedContext.sqrt(Decimal('1'))\n        Decimal('1')\n        >>> ExtendedContext.sqrt(Decimal('1.0'))\n        Decimal('1.0')\n        >>> ExtendedContext.sqrt(Decimal('1.00'))\n        Decimal('1.0')\n        >>> ExtendedContext.sqrt(Decimal('7'))\n        Decimal('2.64575131')\n        >>> ExtendedContext.sqrt(Decimal('10'))\n        Decimal('3.16227766')\n        >>> ExtendedContext.sqrt(2)\n        Decimal('1.41421356')\n        >>> ExtendedContext.prec\n        9\n        "),
                                             ('subtract',
                                              ['a', 'b'],
                                              "Return the difference between the two operands.\n\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.07'))\n        Decimal('0.23')\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('1.30'))\n        Decimal('0.00')\n        >>> ExtendedContext.subtract(Decimal('1.3'), Decimal('2.07'))\n        Decimal('-0.77')\n        >>> ExtendedContext.subtract(8, 5)\n        Decimal('3')\n        >>> ExtendedContext.subtract(Decimal(8), 5)\n        Decimal('3')\n        >>> ExtendedContext.subtract(8, Decimal(5))\n        Decimal('3')\n        "),
                                             ('to_eng_string',
                                              ['a'],
                                              'Converts a number to a string, using scientific notation.\n\n        The operation is not affected by the context.\n        '),
                                             ('to_sci_string',
                                              ['a'],
                                              'Converts a number to a string, using scientific notation.\n\n        The operation is not affected by the context.\n        '),
                                             ('to_integral_exact',
                                              ['a'],
                                              "Rounds to an integer.\n\n        When the operand has a negative exponent, the result is the same\n        as using the quantize() operation using the given operand as the\n        left-hand-operand, 1E+0 as the right-hand-operand, and the precision\n        of the operand as the precision setting; Inexact and Rounded flags\n        are allowed in this operation.  The rounding mode is taken from the\n        context.\n\n        >>> ExtendedContext.to_integral_exact(Decimal('2.1'))\n        Decimal('2')\n        >>> ExtendedContext.to_integral_exact(Decimal('100'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_exact(Decimal('100.0'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_exact(Decimal('101.5'))\n        Decimal('102')\n        >>> ExtendedContext.to_integral_exact(Decimal('-101.5'))\n        Decimal('-102')\n        >>> ExtendedContext.to_integral_exact(Decimal('10E+5'))\n        Decimal('1.0E+6')\n        >>> ExtendedContext.to_integral_exact(Decimal('7.89E+77'))\n        Decimal('7.89E+77')\n        >>> ExtendedContext.to_integral_exact(Decimal('-Inf'))\n        Decimal('-Infinity')\n        "),
                                             ('to_integral_value',
                                              ['a'],
                                              "Rounds to an integer.\n\n        When the operand has a negative exponent, the result is the same\n        as using the quantize() operation using the given operand as the\n        left-hand-operand, 1E+0 as the right-hand-operand, and the precision\n        of the operand as the precision setting, except that no flags will\n        be set.  The rounding mode is taken from the context.\n\n        >>> ExtendedContext.to_integral_value(Decimal('2.1'))\n        Decimal('2')\n        >>> ExtendedContext.to_integral_value(Decimal('100'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_value(Decimal('100.0'))\n        Decimal('100')\n        >>> ExtendedContext.to_integral_value(Decimal('101.5'))\n        Decimal('102')\n        >>> ExtendedContext.to_integral_value(Decimal('-101.5'))\n        Decimal('-102')\n        >>> ExtendedContext.to_integral_value(Decimal('10E+5'))\n        Decimal('1.0E+6')\n        >>> ExtendedContext.to_integral_value(Decimal('7.89E+77'))\n        Decimal('7.89E+77')\n        >>> ExtendedContext.to_integral_value(Decimal('-Inf'))\n        Decimal('-Infinity')\n        ")],
                                 'properties': ['prec',
                                                'rounding',
                                                'Emin',
                                                'Emax',
                                                'capitals',
                                                '_clamp',
                                                '_ignored_flags',
                                                'traps',
                                                'flags',
                                                '__copy__',
                                                '__hash__',
                                                'to_integral']},
             'decimal.ConversionSyntax': {'bases': ['decimal.InvalidOperation'],
                                          'constructor': [],
                                          'docstring': 'Trying to convert badly formed string.\n\n    This occurs and signals invalid-operation if an string is being\n    converted to a number and it does not conform to the numeric string\n    syntax.  The result is [0,qNaN].\n    ',
                                          'methods': [('handle', ['context', '*args'], '')],
                                          'properties': []},
             'decimal.Decimal': {'bases': ['object'],
                                 'constructor': [],
                                 'docstring': 'Floating point class for decimal arithmetic.',
                                 'methods': [('__new__',
                                              ["value='0'", 'context=None'],
                                              "Create a decimal point instance.\n\n        >>> Decimal('3.14')              # string input\n        Decimal('3.14')\n        >>> Decimal((0, (3, 1, 4), -2))  # tuple (sign, digit_tuple, exponent)\n        Decimal('3.14')\n        >>> Decimal(314)                 # int or long\n        Decimal('314')\n        >>> Decimal(Decimal(314))        # another decimal instance\n        Decimal('314')\n        >>> Decimal('  3.14  \\n')        # leading and trailing whitespace okay\n        Decimal('3.14')\n        "),
                                             ('from_float',
                                              ['f'],
                                              "Converts a float to a decimal number, exactly.\n\n        Note that Decimal.from_float(0.1) is not the same as Decimal('0.1').\n        Since 0.1 is not exactly representable in binary floating point, the\n        value is stored as the nearest representable value which is\n        0x1.999999999999ap-4.  The exact equivalent of the value in decimal\n        is 0.1000000000000000055511151231257827021181583404541015625.\n\n        >>> Decimal.from_float(0.1)\n        Decimal('0.1000000000000000055511151231257827021181583404541015625')\n        >>> Decimal.from_float(float('nan'))\n        Decimal('NaN')\n        >>> Decimal.from_float(float('inf'))\n        Decimal('Infinity')\n        >>> Decimal.from_float(-float('inf'))\n        Decimal('-Infinity')\n        >>> Decimal.from_float(-0.0)\n        Decimal('-0')\n\n        "),
                                             ('_isnan',
                                              [],
                                              'Returns whether the number is not actually one.\n\n        0 if a number\n        1 if NaN\n        2 if sNaN\n        '),
                                             ('_isinfinity',
                                              [],
                                              'Returns whether the number is infinite\n\n        0 if finite or not a number\n        1 if +INF\n        -1 if -INF\n        '),
                                             ('_check_nans',
                                              ['other=None', 'context=None'],
                                              'Returns whether the number is not actually one.\n\n        if self, other are sNaN, signal\n        if self, other are NaN return nan\n        return 0\n\n        Done before operations.\n        '),
                                             ('_compare_check_nans',
                                              ['other', 'context'],
                                              'Version of _check_nans used for the signaling comparisons\n        compare_signal, __le__, __lt__, __ge__, __gt__.\n\n        Signal InvalidOperation if either self or other is a (quiet\n        or signaling) NaN.  Signaling NaNs take precedence over quiet\n        NaNs.\n\n        Return 0 if neither operand is a NaN.\n\n        '),
                                             ('__nonzero__',
                                              [],
                                              'Return True if self is nonzero; otherwise return False.\n\n        NaNs and infinities are considered nonzero.\n        '),
                                             ('_cmp',
                                              ['other'],
                                              'Compare the two non-NaN decimal instances self and other.\n\n        Returns -1 if self < other, 0 if self == other and 1\n        if self > other.  This routine is for internal use only.'),
                                             ('__eq__', ['other', 'context=None'], ''),
                                             ('__ne__', ['other', 'context=None'], ''),
                                             ('__lt__', ['other', 'context=None'], ''),
                                             ('__le__', ['other', 'context=None'], ''),
                                             ('__gt__', ['other', 'context=None'], ''),
                                             ('__ge__', ['other', 'context=None'], ''),
                                             ('compare',
                                              ['other', 'context=None'],
                                              'Compares one to another.\n\n        -1 => a < b\n        0  => a = b\n        1  => a > b\n        NaN => one is NaN\n        Like __cmp__, but returns Decimal instances.\n        '),
                                             ('__hash__', [], 'x.__hash__() <==> hash(x)'),
                                             ('as_tuple',
                                              [],
                                              'Represents the number as a triple tuple.\n\n        To show the internals exactly as they are.\n        '),
                                             ('__repr__',
                                              [],
                                              'Represents the number as an instance of Decimal.'),
                                             ('__str__',
                                              ['eng=False', 'context=None'],
                                              'Return string representation of the number in scientific notation.\n\n        Captures all of the information in the underlying representation.\n        '),
                                             ('to_eng_string',
                                              ['context=None'],
                                              'Convert to engineering-type string.\n\n        Engineering notation has an exponent which is a multiple of 3, so there\n        are up to 3 digits left of the decimal place.\n\n        Same rules for when in exponential and when as a value as in __str__.\n        '),
                                             ('__neg__',
                                              ['context=None'],
                                              'Returns a copy with the sign switched.\n\n        Rounds, if it has reason.\n        '),
                                             ('__pos__',
                                              ['context=None'],
                                              'Returns a copy, unless it is a sNaN.\n\n        Rounds the number (if more then precision digits)\n        '),
                                             ('__abs__',
                                              ['round=True', 'context=None'],
                                              "Returns the absolute value of self.\n\n        If the keyword argument 'round' is false, do not round.  The\n        expression self.__abs__(round=False) is equivalent to\n        self.copy_abs().\n        "),
                                             ('__add__',
                                              ['other', 'context=None'],
                                              'Returns self + other.\n\n        -INF + INF (or the reverse) cause InvalidOperation errors.\n        '),
                                             ('__sub__',
                                              ['other', 'context=None'],
                                              'Return self - other'),
                                             ('__rsub__',
                                              ['other', 'context=None'],
                                              'Return other - self'),
                                             ('__mul__',
                                              ['other', 'context=None'],
                                              'Return self * other.\n\n        (+-) INF * 0 (or its reverse) raise InvalidOperation.\n        '),
                                             ('__truediv__',
                                              ['other', 'context=None'],
                                              'Return self / other.'),
                                             ('_divide',
                                              ['other', 'context'],
                                              'Return (self // other, self % other), to context.prec precision.\n\n        Assumes that neither self nor other is a NaN, that self is not\n        infinite and that other is nonzero.\n        '),
                                             ('__rtruediv__',
                                              ['other', 'context=None'],
                                              'Swaps self/other and returns __truediv__.'),
                                             ('__divmod__',
                                              ['other', 'context=None'],
                                              '\n        Return (self // other, self % other)\n        '),
                                             ('__rdivmod__',
                                              ['other', 'context=None'],
                                              'Swaps self/other and returns __divmod__.'),
                                             ('__mod__',
                                              ['other', 'context=None'],
                                              '\n        self % other\n        '),
                                             ('__rmod__',
                                              ['other', 'context=None'],
                                              'Swaps self/other and returns __mod__.'),
                                             ('remainder_near',
                                              ['other', 'context=None'],
                                              '\n        Remainder nearest to 0-  abs(remainder-near) <= other/2\n        '),
                                             ('__floordiv__',
                                              ['other', 'context=None'],
                                              'self // other'),
                                             ('__rfloordiv__',
                                              ['other', 'context=None'],
                                              'Swaps self/other and returns __floordiv__.'),
                                             ('__float__', [], 'Float representation.'),
                                             ('__int__',
                                              [],
                                              'Converts self to an int, truncating if necessary.'),
                                             ('real', [], ''),
                                             ('imag', [], ''),
                                             ('conjugate', [], ''),
                                             ('__complex__', [], ''),
                                             ('__long__',
                                              [],
                                              'Converts to a long.\n\n        Equivalent to long(int(self))\n        '),
                                             ('_fix_nan',
                                              ['context'],
                                              'Decapitate the payload of a NaN to fit the context'),
                                             ('_fix',
                                              ['context'],
                                              'Round if it is necessary to keep self within prec precision.\n\n        Rounds and fixes the exponent.  Does not raise on a sNaN.\n\n        Arguments:\n        self - Decimal instance\n        context - context used.\n        '),
                                             ('_round_down',
                                              ['prec'],
                                              'Also known as round-towards-0, truncate.'),
                                             ('_round_up', ['prec'], 'Rounds away from 0.'),
                                             ('_round_half_up',
                                              ['prec'],
                                              'Rounds 5 up (away from 0)'),
                                             ('_round_half_down', ['prec'], 'Round 5 down'),
                                             ('_round_half_even',
                                              ['prec'],
                                              'Round 5 to even, rest to nearest.'),
                                             ('_round_ceiling',
                                              ['prec'],
                                              'Rounds up (not away from 0 if negative.)'),
                                             ('_round_floor',
                                              ['prec'],
                                              'Rounds down (not towards 0 if negative)'),
                                             ('_round_05up',
                                              ['prec'],
                                              'Round down unless digit prec-1 is 0 or 5.'),
                                             ('fma',
                                              ['other', 'third', 'context=None'],
                                              'Fused multiply-add.\n\n        Returns self*other+third with no rounding of the intermediate\n        product self*other.\n\n        self and other are multiplied together, with no rounding of\n        the result.  The third operand is then added to the result,\n        and a single final rounding is performed.\n        '),
                                             ('_power_modulo',
                                              ['other', 'modulo', 'context=None'],
                                              'Three argument version of __pow__'),
                                             ('_power_exact',
                                              ['other', 'p'],
                                              'Attempt to compute self**other exactly.\n\n        Given Decimals self and other and an integer p, attempt to\n        compute an exact result for the power self**other, with p\n        digits of precision.  Return None if self**other is not\n        exactly representable in p digits.\n\n        Assumes that elimination of special cases has already been\n        performed: self and other must both be nonspecial; self must\n        be positive and not numerically equal to 1; other must be\n        nonzero.  For efficiency, other._exp should not be too large,\n        so that 10**abs(other._exp) is a feasible calculation.'),
                                             ('__pow__',
                                              ['other', 'modulo=None', 'context=None'],
                                              'Return self ** other [ % modulo].\n\n        With two arguments, compute self**other.\n\n        With three arguments, compute (self**other) % modulo.  For the\n        three argument form, the following restrictions on the\n        arguments hold:\n\n         - all three arguments must be integral\n         - other must be nonnegative\n         - either self or other (or both) must be nonzero\n         - modulo must be nonzero and must have at most p digits,\n           where p is the context precision.\n\n        If any of these restrictions is violated the InvalidOperation\n        flag is raised.\n\n        The result of pow(self, other, modulo) is identical to the\n        result that would be obtained by computing (self**other) %\n        modulo with unbounded precision, but is computed more\n        efficiently.  It is always exact.\n        '),
                                             ('__rpow__',
                                              ['other', 'context=None'],
                                              'Swaps self/other and returns __pow__.'),
                                             ('normalize',
                                              ['context=None'],
                                              'Normalize- strip trailing 0s, change anything equal to 0 to 0e0'),
                                             ('quantize',
                                              ['exp',
                                               'rounding=None',
                                               'context=None',
                                               'watchexp=True'],
                                              'Quantize self so its exponent is the same as that of exp.\n\n        Similar to self._rescale(exp._exp) but with error checking.\n        '),
                                             ('same_quantum',
                                              ['other'],
                                              'Return True if self and other have the same exponent; otherwise\n        return False.\n\n        If either operand is a special value, the following rules are used:\n           * return True if both operands are infinities\n           * return True if both operands are NaNs\n           * otherwise, return False.\n        '),
                                             ('_rescale',
                                              ['exp', 'rounding'],
                                              'Rescale self so that the exponent is exp, either by padding with zeros\n        or by truncating digits, using the given rounding mode.\n\n        Specials are returned without change.  This operation is\n        quiet: it raises no flags, and uses no information from the\n        context.\n\n        exp = exp to scale to (an integer)\n        rounding = rounding mode\n        '),
                                             ('_round',
                                              ['places', 'rounding'],
                                              'Round a nonzero, nonspecial Decimal to a fixed number of\n        significant figures, using the given rounding mode.\n\n        Infinities, NaNs and zeros are returned unaltered.\n\n        This operation is quiet: it raises no flags, and uses no\n        information from the context.\n\n        '),
                                             ('to_integral_exact',
                                              ['rounding=None', 'context=None'],
                                              "Rounds to a nearby integer.\n\n        If no rounding mode is specified, take the rounding mode from\n        the context.  This method raises the Rounded and Inexact flags\n        when appropriate.\n\n        See also: to_integral_value, which does exactly the same as\n        this method except that it doesn't raise Inexact or Rounded.\n        "),
                                             ('to_integral_value',
                                              ['rounding=None', 'context=None'],
                                              'Rounds to the nearest integer, without raising inexact, rounded.'),
                                             ('sqrt',
                                              ['context=None'],
                                              'Return the square root of self.'),
                                             ('max',
                                              ['other', 'context=None'],
                                              'Returns the larger value.\n\n        Like max(self, other) except if one is not a number, returns\n        NaN (and signals if one is sNaN).  Also rounds.\n        '),
                                             ('min',
                                              ['other', 'context=None'],
                                              'Returns the smaller value.\n\n        Like min(self, other) except if one is not a number, returns\n        NaN (and signals if one is sNaN).  Also rounds.\n        '),
                                             ('_isinteger',
                                              [],
                                              'Returns whether self is an integer'),
                                             ('_iseven',
                                              [],
                                              'Returns True if self is even.  Assumes self is an integer.'),
                                             ('adjusted',
                                              [],
                                              'Return the adjusted exponent of self'),
                                             ('canonical',
                                              ['context=None'],
                                              'Returns the same Decimal object.\n\n        As we do not have different encodings for the same number, the\n        received object already is in its canonical form.\n        '),
                                             ('compare_signal',
                                              ['other', 'context=None'],
                                              "Compares self to the other operand numerically.\n\n        It's pretty much like compare(), but all NaNs signal, with signaling\n        NaNs taking precedence over quiet NaNs.\n        "),
                                             ('compare_total',
                                              ['other'],
                                              'Compares self to other using the abstract representations.\n\n        This is not like the standard compare, which use their numerical\n        value. Note that a total ordering is defined for all possible abstract\n        representations.\n        '),
                                             ('compare_total_mag',
                                              ['other'],
                                              "Compares self to other using abstract repr., ignoring sign.\n\n        Like compare_total, but with operand's sign ignored and assumed to be 0.\n        "),
                                             ('copy_abs',
                                              [],
                                              'Returns a copy with the sign set to 0. '),
                                             ('copy_negate',
                                              [],
                                              'Returns a copy with the sign inverted.'),
                                             ('copy_sign',
                                              ['other'],
                                              'Returns self with the sign of other.'),
                                             ('exp', ['context=None'], 'Returns e ** self.'),
                                             ('is_canonical',
                                              [],
                                              'Return True if self is canonical; otherwise return False.\n\n        Currently, the encoding of a Decimal instance is always\n        canonical, so this method returns True for any Decimal.\n        '),
                                             ('is_finite',
                                              [],
                                              'Return True if self is finite; otherwise return False.\n\n        A Decimal instance is considered finite if it is neither\n        infinite nor a NaN.\n        '),
                                             ('is_infinite',
                                              [],
                                              'Return True if self is infinite; otherwise return False.'),
                                             ('is_nan',
                                              [],
                                              'Return True if self is a qNaN or sNaN; otherwise return False.'),
                                             ('is_normal',
                                              ['context=None'],
                                              'Return True if self is a normal number; otherwise return False.'),
                                             ('is_qnan',
                                              [],
                                              'Return True if self is a quiet NaN; otherwise return False.'),
                                             ('is_signed',
                                              [],
                                              'Return True if self is negative; otherwise return False.'),
                                             ('is_snan',
                                              [],
                                              'Return True if self is a signaling NaN; otherwise return False.'),
                                             ('is_subnormal',
                                              ['context=None'],
                                              'Return True if self is subnormal; otherwise return False.'),
                                             ('is_zero',
                                              [],
                                              'Return True if self is a zero; otherwise return False.'),
                                             ('_ln_exp_bound',
                                              [],
                                              'Compute a lower bound for the adjusted exponent of self.ln().\n        In other words, compute r such that self.ln() >= 10**r.  Assumes\n        that self is finite and positive and that self != 1.\n        '),
                                             ('ln',
                                              ['context=None'],
                                              'Returns the natural (base e) logarithm of self.'),
                                             ('_log10_exp_bound',
                                              [],
                                              'Compute a lower bound for the adjusted exponent of self.log10().\n        In other words, find r such that self.log10() >= 10**r.\n        Assumes that self is finite and positive and that self != 1.\n        '),
                                             ('log10',
                                              ['context=None'],
                                              'Returns the base 10 logarithm of self.'),
                                             ('logb',
                                              ['context=None'],
                                              " Returns the exponent of the magnitude of self's MSD.\n\n        The result is the integer which is the exponent of the magnitude\n        of the most significant digit of self (as though it were truncated\n        to a single digit while maintaining the value of that digit and\n        without limiting the resulting exponent).\n        "),
                                             ('_islogical',
                                              [],
                                              'Return True if self is a logical operand.\n\n        For being logical, it must be a finite number with a sign of 0,\n        an exponent of 0, and a coefficient whose digits must all be\n        either 0 or 1.\n        '),
                                             ('_fill_logical', ['context', 'opa', 'opb'], ''),
                                             ('logical_and',
                                              ['other', 'context=None'],
                                              "Applies an 'and' operation between self and other's digits."),
                                             ('logical_invert',
                                              ['context=None'],
                                              'Invert all its digits.'),
                                             ('logical_or',
                                              ['other', 'context=None'],
                                              "Applies an 'or' operation between self and other's digits."),
                                             ('logical_xor',
                                              ['other', 'context=None'],
                                              "Applies an 'xor' operation between self and other's digits."),
                                             ('max_mag',
                                              ['other', 'context=None'],
                                              'Compares the values numerically with their sign ignored.'),
                                             ('min_mag',
                                              ['other', 'context=None'],
                                              'Compares the values numerically with their sign ignored.'),
                                             ('next_minus',
                                              ['context=None'],
                                              'Returns the largest representable number smaller than itself.'),
                                             ('next_plus',
                                              ['context=None'],
                                              'Returns the smallest representable number larger than itself.'),
                                             ('next_toward',
                                              ['other', 'context=None'],
                                              'Returns the number closest to self, in the direction towards other.\n\n        The result is the closest representable number to self\n        (excluding self) that is in the direction towards other,\n        unless both have the same value.  If the two operands are\n        numerically equal, then the result is a copy of self with the\n        sign set to be the same as the sign of other.\n        '),
                                             ('number_class',
                                              ['context=None'],
                                              'Returns an indication of the class of self.\n\n        The class is one of the following strings:\n          sNaN\n          NaN\n          -Infinity\n          -Normal\n          -Subnormal\n          -Zero\n          +Zero\n          +Subnormal\n          +Normal\n          +Infinity\n        '),
                                             ('radix',
                                              [],
                                              'Just returns 10, as this is Decimal, :)'),
                                             ('rotate',
                                              ['other', 'context=None'],
                                              'Returns a rotated copy of self, value-of-other times.'),
                                             ('scaleb',
                                              ['other', 'context=None'],
                                              'Returns self operand after adding the second value to its exp.'),
                                             ('shift',
                                              ['other', 'context=None'],
                                              'Returns a shifted copy of self, value-of-other times.'),
                                             ('__reduce__', [], ''),
                                             ('__copy__', [], ''),
                                             ('__deepcopy__', ['memo'], ''),
                                             ('__format__',
                                              ['specifier',
                                               'context=None',
                                               '_localeconv=None'],
                                              "Format a Decimal instance according to the given specifier.\n\n        The specifier should be a standard format specifier, with the\n        form described in PEP 3101.  Formatting types 'e', 'E', 'f',\n        'F', 'g', 'G', 'n' and '%' are supported.  If the formatting\n        type is omitted it defaults to 'g' or 'G', depending on the\n        value of context.capitals.\n        ")],
                                 'properties': ['__slots__',
                                                '_sign',
                                                '_int',
                                                '_exp',
                                                '_is_special',
                                                'from_float',
                                                '__radd__',
                                                '__rmul__',
                                                '__div__',
                                                '__rdiv__',
                                                '__trunc__',
                                                'real',
                                                'imag',
                                                '_pick_rounding_function',
                                                'to_integral']},
             'decimal.DecimalException': {'bases': ['ArithmeticError'],
                                          'constructor': [],
                                          'docstring': "Base exception class.\n\n    Used exceptions derive from this.\n    If an exception derives from another exception besides this (such as\n    Underflow (Inexact, Rounded, Subnormal) that indicates that it is only\n    called if the others are present.  This isn't actually used for\n    anything, though.\n\n    handle  -- Called when context._raise_error is called and the\n               trap_enabler is not set.  First argument is self, second is the\n               context.  More arguments can be given, those being after\n               the explanation in _raise_error (For example,\n               context._raise_error(NewError, '(-x)!', self._sign) would\n               call NewError().handle(context, self._sign).)\n\n    To define a new exception, it should be sufficient to have it derive\n    from DecimalException.\n    ",
                                          'methods': [('handle', ['context', '*args'], '')],
                                          'properties': []},
             'decimal.DivisionByZero': {'bases': ['decimal.DecimalException',
                                                  'ZeroDivisionError'],
                                        'constructor': [],
                                        'docstring': 'Division by 0.\n\n    This occurs and signals division-by-zero if division of a finite number\n    by zero was attempted (during a divide-integer or divide operation, or a\n    power operation with negative right-hand operand), and the dividend was\n    not zero.\n\n    The result of the operation is [sign,inf], where sign is the exclusive\n    or of the signs of the operands for divide, or is 1 for an odd power of\n    -0, for power.\n    ',
                                        'methods': [('handle',
                                                     ['context', 'sign', '*args'],
                                                     '')],
                                        'properties': []},
             'decimal.DivisionImpossible': {'bases': ['decimal.InvalidOperation'],
                                            'constructor': [],
                                            'docstring': 'Cannot perform the division adequately.\n\n    This occurs and signals invalid-operation if the integer result of a\n    divide-integer or remainder operation had too many digits (would be\n    longer than precision).  The result is [0,qNaN].\n    ',
                                            'methods': [('handle', ['context', '*args'], '')],
                                            'properties': []},
             'decimal.DivisionUndefined': {'bases': ['decimal.InvalidOperation',
                                                     'ZeroDivisionError'],
                                           'constructor': [],
                                           'docstring': 'Undefined result of division.\n\n    This occurs and signals invalid-operation if division by zero was\n    attempted (during a divide-integer, divide, or remainder operation), and\n    the dividend is also zero.  The result is [0,qNaN].\n    ',
                                           'methods': [('handle', ['context', '*args'], '')],
                                           'properties': []},
             'decimal.Inexact': {'bases': ['decimal.DecimalException'],
                                 'constructor': [],
                                 'docstring': 'Had to round, losing information.\n\n    This occurs and signals inexact whenever the result of an operation is\n    not exact (that is, it needed to be rounded and any discarded digits\n    were non-zero), or if an overflow or underflow condition occurs.  The\n    result in all cases is unchanged.\n\n    The inexact signal may be tested (or trapped) to determine if a given\n    operation (or sequence of operations) was inexact.\n    ',
                                 'methods': [],
                                 'properties': []},
             'decimal.InvalidContext': {'bases': ['decimal.InvalidOperation'],
                                        'constructor': [],
                                        'docstring': 'Invalid context.  Unknown rounding, for example.\n\n    This occurs and signals invalid-operation if an invalid context was\n    detected during an operation.  This can occur if contexts are not checked\n    on creation and either the precision exceeds the capability of the\n    underlying concrete representation or an unknown or unsupported rounding\n    was specified.  These aspects of the context need only be checked when\n    the values are required to be used.  The result is [0,qNaN].\n    ',
                                        'methods': [('handle', ['context', '*args'], '')],
                                        'properties': []},
             'decimal.InvalidOperation': {'bases': ['decimal.DecimalException'],
                                          'constructor': [],
                                          'docstring': 'An invalid operation was performed.\n\n    Various bad things cause this:\n\n    Something creates a signaling NaN\n    -INF + INF\n    0 * (+-)INF\n    (+-)INF / (+-)INF\n    x % 0\n    (+-)INF % x\n    x._rescale( non-integer )\n    sqrt(-x) , x > 0\n    0 ** 0\n    x ** (non-integer)\n    x ** (+-)INF\n    An operand is invalid\n\n    The result of the operation after these is a quiet positive NaN,\n    except when the cause is a signaling NaN, in which case the result is\n    also a quiet NaN, but with the original sign, and an optional\n    diagnostic information.\n    ',
                                          'methods': [('handle', ['context', '*args'], '')],
                                          'properties': []},
             'decimal.MockThreading': {'bases': ['object'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('local', ['sys=sys'], '')],
                                       'properties': []},
             'decimal.Overflow': {'bases': ['decimal.Inexact', 'decimal.Rounded'],
                                  'constructor': [],
                                  'docstring': 'Numerical overflow.\n\n    This occurs and signals overflow if the adjusted exponent of a result\n    (from a conversion or from an operation that is not an attempt to divide\n    by zero), after rounding, would be greater than the largest value that\n    can be handled by the implementation (the value Emax).\n\n    The result depends on the rounding mode:\n\n    For round-half-up and round-half-even (and for round-half-down and\n    round-up, if implemented), the result of the operation is [sign,inf],\n    where sign is the sign of the intermediate result.  For round-down, the\n    result is the largest finite number that can be represented in the\n    current precision, with the sign of the intermediate result.  For\n    round-ceiling, the result is the same as for round-down if the sign of\n    the intermediate result is 1, or is [0,inf] otherwise.  For round-floor,\n    the result is the same as for round-down if the sign of the intermediate\n    result is 0, or is [1,inf] otherwise.  In all cases, Inexact and Rounded\n    will also be raised.\n    ',
                                  'methods': [('handle', ['context', 'sign', '*args'], '')],
                                  'properties': []},
             'decimal.Rounded': {'bases': ['decimal.DecimalException'],
                                 'constructor': [],
                                 'docstring': 'Number got rounded (not  necessarily changed during rounding).\n\n    This occurs and signals rounded whenever the result of an operation is\n    rounded (that is, some zero or non-zero digits were discarded from the\n    coefficient), or if an overflow or underflow condition occurs.  The\n    result in all cases is unchanged.\n\n    The rounded signal may be tested (or trapped) to determine if a given\n    operation (or sequence of operations) caused a loss of precision.\n    ',
                                 'methods': [],
                                 'properties': []},
             'decimal.Subnormal': {'bases': ['decimal.DecimalException'],
                                   'constructor': [],
                                   'docstring': 'Exponent < Emin before rounding.\n\n    This occurs and signals subnormal whenever the result of a conversion or\n    operation is subnormal (that is, its adjusted exponent is less than\n    Emin, before any rounding).  The result in all cases is unchanged.\n\n    The subnormal signal may be tested (or trapped) to determine if a given\n    or operation (or sequence of operations) yielded a subnormal result.\n    ',
                                   'methods': [],
                                   'properties': []},
             'decimal.Underflow': {'bases': ['decimal.Inexact',
                                             'decimal.Rounded',
                                             'decimal.Subnormal'],
                                   'constructor': [],
                                   'docstring': 'Numerical underflow with result rounded to 0.\n\n    This occurs and signals underflow if a result is inexact and the\n    adjusted exponent of the result would be smaller (more negative) than\n    the smallest value that can be handled by the implementation (the value\n    Emin).  That is, the result is both inexact and subnormal.\n\n    The result after an underflow will be a subnormal number rounded, if\n    necessary, so that its exponent is not less than Etiny.  This may result\n    in 0 with the sign of the intermediate result and an exponent of Etiny.\n\n    In all cases, Inexact, Rounded, and Subnormal will also be raised.\n    ',
                                   'methods': [],
                                   'properties': []},
             'decimal._ContextManager': {'bases': ['object'],
                                         'constructor': ['new_context'],
                                         'docstring': 'Context manager class to support localcontext().\n\n      Sets a copy of the supplied context in __enter__() and restores\n      the previous decimal context in __exit__()\n    ',
                                         'methods': [('__enter__', [], ''),
                                                     ('__exit__', ['t', 'v', 'tb'], '')],
                                         'properties': ['new_context', 'saved_context']},
             'decimal._Log10Memoize': {'bases': ['object'],
                                       'constructor': [],
                                       'docstring': 'Class to compute, store, and allow retrieval of, digits of the\n    constant log(10) = 2.302585....  This constant is needed by\n    Decimal.ln, Decimal.log10, Decimal.exp and Decimal.__pow__.',
                                       'methods': [('getdigits',
                                                    ['p'],
                                                    'Given an integer p >= 0, return floor(10**p)*log(10).\n\n        For example, self.getdigits(3) returns 2302.\n        ')],
                                       'properties': ['digits']},
             'decimal._WorkRep': {'bases': ['object'],
                                  'constructor': ['value=None'],
                                  'docstring': '',
                                  'methods': [('__repr__', [], '')],
                                  'properties': ['__slots__', 'sign', 'int', 'exp', '__str__']},
             'difflib.Differ': {'bases': [],
                                'constructor': ['linejunk=None', 'charjunk=None'],
                                'docstring': "\n    Differ is a class for comparing sequences of lines of text, and\n    producing human-readable differences or deltas.  Differ uses\n    SequenceMatcher both to compare sequences of lines, and to compare\n    sequences of characters within similar (near-matching) lines.\n\n    Each line of a Differ delta begins with a two-letter code:\n\n        '- '    line unique to sequence 1\n        '+ '    line unique to sequence 2\n        '  '    line common to both sequences\n        '? '    line not present in either input sequence\n\n    Lines beginning with '? ' attempt to guide the eye to intraline\n    differences, and were not present in either input sequence.  These lines\n    can be confusing if the sequences contain tab characters.\n\n    Note that Differ makes no claim to produce a *minimal* diff.  To the\n    contrary, minimal diffs are often counter-intuitive, because they synch\n    up anywhere possible, sometimes accidental matches 100 pages apart.\n    Restricting synch points to contiguous matches preserves some notion of\n    locality, at the occasional cost of producing a longer diff.\n\n    Example: Comparing two texts.\n\n    First we set up the texts, sequences of individual single-line strings\n    ending with newlines (such sequences can also be obtained from the\n    `readlines()` method of file-like objects):\n\n    >>> text1 = '''  1. Beautiful is better than ugly.\n    ...   2. Explicit is better than implicit.\n    ...   3. Simple is better than complex.\n    ...   4. Complex is better than complicated.\n    ... '''.splitlines(1)\n    >>> len(text1)\n    4\n    >>> text1[0][-1]\n    '\\n'\n    >>> text2 = '''  1. Beautiful is better than ugly.\n    ...   3.   Simple is better than complex.\n    ...   4. Complicated is better than complex.\n    ...   5. Flat is better than nested.\n    ... '''.splitlines(1)\n\n    Next we instantiate a Differ object:\n\n    >>> d = Differ()\n\n    Note that when instantiating a Differ object we may pass functions to\n    filter out line and character 'junk'.  See Differ.__init__ for details.\n\n    Finally, we compare the two:\n\n    >>> result = list(d.compare(text1, text2))\n\n    'result' is a list of strings, so let's pretty-print it:\n\n    >>> from pprint import pprint as _pprint\n    >>> _pprint(result)\n    ['    1. Beautiful is better than ugly.\\n',\n     '-   2. Explicit is better than implicit.\\n',\n     '-   3. Simple is better than complex.\\n',\n     '+   3.   Simple is better than complex.\\n',\n     '?     ++\\n',\n     '-   4. Complex is better than complicated.\\n',\n     '?            ^                     ---- ^\\n',\n     '+   4. Complicated is better than complex.\\n',\n     '?           ++++ ^                      ^\\n',\n     '+   5. Flat is better than nested.\\n']\n\n    As a single multi-line string it looks like this:\n\n    >>> print ''.join(result),\n        1. Beautiful is better than ugly.\n    -   2. Explicit is better than implicit.\n    -   3. Simple is better than complex.\n    +   3.   Simple is better than complex.\n    ?     ++\n    -   4. Complex is better than complicated.\n    ?            ^                     ---- ^\n    +   4. Complicated is better than complex.\n    ?           ++++ ^                      ^\n    +   5. Flat is better than nested.\n\n    Methods:\n\n    __init__(linejunk=None, charjunk=None)\n        Construct a text differencer, with optional filters.\n\n    compare(a, b)\n        Compare two sequences of lines; generate the resulting delta.\n    ",
                                'methods': [('compare',
                                             ['a', 'b'],
                                             "\n        Compare two sequences of lines; generate the resulting delta.\n\n        Each sequence must contain individual single-line strings ending with\n        newlines. Such sequences can be obtained from the `readlines()` method\n        of file-like objects.  The delta generated also consists of newline-\n        terminated strings, ready to be printed as-is via the writeline()\n        method of a file-like object.\n\n        Example:\n\n        >>> print ''.join(Differ().compare('one\\ntwo\\nthree\\n'.splitlines(1),\n        ...                                'ore\\ntree\\nemu\\n'.splitlines(1))),\n        - one\n        ?  ^\n        + ore\n        ?  ^\n        - two\n        - three\n        ?  -\n        + tree\n        + emu\n        "),
                                            ('_dump',
                                             ['tag', 'x', 'lo', 'hi'],
                                             'Generate comparison results for a same-tagged range.'),
                                            ('_plain_replace',
                                             ['a', 'alo', 'ahi', 'b', 'blo', 'bhi'],
                                             ''),
                                            ('_fancy_replace',
                                             ['a', 'alo', 'ahi', 'b', 'blo', 'bhi'],
                                             "\n        When replacing one block of lines with another, search the blocks\n        for *similar* lines; the best-matching pair (if any) is used as a\n        synch point, and intraline difference marking is done on the\n        similar pair. Lots of work, but often worth it.\n\n        Example:\n\n        >>> d = Differ()\n        >>> results = d._fancy_replace(['abcDefghiJkl\\n'], 0, 1,\n        ...                            ['abcdefGhijkl\\n'], 0, 1)\n        >>> print ''.join(results),\n        - abcDefghiJkl\n        ?    ^  ^  ^\n        + abcdefGhijkl\n        ?    ^  ^  ^\n        "),
                                            ('_fancy_helper',
                                             ['a', 'alo', 'ahi', 'b', 'blo', 'bhi'],
                                             ''),
                                            ('_qformat',
                                             ['aline', 'bline', 'atags', 'btags'],
                                             '\n        Format "?" output and deal with leading tabs.\n\n        Example:\n\n        >>> d = Differ()\n        >>> results = d._qformat(\'\\tabcDefghiJkl\\n\', \'\\tabcdefGhijkl\\n\',\n        ...                      \'  ^ ^  ^      \', \'  ^ ^  ^      \')\n        >>> for line in results: print repr(line)\n        ...\n        \'- \\tabcDefghiJkl\\n\'\n        \'? \\t ^ ^  ^\\n\'\n        \'+ \\tabcdefGhijkl\\n\'\n        \'? \\t ^ ^  ^\\n\'\n        ')],
                                'properties': ['linejunk', 'charjunk']},
             'difflib.HtmlDiff': {'bases': ['object'],
                                  'constructor': ['tabsize=8',
                                                  'wrapcolumn=None',
                                                  'linejunk=None',
                                                  'charjunk=IS_CHARACTER_JUNK'],
                                  'docstring': 'For producing HTML side by side comparison with change highlights.\n\n    This class can be used to create an HTML table (or a complete HTML file\n    containing the table) showing a side by side, line by line comparison\n    of text with inter-line and intra-line change highlights.  The table can\n    be generated in either full or contextual difference mode.\n\n    The following methods are provided for HTML generation:\n\n    make_table -- generates HTML for a single side by side table\n    make_file -- generates complete HTML file with a single side by side table\n\n    See tools/scripts/diff.py for an example usage of this class.\n    ',
                                  'methods': [('make_file',
                                               ['fromlines',
                                                'tolines',
                                                "fromdesc=''",
                                                "todesc=''",
                                                'context=False',
                                                'numlines=5'],
                                               'Returns HTML file of side by side comparison with change highlights\n\n        Arguments:\n        fromlines -- list of "from" lines\n        tolines -- list of "to" lines\n        fromdesc -- "from" file column header string\n        todesc -- "to" file column header string\n        context -- set to True for contextual differences (defaults to False\n            which shows full differences).\n        numlines -- number of context lines.  When context is set True,\n            controls number of lines displayed before and after the change.\n            When context is False, controls the number of lines to place\n            the "next" link anchors before the next change (so click of\n            "next" link jumps to just before the change).\n        '),
                                              ('_tab_newline_replace',
                                               ['fromlines', 'tolines'],
                                               'Returns from/to line lists with tabs expanded and newlines removed.\n\n        Instead of tab characters being replaced by the number of spaces\n        needed to fill in to the next tab stop, this function will fill\n        the space with tab characters.  This is done so that the difference\n        algorithms can identify changes in a file when tabs are replaced by\n        spaces and vice versa.  At the end of the HTML generation, the tab\n        characters will be replaced with a nonbreakable space.\n        '),
                                              ('_split_line',
                                               ['data_list', 'line_num', 'text'],
                                               'Builds list of text lines by splitting text lines at wrap point\n\n        This function will determine if the input text line needs to be\n        wrapped (split) into separate lines.  If so, the first wrap point\n        will be determined and the first line appended to the output\n        text line list.  This function is used recursively to handle\n        the second part of the split line to further split it.\n        '),
                                              ('_line_wrapper',
                                               ['diffs'],
                                               'Returns iterator that splits (wraps) mdiff text lines'),
                                              ('_collect_lines',
                                               ['diffs'],
                                               'Collects mdiff output into separate lists\n\n        Before storing the mdiff from/to data into a list, it is converted\n        into a single line of text with HTML markup.\n        '),
                                              ('_format_line',
                                               ['side', 'flag', 'linenum', 'text'],
                                               'Returns HTML markup of "from" / "to" text lines\n\n        side -- 0 or 1 indicating "from" or "to" text\n        flag -- indicates if difference on line\n        linenum -- line number (used for line number column)\n        text -- line text to be marked up\n        '),
                                              ('_make_prefix',
                                               [],
                                               'Create unique anchor prefixes'),
                                              ('_convert_flags',
                                               ['fromlist',
                                                'tolist',
                                                'flaglist',
                                                'context',
                                                'numlines'],
                                               'Makes list of "next" links'),
                                              ('make_table',
                                               ['fromlines',
                                                'tolines',
                                                "fromdesc=''",
                                                "todesc=''",
                                                'context=False',
                                                'numlines=5'],
                                               'Returns HTML table of side by side comparison with change highlights\n\n        Arguments:\n        fromlines -- list of "from" lines\n        tolines -- list of "to" lines\n        fromdesc -- "from" file column header string\n        todesc -- "to" file column header string\n        context -- set to True for contextual differences (defaults to False\n            which shows full differences).\n        numlines -- number of context lines.  When context is set True,\n            controls number of lines displayed before and after the change.\n            When context is False, controls the number of lines to place\n            the "next" link anchors before the next change (so click of\n            "next" link jumps to just before the change).\n        ')],
                                  'properties': ['_file_template',
                                                 '_styles',
                                                 '_table_template',
                                                 '_legend',
                                                 '_default_prefix',
                                                 '_tabsize',
                                                 '_wrapcolumn',
                                                 '_linejunk',
                                                 '_charjunk',
                                                 '_prefix']},
             'difflib.SequenceMatcher': {'bases': [],
                                         'constructor': ['isjunk=None',
                                                         "a=''",
                                                         "b=''",
                                                         'autojunk=True'],
                                         'docstring': '\n    SequenceMatcher is a flexible class for comparing pairs of sequences of\n    any type, so long as the sequence elements are hashable.  The basic\n    algorithm predates, and is a little fancier than, an algorithm\n    published in the late 1980\'s by Ratcliff and Obershelp under the\n    hyperbolic name "gestalt pattern matching".  The basic idea is to find\n    the longest contiguous matching subsequence that contains no "junk"\n    elements (R-O doesn\'t address junk).  The same idea is then applied\n    recursively to the pieces of the sequences to the left and to the right\n    of the matching subsequence.  This does not yield minimal edit\n    sequences, but does tend to yield matches that "look right" to people.\n\n    SequenceMatcher tries to compute a "human-friendly diff" between two\n    sequences.  Unlike e.g. UNIX(tm) diff, the fundamental notion is the\n    longest *contiguous* & junk-free matching subsequence.  That\'s what\n    catches peoples\' eyes.  The Windows(tm) windiff has another interesting\n    notion, pairing up elements that appear uniquely in each sequence.\n    That, and the method here, appear to yield more intuitive difference\n    reports than does diff.  This method appears to be the least vulnerable\n    to synching up on blocks of "junk lines", though (like blank lines in\n    ordinary text files, or maybe "<P>" lines in HTML files).  That may be\n    because this is the only method of the 3 that has a *concept* of\n    "junk" <wink>.\n\n    Example, comparing two strings, and considering blanks to be "junk":\n\n    >>> s = SequenceMatcher(lambda x: x == " ",\n    ...                     "private Thread currentThread;",\n    ...                     "private volatile Thread currentThread;")\n    >>>\n\n    .ratio() returns a float in [0, 1], measuring the "similarity" of the\n    sequences.  As a rule of thumb, a .ratio() value over 0.6 means the\n    sequences are close matches:\n\n    >>> print round(s.ratio(), 3)\n    0.866\n    >>>\n\n    If you\'re only interested in where the sequences match,\n    .get_matching_blocks() is handy:\n\n    >>> for block in s.get_matching_blocks():\n    ...     print "a[%d] and b[%d] match for %d elements" % block\n    a[0] and b[0] match for 8 elements\n    a[8] and b[17] match for 21 elements\n    a[29] and b[38] match for 0 elements\n\n    Note that the last tuple returned by .get_matching_blocks() is always a\n    dummy, (len(a), len(b), 0), and this is the only case in which the last\n    tuple element (number of elements matched) is 0.\n\n    If you want to know how to change the first sequence into the second,\n    use .get_opcodes():\n\n    >>> for opcode in s.get_opcodes():\n    ...     print "%6s a[%d:%d] b[%d:%d]" % opcode\n     equal a[0:8] b[0:8]\n    insert a[8:8] b[8:17]\n     equal a[8:29] b[17:38]\n\n    See the Differ class for a fancy human-friendly file differencer, which\n    uses SequenceMatcher both to compare sequences of lines, and to compare\n    sequences of characters within similar (near-matching) lines.\n\n    See also function get_close_matches() in this module, which shows how\n    simple code building on SequenceMatcher can be used to do useful work.\n\n    Timing:  Basic R-O is cubic time worst case and quadratic time expected\n    case.  SequenceMatcher is quadratic time for the worst case and has\n    expected-case behavior dependent in a complicated way on how many\n    elements the sequences have in common; best case time is linear.\n\n    Methods:\n\n    __init__(isjunk=None, a=\'\', b=\'\')\n        Construct a SequenceMatcher.\n\n    set_seqs(a, b)\n        Set the two sequences to be compared.\n\n    set_seq1(a)\n        Set the first sequence to be compared.\n\n    set_seq2(b)\n        Set the second sequence to be compared.\n\n    find_longest_match(alo, ahi, blo, bhi)\n        Find longest matching block in a[alo:ahi] and b[blo:bhi].\n\n    get_matching_blocks()\n        Return list of triples describing matching subsequences.\n\n    get_opcodes()\n        Return list of 5-tuples describing how to turn a into b.\n\n    ratio()\n        Return a measure of the sequences\' similarity (float in [0,1]).\n\n    quick_ratio()\n        Return an upper bound on .ratio() relatively quickly.\n\n    real_quick_ratio()\n        Return an upper bound on ratio() very quickly.\n    ',
                                         'methods': [('set_seqs',
                                                      ['a', 'b'],
                                                      'Set the two sequences to be compared.\n\n        >>> s = SequenceMatcher()\n        >>> s.set_seqs("abcd", "bcde")\n        >>> s.ratio()\n        0.75\n        '),
                                                     ('set_seq1',
                                                      ['a'],
                                                      'Set the first sequence to be compared.\n\n        The second sequence to be compared is not changed.\n\n        >>> s = SequenceMatcher(None, "abcd", "bcde")\n        >>> s.ratio()\n        0.75\n        >>> s.set_seq1("bcde")\n        >>> s.ratio()\n        1.0\n        >>>\n\n        SequenceMatcher computes and caches detailed information about the\n        second sequence, so if you want to compare one sequence S against\n        many sequences, use .set_seq2(S) once and call .set_seq1(x)\n        repeatedly for each of the other sequences.\n\n        See also set_seqs() and set_seq2().\n        '),
                                                     ('set_seq2',
                                                      ['b'],
                                                      'Set the second sequence to be compared.\n\n        The first sequence to be compared is not changed.\n\n        >>> s = SequenceMatcher(None, "abcd", "bcde")\n        >>> s.ratio()\n        0.75\n        >>> s.set_seq2("abcd")\n        >>> s.ratio()\n        1.0\n        >>>\n\n        SequenceMatcher computes and caches detailed information about the\n        second sequence, so if you want to compare one sequence S against\n        many sequences, use .set_seq2(S) once and call .set_seq1(x)\n        repeatedly for each of the other sequences.\n\n        See also set_seqs() and set_seq1().\n        '),
                                                     ('__chain_b', [], ''),
                                                     ('find_longest_match',
                                                      ['alo', 'ahi', 'blo', 'bhi'],
                                                      'Find longest matching block in a[alo:ahi] and b[blo:bhi].\n\n        If isjunk is not defined:\n\n        Return (i,j,k) such that a[i:i+k] is equal to b[j:j+k], where\n            alo <= i <= i+k <= ahi\n            blo <= j <= j+k <= bhi\n        and for all (i\',j\',k\') meeting those conditions,\n            k >= k\'\n            i <= i\'\n            and if i == i\', j <= j\'\n\n        In other words, of all maximal matching blocks, return one that\n        starts earliest in a, and of all those maximal matching blocks that\n        start earliest in a, return the one that starts earliest in b.\n\n        >>> s = SequenceMatcher(None, " abcd", "abcd abcd")\n        >>> s.find_longest_match(0, 5, 0, 9)\n        Match(a=0, b=4, size=5)\n\n        If isjunk is defined, first the longest matching block is\n        determined as above, but with the additional restriction that no\n        junk element appears in the block.  Then that block is extended as\n        far as possible by matching (only) junk elements on both sides.  So\n        the resulting block never matches on junk except as identical junk\n        happens to be adjacent to an "interesting" match.\n\n        Here\'s the same example as before, but considering blanks to be\n        junk.  That prevents " abcd" from matching the " abcd" at the tail\n        end of the second sequence directly.  Instead only the "abcd" can\n        match, and matches the leftmost "abcd" in the second sequence:\n\n        >>> s = SequenceMatcher(lambda x: x==" ", " abcd", "abcd abcd")\n        >>> s.find_longest_match(0, 5, 0, 9)\n        Match(a=1, b=0, size=4)\n\n        If no blocks match, return (alo, blo, 0).\n\n        >>> s = SequenceMatcher(None, "ab", "c")\n        >>> s.find_longest_match(0, 2, 0, 1)\n        Match(a=0, b=0, size=0)\n        '),
                                                     ('get_matching_blocks',
                                                      [],
                                                      'Return list of triples describing matching subsequences.\n\n        Each triple is of the form (i, j, n), and means that\n        a[i:i+n] == b[j:j+n].  The triples are monotonically increasing in\n        i and in j.  New in Python 2.5, it\'s also guaranteed that if\n        (i, j, n) and (i\', j\', n\') are adjacent triples in the list, and\n        the second is not the last triple in the list, then i+n != i\' or\n        j+n != j\'.  IOW, adjacent triples never describe adjacent equal\n        blocks.\n\n        The last triple is a dummy, (len(a), len(b), 0), and is the only\n        triple with n==0.\n\n        >>> s = SequenceMatcher(None, "abxcd", "abcd")\n        >>> s.get_matching_blocks()\n        [Match(a=0, b=0, size=2), Match(a=3, b=2, size=2), Match(a=5, b=4, size=0)]\n        '),
                                                     ('get_opcodes',
                                                      [],
                                                      'Return list of 5-tuples describing how to turn a into b.\n\n        Each tuple is of the form (tag, i1, i2, j1, j2).  The first tuple\n        has i1 == j1 == 0, and remaining tuples have i1 == the i2 from the\n        tuple preceding it, and likewise for j1 == the previous j2.\n\n        The tags are strings, with these meanings:\n\n        \'replace\':  a[i1:i2] should be replaced by b[j1:j2]\n        \'delete\':   a[i1:i2] should be deleted.\n                    Note that j1==j2 in this case.\n        \'insert\':   b[j1:j2] should be inserted at a[i1:i1].\n                    Note that i1==i2 in this case.\n        \'equal\':    a[i1:i2] == b[j1:j2]\n\n        >>> a = "qabxcd"\n        >>> b = "abycdf"\n        >>> s = SequenceMatcher(None, a, b)\n        >>> for tag, i1, i2, j1, j2 in s.get_opcodes():\n        ...    print ("%7s a[%d:%d] (%s) b[%d:%d] (%s)" %\n        ...           (tag, i1, i2, a[i1:i2], j1, j2, b[j1:j2]))\n         delete a[0:1] (q) b[0:0] ()\n          equal a[1:3] (ab) b[0:2] (ab)\n        replace a[3:4] (x) b[2:3] (y)\n          equal a[4:6] (cd) b[3:5] (cd)\n         insert a[6:6] () b[5:6] (f)\n        '),
                                                     ('get_grouped_opcodes',
                                                      ['n=3'],
                                                      " Isolate change clusters by eliminating ranges with no changes.\n\n        Return a generator of groups with upto n lines of context.\n        Each group is in the same format as returned by get_opcodes().\n\n        >>> from pprint import pprint\n        >>> a = map(str, range(1,40))\n        >>> b = a[:]\n        >>> b[8:8] = ['i']     # Make an insertion\n        >>> b[20] += 'x'       # Make a replacement\n        >>> b[23:28] = []      # Make a deletion\n        >>> b[30] += 'y'       # Make another replacement\n        >>> pprint(list(SequenceMatcher(None,a,b).get_grouped_opcodes()))\n        [[('equal', 5, 8, 5, 8), ('insert', 8, 8, 8, 9), ('equal', 8, 11, 9, 12)],\n         [('equal', 16, 19, 17, 20),\n          ('replace', 19, 20, 20, 21),\n          ('equal', 20, 22, 21, 23),\n          ('delete', 22, 27, 23, 23),\n          ('equal', 27, 30, 23, 26)],\n         [('equal', 31, 34, 27, 30),\n          ('replace', 34, 35, 30, 31),\n          ('equal', 35, 38, 31, 34)]]\n        "),
                                                     ('ratio',
                                                      [],
                                                      'Return a measure of the sequences\' similarity (float in [0,1]).\n\n        Where T is the total number of elements in both sequences, and\n        M is the number of matches, this is 2.0*M / T.\n        Note that this is 1 if the sequences are identical, and 0 if\n        they have nothing in common.\n\n        .ratio() is expensive to compute if you haven\'t already computed\n        .get_matching_blocks() or .get_opcodes(), in which case you may\n        want to try .quick_ratio() or .real_quick_ratio() first to get an\n        upper bound.\n\n        >>> s = SequenceMatcher(None, "abcd", "bcde")\n        >>> s.ratio()\n        0.75\n        >>> s.quick_ratio()\n        0.75\n        >>> s.real_quick_ratio()\n        1.0\n        '),
                                                     ('quick_ratio',
                                                      [],
                                                      "Return an upper bound on ratio() relatively quickly.\n\n        This isn't defined beyond that it is an upper bound on .ratio(), and\n        is faster to compute.\n        "),
                                                     ('real_quick_ratio',
                                                      [],
                                                      "Return an upper bound on ratio() very quickly.\n\n        This isn't defined beyond that it is an upper bound on .ratio(), and\n        is faster to compute than either .ratio() or .quick_ratio().\n        ")],
                                         'properties': ['isjunk',
                                                        'a',
                                                        'b',
                                                        'autojunk',
                                                        'matching_blocks',
                                                        'opcodes',
                                                        'fullbcount',
                                                        'b2j',
                                                        'isbjunk',
                                                        'isbpopular']},
             'doctest.DebugRunner': {'bases': ['doctest.DocTestRunner'],
                                     'constructor': [],
                                     'docstring': "Run doc tests but raise an exception as soon as there is a failure.\n\n       If an unexpected exception occurs, an UnexpectedException is raised.\n       It contains the test, the example, and the original exception:\n\n         >>> runner = DebugRunner(verbose=False)\n         >>> test = DocTestParser().get_doctest('>>> raise KeyError\\n42',\n         ...                                    {}, 'foo', 'foo.py', 0)\n         >>> try:\n         ...     runner.run(test)\n         ... except UnexpectedException, failure:\n         ...     pass\n\n         >>> failure.test is test\n         True\n\n         >>> failure.example.want\n         '42\\n'\n\n         >>> exc_info = failure.exc_info\n         >>> raise exc_info[0], exc_info[1], exc_info[2]\n         Traceback (most recent call last):\n         ...\n         KeyError\n\n       We wrap the original exception to give the calling application\n       access to the test and example information.\n\n       If the output doesn't match, then a DocTestFailure is raised:\n\n         >>> test = DocTestParser().get_doctest('''\n         ...      >>> x = 1\n         ...      >>> x\n         ...      2\n         ...      ''', {}, 'foo', 'foo.py', 0)\n\n         >>> try:\n         ...    runner.run(test)\n         ... except DocTestFailure, failure:\n         ...    pass\n\n       DocTestFailure objects provide access to the test:\n\n         >>> failure.test is test\n         True\n\n       As well as to the example:\n\n         >>> failure.example.want\n         '2\\n'\n\n       and the actual output:\n\n         >>> failure.got\n         '1\\n'\n\n       If a failure or error occurs, the globals are left intact:\n\n         >>> del test.globs['__builtins__']\n         >>> test.globs\n         {'x': 1}\n\n         >>> test = DocTestParser().get_doctest('''\n         ...      >>> x = 2\n         ...      >>> raise KeyError\n         ...      ''', {}, 'foo', 'foo.py', 0)\n\n         >>> runner.run(test)\n         Traceback (most recent call last):\n         ...\n         UnexpectedException: <DocTest foo from foo.py:0 (2 examples)>\n\n         >>> del test.globs['__builtins__']\n         >>> test.globs\n         {'x': 2}\n\n       But the globals are cleared if there is no error:\n\n         >>> test = DocTestParser().get_doctest('''\n         ...      >>> x = 2\n         ...      ''', {}, 'foo', 'foo.py', 0)\n\n         >>> runner.run(test)\n         TestResults(failed=0, attempted=1)\n\n         >>> test.globs\n         {}\n\n       ",
                                     'methods': [('run',
                                                  ['test',
                                                   'compileflags=None',
                                                   'out=None',
                                                   'clear_globs=True'],
                                                  ''),
                                                 ('report_unexpected_exception',
                                                  ['out', 'test', 'example', 'exc_info'],
                                                  ''),
                                                 ('report_failure',
                                                  ['out', 'test', 'example', 'got'],
                                                  '')],
                                     'properties': []},
             'doctest.DocFileCase': {'bases': ['doctest.DocTestCase'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('id', [], ''),
                                                 ('__repr__', [], ''),
                                                 ('format_failure', ['err'], '')],
                                     'properties': ['__str__']},
             'doctest.DocTest': {'bases': [],
                                 'constructor': ['examples',
                                                 'globs',
                                                 'name',
                                                 'filename',
                                                 'lineno',
                                                 'docstring'],
                                 'docstring': '\n    A collection of doctest examples that should be run in a single\n    namespace.  Each `DocTest` defines the following attributes:\n\n      - examples: the list of examples.\n\n      - globs: The namespace (aka globals) that the examples should\n        be run in.\n\n      - name: A name identifying the DocTest (typically, the name of\n        the object whose docstring this DocTest was extracted from).\n\n      - filename: The name of the file that this DocTest was extracted\n        from, or `None` if the filename is unknown.\n\n      - lineno: The line number within filename where this DocTest\n        begins, or `None` if the line number is unavailable.  This\n        line number is zero-based, with respect to the beginning of\n        the file.\n\n      - docstring: The string that the examples were extracted from,\n        or `None` if the string is unavailable.\n    ',
                                 'methods': [('__repr__', [], ''), ('__cmp__', ['other'], '')],
                                 'properties': ['examples',
                                                'docstring',
                                                'globs',
                                                'name',
                                                'filename',
                                                'lineno']},
             'doctest.DocTestCase': {'bases': ['unittest.TestCase'],
                                     'constructor': ['test',
                                                     'optionflags=0',
                                                     'setUp=None',
                                                     'tearDown=None',
                                                     'checker=None'],
                                     'docstring': '',
                                     'methods': [('setUp', [], ''),
                                                 ('tearDown', [], ''),
                                                 ('runTest', [], ''),
                                                 ('format_failure', ['err'], ''),
                                                 ('debug',
                                                  [],
                                                  "Run the test case without results and without catching exceptions\n\n           The unit test framework includes a debug method on test cases\n           and test suites to support post-mortem debugging.  The test code\n           is run in such a way that errors are not caught.  This way a\n           caller can catch the errors and initiate post-mortem debugging.\n\n           The DocTestCase provides a debug method that raises\n           UnexpectedException errors if there is an unexepcted\n           exception:\n\n             >>> test = DocTestParser().get_doctest('>>> raise KeyError\\n42',\n             ...                {}, 'foo', 'foo.py', 0)\n             >>> case = DocTestCase(test)\n             >>> try:\n             ...     case.debug()\n             ... except UnexpectedException, failure:\n             ...     pass\n\n           The UnexpectedException contains the test, the example, and\n           the original exception:\n\n             >>> failure.test is test\n             True\n\n             >>> failure.example.want\n             '42\\n'\n\n             >>> exc_info = failure.exc_info\n             >>> raise exc_info[0], exc_info[1], exc_info[2]\n             Traceback (most recent call last):\n             ...\n             KeyError\n\n           If the output doesn't match, then a DocTestFailure is raised:\n\n             >>> test = DocTestParser().get_doctest('''\n             ...      >>> x = 1\n             ...      >>> x\n             ...      2\n             ...      ''', {}, 'foo', 'foo.py', 0)\n             >>> case = DocTestCase(test)\n\n             >>> try:\n             ...    case.debug()\n             ... except DocTestFailure, failure:\n             ...    pass\n\n           DocTestFailure objects provide access to the test:\n\n             >>> failure.test is test\n             True\n\n           As well as to the example:\n\n             >>> failure.example.want\n             '2\\n'\n\n           and the actual output:\n\n             >>> failure.got\n             '1\\n'\n\n           "),
                                                 ('id', [], ''),
                                                 ('__repr__', [], ''),
                                                 ('shortDescription', [], '')],
                                     'properties': ['_dt_optionflags',
                                                    '_dt_checker',
                                                    '_dt_test',
                                                    '_dt_setUp',
                                                    '_dt_tearDown',
                                                    '__str__']},
             'doctest.DocTestFailure': {'bases': ['Exception'],
                                        'constructor': ['test', 'example', 'got'],
                                        'docstring': 'A DocTest example has failed in debugging mode.\n\n    The exception instance has variables:\n\n    - test: the DocTest object being run\n\n    - example: the Example object that failed\n\n    - got: the actual output\n    ',
                                        'methods': [('__str__', [], '')],
                                        'properties': ['test', 'example', 'got']},
             'doctest.DocTestFinder': {'bases': [],
                                       'constructor': ['verbose=False',
                                                       'parser=DocTestParser()',
                                                       'recurse=True',
                                                       'exclude_empty=True'],
                                       'docstring': '\n    A class used to extract the DocTests that are relevant to a given\n    object, from its docstring and the docstrings of its contained\n    objects.  Doctests can currently be extracted from the following\n    object types: modules, functions, classes, methods, staticmethods,\n    classmethods, and properties.\n    ',
                                       'methods': [('find',
                                                    ['obj',
                                                     'name=None',
                                                     'module=None',
                                                     'globs=None',
                                                     'extraglobs=None'],
                                                    "\n        Return a list of the DocTests that are defined by the given\n        object's docstring, or by any of its contained objects'\n        docstrings.\n\n        The optional parameter `module` is the module that contains\n        the given object.  If the module is not specified or is None, then\n        the test finder will attempt to automatically determine the\n        correct module.  The object's module is used:\n\n            - As a default namespace, if `globs` is not specified.\n            - To prevent the DocTestFinder from extracting DocTests\n              from objects that are imported from other modules.\n            - To find the name of the file containing the object.\n            - To help find the line number of the object within its\n              file.\n\n        Contained objects whose module does not match `module` are ignored.\n\n        If `module` is False, no attempt to find the module will be made.\n        This is obscure, of use mostly in tests:  if `module` is False, or\n        is None but cannot be found automatically, then all objects are\n        considered to belong to the (non-existent) module, so all contained\n        objects will (recursively) be searched for doctests.\n\n        The globals for each DocTest is formed by combining `globs`\n        and `extraglobs` (bindings in `extraglobs` override bindings\n        in `globs`).  A new copy of the globals dictionary is created\n        for each DocTest.  If `globs` is not specified, then it\n        defaults to the module's `__dict__`, if specified, or {}\n        otherwise.  If `extraglobs` is not specified, then it defaults\n        to {}.\n\n        "),
                                                   ('_from_module',
                                                    ['module', 'object'],
                                                    '\n        Return true if the given object is defined in the given\n        module.\n        '),
                                                   ('_find',
                                                    ['tests',
                                                     'obj',
                                                     'name',
                                                     'module',
                                                     'source_lines',
                                                     'globs',
                                                     'seen'],
                                                    '\n        Find tests for the given object and any contained objects, and\n        add them to `tests`.\n        '),
                                                   ('_get_test',
                                                    ['obj',
                                                     'name',
                                                     'module',
                                                     'globs',
                                                     'source_lines'],
                                                    '\n        Return a DocTest for the given object, if it defines a docstring;\n        otherwise, return None.\n        '),
                                                   ('_find_lineno',
                                                    ['obj', 'source_lines'],
                                                    "\n        Return a line number of the given object's docstring.  Note:\n        this method assumes that the object has a docstring.\n        ")],
                                       'properties': ['_parser',
                                                      '_verbose',
                                                      '_recurse',
                                                      '_exclude_empty']},
             'doctest.DocTestParser': {'bases': [],
                                       'constructor': [],
                                       'docstring': '\n    A class used to parse strings containing doctest examples.\n    ',
                                       'methods': [('parse',
                                                    ['string', "name='<string>'"],
                                                    '\n        Divide the given string into examples and intervening text,\n        and return them as a list of alternating Examples and strings.\n        Line numbers for the Examples are 0-based.  The optional\n        argument `name` is a name identifying this string, and is only\n        used for error messages.\n        '),
                                                   ('get_doctest',
                                                    ['string',
                                                     'globs',
                                                     'name',
                                                     'filename',
                                                     'lineno'],
                                                    '\n        Extract all doctest examples from the given string, and\n        collect them into a `DocTest` object.\n\n        `globs`, `name`, `filename`, and `lineno` are attributes for\n        the new `DocTest` object.  See the documentation for `DocTest`\n        for more information.\n        '),
                                                   ('get_examples',
                                                    ['string', "name='<string>'"],
                                                    '\n        Extract all doctest examples from the given string, and return\n        them as a list of `Example` objects.  Line numbers are\n        0-based, because it\'s most common in doctests that nothing\n        interesting appears on the same line as opening triple-quote,\n        and so the first interesting line is called "line 1" then.\n\n        The optional argument `name` is a name identifying this\n        string, and is only used for error messages.\n        '),
                                                   ('_parse_example',
                                                    ['m', 'name', 'lineno'],
                                                    "\n        Given a regular expression match from `_EXAMPLE_RE` (`m`),\n        return a pair `(source, want)`, where `source` is the matched\n        example's source code (with prompts and indentation stripped);\n        and `want` is the example's expected output (with indentation\n        stripped).\n\n        `name` is the string's name, and `lineno` is the line number\n        where the example starts; both are used for error messages.\n        "),
                                                   ('_find_options',
                                                    ['source', 'name', 'lineno'],
                                                    "\n        Return a dictionary containing option overrides extracted from\n        option directives in the given source string.\n\n        `name` is the string's name, and `lineno` is the line number\n        where the example starts; both are used for error messages.\n        "),
                                                   ('_min_indent',
                                                    ['s'],
                                                    'Return the minimum indentation of any non-blank line in `s`'),
                                                   ('_check_prompt_blank',
                                                    ['lines', 'indent', 'name', 'lineno'],
                                                    '\n        Given the lines of a source string (including prompts and\n        leading indentation), check to make sure that every prompt is\n        followed by a space character.  If any line is not followed by\n        a space character, then raise ValueError.\n        '),
                                                   ('_check_prefix',
                                                    ['lines', 'prefix', 'name', 'lineno'],
                                                    '\n        Check that every line in the given list starts with the given\n        prefix; if any line does not, then raise a ValueError.\n        ')],
                                       'properties': ['_EXAMPLE_RE',
                                                      '_EXCEPTION_RE',
                                                      '_IS_BLANK_OR_COMMENT',
                                                      '_OPTION_DIRECTIVE_RE',
                                                      '_INDENT_RE']},
             'doctest.DocTestRunner': {'bases': [],
                                       'constructor': ['checker=None',
                                                       'verbose=None',
                                                       'optionflags=0'],
                                       'docstring': "\n    A class used to run DocTest test cases, and accumulate statistics.\n    The `run` method is used to process a single DocTest case.  It\n    returns a tuple `(f, t)`, where `t` is the number of test cases\n    tried, and `f` is the number of test cases that failed.\n\n        >>> tests = DocTestFinder().find(_TestClass)\n        >>> runner = DocTestRunner(verbose=False)\n        >>> tests.sort(key = lambda test: test.name)\n        >>> for test in tests:\n        ...     print test.name, '->', runner.run(test)\n        _TestClass -> TestResults(failed=0, attempted=2)\n        _TestClass.__init__ -> TestResults(failed=0, attempted=2)\n        _TestClass.get -> TestResults(failed=0, attempted=2)\n        _TestClass.square -> TestResults(failed=0, attempted=1)\n\n    The `summarize` method prints a summary of all the test cases that\n    have been run by the runner, and returns an aggregated `(f, t)`\n    tuple:\n\n        >>> runner.summarize(verbose=1)\n        4 items passed all tests:\n           2 tests in _TestClass\n           2 tests in _TestClass.__init__\n           2 tests in _TestClass.get\n           1 tests in _TestClass.square\n        7 tests in 4 items.\n        7 passed and 0 failed.\n        Test passed.\n        TestResults(failed=0, attempted=7)\n\n    The aggregated number of tried examples and failed examples is\n    also available via the `tries` and `failures` attributes:\n\n        >>> runner.tries\n        7\n        >>> runner.failures\n        0\n\n    The comparison between expected outputs and actual outputs is done\n    by an `OutputChecker`.  This comparison may be customized with a\n    number of option flags; see the documentation for `testmod` for\n    more information.  If the option flags are insufficient, then the\n    comparison may also be customized by passing a subclass of\n    `OutputChecker` to the constructor.\n\n    The test runner's display output can be controlled in two ways.\n    First, an output function (`out) can be passed to\n    `TestRunner.run`; this function will be called with strings that\n    should be displayed.  It defaults to `sys.stdout.write`.  If\n    capturing the output is not sufficient, then the display output\n    can be also customized by subclassing DocTestRunner, and\n    overriding the methods `report_start`, `report_success`,\n    `report_unexpected_exception`, and `report_failure`.\n    ",
                                       'methods': [('report_start',
                                                    ['out', 'test', 'example'],
                                                    '\n        Report that the test runner is about to process the given\n        example.  (Only displays a message if verbose=True)\n        '),
                                                   ('report_success',
                                                    ['out', 'test', 'example', 'got'],
                                                    '\n        Report that the given example ran successfully.  (Only\n        displays a message if verbose=True)\n        '),
                                                   ('report_failure',
                                                    ['out', 'test', 'example', 'got'],
                                                    '\n        Report that the given example failed.\n        '),
                                                   ('report_unexpected_exception',
                                                    ['out', 'test', 'example', 'exc_info'],
                                                    '\n        Report that the given example raised an unexpected exception.\n        '),
                                                   ('_failure_header', ['test', 'example'], ''),
                                                   ('__run',
                                                    ['test', 'compileflags', 'out'],
                                                    '\n        Run the examples in `test`.  Write the outcome of each example\n        with one of the `DocTestRunner.report_*` methods, using the\n        writer function `out`.  `compileflags` is the set of compiler\n        flags that should be used to execute examples.  Return a tuple\n        `(f, t)`, where `t` is the number of examples tried, and `f`\n        is the number of examples that failed.  The examples are run\n        in the namespace `test.globs`.\n        '),
                                                   ('__record_outcome',
                                                    ['test', 'f', 't'],
                                                    '\n        Record the fact that the given DocTest (`test`) generated `f`\n        failures out of `t` tried examples.\n        '),
                                                   ('__patched_linecache_getlines',
                                                    ['filename', 'module_globals=None'],
                                                    ''),
                                                   ('run',
                                                    ['test',
                                                     'compileflags=None',
                                                     'out=None',
                                                     'clear_globs=True'],
                                                    '\n        Run the examples in `test`, and display the results using the\n        writer function `out`.\n\n        The examples are run in the namespace `test.globs`.  If\n        `clear_globs` is true (the default), then this namespace will\n        be cleared after the test runs, to help with garbage\n        collection.  If you would like to examine the namespace after\n        the test completes, then use `clear_globs=False`.\n\n        `compileflags` gives the set of flags that should be used by\n        the Python compiler when running the examples.  If not\n        specified, then it will default to the set of future-import\n        flags that apply to `globs`.\n\n        The output of each example is checked using\n        `DocTestRunner.check_output`, and the results are formatted by\n        the `DocTestRunner.report_*` methods.\n        '),
                                                   ('summarize',
                                                    ['verbose=None'],
                                                    "\n        Print a summary of all the test cases that have been run by\n        this DocTestRunner, and return a tuple `(f, t)`, where `f` is\n        the total number of failed examples, and `t` is the total\n        number of tried examples.\n\n        The optional `verbose` argument controls how detailed the\n        summary is.  If the verbosity is not specified, then the\n        DocTestRunner's verbosity is used.\n        "),
                                                   ('merge', ['other'], '')],
                                       'properties': ['DIVIDER',
                                                      '_checker',
                                                      '_verbose',
                                                      'optionflags',
                                                      'original_optionflags',
                                                      'tries',
                                                      'failures',
                                                      '_name2ft',
                                                      '_fakeout',
                                                      '__LINECACHE_FILENAME_RE',
                                                      'test',
                                                      'debugger',
                                                      'save_linecache_getlines']},
             'doctest.Example': {'bases': [],
                                 'constructor': ['source',
                                                 'want',
                                                 'exc_msg=None',
                                                 'lineno=0',
                                                 'indent=0',
                                                 'options=None'],
                                 'docstring': "\n    A single doctest example, consisting of source code and expected\n    output.  `Example` defines the following attributes:\n\n      - source: A single Python statement, always ending with a newline.\n        The constructor adds a newline if needed.\n\n      - want: The expected output from running the source code (either\n        from stdout, or a traceback in case of exception).  `want` ends\n        with a newline unless it's empty, in which case it's an empty\n        string.  The constructor adds a newline if needed.\n\n      - exc_msg: The exception message generated by the example, if\n        the example is expected to generate an exception; or `None` if\n        it is not expected to generate an exception.  This exception\n        message is compared against the return value of\n        `traceback.format_exception_only()`.  `exc_msg` ends with a\n        newline unless it's `None`.  The constructor adds a newline\n        if needed.\n\n      - lineno: The line number within the DocTest string containing\n        this Example where the Example begins.  This line number is\n        zero-based, with respect to the beginning of the DocTest.\n\n      - indent: The example's indentation in the DocTest string.\n        I.e., the number of space characters that preceed the\n        example's first prompt.\n\n      - options: A dictionary mapping from option flags to True or\n        False, which is used to override default options for this\n        example.  Any option flags not contained in this dictionary\n        are left at their default value (as specified by the\n        DocTestRunner's optionflags).  By default, no options are set.\n    ",
                                 'methods': [],
                                 'properties': ['source',
                                                'want',
                                                'lineno',
                                                'indent',
                                                'options',
                                                'exc_msg']},
             'doctest.OutputChecker': {'bases': [],
                                       'constructor': [],
                                       'docstring': '\n    A class used to check the whether the actual output from a doctest\n    example matches the expected output.  `OutputChecker` defines two\n    methods: `check_output`, which compares a given pair of outputs,\n    and returns true if they match; and `output_difference`, which\n    returns a string describing the differences between two outputs.\n    ',
                                       'methods': [('check_output',
                                                    ['want', 'got', 'optionflags'],
                                                    '\n        Return True iff the actual output from an example (`got`)\n        matches the expected output (`want`).  These strings are\n        always considered to match if they are identical; but\n        depending on what option flags the test runner is using,\n        several non-exact match types are also possible.  See the\n        documentation for `TestRunner` for more information about\n        option flags.\n        '),
                                                   ('_do_a_fancy_diff',
                                                    ['want', 'got', 'optionflags'],
                                                    ''),
                                                   ('output_difference',
                                                    ['example', 'got', 'optionflags'],
                                                    '\n        Return a string describing the differences between the\n        expected output for a given example (`example`) and the actual\n        output (`got`).  `optionflags` is the set of option flags used\n        to compare `want` and `got`.\n        ')],
                                       'properties': []},
             'doctest.SkipDocTestCase': {'bases': ['doctest.DocTestCase'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('setUp', [], ''),
                                                     ('test_skip', [], ''),
                                                     ('shortDescription', [], '')],
                                         'properties': []},
             'doctest.Tester': {'bases': [],
                                'constructor': ['mod=None',
                                                'globs=None',
                                                'verbose=None',
                                                'optionflags=0'],
                                'docstring': '',
                                'methods': [('runstring', ['s', 'name'], ''),
                                            ('rundoc',
                                             ['object', 'name=None', 'module=None'],
                                             ''),
                                            ('rundict', ['d', 'name', 'module=None'], ''),
                                            ('run__test__', ['d', 'name'], ''),
                                            ('summarize', ['verbose=None'], ''),
                                            ('merge', ['other'], '')],
                                'properties': ['globs',
                                               'verbose',
                                               'optionflags',
                                               'testfinder',
                                               'testrunner']},
             'doctest.UnexpectedException': {'bases': ['Exception'],
                                             'constructor': ['test', 'example', 'exc_info'],
                                             'docstring': 'A DocTest example has encountered an unexpected exception\n\n    The exception instance has variables:\n\n    - test: the DocTest object being run\n\n    - example: the Example object that failed\n\n    - exc_info: the exception info\n    ',
                                             'methods': [('__str__', [], '')],
                                             'properties': ['test', 'example', 'exc_info']},
             'doctest._OutputRedirectingPdb': {'bases': ['pdb.Pdb'],
                                               'constructor': ['out'],
                                               'docstring': '\n    A specialized version of the python debugger that redirects stdout\n    to a given stream when interacting with the user.  Stdout is *not*\n    redirected when traced code is executed.\n    ',
                                               'methods': [('set_trace', ['frame=None'], ''),
                                                           ('set_continue', [], ''),
                                                           ('trace_dispatch', ['*args'], '')],
                                               'properties': ['__out',
                                                              '__debugger_used',
                                                              'use_rawinput']},
             'doctest._SpoofOut': {'bases': ['StringIO.StringIO'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [('getvalue', [], ''),
                                               ('truncate', ['size=None'], '')],
                                   'properties': ['softspace', 'buf']},
             'doctest._TestClass': {'bases': [],
                                    'constructor': ['val'],
                                    'docstring': "\n    A pointless class, for sanity-checking of docstring testing.\n\n    Methods:\n        square()\n        get()\n\n    >>> _TestClass(13).get() + _TestClass(-12).get()\n    1\n    >>> hex(_TestClass(13).square().get())\n    '0xa9'\n    ",
                                    'methods': [('square',
                                                 [],
                                                 "square() -> square TestClass's associated value\n\n        >>> _TestClass(13).square().get()\n        169\n        "),
                                                ('get',
                                                 [],
                                                 "get() -> return TestClass's associated value.\n\n        >>> x = _TestClass(-42)\n        >>> print x.get()\n        -42\n        ")],
                                    'properties': ['val']},
             'dumbdbm._Database': {'bases': ['UserDict.DictMixin'],
                                   'constructor': ['filebasename', 'mode'],
                                   'docstring': '',
                                   'methods': [('_update', [], ''),
                                               ('_commit', [], ''),
                                               ('__getitem__', ['key'], ''),
                                               ('_addval', ['val'], ''),
                                               ('_setval', ['pos', 'val'], ''),
                                               ('_addkey', ['key', 'pos_and_siz_pair'], ''),
                                               ('__setitem__', ['key', 'val'], ''),
                                               ('__delitem__', ['key'], ''),
                                               ('keys', [], ''),
                                               ('has_key', ['key'], ''),
                                               ('__contains__', ['key'], ''),
                                               ('iterkeys', [], ''),
                                               ('__len__', [], ''),
                                               ('close', [], ''),
                                               ('_chmod', ['file'], '')],
                                   'properties': ['_os',
                                                  '_open',
                                                  '_mode',
                                                  '_dirfile',
                                                  '_datfile',
                                                  '_bakfile',
                                                  '_index',
                                                  'sync',
                                                  '__iter__',
                                                  '__del__']},
             'dummy_thread.LockType': {'bases': ['object'],
                                       'constructor': [],
                                       'docstring': 'Class implementing dummy implementation of thread.LockType.\n\n    Compatibility is maintained by maintaining self.locked_status\n    which is a boolean that stores the state of the lock.  Pickling of\n    the lock, though, should not be done since if the thread module is\n    then used with an unpickled ``lock()`` from here problems could\n    occur from this class not having atomic methods.\n\n    ',
                                       'methods': [('acquire',
                                                    ['waitflag=None'],
                                                    "Dummy implementation of acquire().\n\n        For blocking calls, self.locked_status is automatically set to\n        True and returned appropriately based on value of\n        ``waitflag``.  If it is non-blocking, then the value is\n        actually checked and not set if it is already acquired.  This\n        is all done so that threading.Condition's assert statements\n        aren't triggered and throw a little fit.\n\n        "),
                                                   ('__exit__', ['typ', 'val', 'tb'], ''),
                                                   ('release', [], 'Release the dummy lock.'),
                                                   ('locked', [], '')],
                                       'properties': ['locked_status', '__enter__']},
             'dummy_thread.error': {'bases': ['Exception'],
                                    'constructor': ['*args'],
                                    'docstring': 'Dummy implementation of thread.error.',
                                    'methods': [],
                                    'properties': ['args']},
             'filecmp.dircmp': {'bases': [],
                                'constructor': ['a', 'b', 'ignore=None', 'hide=None'],
                                'docstring': "A class that manages the comparison of 2 directories.\n\n    dircmp(a,b,ignore=None,hide=None)\n      A and B are directories.\n      IGNORE is a list of names to ignore,\n        defaults to ['RCS', 'CVS', 'tags'].\n      HIDE is a list of names to hide,\n        defaults to [os.curdir, os.pardir].\n\n    High level usage:\n      x = dircmp(dir1, dir2)\n      x.report() -> prints a report on the differences between dir1 and dir2\n       or\n      x.report_partial_closure() -> prints report on differences between dir1\n            and dir2, and reports on common immediate subdirectories.\n      x.report_full_closure() -> like report_partial_closure,\n            but fully recursive.\n\n    Attributes:\n     left_list, right_list: The files in dir1 and dir2,\n        filtered by hide and ignore.\n     common: a list of names in both dir1 and dir2.\n     left_only, right_only: names only in dir1, dir2.\n     common_dirs: subdirectories in both dir1 and dir2.\n     common_files: files in both dir1 and dir2.\n     common_funny: names in both dir1 and dir2 where the type differs between\n        dir1 and dir2, or the name is not stat-able.\n     same_files: list of identical files.\n     diff_files: list of filenames which differ.\n     funny_files: list of files which could not be compared.\n     subdirs: a dictionary of dircmp objects, keyed by names in common_dirs.\n     ",
                                'methods': [('phase0', [], ''),
                                            ('phase1', [], ''),
                                            ('phase2', [], ''),
                                            ('phase3', [], ''),
                                            ('phase4', [], ''),
                                            ('phase4_closure', [], ''),
                                            ('report', [], ''),
                                            ('report_partial_closure', [], ''),
                                            ('report_full_closure', [], ''),
                                            ('__getattr__', ['attr'], '')],
                                'properties': ['left',
                                               'right',
                                               'hide',
                                               'ignore',
                                               'left_list',
                                               'right_list',
                                               'common',
                                               'left_only',
                                               'right_only',
                                               'common_dirs',
                                               'common_files',
                                               'common_funny',
                                               'same_files',
                                               'diff_files',
                                               'funny_files',
                                               'subdirs',
                                               'methodmap']},
             'fileinput.FileInput': {'bases': [],
                                     'constructor': ['files=None',
                                                     'inplace=0',
                                                     "backup=''",
                                                     'bufsize=0',
                                                     "mode='r'",
                                                     'openhook=None'],
                                     'docstring': 'class FileInput([files[, inplace[, backup[, mode[, openhook]]]]])\n\n    Class FileInput is the implementation of the module; its methods\n    filename(), lineno(), fileline(), isfirstline(), isstdin(), fileno(),\n    nextfile() and close() correspond to the functions of the same name\n    in the module.\n    In addition it has a readline() method which returns the next\n    input line, and a __getitem__() method which implements the\n    sequence behavior. The sequence must be accessed in strictly\n    sequential order; random access and readline() cannot be mixed.\n    ',
                                     'methods': [('__del__', [], ''),
                                                 ('close', [], ''),
                                                 ('__iter__', [], ''),
                                                 ('next', [], ''),
                                                 ('__getitem__', ['i'], ''),
                                                 ('nextfile', [], ''),
                                                 ('readline', [], ''),
                                                 ('filename', [], ''),
                                                 ('lineno', [], ''),
                                                 ('filelineno', [], ''),
                                                 ('fileno', [], ''),
                                                 ('isfirstline', [], ''),
                                                 ('isstdin', [], '')],
                                     'properties': ['_files',
                                                    '_inplace',
                                                    '_backup',
                                                    '_bufsize',
                                                    '_savestdout',
                                                    '_output',
                                                    '_filename',
                                                    '_lineno',
                                                    '_filelineno',
                                                    '_file',
                                                    '_isstdin',
                                                    '_backupfilename',
                                                    '_buffer',
                                                    '_bufindex',
                                                    '_mode',
                                                    '_openhook']},
             'formatter.AbstractFormatter': {'bases': [],
                                             'constructor': ['writer'],
                                             'docstring': 'The standard formatter.\n\n    This implementation has demonstrated wide applicability to many writers,\n    and may be used directly in most circumstances.  It has been used to\n    implement a full-featured World Wide Web browser.\n\n    ',
                                             'methods': [('end_paragraph', ['blankline'], ''),
                                                         ('add_line_break', [], ''),
                                                         ('add_hor_rule',
                                                          ['*args', '**kw'],
                                                          ''),
                                                         ('add_label_data',
                                                          ['format',
                                                           'counter',
                                                           'blankline=None'],
                                                          ''),
                                                         ('format_counter',
                                                          ['format', 'counter'],
                                                          ''),
                                                         ('format_letter',
                                                          ['case', 'counter'],
                                                          ''),
                                                         ('format_roman',
                                                          ['case', 'counter'],
                                                          ''),
                                                         ('add_flowing_data', ['data'], ''),
                                                         ('add_literal_data', ['data'], ''),
                                                         ('flush_softspace', [], ''),
                                                         ('push_alignment', ['align'], ''),
                                                         ('pop_alignment', [], ''),
                                                         ('push_font', ['font'], ''),
                                                         ('pop_font', [], ''),
                                                         ('push_margin', ['margin'], ''),
                                                         ('pop_margin', [], ''),
                                                         ('set_spacing', ['spacing'], ''),
                                                         ('push_style', ['*styles'], ''),
                                                         ('pop_style', ['n=1'], ''),
                                                         ('assert_line_data', ['flag=1'], '')],
                                             'properties': ['writer',
                                                            'align',
                                                            'align_stack',
                                                            'font_stack',
                                                            'margin_stack',
                                                            'spacing',
                                                            'style_stack',
                                                            'nospace',
                                                            'softspace',
                                                            'para_end',
                                                            'parskip',
                                                            'hard_break',
                                                            'have_label']},
             'formatter.AbstractWriter': {'bases': ['formatter.NullWriter'],
                                          'constructor': [],
                                          'docstring': 'A writer which can be used in debugging formatters, but not much else.\n\n    Each method simply announces itself by printing its name and\n    arguments on standard output.\n\n    ',
                                          'methods': [('new_alignment', ['align'], ''),
                                                      ('new_font', ['font'], ''),
                                                      ('new_margin', ['margin', 'level'], ''),
                                                      ('new_spacing', ['spacing'], ''),
                                                      ('new_styles', ['styles'], ''),
                                                      ('send_paragraph', ['blankline'], ''),
                                                      ('send_line_break', [], ''),
                                                      ('send_hor_rule', ['*args', '**kw'], ''),
                                                      ('send_label_data', ['data'], ''),
                                                      ('send_flowing_data', ['data'], ''),
                                                      ('send_literal_data', ['data'], '')],
                                          'properties': []},
             'formatter.DumbWriter': {'bases': ['formatter.NullWriter'],
                                      'constructor': ['file=None', 'maxcol=72'],
                                      'docstring': 'Simple writer class which writes output on the file object passed in\n    as the file parameter or, if file is omitted, on standard output.  The\n    output is simply word-wrapped to the number of columns specified by\n    the maxcol parameter.  This class is suitable for reflowing a sequence\n    of paragraphs.\n\n    ',
                                      'methods': [('reset', [], ''),
                                                  ('send_paragraph', ['blankline'], ''),
                                                  ('send_line_break', [], ''),
                                                  ('send_hor_rule', ['*args', '**kw'], ''),
                                                  ('send_literal_data', ['data'], ''),
                                                  ('send_flowing_data', ['data'], '')],
                                      'properties': ['file', 'maxcol', 'col', 'atbreak']},
             'formatter.NullFormatter': {'bases': [],
                                         'constructor': ['writer=None'],
                                         'docstring': "A formatter which does nothing.\n\n    If the writer parameter is omitted, a NullWriter instance is created.\n    No methods of the writer are called by NullFormatter instances.\n\n    Implementations should inherit from this class if implementing a writer\n    interface but don't need to inherit any implementation.\n\n    ",
                                         'methods': [('end_paragraph', ['blankline'], ''),
                                                     ('add_line_break', [], ''),
                                                     ('add_hor_rule', ['*args', '**kw'], ''),
                                                     ('add_label_data',
                                                      ['format', 'counter', 'blankline=None'],
                                                      ''),
                                                     ('add_flowing_data', ['data'], ''),
                                                     ('add_literal_data', ['data'], ''),
                                                     ('flush_softspace', [], ''),
                                                     ('push_alignment', ['align'], ''),
                                                     ('pop_alignment', [], ''),
                                                     ('push_font', ['x'], ''),
                                                     ('pop_font', [], ''),
                                                     ('push_margin', ['margin'], ''),
                                                     ('pop_margin', [], ''),
                                                     ('set_spacing', ['spacing'], ''),
                                                     ('push_style', ['*styles'], ''),
                                                     ('pop_style', ['n=1'], ''),
                                                     ('assert_line_data', ['flag=1'], '')],
                                         'properties': ['writer']},
             'formatter.NullWriter': {'bases': [],
                                      'constructor': [],
                                      'docstring': 'Minimal writer interface to use in testing & inheritance.\n\n    A writer which only provides the interface definition; no actions are\n    taken on any methods.  This should be the base class for all writers\n    which do not need to inherit any implementation methods.\n\n    ',
                                      'methods': [('flush', [], ''),
                                                  ('new_alignment', ['align'], ''),
                                                  ('new_font', ['font'], ''),
                                                  ('new_margin', ['margin', 'level'], ''),
                                                  ('new_spacing', ['spacing'], ''),
                                                  ('new_styles', ['styles'], ''),
                                                  ('send_paragraph', ['blankline'], ''),
                                                  ('send_line_break', [], ''),
                                                  ('send_hor_rule', ['*args', '**kw'], ''),
                                                  ('send_label_data', ['data'], ''),
                                                  ('send_flowing_data', ['data'], ''),
                                                  ('send_literal_data', ['data'], '')],
                                      'properties': []},
             'fpformat.NotANumber': {'bases': ['ValueError'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': []},
             'fractions.Fraction': {'bases': ['fractions.Rational'],
                                    'constructor': [],
                                    'docstring': "This class implements rational numbers.\n\n    In the two-argument form of the constructor, Fraction(8, 6) will\n    produce a rational number equivalent to 4/3. Both arguments must\n    be Rational. The numerator defaults to 0 and the denominator\n    defaults to 1 so that Fraction(3) == 3 and Fraction() == 0.\n\n    Fractions can also be constructed from:\n\n      - numeric strings similar to those accepted by the\n        float constructor (for example, '-2.3' or '1e10')\n\n      - strings of the form '123/456'\n\n      - float and Decimal instances\n\n      - other Rational instances (including integers)\n\n    ",
                                    'methods': [('__new__',
                                                 ['numerator=0', 'denominator=None'],
                                                 "Constructs a Fraction.\n\n        Takes a string like '3/2' or '1.5', another Rational instance, a\n        numerator/denominator pair, or a float.\n\n        Examples\n        --------\n\n        >>> Fraction(10, -8)\n        Fraction(-5, 4)\n        >>> Fraction(Fraction(1, 7), 5)\n        Fraction(1, 35)\n        >>> Fraction(Fraction(1, 7), Fraction(2, 3))\n        Fraction(3, 14)\n        >>> Fraction('314')\n        Fraction(314, 1)\n        >>> Fraction('-35/4')\n        Fraction(-35, 4)\n        >>> Fraction('3.1415') # conversion from numeric string\n        Fraction(6283, 2000)\n        >>> Fraction('-47e-2') # string may include a decimal exponent\n        Fraction(-47, 100)\n        >>> Fraction(1.47)  # direct construction from float (exact conversion)\n        Fraction(6620291452234629, 4503599627370496)\n        >>> Fraction(2.25)\n        Fraction(9, 4)\n        >>> Fraction(Decimal('1.47'))\n        Fraction(147, 100)\n\n        "),
                                                ('from_float',
                                                 ['f'],
                                                 'Converts a finite float to a rational number, exactly.\n\n        Beware that Fraction.from_float(0.3) != Fraction(3, 10).\n\n        '),
                                                ('from_decimal',
                                                 ['dec'],
                                                 'Converts a finite Decimal instance to a rational number, exactly.'),
                                                ('limit_denominator',
                                                 ['max_denominator=1000000'],
                                                 "Closest Fraction to self with denominator at most max_denominator.\n\n        >>> Fraction('3.141592653589793').limit_denominator(10)\n        Fraction(22, 7)\n        >>> Fraction('3.141592653589793').limit_denominator(100)\n        Fraction(311, 99)\n        >>> Fraction(4321, 8765).limit_denominator(10000)\n        Fraction(4321, 8765)\n\n        "),
                                                ('__repr__', [], 'repr(self)'),
                                                ('__str__', [], 'str(self)'),
                                                ('_operator_fallbacks',
                                                 ['fallback_operator'],
                                                 'Generates forward and reverse operators given a purely-rational\n        operator and a function from the operator module.\n\n        Use this like:\n        __op__, __rop__ = _operator_fallbacks(just_rational_op, operator.op)\n\n        In general, we want to implement the arithmetic operations so\n        that mixed-mode operations either call an implementation whose\n        author knew about the types of both arguments, or convert both\n        to the nearest built in type and do the operation there. In\n        Fraction, that means that we define __add__ and __radd__ as:\n\n            def __add__(self, other):\n                # Both types have numerators/denominator attributes,\n                # so do the operation directly\n                if isinstance(other, (int, long, Fraction)):\n                    return Fraction(self.numerator * other.denominator +\n                                    other.numerator * self.denominator,\n                                    self.denominator * other.denominator)\n                # float and complex don\'t have those operations, but we\n                # know about those types, so special case them.\n                elif isinstance(other, float):\n                    return float(self) + other\n                elif isinstance(other, complex):\n                    return complex(self) + other\n                # Let the other type take over.\n                return NotImplemented\n\n            def __radd__(self, other):\n                # radd handles more types than add because there\'s\n                # nothing left to fall back to.\n                if isinstance(other, Rational):\n                    return Fraction(self.numerator * other.denominator +\n                                    other.numerator * self.denominator,\n                                    self.denominator * other.denominator)\n                elif isinstance(other, Real):\n                    return float(other) + float(self)\n                elif isinstance(other, Complex):\n                    return complex(other) + complex(self)\n                return NotImplemented\n\n\n        There are 5 different cases for a mixed-type addition on\n        Fraction. I\'ll refer to all of the above code that doesn\'t\n        refer to Fraction, float, or complex as "boilerplate". \'r\'\n        will be an instance of Fraction, which is a subtype of\n        Rational (r : Fraction <: Rational), and b : B <:\n        Complex. The first three involve \'r + b\':\n\n            1. If B <: Fraction, int, float, or complex, we handle\n               that specially, and all is well.\n            2. If Fraction falls back to the boilerplate code, and it\n               were to return a value from __add__, we\'d miss the\n               possibility that B defines a more intelligent __radd__,\n               so the boilerplate should return NotImplemented from\n               __add__. In particular, we don\'t handle Rational\n               here, even though we could get an exact answer, in case\n               the other type wants to do something special.\n            3. If B <: Fraction, Python tries B.__radd__ before\n               Fraction.__add__. This is ok, because it was\n               implemented with knowledge of Fraction, so it can\n               handle those instances before delegating to Real or\n               Complex.\n\n        The next two situations describe \'b + r\'. We assume that b\n        didn\'t know about Fraction in its implementation, and that it\n        uses similar boilerplate code:\n\n            4. If B <: Rational, then __radd_ converts both to the\n               builtin rational type (hey look, that\'s us) and\n               proceeds.\n            5. Otherwise, __radd__ tries to find the nearest common\n               base ABC, and fall back to its builtin type. Since this\n               class doesn\'t subclass a concrete type, there\'s no\n               implementation to fall back to, so we need to try as\n               hard as possible to return an actual value, or the user\n               will get a TypeError.\n\n        '),
                                                ('_add', ['b'], 'a + b'),
                                                ('_sub', ['b'], 'a - b'),
                                                ('_mul', ['b'], 'a * b'),
                                                ('_div', ['b'], 'a / b'),
                                                ('__floordiv__', ['b'], 'a // b'),
                                                ('__rfloordiv__', ['a'], 'a // b'),
                                                ('__mod__', ['b'], 'a % b'),
                                                ('__rmod__', ['a'], 'a % b'),
                                                ('__pow__',
                                                 ['b'],
                                                 'a ** b\n\n        If b is not an integer, the result will be a float or complex\n        since roots are generally irrational. If b is an integer, the\n        result will be rational.\n\n        '),
                                                ('__rpow__', ['a'], 'a ** b'),
                                                ('__pos__',
                                                 [],
                                                 '+a: Coerces a subclass instance to Fraction'),
                                                ('__neg__', [], '-a'),
                                                ('__abs__', [], 'abs(a)'),
                                                ('__trunc__', [], 'trunc(a)'),
                                                ('__hash__',
                                                 [],
                                                 'hash(self)\n\n        Tricky because values that are exactly representable as a\n        float must have the same hash as that float.\n\n        '),
                                                ('__eq__', ['b'], 'a == b'),
                                                ('_richcmp',
                                                 ['other', 'op'],
                                                 'Helper for comparison operators, for internal use only.\n\n        Implement comparison between a Rational instance `self`, and\n        either another Rational instance or a float `other`.  If\n        `other` is not a Rational instance or a float, return\n        NotImplemented. `op` should be one of the six standard\n        comparison operators.\n\n        '),
                                                ('__lt__', ['b'], 'a < b'),
                                                ('__gt__', ['b'], 'a > b'),
                                                ('__le__', ['b'], 'a <= b'),
                                                ('__ge__', ['b'], 'a >= b'),
                                                ('__nonzero__', [], 'a != 0'),
                                                ('__reduce__', [], ''),
                                                ('__copy__', [], ''),
                                                ('__deepcopy__', ['memo'], '')],
                                    'properties': ['__slots__',
                                                   '_numerator',
                                                   '_denominator',
                                                   'numerator',
                                                   'denominator',
                                                   '__add__',
                                                   '__radd__',
                                                   '__sub__',
                                                   '__rsub__',
                                                   '__mul__',
                                                   '__rmul__',
                                                   '__truediv__',
                                                   '__rtruediv__',
                                                   '__div__',
                                                   '__rdiv__']},
             'ftplib.Error': {'bases': ['Exception'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': []},
             'ftplib.FTP': {'bases': [],
                            'constructor': ["host=''",
                                            "user=''",
                                            "passwd=''",
                                            "acct=''",
                                            'timeout=_GLOBAL_DEFAULT_TIMEOUT'],
                            'docstring': "An FTP client class.\n\n    To create a connection, call the class using these arguments:\n            host, user, passwd, acct, timeout\n\n    The first four arguments are all strings, and have default value ''.\n    timeout must be numeric and defaults to None if not passed,\n    meaning that no timeout will be set on any ftp socket(s)\n    If a timeout is passed, then this is now the default timeout for all ftp\n    socket operations for this instance.\n\n    Then use self.connect() with optional host and port argument.\n\n    To download a file, use ftp.retrlines('RETR ' + filename),\n    or ftp.retrbinary() with slightly different arguments.\n    To upload a file, use ftp.storlines() or ftp.storbinary(),\n    which have an open file as argument (see their definitions\n    below for details).\n    The download/upload functions first issue appropriate TYPE\n    and PORT or PASV commands.\n",
                            'methods': [('connect',
                                         ["host=''", 'port=0', 'timeout=-999'],
                                         'Connect to host.  Arguments are:\n         - host: hostname to connect to (string, default previous host)\n         - port: port to connect to (integer, default previous port)\n        '),
                                        ('getwelcome',
                                         [],
                                         'Get the welcome message from the server.\n        (this is read and squirreled away by connect())'),
                                        ('set_debuglevel',
                                         ['level'],
                                         'Set the debugging level.\n        The required argument level means:\n        0: no debugging output (default)\n        1: print commands and responses but not body text etc.\n        2: also print raw lines read and sent before stripping CR/LF'),
                                        ('set_pasv',
                                         ['val'],
                                         'Use passive or active mode for data transfers.\n        With a false argument, use the normal PORT mode,\n        With a true argument, use the PASV command.'),
                                        ('sanitize', ['s'], ''),
                                        ('putline', ['line'], ''),
                                        ('putcmd', ['line'], ''),
                                        ('getline', [], ''),
                                        ('getmultiline', [], ''),
                                        ('getresp', [], ''),
                                        ('voidresp',
                                         [],
                                         "Expect a response beginning with '2'."),
                                        ('abort',
                                         [],
                                         "Abort a file transfer.  Uses out-of-band data.\n        This does not follow the procedure from the RFC to send Telnet\n        IP and Synch; that doesn't seem to work with the servers I've\n        tried.  Instead, just send the ABOR command as OOB data."),
                                        ('sendcmd',
                                         ['cmd'],
                                         'Send a command and return the response.'),
                                        ('voidcmd',
                                         ['cmd'],
                                         "Send a command and expect a response beginning with '2'."),
                                        ('sendport',
                                         ['host', 'port'],
                                         'Send a PORT command with the current host and the given\n        port number.\n        '),
                                        ('sendeprt',
                                         ['host', 'port'],
                                         'Send a EPRT command with the current host and the given port number.'),
                                        ('makeport',
                                         [],
                                         'Create a new socket and send a PORT command for it.'),
                                        ('makepasv', [], ''),
                                        ('ntransfercmd',
                                         ['cmd', 'rest=None'],
                                         "Initiate a transfer over the data connection.\n\n        If the transfer is active, send a port command and the\n        transfer command, and accept the connection.  If the server is\n        passive, send a pasv command, connect to it, and start the\n        transfer command.  Either way, return the socket for the\n        connection and the expected size of the transfer.  The\n        expected size may be None if it could not be determined.\n\n        Optional `rest' argument can be a string that is sent as the\n        argument to a REST command.  This is essentially a server\n        marker used to tell the server to skip over any data up to the\n        given marker.\n        "),
                                        ('transfercmd',
                                         ['cmd', 'rest=None'],
                                         'Like ntransfercmd() but returns only the socket.'),
                                        ('login',
                                         ["user=''", "passwd=''", "acct=''"],
                                         'Login, default anonymous.'),
                                        ('retrbinary',
                                         ['cmd', 'callback', 'blocksize=8192', 'rest=None'],
                                         'Retrieve data in binary mode.  A new port is created for you.\n\n        Args:\n          cmd: A RETR command.\n          callback: A single parameter callable to be called on each\n                    block of data read.\n          blocksize: The maximum number of bytes to read from the\n                     socket at one time.  [default: 8192]\n          rest: Passed to transfercmd().  [default: None]\n\n        Returns:\n          The response code.\n        '),
                                        ('retrlines',
                                         ['cmd', 'callback=None'],
                                         'Retrieve data in line mode.  A new port is created for you.\n\n        Args:\n          cmd: A RETR, LIST, NLST, or MLSD command.\n          callback: An optional single parameter callable that is called\n                    for each line with the trailing CRLF stripped.\n                    [default: print_line()]\n\n        Returns:\n          The response code.\n        '),
                                        ('storbinary',
                                         ['cmd',
                                          'fp',
                                          'blocksize=8192',
                                          'callback=None',
                                          'rest=None'],
                                         'Store a file in binary mode.  A new port is created for you.\n\n        Args:\n          cmd: A STOR command.\n          fp: A file-like object with a read(num_bytes) method.\n          blocksize: The maximum data size to read from fp and send over\n                     the connection at once.  [default: 8192]\n          callback: An optional single parameter callable that is called on\n                    on each block of data after it is sent.  [default: None]\n          rest: Passed to transfercmd().  [default: None]\n\n        Returns:\n          The response code.\n        '),
                                        ('storlines',
                                         ['cmd', 'fp', 'callback=None'],
                                         'Store a file in line mode.  A new port is created for you.\n\n        Args:\n          cmd: A STOR command.\n          fp: A file-like object with a readline() method.\n          callback: An optional single parameter callable that is called on\n                    on each line after it is sent.  [default: None]\n\n        Returns:\n          The response code.\n        '),
                                        ('acct', ['password'], 'Send new account name.'),
                                        ('nlst',
                                         ['*args'],
                                         'Return a list of files in a given directory (default the current).'),
                                        ('dir',
                                         ['*args'],
                                         'List a directory in long form.\n        By default list current directory to stdout.\n        Optional last argument is callback function; all\n        non-empty arguments before it are concatenated to the\n        LIST command.  (This *should* only be used for a pathname.)'),
                                        ('rename', ['fromname', 'toname'], 'Rename a file.'),
                                        ('delete', ['filename'], 'Delete a file.'),
                                        ('cwd', ['dirname'], 'Change to a directory.'),
                                        ('size', ['filename'], 'Retrieve the size of a file.'),
                                        ('mkd',
                                         ['dirname'],
                                         'Make a directory, return its full pathname.'),
                                        ('rmd', ['dirname'], 'Remove a directory.'),
                                        ('pwd', [], 'Return current working directory.'),
                                        ('quit', [], 'Quit, and close the connection.'),
                                        ('close',
                                         [],
                                         'Close the connection without assuming anything about it.')],
                            'properties': ['debugging',
                                           'host',
                                           'port',
                                           'sock',
                                           'file',
                                           'welcome',
                                           'passiveserver',
                                           'timeout',
                                           'af',
                                           'debug',
                                           'lastresp']},
             'ftplib.FTP_TLS': {'bases': ['ftplib.FTP'],
                                'constructor': ["host=''",
                                                "user=''",
                                                "passwd=''",
                                                "acct=''",
                                                'keyfile=None',
                                                'certfile=None',
                                                'timeout=_GLOBAL_DEFAULT_TIMEOUT'],
                                'docstring': "A FTP subclass which adds TLS support to FTP as described\n        in RFC-4217.\n\n        Connect as usual to port 21 implicitly securing the FTP control\n        connection before authenticating.\n\n        Securing the data connection requires user to explicitly ask\n        for it by calling prot_p() method.\n\n        Usage example:\n        >>> from ftplib import FTP_TLS\n        >>> ftps = FTP_TLS('ftp.python.org')\n        >>> ftps.login()  # login anonimously previously securing control channel\n        '230 Guest login ok, access restrictions apply.'\n        >>> ftps.prot_p()  # switch to secure data connection\n        '200 Protection level set to P'\n        >>> ftps.retrlines('LIST')  # list directory content securely\n        total 9\n        drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 .\n        drwxr-xr-x   8 root     wheel        1024 Jan  3  1994 ..\n        drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 bin\n        drwxr-xr-x   2 root     wheel        1024 Jan  3  1994 etc\n        d-wxrwxr-x   2 ftp      wheel        1024 Sep  5 13:43 incoming\n        drwxr-xr-x   2 root     wheel        1024 Nov 17  1993 lib\n        drwxr-xr-x   6 1094     wheel        1024 Sep 13 19:07 pub\n        drwxr-xr-x   3 root     wheel        1024 Jan  3  1994 usr\n        -rw-r--r--   1 root     root          312 Aug  1  1994 welcome.msg\n        '226 Transfer complete.'\n        >>> ftps.quit()\n        '221 Goodbye.'\n        >>>\n        ",
                                'methods': [('login',
                                             ["user=''",
                                              "passwd=''",
                                              "acct=''",
                                              'secure=True'],
                                             ''),
                                            ('auth',
                                             [],
                                             'Set up secure control connection by using TLS/SSL.'),
                                            ('prot_p', [], 'Set up secure data connection.'),
                                            ('prot_c',
                                             [],
                                             'Set up clear text data connection.'),
                                            ('ntransfercmd', ['cmd', 'rest=None'], ''),
                                            ('retrbinary',
                                             ['cmd',
                                              'callback',
                                              'blocksize=8192',
                                              'rest=None'],
                                             ''),
                                            ('retrlines', ['cmd', 'callback=None'], ''),
                                            ('storbinary',
                                             ['cmd',
                                              'fp',
                                              'blocksize=8192',
                                              'callback=None',
                                              'rest=None'],
                                             ''),
                                            ('storlines', ['cmd', 'fp', 'callback=None'], '')],
                                'properties': ['ssl_version',
                                               'keyfile',
                                               'certfile',
                                               '_prot_p',
                                               'sock',
                                               'file']},
             'ftplib.Netrc': {'bases': [],
                              'constructor': ['filename=None'],
                              'docstring': "Class to parse & provide access to 'netrc' format files.\n\n    See the netrc(4) man page for information on the file format.\n\n    WARNING: This class is obsolete -- use module netrc instead.\n\n    ",
                              'methods': [('get_hosts',
                                           [],
                                           'Return a list of hosts mentioned in the .netrc file.'),
                                          ('get_account',
                                           ['host'],
                                           'Returns login information for the named host.\n\n        The return value is a triple containing userid,\n        password, and the accounting field.\n\n        '),
                                          ('get_macros',
                                           [],
                                           'Return a list of all defined macro names.'),
                                          ('get_macro',
                                           ['macro'],
                                           'Return a sequence of lines which define a named macro.')],
                              'properties': ['__defuser',
                                             '__defpasswd',
                                             '__defacct',
                                             '__hosts',
                                             '__macros']},
             'ftplib.error_perm': {'bases': ['ftplib.Error'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': []},
             'ftplib.error_proto': {'bases': ['ftplib.Error'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'ftplib.error_reply': {'bases': ['ftplib.Error'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'ftplib.error_temp': {'bases': ['ftplib.Error'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': []},
             'getopt.GetoptError': {'bases': ['Exception'],
                                    'constructor': ['msg', "opt=''"],
                                    'docstring': '',
                                    'methods': [('__str__', [], '')],
                                    'properties': ['opt', 'msg']},
             'getpass.GetPassWarning': {'bases': ['UserWarning'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': []},
             'gettext.GNUTranslations': {'bases': ['gettext.NullTranslations'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('_parse',
                                                      ['fp'],
                                                      'Override this method to support alternative .mo formats.'),
                                                     ('gettext', ['message'], ''),
                                                     ('lgettext', ['message'], ''),
                                                     ('ngettext',
                                                      ['msgid1', 'msgid2', 'n'],
                                                      ''),
                                                     ('lngettext',
                                                      ['msgid1', 'msgid2', 'n'],
                                                      ''),
                                                     ('ugettext', ['message'], ''),
                                                     ('ungettext',
                                                      ['msgid1', 'msgid2', 'n'],
                                                      '')],
                                         'properties': ['LE_MAGIC',
                                                        'BE_MAGIC',
                                                        '_catalog',
                                                        'plural',
                                                        '_charset']},
             'gettext.NullTranslations': {'bases': [],
                                          'constructor': ['fp=None'],
                                          'docstring': '',
                                          'methods': [('_parse', ['fp'], ''),
                                                      ('add_fallback', ['fallback'], ''),
                                                      ('gettext', ['message'], ''),
                                                      ('lgettext', ['message'], ''),
                                                      ('ngettext',
                                                       ['msgid1', 'msgid2', 'n'],
                                                       ''),
                                                      ('lngettext',
                                                       ['msgid1', 'msgid2', 'n'],
                                                       ''),
                                                      ('ugettext', ['message'], ''),
                                                      ('ungettext',
                                                       ['msgid1', 'msgid2', 'n'],
                                                       ''),
                                                      ('info', [], ''),
                                                      ('charset', [], ''),
                                                      ('output_charset', [], ''),
                                                      ('set_output_charset', ['charset'], ''),
                                                      ('install',
                                                       ['unicode=False', 'names=None'],
                                                       '')],
                                          'properties': ['_info',
                                                         '_charset',
                                                         '_output_charset',
                                                         '_fallback']},
             'gzip.GzipFile': {'bases': ['io.BufferedIOBase'],
                               'constructor': ['filename=None',
                                               'mode=None',
                                               'compresslevel=9',
                                               'fileobj=None',
                                               'mtime=None'],
                               'docstring': 'The GzipFile class simulates most of the methods of a file object with\n    the exception of the readinto() and truncate() methods.\n\n    ',
                               'methods': [('__repr__', [], ''),
                                           ('_check_closed',
                                            [],
                                            'Raises a ValueError if the underlying file object has been closed.\n\n        '),
                                           ('_init_write', ['filename'], ''),
                                           ('_write_gzip_header', [], ''),
                                           ('_init_read', [], ''),
                                           ('_read_gzip_header', [], ''),
                                           ('write', ['data'], ''),
                                           ('read', ['size=-1'], ''),
                                           ('_unread', ['buf'], ''),
                                           ('_read', ['size=1024'], ''),
                                           ('_add_read_data', ['data'], ''),
                                           ('_read_eof', [], ''),
                                           ('close', [], ''),
                                           ('flush', ['zlib_mode=zlib.Z_SYNC_FLUSH'], ''),
                                           ('fileno',
                                            [],
                                            "Invoke the underlying file object's fileno() method.\n\n        This will raise AttributeError if the underlying file object\n        doesn't support fileno().\n        "),
                                           ('rewind',
                                            [],
                                            'Return the uncompressed stream file position indicator to the\n        beginning of the file'),
                                           ('readable', [], ''),
                                           ('writable', [], ''),
                                           ('seekable', [], ''),
                                           ('seek', ['offset', 'whence=0'], ''),
                                           ('readline', ['size=-1'], '')],
                               'properties': ['myfileobj',
                                              'max_read_chunk',
                                              'mode',
                                              '_new_member',
                                              'extrabuf',
                                              'extrasize',
                                              'extrastart',
                                              'name',
                                              'min_readsize',
                                              'compress',
                                              'fileobj',
                                              'offset',
                                              'mtime',
                                              'filename',
                                              'crc',
                                              'size',
                                              'writebuf',
                                              'bufsize',
                                              'decompress',
                                              'closed']},
             'hmac.HMAC': {'bases': [],
                           'constructor': ['key', 'msg=None', 'digestmod=None'],
                           'docstring': 'RFC 2104 HMAC class.  Also complies with RFC 4231.\n\n    This supports the API for Cryptographic Hash Functions (PEP 247).\n    ',
                           'methods': [('update',
                                        ['msg'],
                                        'Update this hashing object with the string msg.\n        '),
                                       ('copy',
                                        [],
                                        "Return a separate copy of this hashing object.\n\n        An update to this copy won't affect the original object.\n        "),
                                       ('_current',
                                        [],
                                        'Return a hash object for the current state.\n\n        To be used only internally with digest() and hexdigest().\n        '),
                                       ('digest',
                                        [],
                                        'Return the hash value of this hashing object.\n\n        This returns a string containing 8-bit data.  The object is\n        not altered in any way by this function; you can continue\n        updating the object after calling this function.\n        '),
                                       ('hexdigest',
                                        [],
                                        'Like digest(), but returns a string of hexadecimal digits instead.\n        ')],
                           'properties': ['blocksize',
                                          'digest_cons',
                                          'outer',
                                          'inner',
                                          'digest_size']},
             'htmllib.HTMLParseError': {'bases': ['sgmllib.SGMLParseError'],
                                        'constructor': [],
                                        'docstring': "Error raised when an HTML document can't be parsed.",
                                        'methods': [],
                                        'properties': []},
             'htmllib.HTMLParser': {'bases': ['sgmllib.SGMLParser'],
                                    'constructor': ['formatter', 'verbose=0'],
                                    'docstring': 'This is the basic HTML parser class.\n\n    It supports all entity names required by the XHTML 1.0 Recommendation.\n    It also defines handlers for all HTML 2.0 and many HTML 3.0 and 3.2\n    elements.\n\n    ',
                                    'methods': [('error', ['message'], ''),
                                                ('reset', [], ''),
                                                ('handle_data', ['data'], ''),
                                                ('save_bgn',
                                                 [],
                                                 'Begins saving character data in a buffer instead of sending it\n        to the formatter object.\n\n        Retrieve the stored data via the save_end() method.  Use of the\n        save_bgn() / save_end() pair may not be nested.\n\n        '),
                                                ('save_end',
                                                 [],
                                                 'Ends buffering character data and returns all data saved since\n        the preceding call to the save_bgn() method.\n\n        If the nofill flag is false, whitespace is collapsed to single\n        spaces.  A call to this method without a preceding call to the\n        save_bgn() method will raise a TypeError exception.\n\n        '),
                                                ('anchor_bgn',
                                                 ['href', 'name', 'type'],
                                                 'This method is called at the start of an anchor region.\n\n        The arguments correspond to the attributes of the <A> tag with\n        the same names.  The default implementation maintains a list of\n        hyperlinks (defined by the HREF attribute for <A> tags) within\n        the document.  The list of hyperlinks is available as the data\n        attribute anchorlist.\n\n        '),
                                                ('anchor_end',
                                                 [],
                                                 'This method is called at the end of an anchor region.\n\n        The default implementation adds a textual footnote marker using an\n        index into the list of hyperlinks created by the anchor_bgn()method.\n\n        '),
                                                ('handle_image',
                                                 ['src', 'alt', '*args'],
                                                 'This method is called to handle images.\n\n        The default implementation simply passes the alt value to the\n        handle_data() method.\n\n        '),
                                                ('start_html', ['attrs'], ''),
                                                ('end_html', [], ''),
                                                ('start_head', ['attrs'], ''),
                                                ('end_head', [], ''),
                                                ('start_body', ['attrs'], ''),
                                                ('end_body', [], ''),
                                                ('start_title', ['attrs'], ''),
                                                ('end_title', [], ''),
                                                ('do_base', ['attrs'], ''),
                                                ('do_isindex', ['attrs'], ''),
                                                ('do_link', ['attrs'], ''),
                                                ('do_meta', ['attrs'], ''),
                                                ('do_nextid', ['attrs'], ''),
                                                ('start_h1', ['attrs'], ''),
                                                ('end_h1', [], ''),
                                                ('start_h2', ['attrs'], ''),
                                                ('end_h2', [], ''),
                                                ('start_h3', ['attrs'], ''),
                                                ('end_h3', [], ''),
                                                ('start_h4', ['attrs'], ''),
                                                ('end_h4', [], ''),
                                                ('start_h5', ['attrs'], ''),
                                                ('end_h5', [], ''),
                                                ('start_h6', ['attrs'], ''),
                                                ('end_h6', [], ''),
                                                ('do_p', ['attrs'], ''),
                                                ('start_pre', ['attrs'], ''),
                                                ('end_pre', [], ''),
                                                ('start_xmp', ['attrs'], ''),
                                                ('end_xmp', [], ''),
                                                ('start_listing', ['attrs'], ''),
                                                ('end_listing', [], ''),
                                                ('start_address', ['attrs'], ''),
                                                ('end_address', [], ''),
                                                ('start_blockquote', ['attrs'], ''),
                                                ('end_blockquote', [], ''),
                                                ('start_ul', ['attrs'], ''),
                                                ('end_ul', [], ''),
                                                ('do_li', ['attrs'], ''),
                                                ('start_ol', ['attrs'], ''),
                                                ('end_ol', [], ''),
                                                ('start_menu', ['attrs'], ''),
                                                ('end_menu', [], ''),
                                                ('start_dir', ['attrs'], ''),
                                                ('end_dir', [], ''),
                                                ('start_dl', ['attrs'], ''),
                                                ('end_dl', [], ''),
                                                ('do_dt', ['attrs'], ''),
                                                ('do_dd', ['attrs'], ''),
                                                ('ddpop', ['bl=0'], ''),
                                                ('start_cite', ['attrs'], ''),
                                                ('end_cite', [], ''),
                                                ('start_code', ['attrs'], ''),
                                                ('end_code', [], ''),
                                                ('start_em', ['attrs'], ''),
                                                ('end_em', [], ''),
                                                ('start_kbd', ['attrs'], ''),
                                                ('end_kbd', [], ''),
                                                ('start_samp', ['attrs'], ''),
                                                ('end_samp', [], ''),
                                                ('start_strong', ['attrs'], ''),
                                                ('end_strong', [], ''),
                                                ('start_var', ['attrs'], ''),
                                                ('end_var', [], ''),
                                                ('start_i', ['attrs'], ''),
                                                ('end_i', [], ''),
                                                ('start_b', ['attrs'], ''),
                                                ('end_b', [], ''),
                                                ('start_tt', ['attrs'], ''),
                                                ('end_tt', [], ''),
                                                ('start_a', ['attrs'], ''),
                                                ('end_a', [], ''),
                                                ('do_br', ['attrs'], ''),
                                                ('do_hr', ['attrs'], ''),
                                                ('do_img', ['attrs'], ''),
                                                ('do_plaintext', ['attrs'], ''),
                                                ('unknown_starttag', ['tag', 'attrs'], ''),
                                                ('unknown_endtag', ['tag'], '')],
                                    'properties': ['formatter',
                                                   'savedata',
                                                   'isindex',
                                                   'title',
                                                   'base',
                                                   'anchor',
                                                   'anchorlist',
                                                   'nofill',
                                                   'list_stack']},
             'httplib.BadStatusLine': {'bases': ['httplib.HTTPException'],
                                       'constructor': ['line'],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': ['args', 'line']},
             'httplib.CannotSendHeader': {'bases': ['httplib.ImproperConnectionState'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': []},
             'httplib.CannotSendRequest': {'bases': ['httplib.ImproperConnectionState'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': []},
             'httplib.HTTP': {'bases': [],
                              'constructor': ["host=''", 'port=None', 'strict=None'],
                              'docstring': 'Compatibility class with httplib.py from 1.5.',
                              'methods': [('_setup', ['conn'], ''),
                                          ('connect',
                                           ['host=None', 'port=None'],
                                           "Accept arguments to set the host/port, since the superclass doesn't."),
                                          ('getfile',
                                           [],
                                           "Provide a getfile, since the superclass' does not use this concept."),
                                          ('getreply',
                                           ['buffering=False'],
                                           'Compat definition since superclass does not define it.\n\n        Returns a tuple consisting of:\n        - server status code (e.g. \'200\' if all goes well)\n        - server "reason" corresponding to status code\n        - any RFC822 headers in the response from the server\n        '),
                                          ('close', [], '')],
                              'properties': ['_http_vsn',
                                             '_http_vsn_str',
                                             'debuglevel',
                                             '_connection_class',
                                             '_conn',
                                             'send',
                                             'putrequest',
                                             'putheader',
                                             'endheaders',
                                             'set_debuglevel',
                                             'file',
                                             'headers']},
             'httplib.HTTPConnection': {'bases': [],
                                        'constructor': ['host',
                                                        'port=None',
                                                        'strict=None',
                                                        'timeout=socket._GLOBAL_DEFAULT_TIMEOUT',
                                                        'source_address=None'],
                                        'docstring': '',
                                        'methods': [('set_tunnel',
                                                     ['host', 'port=None', 'headers=None'],
                                                     ' Sets up the host and the port for the HTTP CONNECT Tunnelling.\n\n        The headers argument should be a mapping of extra HTTP headers\n        to send with the CONNECT request.\n        '),
                                                    ('_set_hostport', ['host', 'port'], ''),
                                                    ('set_debuglevel', ['level'], ''),
                                                    ('_tunnel', [], ''),
                                                    ('connect',
                                                     [],
                                                     'Connect to the host and port specified in __init__.'),
                                                    ('close',
                                                     [],
                                                     'Close the connection to the HTTP server.'),
                                                    ('send',
                                                     ['data'],
                                                     "Send `data' to the server."),
                                                    ('_output',
                                                     ['s'],
                                                     'Add a line of output to the current request buffer.\n\n        Assumes that the line does *not* end with \\r\\n.\n        '),
                                                    ('_send_output',
                                                     ['message_body=None'],
                                                     'Send the currently buffered request and clear the buffer.\n\n        Appends an extra \\r\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        '),
                                                    ('putrequest',
                                                     ['method',
                                                      'url',
                                                      'skip_host=0',
                                                      'skip_accept_encoding=0'],
                                                     "Send a request to the server.\n\n        `method' specifies an HTTP request method, e.g. 'GET'.\n        `url' specifies the object being requested, e.g. '/index.html'.\n        `skip_host' if True does not add automatically a 'Host:' header\n        `skip_accept_encoding' if True does not add automatically an\n           'Accept-Encoding:' header\n        "),
                                                    ('putheader',
                                                     ['header', '*values'],
                                                     "Send a request header line to the server.\n\n        For example: h.putheader('Accept', 'text/html')\n        "),
                                                    ('endheaders',
                                                     ['message_body=None'],
                                                     'Indicate that the last header line has been sent to the server.\n\n        This method sends the request to the server.  The optional\n        message_body argument can be used to pass message body\n        associated with the request.  The message body will be sent in\n        the same packet as the message headers if possible.  The\n        message_body should be a string.\n        '),
                                                    ('request',
                                                     ['method',
                                                      'url',
                                                      'body=None',
                                                      'headers={}'],
                                                     'Send a complete request to the server.'),
                                                    ('_set_content_length', ['body'], ''),
                                                    ('_send_request',
                                                     ['method', 'url', 'body', 'headers'],
                                                     ''),
                                                    ('getresponse',
                                                     ['buffering=False'],
                                                     'Get the response from the server.')],
                                        'properties': ['_http_vsn',
                                                       '_http_vsn_str',
                                                       'response_class',
                                                       'default_port',
                                                       'auto_open',
                                                       'debuglevel',
                                                       'strict',
                                                       'timeout',
                                                       'source_address',
                                                       'sock',
                                                       '_buffer',
                                                       '__response',
                                                       '__state',
                                                       '_method',
                                                       '_tunnel_host',
                                                       '_tunnel_port',
                                                       '_tunnel_headers',
                                                       'host',
                                                       'port']},
             'httplib.HTTPException': {'bases': ['Exception'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': []},
             'httplib.HTTPMessage': {'bases': ['mimetools.Message'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('addheader',
                                                  ['key', 'value'],
                                                  'Add header for field key handling repeats.'),
                                                 ('addcontinue',
                                                  ['key', 'more'],
                                                  'Add more field data from a continuation line.'),
                                                 ('readheaders',
                                                  [],
                                                  'Read header lines.\n\n        Read header lines up to the entirely blank line that terminates them.\n        The (normally blank) line that ends the headers is skipped, but not\n        included in the returned list.  If a non-header line ends the headers,\n        (which is an error), an attempt is made to backspace over it; it is\n        never included in the returned list.\n\n        The variable self.status is set to the empty string if all went well,\n        otherwise it is an error message.  The variable self.headers is a\n        completely uninterpreted list of lines contained in the header (so\n        printing them will reproduce the header exactly as it appears in the\n        file).\n\n        If multiple header fields with the same name occur, they are combined\n        according to the rules in RFC 2616 sec 4.2:\n\n        Appending each subsequent field-value to the first, each separated\n        by a comma. The order in which header fields with the same field-name\n        are received is significant to the interpretation of the combined\n        field value.\n        ')],
                                     'properties': ['dict',
                                                    'unixfrom',
                                                    'headers',
                                                    'status',
                                                    'seekable']},
             'httplib.HTTPResponse': {'bases': [],
                                      'constructor': ['sock',
                                                      'debuglevel=0',
                                                      'strict=0',
                                                      'method=None',
                                                      'buffering=False'],
                                      'docstring': '',
                                      'methods': [('_read_status', [], ''),
                                                  ('begin', [], ''),
                                                  ('_check_close', [], ''),
                                                  ('close', [], ''),
                                                  ('isclosed', [], ''),
                                                  ('read', ['amt=None'], ''),
                                                  ('_read_chunked', ['amt'], ''),
                                                  ('_safe_read',
                                                   ['amt'],
                                                   'Read the number of bytes requested, compensating for partial reads.\n\n        Normally, we have a blocking socket, but a read() can be interrupted\n        by a signal (resulting in a partial read).\n\n        Note that we cannot distinguish between EOF and an interrupt when zero\n        bytes have been read. IncompleteRead() will be raised in this\n        situation.\n\n        This function should be used when <amt> bytes "should" be present for\n        reading. If the bytes are truly not available (due to EOF), then the\n        IncompleteRead exception can be used to detect the problem.\n        '),
                                                  ('fileno', [], ''),
                                                  ('getheader', ['name', 'default=None'], ''),
                                                  ('getheaders',
                                                   [],
                                                   'Return list of (header, value) tuples.')],
                                      'properties': ['fp',
                                                     'debuglevel',
                                                     'strict',
                                                     '_method',
                                                     'msg',
                                                     'version',
                                                     'status',
                                                     'reason',
                                                     'chunked',
                                                     'chunk_left',
                                                     'length',
                                                     'will_close']},
             'httplib.HTTPS': {'bases': ['httplib.HTTP'],
                               'constructor': ["host=''",
                                               'port=None',
                                               'key_file=None',
                                               'cert_file=None',
                                               'strict=None'],
                               'docstring': 'Compatibility with 1.5 httplib interface\n\n        Python 1.5.2 did not have an HTTPS class, but it defined an\n        interface for sending http requests that is also useful for\n        https.\n        ',
                               'methods': [],
                               'properties': ['_connection_class', 'key_file', 'cert_file']},
             'httplib.HTTPSConnection': {'bases': ['httplib.HTTPConnection'],
                                         'constructor': ['host',
                                                         'port=None',
                                                         'key_file=None',
                                                         'cert_file=None',
                                                         'strict=None',
                                                         'timeout=socket._GLOBAL_DEFAULT_TIMEOUT',
                                                         'source_address=None'],
                                         'docstring': 'This class allows communication via SSL.',
                                         'methods': [('connect',
                                                      [],
                                                      'Connect to a host on a given (SSL) port.')],
                                         'properties': ['default_port',
                                                        'key_file',
                                                        'cert_file',
                                                        'sock']},
             'httplib.ImproperConnectionState': {'bases': ['httplib.HTTPException'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'httplib.IncompleteRead': {'bases': ['httplib.HTTPException'],
                                        'constructor': ['partial', 'expected=None'],
                                        'docstring': '',
                                        'methods': [('__repr__', [], ''), ('__str__', [], '')],
                                        'properties': ['args', 'partial', 'expected']},
             'httplib.InvalidURL': {'bases': ['httplib.HTTPException'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'httplib.LineAndFileWrapper': {'bases': [],
                                            'constructor': ['line', 'file'],
                                            'docstring': 'A limited file-like object for HTTP/0.9 responses.',
                                            'methods': [('__getattr__', ['attr'], ''),
                                                        ('_done', [], ''),
                                                        ('read', ['amt=None'], ''),
                                                        ('readline', [], ''),
                                                        ('readlines', ['size=None'], '')],
                                            'properties': ['_line',
                                                           '_file',
                                                           '_line_consumed',
                                                           '_line_offset',
                                                           '_line_left',
                                                           'read',
                                                           'readline',
                                                           'readlines']},
             'httplib.LineTooLong': {'bases': ['httplib.HTTPException'],
                                     'constructor': ['line_type'],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': []},
             'httplib.NotConnected': {'bases': ['httplib.HTTPException'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [],
                                      'properties': []},
             'httplib.ResponseNotReady': {'bases': ['httplib.ImproperConnectionState'],
                                          'constructor': [],
                                          'docstring': '',
                                          'methods': [],
                                          'properties': []},
             'httplib.UnimplementedFileMode': {'bases': ['httplib.HTTPException'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [],
                                               'properties': []},
             'httplib.UnknownProtocol': {'bases': ['httplib.HTTPException'],
                                         'constructor': ['version'],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': ['args', 'version']},
             'httplib.UnknownTransferEncoding': {'bases': ['httplib.HTTPException'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [],
                                                 'properties': []},
             'ihooks.BasicModuleImporter': {'bases': ['ihooks._Verbose'],
                                            'constructor': ['loader=None', 'verbose=VERBOSE'],
                                            'docstring': 'Basic module importer; uses module loader.\n\n    This provides basic import facilities but no package imports.\n\n    ',
                                            'methods': [('get_loader', [], ''),
                                                        ('set_loader', ['loader'], ''),
                                                        ('get_hooks', [], ''),
                                                        ('set_hooks', ['hooks'], ''),
                                                        ('import_module',
                                                         ['name',
                                                          'globals={}',
                                                          'locals={}',
                                                          'fromlist=[]'],
                                                         ''),
                                                        ('reload', ['module', 'path=None'], ''),
                                                        ('unload', ['module'], ''),
                                                        ('install', [], ''),
                                                        ('uninstall', [], '')],
                                            'properties': ['loader',
                                                           'modules',
                                                           'save_import_module',
                                                           'save_reload',
                                                           'save_unload']},
             'ihooks.BasicModuleLoader': {'bases': ['ihooks._Verbose'],
                                          'constructor': [],
                                          'docstring': "Basic module loader.\n\n    This provides the same functionality as built-in import.  It\n    doesn't deal with checking sys.modules -- all it provides is\n    find_module() and a load_module(), as well as find_module_in_dir()\n    which searches just one directory, and can be overridden by a\n    derived class to change the module search algorithm when the basic\n    dependency on sys.path is unchanged.\n\n    The interface is a little more convenient than imp's:\n    find_module(name, [path]) returns None or 'stuff', and\n    load_module(name, stuff) loads the module.\n\n    ",
                                          'methods': [('find_module',
                                                       ['name', 'path=None'],
                                                       ''),
                                                      ('default_path', [], ''),
                                                      ('find_module_in_dir',
                                                       ['name', 'dir'],
                                                       ''),
                                                      ('find_builtin_module', ['name'], ''),
                                                      ('load_module', ['name', 'stuff'], '')],
                                          'properties': []},
             'ihooks.FancyModuleLoader': {'bases': ['ihooks.ModuleLoader'],
                                          'constructor': [],
                                          'docstring': 'Fancy module loader -- parses and execs the code itself.',
                                          'methods': [('load_module', ['name', 'stuff'], '')],
                                          'properties': []},
             'ihooks.Hooks': {'bases': ['ihooks._Verbose'],
                              'constructor': [],
                              'docstring': 'Hooks into the filesystem and interpreter.\n\n    By deriving a subclass you can redefine your filesystem interface,\n    e.g. to merge it with the URL space.\n\n    This base class behaves just like the native filesystem.\n\n    ',
                              'methods': [('get_suffixes', [], ''),
                                          ('new_module', ['name'], ''),
                                          ('is_builtin', ['name'], ''),
                                          ('init_builtin', ['name'], ''),
                                          ('is_frozen', ['name'], ''),
                                          ('init_frozen', ['name'], ''),
                                          ('get_frozen_object', ['name'], ''),
                                          ('load_source',
                                           ['name', 'filename', 'file=None'],
                                           ''),
                                          ('load_compiled',
                                           ['name', 'filename', 'file=None'],
                                           ''),
                                          ('load_dynamic',
                                           ['name', 'filename', 'file=None'],
                                           ''),
                                          ('load_package',
                                           ['name', 'filename', 'file=None'],
                                           ''),
                                          ('add_module', ['name'], ''),
                                          ('modules_dict', [], ''),
                                          ('default_path', [], ''),
                                          ('path_split', ['x'], ''),
                                          ('path_join', ['x', 'y'], ''),
                                          ('path_isabs', ['x'], ''),
                                          ('path_exists', ['x'], ''),
                                          ('path_isdir', ['x'], ''),
                                          ('path_isfile', ['x'], ''),
                                          ('path_islink', ['x'], ''),
                                          ('openfile', ['*x'], ''),
                                          ('listdir', ['x'], '')],
                              'properties': ['openfile_error', 'listdir_error']},
             'ihooks.ModuleImporter': {'bases': ['ihooks.BasicModuleImporter'],
                                       'constructor': [],
                                       'docstring': 'A module importer that supports packages.',
                                       'methods': [('import_module',
                                                    ['name',
                                                     'globals=None',
                                                     'locals=None',
                                                     'fromlist=None',
                                                     'level=-1'],
                                                    ''),
                                                   ('determine_parent',
                                                    ['globals', 'level=-1'],
                                                    ''),
                                                   ('find_head_package',
                                                    ['parent', 'name'],
                                                    ''),
                                                   ('load_tail', ['q', 'tail'], ''),
                                                   ('ensure_fromlist',
                                                    ['m', 'fromlist', 'recursive=0'],
                                                    ''),
                                                   ('import_it',
                                                    ['partname',
                                                     'fqname',
                                                     'parent',
                                                     'force_load=0'],
                                                    ''),
                                                   ('reload', ['module'], '')],
                                       'properties': []},
             'ihooks.ModuleLoader': {'bases': ['ihooks.BasicModuleLoader'],
                                     'constructor': ['hooks=None', 'verbose=VERBOSE'],
                                     'docstring': "Default module loader; uses file system hooks.\n\n    By defining suitable hooks, you might be able to load modules from\n    other sources than the file system, e.g. from compressed or\n    encrypted files, tar files or (if you're brave!) URLs.\n\n    ",
                                     'methods': [('default_path', [], ''),
                                                 ('modules_dict', [], ''),
                                                 ('get_hooks', [], ''),
                                                 ('set_hooks', ['hooks'], ''),
                                                 ('find_builtin_module', ['name'], ''),
                                                 ('find_module_in_dir',
                                                  ['name', 'dir', 'allow_packages=1'],
                                                  ''),
                                                 ('load_module', ['name', 'stuff'], '')],
                                     'properties': ['hooks']},
             'ihooks._Verbose': {'bases': [],
                                 'constructor': ['verbose=VERBOSE'],
                                 'docstring': '',
                                 'methods': [('get_verbose', [], ''),
                                             ('set_verbose', ['verbose'], ''),
                                             ('note', ['*args'], ''),
                                             ('message', ['format', '*args'], '')],
                                 'properties': ['verbose']},
             'imaplib.IMAP4': {'bases': [],
                               'constructor': ["host=''", 'port=IMAP4_PORT'],
                               'docstring': 'IMAP4 client class.\n\n    Instantiate with: IMAP4([host[, port]])\n\n            host - host\'s name (default: localhost);\n            port - port number (default: standard IMAP4 port).\n\n    All IMAP4rev1 commands are supported by methods of the same\n    name (in lower-case).\n\n    All arguments to commands are converted to strings, except for\n    AUTHENTICATE, and the last argument to APPEND which is passed as\n    an IMAP4 literal.  If necessary (the string contains any\n    non-printing characters or white-space and isn\'t enclosed with\n    either parentheses or double quotes) each string is quoted.\n    However, the \'password\' argument to the LOGIN command is always\n    quoted.  If you want to avoid having an argument string quoted\n    (eg: the \'flags\' argument to STORE) then enclose the string in\n    parentheses (eg: "(\\Deleted)").\n\n    Each command returns a tuple: (type, [data, ...]) where \'type\'\n    is usually \'OK\' or \'NO\', and \'data\' is either the text from the\n    tagged response, or untagged results from command. Each \'data\'\n    is either a string, or a tuple. If a tuple, then the first part\n    is the header of the response, and the second part contains\n    the data (ie: \'literal\' value).\n\n    Errors raise the exception class <instance>.error("<reason>").\n    IMAP4 server errors raise <instance>.abort("<reason>"),\n    which is a sub-class of \'error\'. Mailbox status changes\n    from READ-WRITE to READ-ONLY raise the exception class\n    <instance>.readonly("<reason>"), which is a sub-class of \'abort\'.\n\n    "error" exceptions imply a program error.\n    "abort" exceptions imply the connection should be reset, and\n            the command re-tried.\n    "readonly" exceptions imply the command should be re-tried.\n\n    Note: to use this module, you must read the RFCs pertaining to the\n    IMAP4 protocol, as the semantics of the arguments to each IMAP4\n    command are left to the invoker, not to mention the results. Also,\n    most IMAP servers implement a sub-set of the commands available here.\n    ',
                               'methods': [('__getattr__', ['attr'], ''),
                                           ('open',
                                            ["host=''", 'port=IMAP4_PORT'],
                                            'Setup connection to remote server on "host:port"\n            (default: localhost:standard IMAP4 port).\n        This connection will be used by the routines:\n            read, readline, send, shutdown.\n        '),
                                           ('read', ['size'], "Read 'size' bytes from remote."),
                                           ('readline', [], 'Read line from remote.'),
                                           ('send', ['data'], 'Send data to remote.'),
                                           ('shutdown', [], 'Close I/O established in "open".'),
                                           ('socket',
                                            [],
                                            'Return socket instance used to connect to IMAP4 server.\n\n        socket = <instance>.socket()\n        '),
                                           ('recent',
                                            [],
                                            "Return most recent 'RECENT' responses if any exist,\n        else prompt server for an update using the 'NOOP' command.\n\n        (typ, [data]) = <instance>.recent()\n\n        'data' is None if no new messages,\n        else list of RECENT responses, most recent last.\n        "),
                                           ('response',
                                            ['code'],
                                            "Return data for response 'code' if received, or None.\n\n        Old value for response 'code' is cleared.\n\n        (code, [data]) = <instance>.response(code)\n        "),
                                           ('append',
                                            ['mailbox', 'flags', 'date_time', 'message'],
                                            "Append message to named mailbox.\n\n        (typ, [data]) = <instance>.append(mailbox, flags, date_time, message)\n\n                All args except `message' can be None.\n        "),
                                           ('authenticate',
                                            ['mechanism', 'authobject'],
                                            "Authenticate command - requires response processing.\n\n        'mechanism' specifies which authentication mechanism is to\n        be used - it must appear in <instance>.capabilities in the\n        form AUTH=<mechanism>.\n\n        'authobject' must be a callable object:\n\n                data = authobject(response)\n\n        It will be called to process server continuation responses.\n        It should return data that will be encoded and sent to server.\n        It should return None if the client abort response '*' should\n        be sent instead.\n        "),
                                           ('capability',
                                            [],
                                            '(typ, [data]) = <instance>.capability()\n        Fetch capabilities list from server.'),
                                           ('check',
                                            [],
                                            'Checkpoint mailbox on server.\n\n        (typ, [data]) = <instance>.check()\n        '),
                                           ('close',
                                            [],
                                            "Close currently selected mailbox.\n\n        Deleted messages are removed from writable mailbox.\n        This is the recommended command before 'LOGOUT'.\n\n        (typ, [data]) = <instance>.close()\n        "),
                                           ('copy',
                                            ['message_set', 'new_mailbox'],
                                            "Copy 'message_set' messages onto end of 'new_mailbox'.\n\n        (typ, [data]) = <instance>.copy(message_set, new_mailbox)\n        "),
                                           ('create',
                                            ['mailbox'],
                                            'Create new mailbox.\n\n        (typ, [data]) = <instance>.create(mailbox)\n        '),
                                           ('delete',
                                            ['mailbox'],
                                            'Delete old mailbox.\n\n        (typ, [data]) = <instance>.delete(mailbox)\n        '),
                                           ('deleteacl',
                                            ['mailbox', 'who'],
                                            'Delete the ACLs (remove any rights) set for who on mailbox.\n\n        (typ, [data]) = <instance>.deleteacl(mailbox, who)\n        '),
                                           ('expunge',
                                            [],
                                            "Permanently remove deleted items from selected mailbox.\n\n        Generates 'EXPUNGE' response for each deleted message.\n\n        (typ, [data]) = <instance>.expunge()\n\n        'data' is list of 'EXPUNGE'd message numbers in order received.\n        "),
                                           ('fetch',
                                            ['message_set', 'message_parts'],
                                            'Fetch (parts of) messages.\n\n        (typ, [data, ...]) = <instance>.fetch(message_set, message_parts)\n\n        \'message_parts\' should be a string of selected parts\n        enclosed in parentheses, eg: "(UID BODY[TEXT])".\n\n        \'data\' are tuples of message part envelope and data.\n        '),
                                           ('getacl',
                                            ['mailbox'],
                                            'Get the ACLs for a mailbox.\n\n        (typ, [data]) = <instance>.getacl(mailbox)\n        '),
                                           ('getannotation',
                                            ['mailbox', 'entry', 'attribute'],
                                            '(typ, [data]) = <instance>.getannotation(mailbox, entry, attribute)\n        Retrieve ANNOTATIONs.'),
                                           ('getquota',
                                            ['root'],
                                            "Get the quota root's resource usage and limits.\n\n        Part of the IMAP4 QUOTA extension defined in rfc2087.\n\n        (typ, [data]) = <instance>.getquota(root)\n        "),
                                           ('getquotaroot',
                                            ['mailbox'],
                                            'Get the list of quota roots for the named mailbox.\n\n        (typ, [[QUOTAROOT responses...], [QUOTA responses]]) = <instance>.getquotaroot(mailbox)\n        '),
                                           ('list',
                                            ['directory=\'""\'', "pattern='*'"],
                                            'List mailbox names in directory matching pattern.\n\n        (typ, [data]) = <instance>.list(directory=\'""\', pattern=\'*\')\n\n        \'data\' is list of LIST responses.\n        '),
                                           ('login',
                                            ['user', 'password'],
                                            "Identify client using plaintext password.\n\n        (typ, [data]) = <instance>.login(user, password)\n\n        NB: 'password' will be quoted.\n        "),
                                           ('login_cram_md5',
                                            ['user', 'password'],
                                            ' Force use of CRAM-MD5 authentication.\n\n        (typ, [data]) = <instance>.login_cram_md5(user, password)\n        '),
                                           ('_CRAM_MD5_AUTH',
                                            ['challenge'],
                                            ' Authobject to use with CRAM-MD5 authentication. '),
                                           ('logout',
                                            [],
                                            "Shutdown connection to server.\n\n        (typ, [data]) = <instance>.logout()\n\n        Returns server 'BYE' response.\n        "),
                                           ('lsub',
                                            ['directory=\'""\'', "pattern='*'"],
                                            'List \'subscribed\' mailbox names in directory matching pattern.\n\n        (typ, [data, ...]) = <instance>.lsub(directory=\'""\', pattern=\'*\')\n\n        \'data\' are tuples of message part envelope and data.\n        '),
                                           ('myrights',
                                            ['mailbox'],
                                            'Show my ACLs for a mailbox (i.e. the rights that I have on mailbox).\n\n        (typ, [data]) = <instance>.myrights(mailbox)\n        '),
                                           ('namespace',
                                            [],
                                            ' Returns IMAP namespaces ala rfc2342\n\n        (typ, [data, ...]) = <instance>.namespace()\n        '),
                                           ('noop',
                                            [],
                                            'Send NOOP command.\n\n        (typ, [data]) = <instance>.noop()\n        '),
                                           ('partial',
                                            ['message_num', 'message_part', 'start', 'length'],
                                            "Fetch truncated part of a message.\n\n        (typ, [data, ...]) = <instance>.partial(message_num, message_part, start, length)\n\n        'data' is tuple of message part envelope and data.\n        "),
                                           ('proxyauth',
                                            ['user'],
                                            'Assume authentication as "user".\n\n        Allows an authorised administrator to proxy into any user\'s\n        mailbox.\n\n        (typ, [data]) = <instance>.proxyauth(user)\n        '),
                                           ('rename',
                                            ['oldmailbox', 'newmailbox'],
                                            'Rename old mailbox name to new.\n\n        (typ, [data]) = <instance>.rename(oldmailbox, newmailbox)\n        '),
                                           ('search',
                                            ['charset', '*criteria'],
                                            "Search mailbox for matching messages.\n\n        (typ, [data]) = <instance>.search(charset, criterion, ...)\n\n        'data' is space separated list of matching message numbers.\n        "),
                                           ('select',
                                            ["mailbox='INBOX'", 'readonly=False'],
                                            "Select a mailbox.\n\n        Flush all untagged responses.\n\n        (typ, [data]) = <instance>.select(mailbox='INBOX', readonly=False)\n\n        'data' is count of messages in mailbox ('EXISTS' response).\n\n        Mandated responses are ('FLAGS', 'EXISTS', 'RECENT', 'UIDVALIDITY'), so\n        other responses should be obtained via <instance>.response('FLAGS') etc.\n        "),
                                           ('setacl',
                                            ['mailbox', 'who', 'what'],
                                            'Set a mailbox acl.\n\n        (typ, [data]) = <instance>.setacl(mailbox, who, what)\n        '),
                                           ('setannotation',
                                            ['*args'],
                                            '(typ, [data]) = <instance>.setannotation(mailbox[, entry, attribute]+)\n        Set ANNOTATIONs.'),
                                           ('setquota',
                                            ['root', 'limits'],
                                            "Set the quota root's resource limits.\n\n        (typ, [data]) = <instance>.setquota(root, limits)\n        "),
                                           ('sort',
                                            ['sort_criteria', 'charset', '*search_criteria'],
                                            'IMAP4rev1 extension SORT command.\n\n        (typ, [data]) = <instance>.sort(sort_criteria, charset, search_criteria, ...)\n        '),
                                           ('status',
                                            ['mailbox', 'names'],
                                            'Request named status conditions for mailbox.\n\n        (typ, [data]) = <instance>.status(mailbox, names)\n        '),
                                           ('store',
                                            ['message_set', 'command', 'flags'],
                                            'Alters flag dispositions for messages in mailbox.\n\n        (typ, [data]) = <instance>.store(message_set, command, flags)\n        '),
                                           ('subscribe',
                                            ['mailbox'],
                                            'Subscribe to new mailbox.\n\n        (typ, [data]) = <instance>.subscribe(mailbox)\n        '),
                                           ('thread',
                                            ['threading_algorithm',
                                             'charset',
                                             '*search_criteria'],
                                            'IMAPrev1 extension THREAD command.\n\n        (type, [data]) = <instance>.thread(threading_algorithm, charset, search_criteria, ...)\n        '),
                                           ('uid',
                                            ['command', '*args'],
                                            'Execute "command arg ..." with messages identified by UID,\n                rather than message number.\n\n        (typ, [data]) = <instance>.uid(command, arg1, arg2, ...)\n\n        Returns response appropriate to \'command\'.\n        '),
                                           ('unsubscribe',
                                            ['mailbox'],
                                            'Unsubscribe from old mailbox.\n\n        (typ, [data]) = <instance>.unsubscribe(mailbox)\n        '),
                                           ('xatom',
                                            ['name', '*args'],
                                            "Allow simple extension commands\n                notified by server in CAPABILITY response.\n\n        Assumes command is legal in current state.\n\n        (typ, [data]) = <instance>.xatom(name, arg, ...)\n\n        Returns response appropriate to extension command `name'.\n        "),
                                           ('_append_untagged', ['typ', 'dat'], ''),
                                           ('_check_bye', [], ''),
                                           ('_command', ['name', '*args'], ''),
                                           ('_command_complete', ['name', 'tag'], ''),
                                           ('_get_response', [], ''),
                                           ('_get_tagged_response', ['tag'], ''),
                                           ('_get_line', [], ''),
                                           ('_match', ['cre', 's'], ''),
                                           ('_new_tag', [], ''),
                                           ('_checkquote', ['arg'], ''),
                                           ('_quote', ['arg'], ''),
                                           ('_simple_command', ['name', '*args'], ''),
                                           ('_untagged_response', ['typ', 'dat', 'name'], ''),
                                           ('_mesg', ['s', 'secs=None'], ''),
                                           ('_dump_ur', ['dict'], ''),
                                           ('_log', ['line'], ''),
                                           ('print_log', [], '')],
                               'properties': ['mustquote',
                                              'debug',
                                              'state',
                                              'literal',
                                              'tagged_commands',
                                              'untagged_responses',
                                              'continuation_response',
                                              'is_readonly',
                                              'tagnum',
                                              'tagpre',
                                              'tagre',
                                              '_cmd_log_len',
                                              '_cmd_log_idx',
                                              '_cmd_log',
                                              'welcome',
                                              'capabilities',
                                              'PROTOCOL_VERSION',
                                              'host',
                                              'port',
                                              'sock',
                                              'file',
                                              'user',
                                              'password',
                                              'mo']},
             'imaplib.IMAP4_SSL': {'bases': ['imaplib.IMAP4'],
                                   'constructor': ["host=''",
                                                   'port=IMAP4_SSL_PORT',
                                                   'keyfile=None',
                                                   'certfile=None'],
                                   'docstring': "IMAP4 client class over SSL connection\n\n        Instantiate with: IMAP4_SSL([host[, port[, keyfile[, certfile]]]])\n\n                host - host's name (default: localhost);\n                port - port number (default: standard IMAP4 SSL port).\n                keyfile - PEM formatted file that contains your private key (default: None);\n                certfile - PEM formatted certificate chain file (default: None);\n\n        for more documentation see the docstring of the parent class IMAP4.\n        ",
                                   'methods': [('open',
                                                ["host=''", 'port=IMAP4_SSL_PORT'],
                                                'Setup connection to remote server on "host:port".\n                (default: localhost:standard IMAP4 SSL port).\n            This connection will be used by the routines:\n                read, readline, send, shutdown.\n            '),
                                               ('read',
                                                ['size'],
                                                "Read 'size' bytes from remote."),
                                               ('readline', [], 'Read line from remote.'),
                                               ('send', ['data'], 'Send data to remote.'),
                                               ('shutdown',
                                                [],
                                                'Close I/O established in "open".'),
                                               ('socket',
                                                [],
                                                'Return socket instance used to connect to IMAP4 server.\n\n            socket = <instance>.socket()\n            '),
                                               ('ssl',
                                                [],
                                                'Return SSLObject instance used to communicate with the IMAP4 server.\n\n            ssl = ssl.wrap_socket(<instance>.socket)\n            ')],
                                   'properties': ['keyfile',
                                                  'certfile',
                                                  'host',
                                                  'port',
                                                  'sock',
                                                  'sslobj']},
             'imaplib.IMAP4_stream': {'bases': ['imaplib.IMAP4'],
                                      'constructor': ['command'],
                                      'docstring': 'IMAP4 client class over a stream\n\n    Instantiate with: IMAP4_stream(command)\n\n            where "command" is a string that can be passed to subprocess.Popen()\n\n    for more documentation see the docstring of the parent class IMAP4.\n    ',
                                      'methods': [('open',
                                                   ['host=None', 'port=None'],
                                                   'Setup a stream connection.\n        This connection will be used by the routines:\n            read, readline, send, shutdown.\n        '),
                                                  ('read',
                                                   ['size'],
                                                   "Read 'size' bytes from remote."),
                                                  ('readline', [], 'Read line from remote.'),
                                                  ('send', ['data'], 'Send data to remote.'),
                                                  ('shutdown',
                                                   [],
                                                   'Close I/O established in "open".')],
                                      'properties': ['command',
                                                     'host',
                                                     'port',
                                                     'sock',
                                                     'file',
                                                     'process',
                                                     'writefile',
                                                     'readfile']},
             'imaplib._Authenticator': {'bases': [],
                                        'constructor': ['mechinst'],
                                        'docstring': 'Private class to provide en/decoding\n            for base64-based authentication conversation.\n    ',
                                        'methods': [('process', ['data'], ''),
                                                    ('encode', ['inp'], ''),
                                                    ('decode', ['inp'], '')],
                                        'properties': ['mech']},
             'imputil.BuiltinImporter': {'bases': ['imputil.Importer'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('get_code',
                                                      ['parent', 'modname', 'fqname'],
                                                      '')],
                                         'properties': []},
             'imputil.DynLoadSuffixImporter': {'bases': [],
                                               'constructor': ['desc'],
                                               'docstring': '',
                                               'methods': [('import_file',
                                                            ['filename', 'finfo', 'fqname'],
                                                            '')],
                                               'properties': ['desc']},
             'imputil.ImportManager': {'bases': [],
                                       'constructor': ['fs_imp=None'],
                                       'docstring': 'Manage the import process.',
                                       'methods': [('install',
                                                    ['namespace=vars(__builtin__)'],
                                                    'Install this ImportManager into the specified namespace.'),
                                                   ('uninstall',
                                                    [],
                                                    'Restore the previous import mechanism.'),
                                                   ('add_suffix', ['suffix', 'importFunc'], ''),
                                                   ('_import_hook',
                                                    ['fqname',
                                                     'globals=None',
                                                     'locals=None',
                                                     'fromlist=None'],
                                                    'Python calls this hook to locate and import a module.'),
                                                   ('_determine_import_context',
                                                    ['globals'],
                                                    'Returns the context in which a module should be imported.\n\n        The context could be a loaded (package) module and the imported module\n        will be looked for within that package. The context could also be None,\n        meaning there is no context -- the module should be looked for as a\n        "top-level" module.\n        '),
                                                   ('_import_top_module', ['name'], ''),
                                                   ('_reload_hook',
                                                    ['module'],
                                                    'Python calls this hook to reload a module.')],
                                       'properties': ['previous_importer',
                                                      'namespace',
                                                      'clsFilesystemImporter',
                                                      'fs_imp']},
             'imputil.Importer': {'bases': [],
                                  'constructor': [],
                                  'docstring': 'Base class for replacing standard import functions.',
                                  'methods': [('import_top',
                                               ['name'],
                                               'Import a top-level module.'),
                                              ('_finish_import',
                                               ['top', 'parts', 'fromlist'],
                                               ''),
                                              ('_import_one',
                                               ['parent', 'modname', 'fqname'],
                                               'Import a single module.'),
                                              ('_process_result', ['result', 'fqname'], ''),
                                              ('_load_tail',
                                               ['m', 'parts'],
                                               'Import the rest of the modules, down from the top-level module.\n\n        Returns the last module in the dotted list of modules.\n        '),
                                              ('_import_fromlist',
                                               ['package', 'fromlist'],
                                               'Import any sub-modules in the "from" list.'),
                                              ('_do_import',
                                               ['parent', 'parts', 'fromlist'],
                                               'Attempt to import the module relative to parent.\n\n        This method is used when the import context specifies that <self>\n        imported the parent module.\n        '),
                                              ('get_code',
                                               ['parent', 'modname', 'fqname'],
                                               'Find and retrieve the code for the given module.\n\n        parent specifies a parent module to define a context for importing. It\n        may be None, indicating no particular context for the search.\n\n        modname specifies a single module (not dotted) within the parent.\n\n        fqname specifies the fully-qualified module name. This is a\n        (potentially) dotted name from the "root" of the module namespace\n        down to the modname.\n        If there is no parent, then modname==fqname.\n\n        This method should return None, or a 3-tuple.\n\n        * If the module was not found, then None should be returned.\n\n        * The first item of the 2- or 3-tuple should be the integer 0 or 1,\n            specifying whether the module that was found is a package or not.\n\n        * The second item is the code object for the module (it will be\n            executed within the new module\'s namespace). This item can also\n            be a fully-loaded module object (e.g. loaded from a shared lib).\n\n        * The third item is a dictionary of name/value pairs that will be\n            inserted into new module before the code object is executed. This\n            is provided in case the module\'s code expects certain values (such\n            as where the module was found). When the second item is a module\n            object, then these names/values will be inserted *after* the module\n            has been loaded/initialized.\n        ')],
                                  'properties': []},
             'imputil._FilesystemImporter': {'bases': ['imputil.Importer'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('add_suffix',
                                                          ['suffix', 'importFunc'],
                                                          ''),
                                                         ('import_from_dir',
                                                          ['dir', 'fqname'],
                                                          ''),
                                                         ('get_code',
                                                          ['parent', 'modname', 'fqname'],
                                                          ''),
                                                         ('_import_pathname',
                                                          ['pathname', 'fqname'],
                                                          '')],
                                             'properties': ['suffixes']},
             'inspect.BlockFinder': {'bases': [],
                                     'constructor': [],
                                     'docstring': 'Provide a tokeneater() method to detect the end of a code block.',
                                     'methods': [('tokeneater',
                                                  ['type',
                                                   'token',
                                                   'srow_scol',
                                                   'erow_ecol',
                                                   'line'],
                                                  '')],
                                     'properties': ['indent',
                                                    'islambda',
                                                    'started',
                                                    'passline',
                                                    'last']},
             'inspect.EndOfBlock': {'bases': ['Exception'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'io.BufferedIOBase': {'bases': ['_io._BufferedIOBase', 'io.IOBase'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [],
                                   'properties': []},
             'io.IOBase': {'bases': ['_io._IOBase'],
                           'constructor': [],
                           'docstring': '',
                           'methods': [],
                           'properties': ['__metaclass__']},
             'io.RawIOBase': {'bases': ['_io._RawIOBase', 'io.IOBase'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': []},
             'io.TextIOBase': {'bases': ['_io._TextIOBase', 'io.IOBase'],
                               'constructor': [],
                               'docstring': '',
                               'methods': [],
                               'properties': []},
             'macpath.norm_error': {'bases': ['Exception'],
                                    'constructor': [],
                                    'docstring': 'Path cannot be normalized',
                                    'methods': [],
                                    'properties': []},
             'mailbox.Babyl': {'bases': ['mailbox._singlefileMailbox'],
                               'constructor': ['path', 'factory=None', 'create=True'],
                               'docstring': 'An Rmail-style Babyl mailbox.',
                               'methods': [('add',
                                            ['message'],
                                            'Add message and return assigned key.'),
                                           ('remove',
                                            ['key'],
                                            "Remove the keyed message; raise KeyError if it doesn't exist."),
                                           ('__setitem__',
                                            ['key', 'message'],
                                            "Replace the keyed message; raise KeyError if it doesn't exist."),
                                           ('get_message',
                                            ['key'],
                                            'Return a Message representation or raise a KeyError.'),
                                           ('get_string',
                                            ['key'],
                                            'Return a string representation or raise a KeyError.'),
                                           ('get_file',
                                            ['key'],
                                            'Return a file-like representation or raise a KeyError.'),
                                           ('get_labels',
                                            [],
                                            'Return a list of user-defined labels in the mailbox.'),
                                           ('_generate_toc',
                                            [],
                                            'Generate key-to-(start, stop) table of contents.'),
                                           ('_pre_mailbox_hook',
                                            ['f'],
                                            'Called before writing the mailbox to file f.'),
                                           ('_pre_message_hook',
                                            ['f'],
                                            'Called before writing each message to file f.'),
                                           ('_post_message_hook',
                                            ['f'],
                                            'Called after writing each message to file f.'),
                                           ('_install_message',
                                            ['message'],
                                            'Write message contents and return (start, stop).')],
                               'properties': ['_special_labels',
                                              '_labels',
                                              '_toc',
                                              '_next_key',
                                              '_file_length']},
             'mailbox.BabylMailbox': {'bases': ['mailbox._Mailbox'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('_search_start', [], ''),
                                                  ('_search_end', [], '')],
                                      'properties': []},
             'mailbox.BabylMessage': {'bases': ['mailbox.Message'],
                                      'constructor': ['message=None'],
                                      'docstring': 'Message with Babyl-specific properties.',
                                      'methods': [('get_labels',
                                                   [],
                                                   'Return a list of labels on the message.'),
                                                  ('set_labels',
                                                   ['labels'],
                                                   'Set the list of labels on the message.'),
                                                  ('add_label',
                                                   ['label'],
                                                   'Add label to list of labels on the message.'),
                                                  ('remove_label',
                                                   ['label'],
                                                   'Remove label from the list of labels on the message.'),
                                                  ('get_visible',
                                                   [],
                                                   'Return a Message representation of visible headers.'),
                                                  ('set_visible',
                                                   ['visible'],
                                                   'Set the Message representation of visible headers.'),
                                                  ('update_visible',
                                                   [],
                                                   'Update and/or sensibly generate a set of visible headers.'),
                                                  ('_explain_to',
                                                   ['message'],
                                                   'Copy Babyl-specific state to message insofar as possible.')],
                                      'properties': ['_labels', '_visible']},
             'mailbox.Error': {'bases': ['Exception'],
                               'constructor': [],
                               'docstring': 'Raised for module-specific errors.',
                               'methods': [],
                               'properties': []},
             'mailbox.ExternalClashError': {'bases': ['mailbox.Error'],
                                            'constructor': [],
                                            'docstring': 'Another process caused an action to fail.',
                                            'methods': [],
                                            'properties': []},
             'mailbox.FormatError': {'bases': ['mailbox.Error'],
                                     'constructor': [],
                                     'docstring': 'A file appears to have an invalid format.',
                                     'methods': [],
                                     'properties': []},
             'mailbox.MH': {'bases': ['mailbox.Mailbox'],
                            'constructor': ['path', 'factory=None', 'create=True'],
                            'docstring': 'An MH mailbox.',
                            'methods': [('add',
                                         ['message'],
                                         'Add message and return assigned key.'),
                                        ('remove',
                                         ['key'],
                                         "Remove the keyed message; raise KeyError if it doesn't exist."),
                                        ('__setitem__',
                                         ['key', 'message'],
                                         "Replace the keyed message; raise KeyError if it doesn't exist."),
                                        ('get_message',
                                         ['key'],
                                         'Return a Message representation or raise a KeyError.'),
                                        ('get_string',
                                         ['key'],
                                         'Return a string representation or raise a KeyError.'),
                                        ('get_file',
                                         ['key'],
                                         'Return a file-like representation or raise a KeyError.'),
                                        ('iterkeys', [], 'Return an iterator over keys.'),
                                        ('has_key',
                                         ['key'],
                                         'Return True if the keyed message exists, False otherwise.'),
                                        ('__len__',
                                         [],
                                         'Return a count of messages in the mailbox.'),
                                        ('lock', [], 'Lock the mailbox.'),
                                        ('unlock', [], 'Unlock the mailbox if it is locked.'),
                                        ('flush', [], 'Write any pending changes to the disk.'),
                                        ('close', [], 'Flush and close the mailbox.'),
                                        ('list_folders', [], 'Return a list of folder names.'),
                                        ('get_folder',
                                         ['folder'],
                                         'Return an MH instance for the named folder.'),
                                        ('add_folder',
                                         ['folder'],
                                         'Create a folder and return an MH instance representing it.'),
                                        ('remove_folder',
                                         ['folder'],
                                         'Delete the named folder, which must be empty.'),
                                        ('get_sequences',
                                         [],
                                         'Return a name-to-key-list dictionary to define each sequence.'),
                                        ('set_sequences',
                                         ['sequences'],
                                         'Set sequences using the given name-to-key-list dictionary.'),
                                        ('pack',
                                         [],
                                         'Re-name messages to eliminate numbering gaps. Invalidates keys.'),
                                        ('_dump_sequences',
                                         ['message', 'key'],
                                         'Inspect a new MHMessage and update sequences appropriately.')],
                            'properties': ['_locked', '_file', '_next_key']},
             'mailbox.MHMailbox': {'bases': [],
                                   'constructor': ['dirname', 'factory=rfc822.Message'],
                                   'docstring': '',
                                   'methods': [('__iter__', [], ''), ('next', [], '')],
                                   'properties': ['dirname', 'boxes', 'factory']},
             'mailbox.MHMessage': {'bases': ['mailbox.Message'],
                                   'constructor': ['message=None'],
                                   'docstring': 'Message with MH-specific properties.',
                                   'methods': [('get_sequences',
                                                [],
                                                'Return a list of sequences that include the message.'),
                                               ('set_sequences',
                                                ['sequences'],
                                                'Set the list of sequences that include the message.'),
                                               ('add_sequence',
                                                ['sequence'],
                                                'Add sequence to list of sequences including the message.'),
                                               ('remove_sequence',
                                                ['sequence'],
                                                'Remove sequence from the list of sequences including the message.'),
                                               ('_explain_to',
                                                ['message'],
                                                'Copy MH-specific state to message insofar as possible.')],
                                   'properties': ['_sequences']},
             'mailbox.MMDF': {'bases': ['mailbox._mboxMMDF'],
                              'constructor': ['path', 'factory=None', 'create=True'],
                              'docstring': 'An MMDF mailbox.',
                              'methods': [('_pre_message_hook',
                                           ['f'],
                                           'Called before writing each message to file f.'),
                                          ('_post_message_hook',
                                           ['f'],
                                           'Called after writing each message to file f.'),
                                          ('_generate_toc',
                                           [],
                                           'Generate key-to-(start, stop) table of contents.')],
                              'properties': ['_message_factory',
                                             '_toc',
                                             '_next_key',
                                             '_file_length']},
             'mailbox.MMDFMessage': {'bases': ['mailbox._mboxMMDFMessage'],
                                     'constructor': [],
                                     'docstring': 'Message with MMDF-specific properties.',
                                     'methods': [],
                                     'properties': []},
             'mailbox.Mailbox': {'bases': [],
                                 'constructor': ['path', 'factory=None', 'create=True'],
                                 'docstring': 'A group of messages in a particular place.',
                                 'methods': [('add',
                                              ['message'],
                                              'Add message and return assigned key.'),
                                             ('remove',
                                              ['key'],
                                              "Remove the keyed message; raise KeyError if it doesn't exist."),
                                             ('__delitem__', ['key'], ''),
                                             ('discard',
                                              ['key'],
                                              'If the keyed message exists, remove it.'),
                                             ('__setitem__',
                                              ['key', 'message'],
                                              "Replace the keyed message; raise KeyError if it doesn't exist."),
                                             ('get',
                                              ['key', 'default=None'],
                                              "Return the keyed message, or default if it doesn't exist."),
                                             ('__getitem__',
                                              ['key'],
                                              "Return the keyed message; raise KeyError if it doesn't exist."),
                                             ('get_message',
                                              ['key'],
                                              'Return a Message representation or raise a KeyError.'),
                                             ('get_string',
                                              ['key'],
                                              'Return a string representation or raise a KeyError.'),
                                             ('get_file',
                                              ['key'],
                                              'Return a file-like representation or raise a KeyError.'),
                                             ('iterkeys', [], 'Return an iterator over keys.'),
                                             ('keys', [], 'Return a list of keys.'),
                                             ('itervalues',
                                              [],
                                              'Return an iterator over all messages.'),
                                             ('__iter__', [], ''),
                                             ('values',
                                              [],
                                              'Return a list of messages. Memory intensive.'),
                                             ('iteritems',
                                              [],
                                              'Return an iterator over (key, message) tuples.'),
                                             ('items',
                                              [],
                                              'Return a list of (key, message) tuples. Memory intensive.'),
                                             ('has_key',
                                              ['key'],
                                              'Return True if the keyed message exists, False otherwise.'),
                                             ('__contains__', ['key'], ''),
                                             ('__len__',
                                              [],
                                              'Return a count of messages in the mailbox.'),
                                             ('clear', [], 'Delete all messages.'),
                                             ('pop',
                                              ['key', 'default=None'],
                                              'Delete the keyed message and return it, or default.'),
                                             ('popitem',
                                              [],
                                              'Delete an arbitrary (key, message) pair and return it.'),
                                             ('update',
                                              ['arg=None'],
                                              'Change the messages that correspond to certain keys.'),
                                             ('flush',
                                              [],
                                              'Write any pending changes to the disk.'),
                                             ('lock', [], 'Lock the mailbox.'),
                                             ('unlock',
                                              [],
                                              'Unlock the mailbox if it is locked.'),
                                             ('close', [], 'Flush and close the mailbox.'),
                                             ('_dump_message',
                                              ['message', 'target', 'mangle_from_=False'],
                                              'Dump message contents to target file.')],
                                 'properties': ['_path', '_factory']},
             'mailbox.Maildir': {'bases': ['mailbox.Mailbox'],
                                 'constructor': ['dirname',
                                                 'factory=rfc822.Message',
                                                 'create=True'],
                                 'docstring': 'A qmail-style Maildir mailbox.',
                                 'methods': [('add',
                                              ['message'],
                                              'Add message and return assigned key.'),
                                             ('remove',
                                              ['key'],
                                              "Remove the keyed message; raise KeyError if it doesn't exist."),
                                             ('discard',
                                              ['key'],
                                              'If the keyed message exists, remove it.'),
                                             ('__setitem__',
                                              ['key', 'message'],
                                              "Replace the keyed message; raise KeyError if it doesn't exist."),
                                             ('get_message',
                                              ['key'],
                                              'Return a Message representation or raise a KeyError.'),
                                             ('get_string',
                                              ['key'],
                                              'Return a string representation or raise a KeyError.'),
                                             ('get_file',
                                              ['key'],
                                              'Return a file-like representation or raise a KeyError.'),
                                             ('iterkeys', [], 'Return an iterator over keys.'),
                                             ('has_key',
                                              ['key'],
                                              'Return True if the keyed message exists, False otherwise.'),
                                             ('__len__',
                                              [],
                                              'Return a count of messages in the mailbox.'),
                                             ('flush',
                                              [],
                                              'Write any pending changes to disk.'),
                                             ('lock', [], 'Lock the mailbox.'),
                                             ('unlock',
                                              [],
                                              'Unlock the mailbox if it is locked.'),
                                             ('close', [], 'Flush and close the mailbox.'),
                                             ('list_folders',
                                              [],
                                              'Return a list of folder names.'),
                                             ('get_folder',
                                              ['folder'],
                                              'Return a Maildir instance for the named folder.'),
                                             ('add_folder',
                                              ['folder'],
                                              'Create a folder and return a Maildir instance representing it.'),
                                             ('remove_folder',
                                              ['folder'],
                                              'Delete the named folder, which must be empty.'),
                                             ('clean', [], 'Delete old files in "tmp".'),
                                             ('_create_tmp',
                                              [],
                                              'Create a file in the tmp subdirectory and open and return it.'),
                                             ('_refresh',
                                              [],
                                              'Update table of contents mapping.'),
                                             ('_lookup',
                                              ['key'],
                                              'Use TOC to return subpath for given key, or raise a KeyError.'),
                                             ('next',
                                              [],
                                              'Return the next message in a one-time iteration.')],
                                 'properties': ['colon',
                                                '_toc',
                                                '_last_read',
                                                '_count',
                                                '_onetime_keys']},
             'mailbox.MaildirMessage': {'bases': ['mailbox.Message'],
                                        'constructor': ['message=None'],
                                        'docstring': 'Message with Maildir-specific properties.',
                                        'methods': [('get_subdir',
                                                     [],
                                                     "Return 'new' or 'cur'."),
                                                    ('set_subdir',
                                                     ['subdir'],
                                                     "Set subdir to 'new' or 'cur'."),
                                                    ('get_flags',
                                                     [],
                                                     'Return as a string the flags that are set.'),
                                                    ('set_flags',
                                                     ['flags'],
                                                     'Set the given flags and unset all others.'),
                                                    ('add_flag',
                                                     ['flag'],
                                                     'Set the given flag(s) without changing others.'),
                                                    ('remove_flag',
                                                     ['flag'],
                                                     'Unset the given string flag(s) without changing others.'),
                                                    ('get_date',
                                                     [],
                                                     'Return delivery date of message, in seconds since the epoch.'),
                                                    ('set_date',
                                                     ['date'],
                                                     'Set delivery date of message, in seconds since the epoch.'),
                                                    ('get_info',
                                                     [],
                                                     'Get the message\'s "info" as a string.'),
                                                    ('set_info',
                                                     ['info'],
                                                     'Set the message\'s "info" string.'),
                                                    ('_explain_to',
                                                     ['message'],
                                                     'Copy Maildir-specific state to message insofar as possible.')],
                                        'properties': ['_subdir', '_info', '_date']},
             'mailbox.Message': {'bases': ['email.message.Message'],
                                 'constructor': ['message=None'],
                                 'docstring': 'Message with mailbox-format-specific properties.',
                                 'methods': [('_become_message',
                                              ['message'],
                                              'Assume the non-format-specific state of message.'),
                                             ('_explain_to',
                                              ['message'],
                                              'Copy format-specific state to message insofar as possible.')],
                                 'properties': []},
             'mailbox.MmdfMailbox': {'bases': ['mailbox._Mailbox'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('_search_start', [], ''),
                                                 ('_search_end', [], '')],
                                     'properties': []},
             'mailbox.NoSuchMailboxError': {'bases': ['mailbox.Error'],
                                            'constructor': [],
                                            'docstring': "The specified mailbox does not exist and won't be created.",
                                            'methods': [],
                                            'properties': []},
             'mailbox.NotEmptyError': {'bases': ['mailbox.Error'],
                                       'constructor': [],
                                       'docstring': 'The specified mailbox is not empty and deletion was requested.',
                                       'methods': [],
                                       'properties': []},
             'mailbox.PortableUnixMailbox': {'bases': ['mailbox.UnixMailbox'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['_isrealfromline']},
             'mailbox.UnixMailbox': {'bases': ['mailbox._Mailbox'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('_search_start', [], ''),
                                                 ('_search_end', [], ''),
                                                 ('_strict_isrealfromline', ['line'], ''),
                                                 ('_portable_isrealfromline', ['line'], '')],
                                     'properties': ['_fromlinepattern',
                                                    '_regexp',
                                                    '_isrealfromline']},
             'mailbox._Mailbox': {'bases': [],
                                  'constructor': ['fp', 'factory=rfc822.Message'],
                                  'docstring': '',
                                  'methods': [('__iter__', [], ''), ('next', [], '')],
                                  'properties': ['fp', 'seekp', 'factory']},
             'mailbox._PartialFile': {'bases': ['mailbox._ProxyFile'],
                                      'constructor': ['f', 'start=None', 'stop=None'],
                                      'docstring': 'A read-only wrapper of part of a file.',
                                      'methods': [('tell',
                                                   [],
                                                   'Return the position with respect to start.'),
                                                  ('seek',
                                                   ['offset', 'whence=0'],
                                                   'Change position, possibly with respect to start or stop.'),
                                                  ('_read',
                                                   ['size', 'read_method'],
                                                   'Read size bytes using read_method, honoring start and stop.')],
                                      'properties': ['_start', '_stop', '_pos']},
             'mailbox._ProxyFile': {'bases': [],
                                    'constructor': ['f', 'pos=None'],
                                    'docstring': 'A read-only wrapper of a file.',
                                    'methods': [('read', ['size=None'], 'Read bytes.'),
                                                ('readline', ['size=None'], 'Read a line.'),
                                                ('readlines',
                                                 ['sizehint=None'],
                                                 'Read multiple lines.'),
                                                ('__iter__', [], 'Iterate over lines.'),
                                                ('tell', [], 'Return the position.'),
                                                ('seek',
                                                 ['offset', 'whence=0'],
                                                 'Change position.'),
                                                ('close', [], 'Close the file.'),
                                                ('_read',
                                                 ['size', 'read_method'],
                                                 'Read size bytes using read_method.')],
                                    'properties': ['_file', '_pos']},
             'mailbox._mboxMMDF': {'bases': ['mailbox._singlefileMailbox'],
                                   'constructor': [],
                                   'docstring': 'An mbox or MMDF mailbox.',
                                   'methods': [('get_message',
                                                ['key'],
                                                'Return a Message representation or raise a KeyError.'),
                                               ('get_string',
                                                ['key', 'from_=False'],
                                                'Return a string representation or raise a KeyError.'),
                                               ('get_file',
                                                ['key', 'from_=False'],
                                                'Return a file-like representation or raise a KeyError.'),
                                               ('_install_message',
                                                ['message'],
                                                'Format a message and blindly write to self._file.')],
                                   'properties': ['_mangle_from_']},
             'mailbox._mboxMMDFMessage': {'bases': ['mailbox.Message'],
                                          'constructor': ['message=None'],
                                          'docstring': 'Message with mbox- or MMDF-specific properties.',
                                          'methods': [('get_from',
                                                       [],
                                                       'Return contents of "From " line.'),
                                                      ('set_from',
                                                       ['from_', 'time_=None'],
                                                       'Set "From " line, formatting and appending time_ if specified.'),
                                                      ('get_flags',
                                                       [],
                                                       'Return as a string the flags that are set.'),
                                                      ('set_flags',
                                                       ['flags'],
                                                       'Set the given flags and unset all others.'),
                                                      ('add_flag',
                                                       ['flag'],
                                                       'Set the given flag(s) without changing others.'),
                                                      ('remove_flag',
                                                       ['flag'],
                                                       'Unset the given string flag(s) without changing others.'),
                                                      ('_explain_to',
                                                       ['message'],
                                                       'Copy mbox- or MMDF-specific state to message insofar as possible.')],
                                          'properties': ['_from']},
             'mailbox._singlefileMailbox': {'bases': ['mailbox.Mailbox'],
                                            'constructor': ['path',
                                                            'factory=None',
                                                            'create=True'],
                                            'docstring': 'A single-file mailbox.',
                                            'methods': [('add',
                                                         ['message'],
                                                         'Add message and return assigned key.'),
                                                        ('remove',
                                                         ['key'],
                                                         "Remove the keyed message; raise KeyError if it doesn't exist."),
                                                        ('__setitem__',
                                                         ['key', 'message'],
                                                         "Replace the keyed message; raise KeyError if it doesn't exist."),
                                                        ('iterkeys',
                                                         [],
                                                         'Return an iterator over keys.'),
                                                        ('has_key',
                                                         ['key'],
                                                         'Return True if the keyed message exists, False otherwise.'),
                                                        ('__len__',
                                                         [],
                                                         'Return a count of messages in the mailbox.'),
                                                        ('lock', [], 'Lock the mailbox.'),
                                                        ('unlock',
                                                         [],
                                                         'Unlock the mailbox if it is locked.'),
                                                        ('flush',
                                                         [],
                                                         'Write any pending changes to disk.'),
                                                        ('_pre_mailbox_hook',
                                                         ['f'],
                                                         'Called before writing the mailbox to file f.'),
                                                        ('_pre_message_hook',
                                                         ['f'],
                                                         'Called before writing each message to file f.'),
                                                        ('_post_message_hook',
                                                         ['f'],
                                                         'Called after writing each message to file f.'),
                                                        ('close',
                                                         [],
                                                         'Flush and close the mailbox.'),
                                                        ('_lookup',
                                                         ['key=None'],
                                                         'Return (start, stop) or raise KeyError.'),
                                                        ('_append_message',
                                                         ['message'],
                                                         'Append message to mailbox and return (start, stop) offsets.')],
                                            'properties': ['_file',
                                                           '_toc',
                                                           '_next_key',
                                                           '_pending',
                                                           '_locked',
                                                           '_file_length']},
             'mailbox.mbox': {'bases': ['mailbox._mboxMMDF'],
                              'constructor': ['path', 'factory=None', 'create=True'],
                              'docstring': 'A classic mbox mailbox.',
                              'methods': [('_pre_message_hook',
                                           ['f'],
                                           'Called before writing each message to file f.'),
                                          ('_generate_toc',
                                           [],
                                           'Generate key-to-(start, stop) table of contents.')],
                              'properties': ['_mangle_from_',
                                             '_message_factory',
                                             '_toc',
                                             '_next_key',
                                             '_file_length']},
             'mailbox.mboxMessage': {'bases': ['mailbox._mboxMMDFMessage'],
                                     'constructor': [],
                                     'docstring': 'Message with mbox-specific properties.',
                                     'methods': [],
                                     'properties': []},
             'markupbase.ParserBase': {'bases': [],
                                       'constructor': [],
                                       'docstring': 'Parser base class which provides some common support methods used\n    by the SGML/HTML and XHTML parsers.',
                                       'methods': [('error', ['message'], ''),
                                                   ('reset', [], ''),
                                                   ('getpos',
                                                    [],
                                                    'Return current line number and offset.'),
                                                   ('updatepos', ['i', 'j'], ''),
                                                   ('parse_declaration', ['i'], ''),
                                                   ('parse_marked_section',
                                                    ['i', 'report=1'],
                                                    ''),
                                                   ('parse_comment', ['i', 'report=1'], ''),
                                                   ('_parse_doctype_subset',
                                                    ['i', 'declstartpos'],
                                                    ''),
                                                   ('_parse_doctype_element',
                                                    ['i', 'declstartpos'],
                                                    ''),
                                                   ('_parse_doctype_attlist',
                                                    ['i', 'declstartpos'],
                                                    ''),
                                                   ('_parse_doctype_notation',
                                                    ['i', 'declstartpos'],
                                                    ''),
                                                   ('_parse_doctype_entity',
                                                    ['i', 'declstartpos'],
                                                    ''),
                                                   ('_scan_name', ['i', 'declstartpos'], ''),
                                                   ('unknown_decl', ['data'], '')],
                                       'properties': ['lineno', 'offset', '_decl_otherchars']},
             'mhlib.Error': {'bases': ['Exception'],
                             'constructor': [],
                             'docstring': '',
                             'methods': [],
                             'properties': []},
             'mhlib.Folder': {'bases': [],
                              'constructor': ['mh', 'name'],
                              'docstring': 'Class representing a particular folder.',
                              'methods': [('__repr__', [], 'String representation.'),
                                          ('error', ['*args'], 'Error message handler.'),
                                          ('getfullname',
                                           [],
                                           'Return the full pathname of the folder.'),
                                          ('getsequencesfilename',
                                           [],
                                           "Return the full pathname of the folder's sequences file."),
                                          ('getmessagefilename',
                                           ['n'],
                                           'Return the full pathname of a message in the folder.'),
                                          ('listsubfolders',
                                           [],
                                           'Return list of direct subfolders.'),
                                          ('listallsubfolders',
                                           [],
                                           'Return list of all subfolders.'),
                                          ('listmessages',
                                           [],
                                           'Return the list of messages currently present in the folder.\n        As a side effect, set self.last to the last message (or 0).'),
                                          ('getsequences',
                                           [],
                                           'Return the set of sequences for the folder.'),
                                          ('putsequences',
                                           ['sequences'],
                                           'Write the set of sequences back to the folder.'),
                                          ('getcurrent',
                                           [],
                                           'Return the current message.  Raise Error when there is none.'),
                                          ('setcurrent', ['n'], 'Set the current message.'),
                                          ('parsesequence',
                                           ['seq'],
                                           'Parse an MH sequence specification into a message list.\n        Attempt to mimic mh-sequence(5) as close as possible.\n        Also attempt to mimic observed behavior regarding which\n        conditions cause which error messages.'),
                                          ('_parseindex',
                                           ['seq', 'all'],
                                           'Internal: parse a message number (or cur, first, etc.).'),
                                          ('openmessage',
                                           ['n'],
                                           'Open a message -- returns a Message object.'),
                                          ('removemessages',
                                           ['list'],
                                           'Remove one or more messages -- may raise os.error.'),
                                          ('refilemessages',
                                           ['list', 'tofolder', 'keepsequences=0'],
                                           "Refile one or more messages -- may raise os.error.\n        'tofolder' is an open folder object."),
                                          ('_copysequences',
                                           ['fromfolder', 'refileditems'],
                                           'Helper for refilemessages() to copy sequences.'),
                                          ('movemessage',
                                           ['n', 'tofolder', 'ton'],
                                           'Move one message over a specific destination message,\n        which may or may not already exist.'),
                                          ('copymessage',
                                           ['n', 'tofolder', 'ton'],
                                           'Copy one message over a specific destination message,\n        which may or may not already exist.'),
                                          ('createmessage',
                                           ['n', 'txt'],
                                           'Create a message, with text from the open file txt.'),
                                          ('removefromallsequences',
                                           ['list'],
                                           "Remove one or more messages from all sequences (including last)\n        -- but not from 'cur'!!!"),
                                          ('getlast', [], 'Return the last message number.'),
                                          ('setlast', ['last'], 'Set the last message number.')],
                              'properties': ['mh', 'name', 'last']},
             'mhlib.IntSet': {'bases': [],
                              'constructor': ['data=None', "sep=','", "rng='-'"],
                              'docstring': "Class implementing sets of integers.\n\n    This is an efficient representation for sets consisting of several\n    continuous ranges, e.g. 1-100,200-400,402-1000 is represented\n    internally as a list of three pairs: [(1,100), (200,400),\n    (402,1000)].  The internal representation is always kept normalized.\n\n    The constructor has up to three arguments:\n    - the string used to initialize the set (default ''),\n    - the separator between ranges (default ',')\n    - the separator between begin and end of a range (default '-')\n    The separators must be strings (not regexprs) and should be different.\n\n    The tostring() function yields a string that can be passed to another\n    IntSet constructor; __repr__() is a valid IntSet constructor itself.\n    ",
                              'methods': [('reset', [], ''),
                                          ('__cmp__', ['other'], ''),
                                          ('__hash__', [], ''),
                                          ('__repr__', [], ''),
                                          ('normalize', [], ''),
                                          ('tostring', [], ''),
                                          ('tolist', [], ''),
                                          ('fromlist', ['list'], ''),
                                          ('clone', [], ''),
                                          ('min', [], ''),
                                          ('max', [], ''),
                                          ('contains', ['x'], ''),
                                          ('append', ['x'], ''),
                                          ('addpair', ['xlo', 'xhi'], ''),
                                          ('fromstring', ['data'], '')],
                              'properties': ['pairs', 'sep', 'rng']},
             'mhlib.MH': {'bases': [],
                          'constructor': ['path=None', 'profile=None'],
                          'docstring': 'Class representing a particular collection of folders.\n    Optional constructor arguments are the pathname for the directory\n    containing the collection, and the MH profile to use.\n    If either is omitted or empty a default is used; the default\n    directory is taken from the MH profile if it is specified there.',
                          'methods': [('__repr__', [], 'String representation.'),
                                      ('error',
                                       ['msg', '*args'],
                                       'Routine to print an error.  May be overridden by a derived class.'),
                                      ('getprofile',
                                       ['key'],
                                       'Return a profile entry, None if not found.'),
                                      ('getpath',
                                       [],
                                       "Return the path (the name of the collection's directory)."),
                                      ('getcontext',
                                       [],
                                       'Return the name of the current folder.'),
                                      ('setcontext',
                                       ['context'],
                                       'Set the name of the current folder.'),
                                      ('listfolders',
                                       [],
                                       'Return the names of the top-level folders.'),
                                      ('listsubfolders',
                                       ['name'],
                                       'Return the names of the subfolders in a given folder\n        (prefixed with the given folder name).'),
                                      ('listallfolders',
                                       [],
                                       'Return the names of all folders and subfolders, recursively.'),
                                      ('listallsubfolders',
                                       ['name'],
                                       'Return the names of subfolders in a given folder, recursively.'),
                                      ('openfolder',
                                       ['name'],
                                       'Return a new Folder object for the named folder.'),
                                      ('makefolder',
                                       ['name'],
                                       'Create a new folder (or raise os.error if it cannot be created).'),
                                      ('deletefolder',
                                       ['name'],
                                       'Delete a folder.  This removes files in the folder but not\n        subdirectories.  Raise os.error if deleting the folder itself fails.')],
                          'properties': ['profile', 'path']},
             'mhlib.Message': {'bases': ['mimetools.Message'],
                               'constructor': ['f', 'n', 'fp=None'],
                               'docstring': '',
                               'methods': [('__repr__', [], 'String representation.'),
                                           ('getheadertext',
                                            ['pred=None'],
                                            "Return the message's header text as a string.  If an\n        argument is specified, it is used as a filter predicate to\n        decide which headers to return (its argument is the header\n        name converted to lower case)."),
                                           ('getbodytext',
                                            ['decode=1'],
                                            "Return the message's body text as string.  This undoes a\n        Content-Transfer-Encoding, but does not interpret other MIME\n        features (e.g. multipart messages).  To suppress decoding,\n        pass 0 as an argument."),
                                           ('getbodyparts',
                                            [],
                                            "Only for multipart messages: return the message's body as a\n        list of SubMessage objects.  Each submessage object behaves\n        (almost) as a Message object."),
                                           ('getbody',
                                            [],
                                            'Return body, either a string or a list of messages.')],
                               'properties': ['folder', 'number']},
             'mhlib.SubMessage': {'bases': ['mhlib.Message'],
                                  'constructor': ['f', 'n', 'fp'],
                                  'docstring': '',
                                  'methods': [('__repr__', [], 'String representation.'),
                                              ('getbodytext', ['decode=1'], ''),
                                              ('getbodyparts', [], ''),
                                              ('getbody', [], '')],
                                  'properties': ['body', 'bodyencoded']},
             'mimetools.Message': {'bases': ['rfc822.Message'],
                                   'constructor': ['fp', 'seekable=1'],
                                   'docstring': 'A derived class of rfc822.Message that knows about MIME headers and\n    contains some hooks for decoding encoded and multipart messages.',
                                   'methods': [('parsetype', [], ''),
                                               ('parseplist', [], ''),
                                               ('getplist', [], ''),
                                               ('getparam', ['name'], ''),
                                               ('getparamnames', [], ''),
                                               ('getencoding', [], ''),
                                               ('gettype', [], ''),
                                               ('getmaintype', [], ''),
                                               ('getsubtype', [], '')],
                                   'properties': ['encodingheader',
                                                  'typeheader',
                                                  'plisttext',
                                                  'type',
                                                  'maintype',
                                                  'subtype',
                                                  'plist']},
             'mimetypes.MimeTypes': {'bases': [],
                                     'constructor': ['filenames=()', 'strict=True'],
                                     'docstring': 'MIME-types datastore.\n\n    This datastore can handle information from mime.types-style files\n    and supports basic determination of MIME type from a filename or\n    URL, and can guess a reasonable extension given a MIME type.\n    ',
                                     'methods': [('add_type',
                                                  ['type', 'ext', 'strict=True'],
                                                  'Add a mapping between a type and an extension.\n\n        When the extension is already known, the new\n        type will replace the old one. When the type\n        is already known the extension will be added\n        to the list of known extensions.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        '),
                                                 ('guess_type',
                                                  ['url', 'strict=True'],
                                                  "Guess the type of a file based on its URL.\n\n        Return value is a tuple (type, encoding) where type is None if\n        the type can't be guessed (no or unknown suffix) or a string\n        of the form type/subtype, usable for a MIME Content-type\n        header; and encoding is None for no encoding or the name of\n        the program used to encode (e.g. compress or gzip).  The\n        mappings are table driven.  Encoding suffixes are case\n        sensitive; type suffixes are first tried case sensitive, then\n        case insensitive.\n\n        The suffixes .tgz, .taz and .tz (case sensitive!) are all\n        mapped to '.tar.gz'.  (This is table-driven too, using the\n        dictionary suffix_map.)\n\n        Optional `strict' argument when False adds a bunch of commonly found,\n        but non-standard types.\n        "),
                                                 ('guess_all_extensions',
                                                  ['type', 'strict=True'],
                                                  "Guess the extensions for a file based on its MIME type.\n\n        Return value is a list of strings giving the possible filename\n        extensions, including the leading dot ('.').  The extension is not\n        guaranteed to have been associated with any particular data stream,\n        but would be mapped to the MIME type `type' by guess_type().\n\n        Optional `strict' argument when false adds a bunch of commonly found,\n        but non-standard types.\n        "),
                                                 ('guess_extension',
                                                  ['type', 'strict=True'],
                                                  "Guess the extension for a file based on its MIME type.\n\n        Return value is a string giving a filename extension,\n        including the leading dot ('.').  The extension is not\n        guaranteed to have been associated with any particular data\n        stream, but would be mapped to the MIME type `type' by\n        guess_type().  If no extension can be guessed for `type', None\n        is returned.\n\n        Optional `strict' argument when false adds a bunch of commonly found,\n        but non-standard types.\n        "),
                                                 ('read',
                                                  ['filename', 'strict=True'],
                                                  '\n        Read a single mime.types-format file, specified by pathname.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        '),
                                                 ('readfp',
                                                  ['fp', 'strict=True'],
                                                  '\n        Read a single mime.types-format file.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        '),
                                                 ('read_windows_registry',
                                                  ['strict=True'],
                                                  '\n        Load the MIME types database from Windows registry.\n\n        If strict is true, information will be added to\n        list of standard types, else to the list of non-standard\n        types.\n        ')],
                                     'properties': ['encodings_map',
                                                    'suffix_map',
                                                    'types_map',
                                                    'types_map_inv']},
             'mimify.File': {'bases': [],
                             'constructor': ['file', 'boundary'],
                             'docstring': 'A simple fake file object that knows about limited read-ahead and\n    boundaries.  The only supported method is readline().',
                             'methods': [('readline', [], '')],
                             'properties': ['file', 'boundary', 'peek']},
             'mimify.HeaderFile': {'bases': [],
                                   'constructor': ['file'],
                                   'docstring': '',
                                   'methods': [('readline', [], '')],
                                   'properties': ['file', 'peek']},
             'modulefinder.Module': {'bases': [],
                                     'constructor': ['name', 'file=None', 'path=None'],
                                     'docstring': '',
                                     'methods': [('__repr__', [], '')],
                                     'properties': ['__name__',
                                                    '__file__',
                                                    '__path__',
                                                    '__code__',
                                                    'globalnames',
                                                    'starimports']},
             'modulefinder.ModuleFinder': {'bases': [],
                                           'constructor': ['path=None',
                                                           'debug=0',
                                                           'excludes=[]',
                                                           'replace_paths=[]'],
                                           'docstring': '',
                                           'methods': [('msg', ['level', 'str', '*args'], ''),
                                                       ('msgin', ['*args'], ''),
                                                       ('msgout', ['*args'], ''),
                                                       ('run_script', ['pathname'], ''),
                                                       ('load_file', ['pathname'], ''),
                                                       ('import_hook',
                                                        ['name',
                                                         'caller=None',
                                                         'fromlist=None',
                                                         'level=-1'],
                                                        ''),
                                                       ('determine_parent',
                                                        ['caller', 'level=-1'],
                                                        ''),
                                                       ('find_head_package',
                                                        ['parent', 'name'],
                                                        ''),
                                                       ('load_tail', ['q', 'tail'], ''),
                                                       ('ensure_fromlist',
                                                        ['m', 'fromlist', 'recursive=0'],
                                                        ''),
                                                       ('find_all_submodules', ['m'], ''),
                                                       ('import_module',
                                                        ['partname', 'fqname', 'parent'],
                                                        ''),
                                                       ('load_module',
                                                        ['fqname',
                                                         'fp',
                                                         'pathname',
                                                         'file_info'],
                                                        ''),
                                                       ('_add_badmodule',
                                                        ['name', 'caller'],
                                                        ''),
                                                       ('_safe_import_hook',
                                                        ['name',
                                                         'caller',
                                                         'fromlist',
                                                         'level=-1'],
                                                        ''),
                                                       ('scan_opcodes',
                                                        ['co', 'unpack=struct.unpack'],
                                                        ''),
                                                       ('scan_opcodes_25',
                                                        ['co', 'unpack=struct.unpack'],
                                                        ''),
                                                       ('scan_code', ['co', 'm'], ''),
                                                       ('load_package',
                                                        ['fqname', 'pathname'],
                                                        ''),
                                                       ('add_module', ['fqname'], ''),
                                                       ('find_module',
                                                        ['name', 'path', 'parent=None'],
                                                        ''),
                                                       ('report',
                                                        [],
                                                        'Print a report to stdout, listing the found modules with their\n        paths, as well as modules that are missing, or seem to be missing.\n        '),
                                                       ('any_missing',
                                                        [],
                                                        'Return a list of modules that appear to be missing. Use\n        any_missing_maybe() if you want to know which modules are\n        certain to be missing, and which *may* be missing.\n        '),
                                                       ('any_missing_maybe',
                                                        [],
                                                        'Return two lists, one with modules that are certainly missing\n        and one with modules that *may* be missing. The latter names could\n        either be submodules *or* just global names in the package.\n\n        The reason it can\'t always be determined is that it\'s impossible to\n        tell which names are imported when "from module import *" is done\n        with an extension module, short of actually importing it.\n        '),
                                                       ('replace_paths_in_code', ['co'], '')],
                                           'properties': ['path',
                                                          'modules',
                                                          'badmodules',
                                                          'debug',
                                                          'indent',
                                                          'excludes',
                                                          'replace_paths',
                                                          'processed_paths']},
             'multifile.Error': {'bases': ['Exception'],
                                 'constructor': [],
                                 'docstring': '',
                                 'methods': [],
                                 'properties': []},
             'multifile.MultiFile': {'bases': [],
                                     'constructor': ['fp', 'seekable=1'],
                                     'docstring': '',
                                     'methods': [('tell', [], ''),
                                                 ('seek', ['pos', 'whence=0'], ''),
                                                 ('readline', [], ''),
                                                 ('readlines', [], ''),
                                                 ('read', [], ''),
                                                 ('next', [], ''),
                                                 ('push', ['sep'], ''),
                                                 ('pop', [], ''),
                                                 ('is_data', ['line'], ''),
                                                 ('section_divider', ['str'], ''),
                                                 ('end_marker', ['str'], '')],
                                     'properties': ['seekable',
                                                    'fp',
                                                    'stack',
                                                    'level',
                                                    'last',
                                                    'start',
                                                    'posstack',
                                                    'lastpos']},
             'mutex.mutex': {'bases': [],
                             'constructor': [],
                             'docstring': '',
                             'methods': [('test', [], 'Test the locked bit of the mutex.'),
                                         ('testandset',
                                          [],
                                          'Atomic test-and-set -- grab the lock if it is not set,\n        return True if it succeeded.'),
                                         ('lock',
                                          ['function', 'argument'],
                                          'Lock a mutex, call the function with supplied argument\n        when it is acquired.  If the mutex is already locked, place\n        function and argument in the queue.'),
                                         ('unlock',
                                          [],
                                          'Unlock a mutex.  If the queue is not empty, call the next\n        function with its argument.')],
                             'properties': ['locked', 'queue']},
             'netrc.NetrcParseError': {'bases': ['Exception'],
                                       'constructor': ['msg', 'filename=None', 'lineno=None'],
                                       'docstring': 'Exception raised on syntax errors in the .netrc file.',
                                       'methods': [('__str__', [], '')],
                                       'properties': ['filename', 'lineno', 'msg']},
             'netrc.netrc': {'bases': [],
                             'constructor': ['file=None'],
                             'docstring': '',
                             'methods': [('_parse', ['file', 'fp'], ''),
                                         ('authenticators',
                                          ['host'],
                                          'Return a (user, account, password) tuple for given host.'),
                                         ('__repr__',
                                          [],
                                          'Dump the class data in the format of a .netrc file.')],
                             'properties': ['hosts', 'macros']},
             'nntplib.NNTP': {'bases': [],
                              'constructor': ['host',
                                              'port=NNTP_PORT',
                                              'user=None',
                                              'password=None',
                                              'readermode=None',
                                              'usenetrc=True'],
                              'docstring': '',
                              'methods': [('getwelcome',
                                           [],
                                           'Get the welcome message from the server\n        (this is read and squirreled away by __init__()).\n        If the response code is 200, posting is allowed;\n        if it 201, posting is not allowed.'),
                                          ('set_debuglevel',
                                           ['level'],
                                           "Set the debugging level.  Argument 'level' means:\n        0: no debugging output (default)\n        1: print commands and responses but not body text etc.\n        2: also print raw lines read and sent before stripping CR/LF"),
                                          ('putline',
                                           ['line'],
                                           'Internal: send one line to the server, appending CRLF.'),
                                          ('putcmd',
                                           ['line'],
                                           'Internal: send one command to the server (through putline()).'),
                                          ('getline',
                                           [],
                                           'Internal: return one line from the server, stripping CRLF.\n        Raise EOFError if the connection is closed.'),
                                          ('getresp',
                                           [],
                                           'Internal: get a response from the server.\n        Raise various errors if the response indicates an error.'),
                                          ('getlongresp',
                                           ['file=None'],
                                           'Internal: get a response plus following text from the server.\n        Raise various errors if the response indicates an error.'),
                                          ('shortcmd',
                                           ['line'],
                                           'Internal: send a command and get the response.'),
                                          ('longcmd',
                                           ['line', 'file=None'],
                                           'Internal: send a command and get the response plus following text.'),
                                          ('newgroups',
                                           ['date', 'time', 'file=None'],
                                           "Process a NEWGROUPS command.  Arguments:\n        - date: string 'yymmdd' indicating the date\n        - time: string 'hhmmss' indicating the time\n        Return:\n        - resp: server response if successful\n        - list: list of newsgroup names"),
                                          ('newnews',
                                           ['group', 'date', 'time', 'file=None'],
                                           "Process a NEWNEWS command.  Arguments:\n        - group: group name or '*'\n        - date: string 'yymmdd' indicating the date\n        - time: string 'hhmmss' indicating the time\n        Return:\n        - resp: server response if successful\n        - list: list of message ids"),
                                          ('list',
                                           ['file=None'],
                                           'Process a LIST command.  Return:\n        - resp: server response if successful\n        - list: list of (group, last, first, flag) (strings)'),
                                          ('description',
                                           ['group'],
                                           "Get a description for a single group.  If more than one\n        group matches ('group' is a pattern), return the first.  If no\n        group matches, return an empty string.\n\n        This elides the response code from the server, since it can\n        only be '215' or '285' (for xgtitle) anyway.  If the response\n        code is needed, use the 'descriptions' method.\n\n        NOTE: This neither checks for a wildcard in 'group' nor does\n        it check whether the group actually exists."),
                                          ('descriptions',
                                           ['group_pattern'],
                                           'Get descriptions for a range of groups.'),
                                          ('group',
                                           ['name'],
                                           'Process a GROUP command.  Argument:\n        - group: the group name\n        Returns:\n        - resp: server response if successful\n        - count: number of articles (string)\n        - first: first article number (string)\n        - last: last article number (string)\n        - name: the group name'),
                                          ('help',
                                           ['file=None'],
                                           'Process a HELP command.  Returns:\n        - resp: server response if successful\n        - list: list of strings'),
                                          ('statparse',
                                           ['resp'],
                                           'Internal: parse the response of a STAT, NEXT or LAST command.'),
                                          ('statcmd',
                                           ['line'],
                                           'Internal: process a STAT, NEXT or LAST command.'),
                                          ('stat',
                                           ['id'],
                                           'Process a STAT command.  Argument:\n        - id: article number or message id\n        Returns:\n        - resp: server response if successful\n        - nr:   the article number\n        - id:   the message id'),
                                          ('next',
                                           [],
                                           'Process a NEXT command.  No arguments.  Return as for STAT.'),
                                          ('last',
                                           [],
                                           'Process a LAST command.  No arguments.  Return as for STAT.'),
                                          ('artcmd',
                                           ['line', 'file=None'],
                                           'Internal: process a HEAD, BODY or ARTICLE command.'),
                                          ('head',
                                           ['id'],
                                           "Process a HEAD command.  Argument:\n        - id: article number or message id\n        Returns:\n        - resp: server response if successful\n        - nr: article number\n        - id: message id\n        - list: the lines of the article's header"),
                                          ('body',
                                           ['id', 'file=None'],
                                           "Process a BODY command.  Argument:\n        - id: article number or message id\n        - file: Filename string or file object to store the article in\n        Returns:\n        - resp: server response if successful\n        - nr: article number\n        - id: message id\n        - list: the lines of the article's body or an empty list\n                if file was used"),
                                          ('article',
                                           ['id'],
                                           'Process an ARTICLE command.  Argument:\n        - id: article number or message id\n        Returns:\n        - resp: server response if successful\n        - nr: article number\n        - id: message id\n        - list: the lines of the article'),
                                          ('slave',
                                           [],
                                           'Process a SLAVE command.  Returns:\n        - resp: server response if successful'),
                                          ('xhdr',
                                           ['hdr', 'str', 'file=None'],
                                           "Process an XHDR command (optional server extension).  Arguments:\n        - hdr: the header type (e.g. 'subject')\n        - str: an article nr, a message id, or a range nr1-nr2\n        Returns:\n        - resp: server response if successful\n        - list: list of (nr, value) strings"),
                                          ('xover',
                                           ['start', 'end', 'file=None'],
                                           'Process an XOVER command (optional server extension) Arguments:\n        - start: start of range\n        - end: end of range\n        Returns:\n        - resp: server response if successful\n        - list: list of (art-nr, subject, poster, date,\n                         id, references, size, lines)'),
                                          ('xgtitle',
                                           ['group', 'file=None'],
                                           'Process an XGTITLE command (optional server extension) Arguments:\n        - group: group name wildcard (i.e. news.*)\n        Returns:\n        - resp: server response if successful\n        - list: list of (name,title) strings'),
                                          ('xpath',
                                           ['id'],
                                           'Process an XPATH command (optional server extension) Arguments:\n        - id: Message id of article\n        Returns:\n        resp: server response if successful\n        path: directory path to article'),
                                          ('date',
                                           [],
                                           'Process the DATE command. Arguments:\n        None\n        Returns:\n        resp: server response if successful\n        date: Date suitable for newnews/newgroups commands etc.\n        time: Time suitable for newnews/newgroups commands etc.'),
                                          ('post',
                                           ['f'],
                                           'Process a POST command.  Arguments:\n        - f: file containing the article\n        Returns:\n        - resp: server response if successful'),
                                          ('ihave',
                                           ['id', 'f'],
                                           'Process an IHAVE command.  Arguments:\n        - id: message-id of the article\n        - f:  file containing the article\n        Returns:\n        - resp: server response if successful\n        Note that if the server refuses the article an exception is raised.'),
                                          ('quit',
                                           [],
                                           'Process a QUIT command and close the socket.  Returns:\n        - resp: server response if successful')],
                              'properties': ['host',
                                             'port',
                                             'sock',
                                             'file',
                                             'debugging',
                                             'welcome',
                                             'debug']},
             'nntplib.NNTPDataError': {'bases': ['nntplib.NNTPError'],
                                       'constructor': [],
                                       'docstring': 'Error in response data',
                                       'methods': [],
                                       'properties': []},
             'nntplib.NNTPError': {'bases': ['Exception'],
                                   'constructor': ['*args'],
                                   'docstring': 'Base class for all nntplib exceptions',
                                   'methods': [],
                                   'properties': ['response']},
             'nntplib.NNTPPermanentError': {'bases': ['nntplib.NNTPError'],
                                            'constructor': [],
                                            'docstring': '5xx errors',
                                            'methods': [],
                                            'properties': []},
             'nntplib.NNTPProtocolError': {'bases': ['nntplib.NNTPError'],
                                           'constructor': [],
                                           'docstring': 'Response does not begin with [1-5]',
                                           'methods': [],
                                           'properties': []},
             'nntplib.NNTPReplyError': {'bases': ['nntplib.NNTPError'],
                                        'constructor': [],
                                        'docstring': 'Unexpected [123]xx reply',
                                        'methods': [],
                                        'properties': []},
             'nntplib.NNTPTemporaryError': {'bases': ['nntplib.NNTPError'],
                                            'constructor': [],
                                            'docstring': '4xx errors',
                                            'methods': [],
                                            'properties': []},
             'numbers.Complex': {'bases': ['numbers.Number'],
                                 'constructor': [],
                                 'docstring': "Complex defines the operations that work on the builtin complex type.\n\n    In short, those are: a conversion to complex, .real, .imag, +, -,\n    *, /, abs(), .conjugate, ==, and !=.\n\n    If it is given heterogenous arguments, and doesn't have special\n    knowledge about them, it should fall back to the builtin complex\n    type as described below.\n    ",
                                 'methods': [('__complex__',
                                              [],
                                              'Return a builtin complex instance. Called for complex(self).'),
                                             ('__nonzero__',
                                              [],
                                              'True if self != 0. Called for bool(self).'),
                                             ('real',
                                              [],
                                              'Retrieve the real component of this number.\n\n        This should subclass Real.\n        '),
                                             ('imag',
                                              [],
                                              'Retrieve the imaginary component of this number.\n\n        This should subclass Real.\n        '),
                                             ('__add__', ['other'], 'self + other'),
                                             ('__radd__', ['other'], 'other + self'),
                                             ('__neg__', [], '-self'),
                                             ('__pos__', [], '+self'),
                                             ('__sub__', ['other'], 'self - other'),
                                             ('__rsub__', ['other'], 'other - self'),
                                             ('__mul__', ['other'], 'self * other'),
                                             ('__rmul__', ['other'], 'other * self'),
                                             ('__div__',
                                              ['other'],
                                              'self / other without __future__ division\n\n        May promote to float.\n        '),
                                             ('__rdiv__',
                                              ['other'],
                                              'other / self without __future__ division'),
                                             ('__truediv__',
                                              ['other'],
                                              'self / other with __future__ division.\n\n        Should promote to float when necessary.\n        '),
                                             ('__rtruediv__',
                                              ['other'],
                                              'other / self with __future__ division'),
                                             ('__pow__',
                                              ['exponent'],
                                              'self**exponent; should promote to float or complex when necessary.'),
                                             ('__rpow__', ['base'], 'base ** self'),
                                             ('__abs__',
                                              [],
                                              'Returns the Real distance from 0. Called for abs(self).'),
                                             ('conjugate',
                                              [],
                                              '(x+y*i).conjugate() returns (x-y*i).'),
                                             ('__eq__', ['other'], 'self == other'),
                                             ('__ne__', ['other'], 'self != other')],
                                 'properties': ['__slots__']},
             'numbers.Integral': {'bases': ['numbers.Rational'],
                                  'constructor': [],
                                  'docstring': 'Integral adds a conversion to long and the bit-string operations.',
                                  'methods': [('__long__', [], 'long(self)'),
                                              ('__index__', [], 'index(self)'),
                                              ('__pow__',
                                               ['exponent', 'modulus=None'],
                                               "self ** exponent % modulus, but maybe faster.\n\n        Accept the modulus argument if you want to support the\n        3-argument version of pow(). Raise a TypeError if exponent < 0\n        or any argument isn't Integral. Otherwise, just implement the\n        2-argument version described in Complex.\n        "),
                                              ('__lshift__', ['other'], 'self << other'),
                                              ('__rlshift__', ['other'], 'other << self'),
                                              ('__rshift__', ['other'], 'self >> other'),
                                              ('__rrshift__', ['other'], 'other >> self'),
                                              ('__and__', ['other'], 'self & other'),
                                              ('__rand__', ['other'], 'other & self'),
                                              ('__xor__', ['other'], 'self ^ other'),
                                              ('__rxor__', ['other'], 'other ^ self'),
                                              ('__or__', ['other'], 'self | other'),
                                              ('__ror__', ['other'], 'other | self'),
                                              ('__invert__', [], '~self'),
                                              ('__float__',
                                               [],
                                               'float(self) == float(long(self))')],
                                  'properties': ['__slots__', 'numerator', 'denominator']},
             'numbers.Number': {'bases': ['object'],
                                'constructor': [],
                                'docstring': 'All numbers inherit from this class.\n\n    If you just want to check if an argument x is a number, without\n    caring what kind, use isinstance(x, Number).\n    ',
                                'methods': [],
                                'properties': ['__metaclass__', '__slots__', '__hash__']},
             'numbers.Rational': {'bases': ['numbers.Real'],
                                  'constructor': [],
                                  'docstring': '.numerator and .denominator should be in lowest terms.',
                                  'methods': [('numerator', [], ''),
                                              ('denominator', [], ''),
                                              ('__float__',
                                               [],
                                               'float(self) = self.numerator / self.denominator\n\n        It\'s important that this conversion use the integer\'s "true"\n        division rather than casting one side to float before dividing\n        so that ratios of huge integers convert without overflowing.\n\n        ')],
                                  'properties': ['__slots__']},
             'numbers.Real': {'bases': ['numbers.Complex'],
                              'constructor': [],
                              'docstring': 'To Complex, Real adds the operations that work on real numbers.\n\n    In short, those are: a conversion to float, trunc(), divmod,\n    %, <, <=, >, and >=.\n\n    Real also provides defaults for the derived operations.\n    ',
                              'methods': [('__float__',
                                           [],
                                           'Any Real can be converted to a native float object.\n\n        Called for float(self).'),
                                          ('__trunc__',
                                           [],
                                           'trunc(self): Truncates self to an Integral.\n\n        Returns an Integral i such that:\n          * i>0 iff self>0;\n          * abs(i) <= abs(self);\n          * for any Integral j satisfying the first two conditions,\n            abs(i) >= abs(j) [i.e. i has "maximal" abs among those].\n        i.e. "truncate towards 0".\n        '),
                                          ('__divmod__',
                                           ['other'],
                                           'divmod(self, other): The pair (self // other, self % other).\n\n        Sometimes this can be computed faster than the pair of\n        operations.\n        '),
                                          ('__rdivmod__',
                                           ['other'],
                                           'divmod(other, self): The pair (self // other, self % other).\n\n        Sometimes this can be computed faster than the pair of\n        operations.\n        '),
                                          ('__floordiv__',
                                           ['other'],
                                           'self // other: The floor() of self/other.'),
                                          ('__rfloordiv__',
                                           ['other'],
                                           'other // self: The floor() of other/self.'),
                                          ('__mod__', ['other'], 'self % other'),
                                          ('__rmod__', ['other'], 'other % self'),
                                          ('__lt__',
                                           ['other'],
                                           'self < other\n\n        < on Reals defines a total ordering, except perhaps for NaN.'),
                                          ('__le__', ['other'], 'self <= other'),
                                          ('__complex__',
                                           [],
                                           'complex(self) == complex(float(self), 0)'),
                                          ('conjugate', [], 'Conjugate is a no-op for Reals.')],
                              'properties': ['__slots__', 'real', 'imag']},
             'optparse.AmbiguousOptionError': {'bases': ['optparse.BadOptionError'],
                                               'constructor': ['opt_str', 'possibilities'],
                                               'docstring': '\n    Raised if an ambiguous option is seen on the command line.\n    ',
                                               'methods': [('__str__', [], '')],
                                               'properties': ['possibilities']},
             'optparse.BadOptionError': {'bases': ['optparse.OptParseError'],
                                         'constructor': ['opt_str'],
                                         'docstring': '\n    Raised if an invalid option is seen on the command line.\n    ',
                                         'methods': [('__str__', [], '')],
                                         'properties': ['opt_str']},
             'optparse.HelpFormatter': {'bases': [],
                                        'constructor': ['indent_increment',
                                                        'max_help_position',
                                                        'width',
                                                        'short_first'],
                                        'docstring': '\n    Abstract base class for formatting option help.  OptionParser\n    instances should use one of the HelpFormatter subclasses for\n    formatting help; by default IndentedHelpFormatter is used.\n\n    Instance attributes:\n      parser : OptionParser\n        the controlling OptionParser instance\n      indent_increment : int\n        the number of columns to indent per nesting level\n      max_help_position : int\n        the maximum starting column for option help text\n      help_position : int\n        the calculated starting column for option help text;\n        initially the same as the maximum\n      width : int\n        total number of columns for output (pass None to constructor for\n        this value to be taken from the $COLUMNS environment variable)\n      level : int\n        current indentation level\n      current_indent : int\n        current indentation level (in columns)\n      help_width : int\n        number of columns available for option help text (calculated)\n      default_tag : str\n        text to replace with each option\'s default value, "%default"\n        by default.  Set to false value to disable default value expansion.\n      option_strings : { Option : str }\n        maps Option instances to the snippet of help text explaining\n        the syntax of that option, e.g. "-h, --help" or\n        "-fFILE, --file=FILE"\n      _short_opt_fmt : str\n        format string controlling how short options with values are\n        printed in help text.  Must be either "%s%s" ("-fFILE") or\n        "%s %s" ("-f FILE"), because those are the two syntaxes that\n        Optik supports.\n      _long_opt_fmt : str\n        similar but for long options; must be either "%s %s" ("--file FILE")\n        or "%s=%s" ("--file=FILE").\n    ',
                                        'methods': [('set_parser', ['parser'], ''),
                                                    ('set_short_opt_delimiter', ['delim'], ''),
                                                    ('set_long_opt_delimiter', ['delim'], ''),
                                                    ('indent', [], ''),
                                                    ('dedent', [], ''),
                                                    ('format_usage', ['usage'], ''),
                                                    ('format_heading', ['heading'], ''),
                                                    ('_format_text',
                                                     ['text'],
                                                     '\n        Format a paragraph of free-form text for inclusion in the\n        help output at the current indentation level.\n        '),
                                                    ('format_description', ['description'], ''),
                                                    ('format_epilog', ['epilog'], ''),
                                                    ('expand_default', ['option'], ''),
                                                    ('format_option', ['option'], ''),
                                                    ('store_option_strings', ['parser'], ''),
                                                    ('format_option_strings',
                                                     ['option'],
                                                     'Return a comma-separated list of option strings & metavariables.')],
                                        'properties': ['NO_DEFAULT_VALUE',
                                                       'parser',
                                                       'indent_increment',
                                                       'help_position',
                                                       'max_help_position',
                                                       'width',
                                                       'current_indent',
                                                       'level',
                                                       'help_width',
                                                       'short_first',
                                                       'default_tag',
                                                       'option_strings',
                                                       '_short_opt_fmt',
                                                       '_long_opt_fmt']},
             'optparse.IndentedHelpFormatter': {'bases': ['optparse.HelpFormatter'],
                                                'constructor': ['indent_increment=2',
                                                                'max_help_position=24',
                                                                'width=None',
                                                                'short_first=1'],
                                                'docstring': 'Format help with indented section bodies.\n    ',
                                                'methods': [('format_usage', ['usage'], ''),
                                                            ('format_heading', ['heading'], '')],
                                                'properties': []},
             'optparse.OptParseError': {'bases': ['Exception'],
                                        'constructor': ['msg'],
                                        'docstring': '',
                                        'methods': [('__str__', [], '')],
                                        'properties': ['msg']},
             'optparse.Option': {'bases': [],
                                 'constructor': ['*opts', '**attrs'],
                                 'docstring': '\n    Instance attributes:\n      _short_opts : [string]\n      _long_opts : [string]\n\n      action : string\n      type : string\n      dest : string\n      default : any\n      nargs : int\n      const : any\n      choices : [string]\n      callback : function\n      callback_args : (any*)\n      callback_kwargs : { string : any }\n      help : string\n      metavar : string\n    ',
                                 'methods': [('_check_opt_strings', ['opts'], ''),
                                             ('_set_opt_strings', ['opts'], ''),
                                             ('_set_attrs', ['attrs'], ''),
                                             ('_check_action', [], ''),
                                             ('_check_type', [], ''),
                                             ('_check_choice', [], ''),
                                             ('_check_dest', [], ''),
                                             ('_check_const', [], ''),
                                             ('_check_nargs', [], ''),
                                             ('_check_callback', [], ''),
                                             ('__str__', [], ''),
                                             ('takes_value', [], ''),
                                             ('get_opt_string', [], ''),
                                             ('check_value', ['opt', 'value'], ''),
                                             ('convert_value', ['opt', 'value'], ''),
                                             ('process',
                                              ['opt', 'value', 'values', 'parser'],
                                              ''),
                                             ('take_action',
                                              ['action',
                                               'dest',
                                               'opt',
                                               'value',
                                               'values',
                                               'parser'],
                                              '')],
                                 'properties': ['ATTRS',
                                                'ACTIONS',
                                                'STORE_ACTIONS',
                                                'TYPED_ACTIONS',
                                                'ALWAYS_TYPED_ACTIONS',
                                                'CONST_ACTIONS',
                                                'TYPES',
                                                'TYPE_CHECKER',
                                                'CHECK_METHODS',
                                                '_short_opts',
                                                '_long_opts',
                                                'action',
                                                'type',
                                                'dest',
                                                'nargs',
                                                '__repr__']},
             'optparse.OptionConflictError': {'bases': ['optparse.OptionError'],
                                              'constructor': [],
                                              'docstring': '\n    Raised if conflicting options are added to an OptionParser.\n    ',
                                              'methods': [],
                                              'properties': []},
             'optparse.OptionContainer': {'bases': [],
                                          'constructor': ['option_class',
                                                          'conflict_handler',
                                                          'description'],
                                          'docstring': '\n    Abstract base class.\n\n    Class attributes:\n      standard_option_list : [Option]\n        list of standard options that will be accepted by all instances\n        of this parser class (intended to be overridden by subclasses).\n\n    Instance attributes:\n      option_list : [Option]\n        the list of Option objects contained by this OptionContainer\n      _short_opt : { string : Option }\n        dictionary mapping short option strings, eg. "-f" or "-X",\n        to the Option instances that implement them.  If an Option\n        has multiple short option strings, it will appears in this\n        dictionary multiple times. [1]\n      _long_opt : { string : Option }\n        dictionary mapping long option strings, eg. "--file" or\n        "--exclude", to the Option instances that implement them.\n        Again, a given Option can occur multiple times in this\n        dictionary. [1]\n      defaults : { string : any }\n        dictionary mapping option destination names to default\n        values for each destination [1]\n\n    [1] These mappings are common to (shared by) all components of the\n        controlling OptionParser, where they are initially created.\n\n    ',
                                          'methods': [('_create_option_mappings', [], ''),
                                                      ('_share_option_mappings',
                                                       ['parser'],
                                                       ''),
                                                      ('set_conflict_handler', ['handler'], ''),
                                                      ('set_description', ['description'], ''),
                                                      ('get_description', [], ''),
                                                      ('destroy',
                                                       [],
                                                       'see OptionParser.destroy().'),
                                                      ('_check_conflict', ['option'], ''),
                                                      ('add_option',
                                                       ['*args', '**kwargs'],
                                                       'add_option(Option)\n           add_option(opt_str, ..., kwarg=val, ...)\n        '),
                                                      ('add_options', ['option_list'], ''),
                                                      ('get_option', ['opt_str'], ''),
                                                      ('has_option', ['opt_str'], ''),
                                                      ('remove_option', ['opt_str'], ''),
                                                      ('format_option_help', ['formatter'], ''),
                                                      ('format_description', ['formatter'], ''),
                                                      ('format_help', ['formatter'], '')],
                                          'properties': ['option_class',
                                                         '_short_opt',
                                                         '_long_opt',
                                                         'defaults',
                                                         'conflict_handler',
                                                         'description']},
             'optparse.OptionError': {'bases': ['optparse.OptParseError'],
                                      'constructor': ['msg', 'option'],
                                      'docstring': '\n    Raised if an Option instance is created with invalid or\n    inconsistent arguments.\n    ',
                                      'methods': [('__str__', [], '')],
                                      'properties': ['msg', 'option_id']},
             'optparse.OptionGroup': {'bases': ['optparse.OptionContainer'],
                                      'constructor': ['parser', 'title', 'description=None'],
                                      'docstring': '',
                                      'methods': [('_create_option_list', [], ''),
                                                  ('set_title', ['title'], ''),
                                                  ('destroy',
                                                   [],
                                                   'see OptionParser.destroy().'),
                                                  ('format_help', ['formatter'], '')],
                                      'properties': ['parser', 'title', 'option_list']},
             'optparse.OptionParser': {'bases': ['optparse.OptionContainer'],
                                       'constructor': ['usage=None',
                                                       'option_list=None',
                                                       'option_class=Option',
                                                       'version=None',
                                                       "conflict_handler='error'",
                                                       'description=None',
                                                       'formatter=None',
                                                       'add_help_option=True',
                                                       'prog=None',
                                                       'epilog=None'],
                                       'docstring': '\n    Class attributes:\n      standard_option_list : [Option]\n        list of standard options that will be accepted by all instances\n        of this parser class (intended to be overridden by subclasses).\n\n    Instance attributes:\n      usage : string\n        a usage string for your program.  Before it is displayed\n        to the user, "%prog" will be expanded to the name of\n        your program (self.prog or os.path.basename(sys.argv[0])).\n      prog : string\n        the name of the current program (to override\n        os.path.basename(sys.argv[0])).\n      epilog : string\n        paragraph of help text to print after option help\n\n      option_groups : [OptionGroup]\n        list of option groups in this parser (option groups are\n        irrelevant for parsing the command-line, but very useful\n        for generating help)\n\n      allow_interspersed_args : bool = true\n        if true, positional arguments may be interspersed with options.\n        Assuming -a and -b each take a single argument, the command-line\n          -ablah foo bar -bboo baz\n        will be interpreted the same as\n          -ablah -bboo -- foo bar baz\n        If this flag were false, that command line would be interpreted as\n          -ablah -- foo bar -bboo baz\n        -- ie. we stop processing options as soon as we see the first\n        non-option argument.  (This is the tradition followed by\n        Python\'s getopt module, Perl\'s Getopt::Std, and other argument-\n        parsing libraries, but it is generally annoying to users.)\n\n      process_default_values : bool = true\n        if true, option default values are processed similarly to option\n        values from the command line: that is, they are passed to the\n        type-checking function for the option\'s type (as long as the\n        default value is a string).  (This really only matters if you\n        have defined custom types; see SF bug #955889.)  Set it to false\n        to restore the behaviour of Optik 1.4.1 and earlier.\n\n      rargs : [string]\n        the argument list currently being parsed.  Only set when\n        parse_args() is active, and continually trimmed down as\n        we consume arguments.  Mainly there for the benefit of\n        callback options.\n      largs : [string]\n        the list of leftover arguments that we have skipped while\n        parsing options.  If allow_interspersed_args is false, this\n        list is always empty.\n      values : Values\n        the set of option values currently being accumulated.  Only\n        set when parse_args() is active.  Also mainly for callbacks.\n\n    Because of the \'rargs\', \'largs\', and \'values\' attributes,\n    OptionParser is not thread-safe.  If, for some perverse reason, you\n    need to parse command-line arguments simultaneously in different\n    threads, use different OptionParser instances.\n\n    ',
                                       'methods': [('destroy',
                                                    [],
                                                    '\n        Declare that you are done with this OptionParser.  This cleans up\n        reference cycles so the OptionParser (and all objects referenced by\n        it) can be garbage-collected promptly.  After calling destroy(), the\n        OptionParser is unusable.\n        '),
                                                   ('_create_option_list', [], ''),
                                                   ('_add_help_option', [], ''),
                                                   ('_add_version_option', [], ''),
                                                   ('_populate_option_list',
                                                    ['option_list', 'add_help=True'],
                                                    ''),
                                                   ('_init_parsing_state', [], ''),
                                                   ('set_usage', ['usage'], ''),
                                                   ('enable_interspersed_args',
                                                    [],
                                                    'Set parsing to not stop on the first non-option, allowing\n        interspersing switches with command arguments. This is the\n        default behavior. See also disable_interspersed_args() and the\n        class documentation description of the attribute\n        allow_interspersed_args.'),
                                                   ('disable_interspersed_args',
                                                    [],
                                                    "Set parsing to stop on the first non-option. Use this if\n        you have a command processor which runs another command that\n        has options of its own and you want to make sure these options\n        don't get confused.\n        "),
                                                   ('set_process_default_values',
                                                    ['process'],
                                                    ''),
                                                   ('set_default', ['dest', 'value'], ''),
                                                   ('set_defaults', ['**kwargs'], ''),
                                                   ('_get_all_options', [], ''),
                                                   ('get_default_values', [], ''),
                                                   ('add_option_group',
                                                    ['*args', '**kwargs'],
                                                    ''),
                                                   ('get_option_group', ['opt_str'], ''),
                                                   ('_get_args', ['args'], ''),
                                                   ('parse_args',
                                                    ['args=None', 'values=None'],
                                                    "\n        parse_args(args : [string] = sys.argv[1:],\n                   values : Values = None)\n        -> (values : Values, args : [string])\n\n        Parse the command-line options found in 'args' (default:\n        sys.argv[1:]).  Any errors result in a call to 'error()', which\n        by default prints the usage message to stderr and calls\n        sys.exit() with an error message.  On success returns a pair\n        (values, args) where 'values' is an Values instance (with all\n        your option values) and 'args' is the list of arguments left\n        over after parsing options.\n        "),
                                                   ('check_values',
                                                    ['values', 'args'],
                                                    '\n        check_values(values : Values, args : [string])\n        -> (values : Values, args : [string])\n\n        Check that the supplied option values and leftover arguments are\n        valid.  Returns the option values and leftover arguments\n        (possibly adjusted, possibly completely new -- whatever you\n        like).  Default implementation just returns the passed-in\n        values; subclasses may override as desired.\n        '),
                                                   ('_process_args',
                                                    ['largs', 'rargs', 'values'],
                                                    "_process_args(largs : [string],\n                         rargs : [string],\n                         values : Values)\n\n        Process command-line arguments and populate 'values', consuming\n        options and arguments from 'rargs'.  If 'allow_interspersed_args' is\n        false, stop at the first non-option argument.  If true, accumulate any\n        interspersed non-option arguments in 'largs'.\n        "),
                                                   ('_match_long_opt',
                                                    ['opt'],
                                                    "_match_long_opt(opt : string) -> string\n\n        Determine which long option string 'opt' matches, ie. which one\n        it is an unambiguous abbrevation for.  Raises BadOptionError if\n        'opt' doesn't unambiguously match any long option string.\n        "),
                                                   ('_process_long_opt',
                                                    ['rargs', 'values'],
                                                    ''),
                                                   ('_process_short_opts',
                                                    ['rargs', 'values'],
                                                    ''),
                                                   ('get_prog_name', [], ''),
                                                   ('expand_prog_name', ['s'], ''),
                                                   ('get_description', [], ''),
                                                   ('exit', ['status=0', 'msg=None'], ''),
                                                   ('error',
                                                    ['msg'],
                                                    "error(msg : string)\n\n        Print a usage message incorporating 'msg' to stderr and exit.\n        If you override this in a subclass, it should not return -- it\n        should either exit or raise an exception.\n        "),
                                                   ('get_usage', [], ''),
                                                   ('print_usage',
                                                    ['file=None'],
                                                    'print_usage(file : file = stdout)\n\n        Print the usage message for the current program (self.usage) to\n        \'file\' (default stdout).  Any occurrence of the string "%prog" in\n        self.usage is replaced with the name of the current program\n        (basename of sys.argv[0]).  Does nothing if self.usage is empty\n        or not defined.\n        '),
                                                   ('get_version', [], ''),
                                                   ('print_version',
                                                    ['file=None'],
                                                    'print_version(file : file = stdout)\n\n        Print the version message for this program (self.version) to\n        \'file\' (default stdout).  As with print_usage(), any occurrence\n        of "%prog" in self.version is replaced by the current program\'s\n        name.  Does nothing if self.version is empty or undefined.\n        '),
                                                   ('format_option_help',
                                                    ['formatter=None'],
                                                    ''),
                                                   ('format_epilog', ['formatter'], ''),
                                                   ('format_help', ['formatter=None'], ''),
                                                   ('_get_encoding', ['file'], ''),
                                                   ('print_help',
                                                    ['file=None'],
                                                    "print_help(file : file = stdout)\n\n        Print an extended help message, listing all options and any\n        help text provided with them, to 'file' (default stdout).\n        ")],
                                       'properties': ['standard_option_list',
                                                      'prog',
                                                      'version',
                                                      'allow_interspersed_args',
                                                      'process_default_values',
                                                      'formatter',
                                                      'epilog',
                                                      'option_list',
                                                      'option_groups',
                                                      'rargs',
                                                      'largs',
                                                      'values',
                                                      'usage']},
             'optparse.OptionValueError': {'bases': ['optparse.OptParseError'],
                                           'constructor': [],
                                           'docstring': '\n    Raised if an invalid option value is encountered on the command\n    line.\n    ',
                                           'methods': [],
                                           'properties': []},
             'optparse.TitledHelpFormatter': {'bases': ['optparse.HelpFormatter'],
                                              'constructor': ['indent_increment=0',
                                                              'max_help_position=24',
                                                              'width=None',
                                                              'short_first=0'],
                                              'docstring': 'Format help with underlined section headers.\n    ',
                                              'methods': [('format_usage', ['usage'], ''),
                                                          ('format_heading', ['heading'], '')],
                                              'properties': []},
             'optparse.Values': {'bases': [],
                                 'constructor': ['defaults=None'],
                                 'docstring': '',
                                 'methods': [('__str__', [], ''),
                                             ('__cmp__', ['other'], ''),
                                             ('_update_careful',
                                              ['dict'],
                                              '\n        Update the option values from an arbitrary dictionary, but only\n        use keys from dict that already have a corresponding attribute\n        in self.  Any keys in dict without a corresponding attribute\n        are silently ignored.\n        '),
                                             ('_update_loose',
                                              ['dict'],
                                              '\n        Update the option values from an arbitrary dictionary,\n        using all keys from the dictionary regardless of whether\n        they have a corresponding attribute in self or not.\n        '),
                                             ('_update', ['dict', 'mode'], ''),
                                             ('read_module', ['modname', "mode='careful'"], ''),
                                             ('read_file', ['filename', "mode='careful'"], ''),
                                             ('ensure_value', ['attr', 'value'], '')],
                                 'properties': ['__repr__']},
             'os._Environ': {'bases': ['UserDict.IterableUserDict'],
                             'constructor': ['environ'],
                             'docstring': '',
                             'methods': [('__setitem__', ['key', 'item'], ''),
                                         ('update', ['dict=None', '**kwargs'], ''),
                                         ('__delitem__', ['key'], ''),
                                         ('clear', [], ''),
                                         ('pop', ['key', '*args'], ''),
                                         ('copy', [], '')],
                             'properties': ['data']},
             'pdb.Pdb': {'bases': ['bdb.Bdb', 'cmd.Cmd'],
                         'constructor': ["completekey='tab'",
                                         'stdin=None',
                                         'stdout=None',
                                         'skip=None'],
                         'docstring': '',
                         'methods': [('reset', [], ''),
                                     ('forget', [], ''),
                                     ('setup', ['f', 't'], ''),
                                     ('execRcLines', [], ''),
                                     ('user_call',
                                      ['frame', 'argument_list'],
                                      'This method is called when there is the remote possibility\n        that we ever need to stop in this function.'),
                                     ('user_line',
                                      ['frame'],
                                      'This function is called when we stop or break at this line.'),
                                     ('bp_commands',
                                      ['frame'],
                                      'Call every command that was set for the current active breakpoint\n        (if there is one).\n\n        Returns True if the normal interaction function must be called,\n        False otherwise.'),
                                     ('user_return',
                                      ['frame', 'return_value'],
                                      'This function is called when a return trap is set here.'),
                                     ('user_exception',
                                      ['frame', 'exc_info'],
                                      'This function is called if an exception occurs,\n        but only if we are to stop at or just below this level.'),
                                     ('interaction', ['frame', 'traceback'], ''),
                                     ('displayhook',
                                      ['obj'],
                                      'Custom displayhook for the exec in default(), which prevents\n        assignment of the _ variable in the builtins.\n        '),
                                     ('default', ['line'], ''),
                                     ('precmd',
                                      ['line'],
                                      "Handle alias expansion and ';;' separator."),
                                     ('onecmd',
                                      ['line'],
                                      'Interpret the argument as though it had been typed in response\n        to the prompt.\n\n        Checks whether this line is typed at the normal prompt or in\n        a breakpoint command list definition.\n        '),
                                     ('handle_command_def',
                                      ['line'],
                                      'Handles one command line during command list definition.'),
                                     ('do_commands',
                                      ['arg'],
                                      'Defines a list of commands associated to a breakpoint.\n\n        Those commands will be executed whenever the breakpoint causes\n        the program to stop execution.'),
                                     ('do_break', ['arg', 'temporary=0'], ''),
                                     ('defaultFile', [], 'Produce a reasonable default.'),
                                     ('do_tbreak', ['arg'], ''),
                                     ('lineinfo', ['identifier'], ''),
                                     ('checkline',
                                      ['filename', 'lineno'],
                                      'Check whether specified line seems to be executable.\n\n        Return `lineno` if it is, 0 if not (e.g. a docstring, comment, blank\n        line or EOF). Warning: testing is not comprehensive.\n        '),
                                     ('do_enable', ['arg'], ''),
                                     ('do_disable', ['arg'], ''),
                                     ('do_condition', ['arg'], ''),
                                     ('do_ignore',
                                      ['arg'],
                                      'arg is bp number followed by ignore count.'),
                                     ('do_clear',
                                      ['arg'],
                                      'Three possibilities, tried in this order:\n        clear -> clear all breaks, ask for confirmation\n        clear file:lineno -> clear all breaks at file:lineno\n        clear bpno bpno ... -> clear breakpoints by number'),
                                     ('do_where', ['arg'], ''),
                                     ('do_up', ['arg'], ''),
                                     ('do_down', ['arg'], ''),
                                     ('do_until', ['arg'], ''),
                                     ('do_step', ['arg'], ''),
                                     ('do_next', ['arg'], ''),
                                     ('do_run',
                                      ['arg'],
                                      'Restart program by raising an exception to be caught in the main\n        debugger loop.  If arguments were given, set them in sys.argv.'),
                                     ('do_return', ['arg'], ''),
                                     ('do_continue', ['arg'], ''),
                                     ('do_jump', ['arg'], ''),
                                     ('do_debug', ['arg'], ''),
                                     ('do_quit', ['arg'], ''),
                                     ('do_EOF', ['arg'], ''),
                                     ('do_args', ['arg'], ''),
                                     ('do_retval', ['arg'], ''),
                                     ('_getval', ['arg'], ''),
                                     ('do_p', ['arg'], ''),
                                     ('do_pp', ['arg'], ''),
                                     ('do_list', ['arg'], ''),
                                     ('do_whatis', ['arg'], ''),
                                     ('do_alias', ['arg'], ''),
                                     ('do_unalias', ['arg'], ''),
                                     ('print_stack_trace', [], ''),
                                     ('print_stack_entry',
                                      ['frame_lineno', 'prompt_prefix=line_prefix'],
                                      ''),
                                     ('help_help', [], ''),
                                     ('help_h', [], ''),
                                     ('help_where', [], ''),
                                     ('help_w', [], ''),
                                     ('help_down', [], ''),
                                     ('help_d', [], ''),
                                     ('help_up', [], ''),
                                     ('help_u', [], ''),
                                     ('help_break', [], ''),
                                     ('help_b', [], ''),
                                     ('help_clear', [], ''),
                                     ('help_cl', [], ''),
                                     ('help_tbreak', [], ''),
                                     ('help_enable', [], ''),
                                     ('help_disable', [], ''),
                                     ('help_ignore', [], ''),
                                     ('help_condition', [], ''),
                                     ('help_step', [], ''),
                                     ('help_s', [], ''),
                                     ('help_until', [], ''),
                                     ('help_unt', [], ''),
                                     ('help_next', [], ''),
                                     ('help_n', [], ''),
                                     ('help_return', [], ''),
                                     ('help_r', [], ''),
                                     ('help_continue', [], ''),
                                     ('help_cont', [], ''),
                                     ('help_c', [], ''),
                                     ('help_jump', [], ''),
                                     ('help_j', [], ''),
                                     ('help_debug', [], ''),
                                     ('help_list', [], ''),
                                     ('help_l', [], ''),
                                     ('help_args', [], ''),
                                     ('help_a', [], ''),
                                     ('help_p', [], ''),
                                     ('help_pp', [], ''),
                                     ('help_exec', [], ''),
                                     ('help_run', [], ''),
                                     ('help_quit', [], ''),
                                     ('help_q', [], ''),
                                     ('help_whatis', [], ''),
                                     ('help_EOF', [], ''),
                                     ('help_alias', [], ''),
                                     ('help_unalias', [], ''),
                                     ('help_commands', [], ''),
                                     ('help_pdb', [], ''),
                                     ('lookupmodule',
                                      ['filename'],
                                      'Helper function for break/clear parsing -- may be overridden.\n\n        lookupmodule() translates (possibly incomplete) file or module name\n        into an absolute file name.\n        '),
                                     ('_runscript', ['filename'], '')],
                         'properties': ['use_rawinput',
                                        'prompt',
                                        'aliases',
                                        'mainpyfile',
                                        '_wait_for_mainpyfile',
                                        'rcLines',
                                        'commands',
                                        'commands_doprompt',
                                        'commands_silent',
                                        'commands_defining',
                                        'commands_bnum',
                                        'lineno',
                                        'stack',
                                        'curindex',
                                        'curframe',
                                        'curframe_locals',
                                        'currentbp',
                                        'lastcmd',
                                        'cmdqueue',
                                        'do_h',
                                        'do_b',
                                        'do_cl',
                                        'do_w',
                                        'do_bt',
                                        'do_u',
                                        'do_d',
                                        'do_unt',
                                        'do_s',
                                        'do_n',
                                        'do_restart',
                                        'do_r',
                                        'do_c',
                                        'do_cont',
                                        'do_j',
                                        '_user_requested_quit',
                                        'do_q',
                                        'do_exit',
                                        'do_a',
                                        'do_rv',
                                        'do_l',
                                        'commands_resuming',
                                        'help_bt',
                                        'help_restart',
                                        'help_exit']},
             'pdb.Restart': {'bases': ['Exception'],
                             'constructor': [],
                             'docstring': 'Causes a debugger to be restarted for the debugged python program.',
                             'methods': [],
                             'properties': []},
             'pickle.PickleError': {'bases': ['Exception'],
                                    'constructor': [],
                                    'docstring': 'A common base class for the other pickling exceptions.',
                                    'methods': [],
                                    'properties': []},
             'pickle.Pickler': {'bases': [],
                                'constructor': ['file', 'protocol=None'],
                                'docstring': '',
                                'methods': [('clear_memo',
                                             [],
                                             'Clears the pickler\'s "memo".\n\n        The memo is the data structure that remembers which objects the\n        pickler has already seen, so that shared or recursive objects are\n        pickled by reference and not by value.  This method is useful when\n        re-using picklers.\n\n        '),
                                            ('dump',
                                             ['obj'],
                                             'Write a pickled representation of obj to the open file.'),
                                            ('memoize',
                                             ['obj'],
                                             'Store an object in the memo.'),
                                            ('put', ['i', 'pack=struct.pack'], ''),
                                            ('get', ['i', 'pack=struct.pack'], ''),
                                            ('save', ['obj'], ''),
                                            ('persistent_id', ['obj'], ''),
                                            ('save_pers', ['pid'], ''),
                                            ('save_reduce',
                                             ['func',
                                              'args',
                                              'state=None',
                                              'listitems=None',
                                              'dictitems=None',
                                              'obj=None'],
                                             ''),
                                            ('save_none', ['obj'], ''),
                                            ('save_bool', ['obj'], ''),
                                            ('save_int', ['obj', 'pack=struct.pack'], ''),
                                            ('save_long', ['obj', 'pack=struct.pack'], ''),
                                            ('save_float', ['obj', 'pack=struct.pack'], ''),
                                            ('save_string', ['obj', 'pack=struct.pack'], ''),
                                            ('save_unicode', ['obj', 'pack=struct.pack'], ''),
                                            ('save_tuple', ['obj'], ''),
                                            ('save_empty_tuple', ['obj'], ''),
                                            ('save_list', ['obj'], ''),
                                            ('_batch_appends', ['items'], ''),
                                            ('save_dict', ['obj'], ''),
                                            ('_batch_setitems', ['items'], ''),
                                            ('save_inst', ['obj'], ''),
                                            ('save_global',
                                             ['obj', 'name=None', 'pack=struct.pack'],
                                             '')],
                                'properties': ['write',
                                               'memo',
                                               'proto',
                                               'bin',
                                               'fast',
                                               'dispatch',
                                               '_BATCHSIZE']},
             'pickle.PicklingError': {'bases': ['pickle.PickleError'],
                                      'constructor': [],
                                      'docstring': 'This exception is raised when an unpicklable object is passed to the\n    dump() method.\n\n    ',
                                      'methods': [],
                                      'properties': []},
             'pickle.Unpickler': {'bases': [],
                                  'constructor': ['file'],
                                  'docstring': '',
                                  'methods': [('load',
                                               [],
                                               'Read a pickled object representation from the open file.\n\n        Return the reconstituted object hierarchy specified in the file.\n        '),
                                              ('marker', [], ''),
                                              ('load_eof', [], ''),
                                              ('load_proto', [], ''),
                                              ('load_persid', [], ''),
                                              ('load_binpersid', [], ''),
                                              ('load_none', [], ''),
                                              ('load_false', [], ''),
                                              ('load_true', [], ''),
                                              ('load_int', [], ''),
                                              ('load_binint', [], ''),
                                              ('load_binint1', [], ''),
                                              ('load_binint2', [], ''),
                                              ('load_long', [], ''),
                                              ('load_long1', [], ''),
                                              ('load_long4', [], ''),
                                              ('load_float', [], ''),
                                              ('load_binfloat', ['unpack=struct.unpack'], ''),
                                              ('load_string', [], ''),
                                              ('load_binstring', [], ''),
                                              ('load_unicode', [], ''),
                                              ('load_binunicode', [], ''),
                                              ('load_short_binstring', [], ''),
                                              ('load_tuple', [], ''),
                                              ('load_empty_tuple', [], ''),
                                              ('load_tuple1', [], ''),
                                              ('load_tuple2', [], ''),
                                              ('load_tuple3', [], ''),
                                              ('load_empty_list', [], ''),
                                              ('load_empty_dictionary', [], ''),
                                              ('load_list', [], ''),
                                              ('load_dict', [], ''),
                                              ('_instantiate', ['klass', 'k'], ''),
                                              ('load_inst', [], ''),
                                              ('load_obj', [], ''),
                                              ('load_newobj', [], ''),
                                              ('load_global', [], ''),
                                              ('load_ext1', [], ''),
                                              ('load_ext2', [], ''),
                                              ('load_ext4', [], ''),
                                              ('get_extension', ['code'], ''),
                                              ('find_class', ['module', 'name'], ''),
                                              ('load_reduce', [], ''),
                                              ('load_pop', [], ''),
                                              ('load_pop_mark', [], ''),
                                              ('load_dup', [], ''),
                                              ('load_get', [], ''),
                                              ('load_binget', [], ''),
                                              ('load_long_binget', [], ''),
                                              ('load_put', [], ''),
                                              ('load_binput', [], ''),
                                              ('load_long_binput', [], ''),
                                              ('load_append', [], ''),
                                              ('load_appends', [], ''),
                                              ('load_setitem', [], ''),
                                              ('load_setitems', [], ''),
                                              ('load_build', [], ''),
                                              ('load_mark', [], ''),
                                              ('load_stop', [], '')],
                                  'properties': ['readline',
                                                 'read',
                                                 'memo',
                                                 'mark',
                                                 'stack',
                                                 'append',
                                                 'dispatch']},
             'pickle.UnpicklingError': {'bases': ['pickle.PickleError'],
                                        'constructor': [],
                                        'docstring': 'This exception is raised when there is a problem unpickling an object,\n    such as a security violation.\n\n    Note that other exceptions may also be raised during unpickling, including\n    (but not necessarily limited to) AttributeError, EOFError, ImportError,\n    and IndexError.\n\n    ',
                                        'methods': [],
                                        'properties': []},
             'pickle._EmptyClass': {'bases': [],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'pickle._Stop': {'bases': ['Exception'],
                              'constructor': ['value'],
                              'docstring': '',
                              'methods': [],
                              'properties': ['value']},
             'pickletools.ArgumentDescriptor': {'bases': ['object'],
                                                'constructor': ['name', 'n', 'reader', 'doc'],
                                                'docstring': '',
                                                'methods': [],
                                                'properties': ['__slots__',
                                                               'name',
                                                               'n',
                                                               'reader',
                                                               'doc']},
             'pickletools.OpcodeInfo': {'bases': ['object'],
                                        'constructor': ['name',
                                                        'code',
                                                        'arg',
                                                        'stack_before',
                                                        'stack_after',
                                                        'proto',
                                                        'doc'],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': ['__slots__',
                                                       'name',
                                                       'code',
                                                       'arg',
                                                       'stack_before',
                                                       'stack_after',
                                                       'proto',
                                                       'doc']},
             'pickletools.StackObject': {'bases': ['object'],
                                         'constructor': ['name', 'obtype', 'doc'],
                                         'docstring': '',
                                         'methods': [('__repr__', [], '')],
                                         'properties': ['__slots__', 'name', 'obtype', 'doc']},
             'pickletools._Example': {'bases': [],
                                      'constructor': ['value'],
                                      'docstring': '',
                                      'methods': [],
                                      'properties': ['value']},
             'pipes.Template': {'bases': [],
                                'constructor': [],
                                'docstring': 'Class representing a pipeline template.',
                                'methods': [('__repr__',
                                             [],
                                             't.__repr__() implements repr(t).'),
                                            ('reset',
                                             [],
                                             't.reset() restores a pipeline template to its initial state.'),
                                            ('clone',
                                             [],
                                             't.clone() returns a new pipeline template with identical\n        initial state as the current one.'),
                                            ('debug',
                                             ['flag'],
                                             't.debug(flag) turns debugging on or off.'),
                                            ('append',
                                             ['cmd', 'kind'],
                                             't.append(cmd, kind) adds a new step at the end.'),
                                            ('prepend',
                                             ['cmd', 'kind'],
                                             't.prepend(cmd, kind) adds a new step at the front.'),
                                            ('open',
                                             ['file', 'rw'],
                                             't.open(file, rw) returns a pipe or file object open for\n        reading or writing; the file is the other end of the pipeline.'),
                                            ('open_r',
                                             ['file'],
                                             "t.open_r(file) and t.open_w(file) implement\n        t.open(file, 'r') and t.open(file, 'w') respectively."),
                                            ('open_w', ['file'], ''),
                                            ('copy', ['infile', 'outfile'], ''),
                                            ('makepipeline', ['infile', 'outfile'], '')],
                                'properties': ['debugging', 'steps']},
             'pkgutil.ImpImporter': {'bases': [],
                                     'constructor': ['path=None'],
                                     'docstring': 'PEP 302 Importer that wraps Python\'s "classic" import algorithm\n\n    ImpImporter(dirname) produces a PEP 302 importer that searches that\n    directory.  ImpImporter(None) produces a PEP 302 importer that searches\n    the current sys.path, plus any modules that are frozen or built-in.\n\n    Note that ImpImporter does not currently support being used by placement\n    on sys.meta_path.\n    ',
                                     'methods': [('find_module', ['fullname', 'path=None'], ''),
                                                 ('iter_modules', ["prefix=''"], '')],
                                     'properties': ['path']},
             'pkgutil.ImpLoader': {'bases': [],
                                   'constructor': ['fullname', 'file', 'filename', 'etc'],
                                   'docstring': 'PEP 302 Loader that wraps Python\'s "classic" import algorithm\n    ',
                                   'methods': [('load_module', ['fullname'], ''),
                                               ('get_data', ['pathname'], ''),
                                               ('_reopen', [], ''),
                                               ('_fix_name', ['fullname'], ''),
                                               ('is_package', ['fullname'], ''),
                                               ('get_code', ['fullname=None'], ''),
                                               ('get_source', ['fullname=None'], ''),
                                               ('_get_delegate', [], ''),
                                               ('get_filename', ['fullname=None'], '')],
                                   'properties': ['code',
                                                  'source',
                                                  'file',
                                                  'filename',
                                                  'fullname',
                                                  'etc']},
             'platform._popen': {'bases': [],
                                 'constructor': ['cmd', "mode='r'", 'bufsize=None'],
                                 'docstring': " Fairly portable (alternative) popen implementation.\n\n        This is mostly needed in case os.popen() is not available, or\n        doesn't work as advertised, e.g. in Win9X GUI programs like\n        PythonWin or IDLE.\n\n        Writing to the pipe is currently not supported.\n\n    ",
                                 'methods': [('read', [], ''),
                                             ('readlines', [], ''),
                                             ('close',
                                              ['remove=os.unlink', 'error=os.error'],
                                              '')],
                                 'properties': ['tmpfile', 'pipe', 'bufsize', 'mode', '__del__']},
             'plistlib.Data': {'bases': [],
                               'constructor': ['data'],
                               'docstring': 'Wrapper for binary data.',
                               'methods': [('fromBase64', ['data'], ''),
                                           ('asBase64', ['maxlinelength=76'], ''),
                                           ('__cmp__', ['other'], ''),
                                           ('__repr__', [], '')],
                               'properties': ['data', 'fromBase64']},
             'plistlib.Dict': {'bases': ['plistlib._InternalDict'],
                               'constructor': ['**kwargs'],
                               'docstring': '',
                               'methods': [],
                               'properties': []},
             'plistlib.DumbXMLWriter': {'bases': [],
                                        'constructor': ['file', 'indentLevel=0', "indent='\\t'"],
                                        'docstring': '',
                                        'methods': [('beginElement', ['element'], ''),
                                                    ('endElement', ['element'], ''),
                                                    ('simpleElement',
                                                     ['element', 'value=None'],
                                                     ''),
                                                    ('writeln', ['line'], '')],
                                        'properties': ['file', 'stack', 'indentLevel', 'indent']},
             'plistlib.Plist': {'bases': ['plistlib._InternalDict'],
                                'constructor': ['**kwargs'],
                                'docstring': 'This class has been deprecated. Use readPlist() and writePlist()\n    functions instead, together with regular dict objects.\n    ',
                                'methods': [('fromFile',
                                             ['pathOrFile'],
                                             'Deprecated. Use the readPlist() function instead.'),
                                            ('write',
                                             ['pathOrFile'],
                                             'Deprecated. Use the writePlist() function instead.')],
                                'properties': ['fromFile']},
             'plistlib.PlistParser': {'bases': [],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('parse', ['fileobj'], ''),
                                                  ('handleBeginElement',
                                                   ['element', 'attrs'],
                                                   ''),
                                                  ('handleEndElement', ['element'], ''),
                                                  ('handleData', ['data'], ''),
                                                  ('addObject', ['value'], ''),
                                                  ('getData', [], ''),
                                                  ('begin_dict', ['attrs'], ''),
                                                  ('end_dict', [], ''),
                                                  ('end_key', [], ''),
                                                  ('begin_array', ['attrs'], ''),
                                                  ('end_array', [], ''),
                                                  ('end_true', [], ''),
                                                  ('end_false', [], ''),
                                                  ('end_integer', [], ''),
                                                  ('end_real', [], ''),
                                                  ('end_string', [], ''),
                                                  ('end_data', [], ''),
                                                  ('end_date', [], '')],
                                      'properties': ['stack', 'currentKey', 'root', 'data']},
             'plistlib.PlistWriter': {'bases': ['plistlib.DumbXMLWriter'],
                                      'constructor': ['file',
                                                      'indentLevel=0',
                                                      "indent='\\t'",
                                                      'writeHeader=1'],
                                      'docstring': '',
                                      'methods': [('writeValue', ['value'], ''),
                                                  ('writeData', ['data'], ''),
                                                  ('writeDict', ['d'], ''),
                                                  ('writeArray', ['array'], '')],
                                      'properties': []},
             'plistlib._InternalDict': {'bases': ['dict'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('__getattr__', ['attr'], ''),
                                                    ('__setattr__', ['attr', 'value'], ''),
                                                    ('__delattr__', ['attr'], '')],
                                        'properties': []},
             'popen2.Popen3': {'bases': [],
                               'constructor': ['cmd', 'capturestderr=False', 'bufsize=-1'],
                               'docstring': 'Class representing a child process.  Normally, instances are created\n    internally by the functions popen2() and popen3().',
                               'methods': [('__del__', [], ''),
                                           ('_run_child', ['cmd'], ''),
                                           ('poll',
                                            ['_deadstate=None'],
                                            "Return the exit status of the child process if it has finished,\n        or -1 if it hasn't finished yet."),
                                           ('wait',
                                            [],
                                            'Wait for and return the exit status of the child process.')],
                               'properties': ['sts',
                                              'cmd',
                                              'pid',
                                              'tochild',
                                              'fromchild',
                                              'childerr']},
             'popen2.Popen4': {'bases': ['popen2.Popen3'],
                               'constructor': ['cmd', 'bufsize=-1'],
                               'docstring': '',
                               'methods': [],
                               'properties': ['childerr', 'cmd', 'pid', 'tochild', 'fromchild']},
             'poplib.POP3': {'bases': [],
                             'constructor': ['host',
                                             'port=POP3_PORT',
                                             'timeout=socket._GLOBAL_DEFAULT_TIMEOUT'],
                             'docstring': "This class supports both the minimal and optional command sets.\n    Arguments can be strings or integers (where appropriate)\n    (e.g.: retr(1) and retr('1') both work equally well.\n\n    Minimal Command Set:\n            USER name               user(name)\n            PASS string             pass_(string)\n            STAT                    stat()\n            LIST [msg]              list(msg = None)\n            RETR msg                retr(msg)\n            DELE msg                dele(msg)\n            NOOP                    noop()\n            RSET                    rset()\n            QUIT                    quit()\n\n    Optional Commands (some servers support these):\n            RPOP name               rpop(name)\n            APOP name digest        apop(name, digest)\n            TOP msg n               top(msg, n)\n            UIDL [msg]              uidl(msg = None)\n\n    Raises one exception: 'error_proto'.\n\n    Instantiate with:\n            POP3(hostname, port=110)\n\n    NB:     the POP protocol locks the mailbox from user\n            authorization until QUIT, so be sure to get in, suck\n            the messages, and quit, each time you access the\n            mailbox.\n\n            POP is a line-based protocol, which means large mail\n            messages consume lots of python cycles reading them\n            line-by-line.\n\n            If it's available on your mail server, use IMAP4\n            instead, it doesn't suffer from the two problems\n            above.\n    ",
                             'methods': [('_putline', ['line'], ''),
                                         ('_putcmd', ['line'], ''),
                                         ('_getline', [], ''),
                                         ('_getresp', [], ''),
                                         ('_getlongresp', [], ''),
                                         ('_shortcmd', ['line'], ''),
                                         ('_longcmd', ['line'], ''),
                                         ('getwelcome', [], ''),
                                         ('set_debuglevel', ['level'], ''),
                                         ('user',
                                          ['user'],
                                          'Send user name, return response\n\n        (should indicate password required).\n        '),
                                         ('pass_',
                                          ['pswd'],
                                          "Send password, return response\n\n        (response includes message count, mailbox size).\n\n        NB: mailbox is locked by server from here to 'quit()'\n        "),
                                         ('stat',
                                          [],
                                          'Get mailbox status.\n\n        Result is tuple of 2 ints (message count, mailbox size)\n        '),
                                         ('list',
                                          ['which=None'],
                                          'Request listing, return result.\n\n        Result without a message number argument is in form\n        [\'response\', [\'mesg_num octets\', ...], octets].\n\n        Result when a message number argument is given is a\n        single response: the "scan listing" for that message.\n        '),
                                         ('retr',
                                          ['which'],
                                          "Retrieve whole message number 'which'.\n\n        Result is in form ['response', ['line', ...], octets].\n        "),
                                         ('dele',
                                          ['which'],
                                          "Delete message number 'which'.\n\n        Result is 'response'.\n        "),
                                         ('noop',
                                          [],
                                          'Does nothing.\n\n        One supposes the response indicates the server is alive.\n        '),
                                         ('rset',
                                          [],
                                          'Unmark all messages marked for deletion.'),
                                         ('quit',
                                          [],
                                          'Signoff: commit changes on server, unlock mailbox, close connection.'),
                                         ('rpop', ['user'], 'Not sure what this does.'),
                                         ('apop',
                                          ['user', 'secret'],
                                          "Authorisation\n\n        - only possible if server has supplied a timestamp in initial greeting.\n\n        Args:\n                user    - mailbox user;\n                secret  - secret shared between client and server.\n\n        NB: mailbox is locked by server from here to 'quit()'\n        "),
                                         ('top',
                                          ['which', 'howmuch'],
                                          "Retrieve message header of message number 'which'\n        and first 'howmuch' lines of message body.\n\n        Result is in form ['response', ['line', ...], octets].\n        "),
                                         ('uidl',
                                          ['which=None'],
                                          "Return message digest (unique id) list.\n\n        If 'which', result contains unique id for that message\n        in the form 'response mesgnum uid', otherwise result is\n        the list ['response', ['mesgnum uid', ...], octets]\n        ")],
                             'properties': ['host',
                                            'port',
                                            'sock',
                                            'file',
                                            '_debugging',
                                            'welcome',
                                            'timestamp']},
             'poplib.POP3_SSL': {'bases': ['poplib.POP3'],
                                 'constructor': ['host',
                                                 'port=POP3_SSL_PORT',
                                                 'keyfile=None',
                                                 'certfile=None'],
                                 'docstring': 'POP3 client class over SSL connection\n\n        Instantiate with: POP3_SSL(hostname, port=995, keyfile=None, certfile=None)\n\n               hostname - the hostname of the pop3 over ssl server\n               port - port number\n               keyfile - PEM formatted file that countains your private key\n               certfile - PEM formatted certificate chain file\n\n            See the methods of the parent class POP3 for more documentation.\n        ',
                                 'methods': [('_fillBuffer', [], ''),
                                             ('_getline', [], ''),
                                             ('_putline', ['line'], ''),
                                             ('quit',
                                              [],
                                              'Signoff: commit changes on server, unlock mailbox, close connection.')],
                                 'properties': ['host',
                                                'port',
                                                'keyfile',
                                                'certfile',
                                                'buffer',
                                                'sock',
                                                'file',
                                                'sslobj',
                                                '_debugging',
                                                'welcome']},
             'poplib.error_proto': {'bases': ['Exception'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'posixfile._posixfile_': {'bases': [],
                                       'constructor': [],
                                       'docstring': 'File wrapper class that provides extra POSIX file routines.',
                                       'methods': [('__repr__', [], ''),
                                                   ('open',
                                                    ['name', "mode='r'", 'bufsize=-1'],
                                                    ''),
                                                   ('fileopen', ['file'], ''),
                                                   ('file', [], ''),
                                                   ('dup', [], ''),
                                                   ('dup2', ['fd'], ''),
                                                   ('flags', ['*which'], ''),
                                                   ('lock', ['how', '*args'], '')],
                                       'properties': ['states', '_file_']},
             'pprint.PrettyPrinter': {'bases': [],
                                      'constructor': ['indent=1',
                                                      'width=80',
                                                      'depth=None',
                                                      'stream=None'],
                                      'docstring': '',
                                      'methods': [('pprint', ['object'], ''),
                                                  ('pformat', ['object'], ''),
                                                  ('isrecursive', ['object'], ''),
                                                  ('isreadable', ['object'], ''),
                                                  ('_format',
                                                   ['object',
                                                    'stream',
                                                    'indent',
                                                    'allowance',
                                                    'context',
                                                    'level'],
                                                   ''),
                                                  ('_repr', ['object', 'context', 'level'], ''),
                                                  ('format',
                                                   ['object', 'context', 'maxlevels', 'level'],
                                                   "Format object for a specific context, returning a string\n        and flags indicating whether the representation is 'readable'\n        and whether the object represents a recursive construct.\n        ")],
                                      'properties': ['_depth',
                                                     '_indent_per_level',
                                                     '_width',
                                                     '_stream',
                                                     '_recursive',
                                                     '_readable']},
             'py_compile.PyCompileError': {'bases': ['Exception'],
                                           'constructor': ['exc_type',
                                                           'exc_value',
                                                           'file',
                                                           "msg=''"],
                                           'docstring': "Exception raised when an error occurs while attempting to\n    compile the file.\n\n    To raise this exception, use\n\n        raise PyCompileError(exc_type,exc_value,file[,msg])\n\n    where\n\n        exc_type:   exception type to be used in error message\n                    type name can be accesses as class variable\n                    'exc_type_name'\n\n        exc_value:  exception value to be used in error message\n                    can be accesses as class variable 'exc_value'\n\n        file:       name of file being compiled to be used in error message\n                    can be accesses as class variable 'file'\n\n        msg:        string message to be written as error message\n                    If no value is given, a default exception message will be given,\n                    consistent with 'standard' py_compile output.\n                    message (or default) can be accesses as class variable 'msg'\n\n    ",
                                           'methods': [('__str__', [], '')],
                                           'properties': ['exc_type_name',
                                                          'exc_value',
                                                          'file',
                                                          'msg']},
             'pyclbr.Class': {'bases': [],
                              'constructor': ['module', 'name', 'super', 'file', 'lineno'],
                              'docstring': 'Class to represent a Python class.',
                              'methods': [('_addmethod', ['name', 'lineno'], '')],
                              'properties': ['module',
                                             'name',
                                             'super',
                                             'methods',
                                             'file',
                                             'lineno']},
             'pyclbr.Function': {'bases': [],
                                 'constructor': ['module', 'name', 'file', 'lineno'],
                                 'docstring': 'Class to represent a top-level Python function',
                                 'methods': [],
                                 'properties': ['module', 'name', 'file', 'lineno']},
             'pydoc.Doc': {'bases': [],
                           'constructor': [],
                           'docstring': '',
                           'methods': [('document',
                                        ['object', 'name=None', '*args'],
                                        'Generate documentation for an object.'),
                                       ('fail',
                                        ['object', 'name=None', '*args'],
                                        'Raise an exception for unimplemented types.'),
                                       ('getdocloc',
                                        ['object'],
                                        'Return the location of module docs or None')],
                           'properties': ['docmodule',
                                          'docclass',
                                          'docroutine',
                                          'docother',
                                          'docproperty',
                                          'docdata']},
             'pydoc.ErrorDuringImport': {'bases': ['Exception'],
                                         'constructor': ['filename', 'exc_info'],
                                         'docstring': 'Errors that occurred while trying to import something to document it.',
                                         'methods': [('__str__', [], '')],
                                         'properties': ['filename', 'exc', 'value', 'tb']},
             'pydoc.HTMLDoc': {'bases': ['pydoc.Doc'],
                               'constructor': [],
                               'docstring': 'Formatter class for HTML documentation.',
                               'methods': [('page',
                                            ['title', 'contents'],
                                            'Format an HTML page.'),
                                           ('heading',
                                            ['title', 'fgcol', 'bgcol', "extras=''"],
                                            'Format a page heading.'),
                                           ('section',
                                            ['title',
                                             'fgcol',
                                             'bgcol',
                                             'contents',
                                             'width=6',
                                             "prelude=''",
                                             'marginalia=None',
                                             "gap='&nbsp;'"],
                                            'Format a section with a heading.'),
                                           ('bigsection',
                                            ['title', '*args'],
                                            'Format a section with a big heading.'),
                                           ('preformat',
                                            ['text'],
                                            'Format literal preformatted text.'),
                                           ('multicolumn',
                                            ['list', 'format', 'cols=4'],
                                            'Format a list of items into a multi-column list.'),
                                           ('grey', ['text'], ''),
                                           ('namelink',
                                            ['name', '*dicts'],
                                            'Make a link for an identifier, given name-to-URL mappings.'),
                                           ('classlink',
                                            ['object', 'modname'],
                                            'Make a link for a class.'),
                                           ('modulelink',
                                            ['object'],
                                            'Make a link for a module.'),
                                           ('modpkglink',
                                            ['data'],
                                            'Make a link for a module or package to display in an index.'),
                                           ('markup',
                                            ['text',
                                             'escape=None',
                                             'funcs={}',
                                             'classes={}',
                                             'methods={}'],
                                            'Mark up some plain text, given a context of symbols to look for.\n        Each context dictionary maps object names to anchor names.'),
                                           ('formattree',
                                            ['tree', 'modname', 'parent=None'],
                                            'Produce HTML for a class tree as given by inspect.getclasstree().'),
                                           ('docmodule',
                                            ['object', 'name=None', 'mod=None', '*ignored'],
                                            'Produce HTML documentation for a module object.'),
                                           ('docclass',
                                            ['object',
                                             'name=None',
                                             'mod=None',
                                             'funcs={}',
                                             'classes={}',
                                             '*ignored'],
                                            'Produce HTML documentation for a class object.'),
                                           ('formatvalue',
                                            ['object'],
                                            'Format an argument default value as text.'),
                                           ('docroutine',
                                            ['object',
                                             'name=None',
                                             'mod=None',
                                             'funcs={}',
                                             'classes={}',
                                             'methods={}',
                                             'cl=None'],
                                            'Produce HTML documentation for a function or method object.'),
                                           ('_docdescriptor', ['name', 'value', 'mod'], ''),
                                           ('docproperty',
                                            ['object', 'name=None', 'mod=None', 'cl=None'],
                                            'Produce html documentation for a property.'),
                                           ('docother',
                                            ['object', 'name=None', 'mod=None', '*ignored'],
                                            'Produce HTML documentation for a data object.'),
                                           ('docdata',
                                            ['object', 'name=None', 'mod=None', 'cl=None'],
                                            'Produce html documentation for a data descriptor.'),
                                           ('index',
                                            ['dir', 'shadowed=None'],
                                            'Generate an HTML index for a directory of modules.')],
                               'properties': ['_repr_instance', 'repr', 'escape']},
             'pydoc.HTMLRepr': {'bases': ['repr.Repr'],
                                'constructor': [],
                                'docstring': 'Class for safely making an HTML representation of a Python object.',
                                'methods': [('escape', ['text'], ''),
                                            ('repr', ['object'], ''),
                                            ('repr1', ['x', 'level'], ''),
                                            ('repr_string', ['x', 'level'], ''),
                                            ('repr_instance', ['x', 'level'], '')],
                                'properties': ['maxlist',
                                               'maxtuple',
                                               'maxdict',
                                               'maxstring',
                                               'maxother',
                                               'repr_str',
                                               'repr_unicode']},
             'pydoc.Helper': {'bases': [],
                              'constructor': ['input=None', 'output=None'],
                              'docstring': '',
                              'methods': [('__repr__', [], ''),
                                          ('__call__', ['request=_GoInteractive'], ''),
                                          ('interact', [], ''),
                                          ('getline',
                                           ['prompt'],
                                           'Read one line, using raw_input when available.'),
                                          ('help', ['request'], ''),
                                          ('intro', [], ''),
                                          ('list', ['items', 'columns=4', 'width=80'], ''),
                                          ('listkeywords', [], ''),
                                          ('listsymbols', [], ''),
                                          ('listtopics', [], ''),
                                          ('showtopic', ['topic', "more_xrefs=''"], ''),
                                          ('showsymbol', ['symbol'], ''),
                                          ('listmodules', ["key=''"], '')],
                              'properties': ['keywords',
                                             '_symbols_inverse',
                                             'symbols',
                                             'topic',
                                             'symbols_',
                                             'symbol',
                                             'topics',
                                             '_input',
                                             '_output',
                                             'input',
                                             'output',
                                             '_GoInteractive']},
             'pydoc.ModuleScanner': {'bases': [],
                                     'constructor': [],
                                     'docstring': 'An interruptible scanner that searches module synopses.',
                                     'methods': [('run',
                                                  ['callback',
                                                   'key=None',
                                                   'completer=None',
                                                   'onerror=None'],
                                                  '')],
                                     'properties': ['quit']},
             'pydoc.Scanner': {'bases': [],
                               'constructor': ['roots', 'children', 'descendp'],
                               'docstring': 'A generic tree iterator.',
                               'methods': [('next', [], '')],
                               'properties': ['roots', 'state', 'children', 'descendp']},
             'pydoc.TextDoc': {'bases': ['pydoc.Doc'],
                               'constructor': [],
                               'docstring': 'Formatter class for text documentation.',
                               'methods': [('bold',
                                            ['text'],
                                            'Format a string in bold by overstriking.'),
                                           ('indent',
                                            ['text', "prefix='    '"],
                                            'Indent text by prepending a given prefix to each line.'),
                                           ('section',
                                            ['title', 'contents'],
                                            'Format a section with a given heading.'),
                                           ('formattree',
                                            ['tree', 'modname', 'parent=None', "prefix=''"],
                                            'Render in text a class tree as returned by inspect.getclasstree().'),
                                           ('docmodule',
                                            ['object', 'name=None', 'mod=None'],
                                            'Produce text documentation for a given module object.'),
                                           ('docclass',
                                            ['object', 'name=None', 'mod=None'],
                                            'Produce text documentation for a given class object.'),
                                           ('formatvalue',
                                            ['object'],
                                            'Format an argument default value as text.'),
                                           ('docroutine',
                                            ['object', 'name=None', 'mod=None', 'cl=None'],
                                            'Produce text documentation for a function or method object.'),
                                           ('_docdescriptor', ['name', 'value', 'mod'], ''),
                                           ('docproperty',
                                            ['object', 'name=None', 'mod=None', 'cl=None'],
                                            'Produce text documentation for a property.'),
                                           ('docdata',
                                            ['object', 'name=None', 'mod=None', 'cl=None'],
                                            'Produce text documentation for a data descriptor.'),
                                           ('docother',
                                            ['object',
                                             'name=None',
                                             'mod=None',
                                             'parent=None',
                                             'maxlen=None',
                                             'doc=None'],
                                            'Produce text documentation for a data object.')],
                               'properties': ['_repr_instance', 'repr']},
             'pydoc.TextRepr': {'bases': ['repr.Repr'],
                                'constructor': [],
                                'docstring': 'Class for safely making a text representation of a Python object.',
                                'methods': [('repr1', ['x', 'level'], ''),
                                            ('repr_string', ['x', 'level'], ''),
                                            ('repr_instance', ['x', 'level'], '')],
                                'properties': ['maxlist',
                                               'maxtuple',
                                               'maxdict',
                                               'maxstring',
                                               'maxother',
                                               'repr_str']},
             'pydoc._OldStyleClass': {'bases': [],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [],
                                      'properties': []},
             'pydoc.deque': {'bases': ['list'],
                             'constructor': [],
                             'docstring': '',
                             'methods': [('popleft', [], '')],
                             'properties': []},
             'random.Random': {'bases': ['_random.Random'],
                               'constructor': ['x=None'],
                               'docstring': "Random number generator base class used by bound module functions.\n\n    Used to instantiate instances of Random to get generators that don't\n    share state.  Especially useful for multi-threaded programs, creating\n    a different instance of Random for each thread, and using the jumpahead()\n    method to ensure that the generated sequences seen by each thread don't\n    overlap.\n\n    Class Random can also be subclassed if you want to use a different basic\n    generator of your own devising: in that case, override the following\n    methods: random(), seed(), getstate(), setstate() and jumpahead().\n    Optionally, implement a getrandbits() method so that randrange() can cover\n    arbitrarily large ranges.\n\n    ",
                               'methods': [('seed',
                                            ['a=None'],
                                            'Initialize internal state from hashable object.\n\n        None or no argument seeds from current time or from an operating\n        system specific randomness source if available.\n\n        If a is not None or an int or long, hash(a) is used instead.\n        '),
                                           ('getstate',
                                            [],
                                            'Return internal state; can be passed to setstate() later.'),
                                           ('setstate',
                                            ['state'],
                                            'Restore internal state from object returned by getstate().'),
                                           ('jumpahead',
                                            ['n'],
                                            'Change the internal state to one that is likely far away\n        from the current state.  This method will not be in Py3.x,\n        so it is better to simply reseed.\n        '),
                                           ('__getstate__', [], ''),
                                           ('__setstate__', ['state'], ''),
                                           ('__reduce__', [], ''),
                                           ('randrange',
                                            ['start',
                                             'stop=None',
                                             'step=1',
                                             'int=int',
                                             'default=None',
                                             'maxwidth=1<<BPF'],
                                            "Choose a random item from range(start, stop[, step]).\n\n        This fixes the problem with randint() which includes the\n        endpoint; in Python this is usually not what you want.\n        Do not supply the 'int', 'default', and 'maxwidth' arguments.\n        "),
                                           ('randint',
                                            ['a', 'b'],
                                            'Return random integer in range [a, b], including both end points.\n        '),
                                           ('_randbelow',
                                            ['n',
                                             '_log=_log',
                                             'int=int',
                                             '_maxwidth=1<<BPF',
                                             '_Method=_MethodType',
                                             '_BuiltinMethod=_BuiltinMethodType'],
                                            'Return a random int in the range [0,n)\n\n        Handles the case where n has more bits than returned\n        by a single call to the underlying generator.\n        '),
                                           ('choice',
                                            ['seq'],
                                            'Choose a random element from a non-empty sequence.'),
                                           ('shuffle',
                                            ['x', 'random=None', 'int=int'],
                                            'x, random=random.random -> shuffle list x in place; return None.\n\n        Optional arg random is a 0-argument function returning a random\n        float in [0.0, 1.0); by default, the standard random.random.\n        '),
                                           ('sample',
                                            ['population', 'k'],
                                            'Chooses k unique random elements from a population sequence.\n\n        Returns a new list containing elements from the population while\n        leaving the original population unchanged.  The resulting list is\n        in selection order so that all sub-slices will also be valid random\n        samples.  This allows raffle winners (the sample) to be partitioned\n        into grand prize and second place winners (the subslices).\n\n        Members of the population need not be hashable or unique.  If the\n        population contains repeats, then each occurrence is a possible\n        selection in the sample.\n\n        To choose a sample in a range of integers, use xrange as an argument.\n        This is especially fast and space efficient for sampling from a\n        large population:   sample(xrange(10000000), 60)\n        '),
                                           ('uniform',
                                            ['a', 'b'],
                                            'Get a random number in the range [a, b) or [a, b] depending on rounding.'),
                                           ('triangular',
                                            ['low=0.0', 'high=1.0', 'mode=None'],
                                            'Triangular distribution.\n\n        Continuous distribution bounded by given lower and upper limits,\n        and having a given mode value in-between.\n\n        http://en.wikipedia.org/wiki/Triangular_distribution\n\n        '),
                                           ('normalvariate',
                                            ['mu', 'sigma'],
                                            'Normal distribution.\n\n        mu is the mean, and sigma is the standard deviation.\n\n        '),
                                           ('lognormvariate',
                                            ['mu', 'sigma'],
                                            "Log normal distribution.\n\n        If you take the natural logarithm of this distribution, you'll get a\n        normal distribution with mean mu and standard deviation sigma.\n        mu can have any value, and sigma must be greater than zero.\n\n        "),
                                           ('expovariate',
                                            ['lambd'],
                                            'Exponential distribution.\n\n        lambd is 1.0 divided by the desired mean.  It should be\n        nonzero.  (The parameter would be called "lambda", but that is\n        a reserved word in Python.)  Returned values range from 0 to\n        positive infinity if lambd is positive, and from negative\n        infinity to 0 if lambd is negative.\n\n        '),
                                           ('vonmisesvariate',
                                            ['mu', 'kappa'],
                                            'Circular data distribution.\n\n        mu is the mean angle, expressed in radians between 0 and 2*pi, and\n        kappa is the concentration parameter, which must be greater than or\n        equal to zero.  If kappa is equal to zero, this distribution reduces\n        to a uniform random angle over the range 0 to 2*pi.\n\n        '),
                                           ('gammavariate',
                                            ['alpha', 'beta'],
                                            'Gamma distribution.  Not the gamma function!\n\n        Conditions on the parameters are alpha > 0 and beta > 0.\n\n        '),
                                           ('gauss',
                                            ['mu', 'sigma'],
                                            'Gaussian distribution.\n\n        mu is the mean, and sigma is the standard deviation.  This is\n        slightly faster than the normalvariate() function.\n\n        Not thread-safe without a lock around calls.\n\n        '),
                                           ('betavariate',
                                            ['alpha', 'beta'],
                                            'Beta distribution.\n\n        Conditions on the parameters are alpha > 0 and beta > 0.\n        Returned values range between 0 and 1.\n\n        '),
                                           ('paretovariate',
                                            ['alpha'],
                                            'Pareto distribution.  alpha is the shape parameter.'),
                                           ('weibullvariate',
                                            ['alpha', 'beta'],
                                            'Weibull distribution.\n\n        alpha is the scale parameter and beta is the shape parameter.\n\n        ')],
                               'properties': ['VERSION', 'gauss_next']},
             'random.SystemRandom': {'bases': ['random.Random'],
                                     'constructor': [],
                                     'docstring': 'Alternate random number generator using sources provided\n    by the operating system (such as /dev/urandom on Unix or\n    CryptGenRandom on Windows).\n\n     Not available on all systems (see os.urandom() for details).\n    ',
                                     'methods': [('random',
                                                  [],
                                                  'Get the next random number in the range [0.0, 1.0).'),
                                                 ('getrandbits',
                                                  ['k'],
                                                  'getrandbits(k) -> x.  Generates a long int with k random bits.'),
                                                 ('_stub',
                                                  ['*args', '**kwds'],
                                                  'Stub method.  Not used for a system random number generator.'),
                                                 ('_notimplemented',
                                                  ['*args', '**kwds'],
                                                  'Method should not be called for a system random number generator.')],
                                     'properties': ['seed', 'jumpahead', 'getstate', 'setstate']},
             'random.WichmannHill': {'bases': ['random.Random'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('seed',
                                                  ['a=None'],
                                                  'Initialize internal state from hashable object.\n\n        None or no argument seeds from current time or from an operating\n        system specific randomness source if available.\n\n        If a is not None or an int or long, hash(a) is used instead.\n\n        If a is an int or long, a is used directly.  Distinct values between\n        0 and 27814431486575L inclusive are guaranteed to yield distinct\n        internal states (this guarantee is specific to the default\n        Wichmann-Hill generator).\n        '),
                                                 ('random',
                                                  [],
                                                  'Get the next random number in the range [0.0, 1.0).'),
                                                 ('getstate',
                                                  [],
                                                  'Return internal state; can be passed to setstate() later.'),
                                                 ('setstate',
                                                  ['state'],
                                                  'Restore internal state from object returned by getstate().'),
                                                 ('jumpahead',
                                                  ['n'],
                                                  'Act as if n calls to random() were made, but quickly.\n\n        n is an int, greater than or equal to 0.\n\n        Example use:  If you have 2 threads and know that each will\n        consume no more than a million random numbers, create two Random\n        objects r1 and r2, then do\n            r2.setstate(r1.getstate())\n            r2.jumpahead(1000000)\n        Then r1 and r2 will use guaranteed-disjoint segments of the full\n        period.\n        '),
                                                 ('__whseed',
                                                  ['x=0', 'y=0', 'z=0'],
                                                  'Set the Wichmann-Hill seed from (x, y, z).\n\n        These must be integers in the range [0, 256).\n        '),
                                                 ('whseed',
                                                  ['a=None'],
                                                  "Seed from hashable object's hash code.\n\n        None or no argument seeds from current time.  It is not guaranteed\n        that objects with distinct hash codes lead to distinct internal\n        states.\n\n        This is obsolete, provided for compatibility with the seed routine\n        used prior to Python 2.1.  Use the .seed() method instead.\n        ")],
                                     'properties': ['VERSION', '_seed', 'gauss_next']},
             're.Scanner': {'bases': [],
                            'constructor': ['lexicon', 'flags=0'],
                            'docstring': '',
                            'methods': [('scan', ['string'], '')],
                            'properties': ['lexicon', 'scanner', 'match']},
             'repr.Repr': {'bases': [],
                           'constructor': [],
                           'docstring': '',
                           'methods': [('repr', ['x'], ''),
                                       ('repr1', ['x', 'level'], ''),
                                       ('_repr_iterable',
                                        ['x', 'level', 'left', 'right', 'maxiter', "trail=''"],
                                        ''),
                                       ('repr_tuple', ['x', 'level'], ''),
                                       ('repr_list', ['x', 'level'], ''),
                                       ('repr_array', ['x', 'level'], ''),
                                       ('repr_set', ['x', 'level'], ''),
                                       ('repr_frozenset', ['x', 'level'], ''),
                                       ('repr_deque', ['x', 'level'], ''),
                                       ('repr_dict', ['x', 'level'], ''),
                                       ('repr_str', ['x', 'level'], ''),
                                       ('repr_long', ['x', 'level'], ''),
                                       ('repr_instance', ['x', 'level'], '')],
                           'properties': ['maxlevel',
                                          'maxtuple',
                                          'maxlist',
                                          'maxarray',
                                          'maxdict',
                                          'maxset',
                                          'maxfrozenset',
                                          'maxdeque',
                                          'maxstring',
                                          'maxlong',
                                          'maxother']},
             'rexec.FileBase': {'bases': [],
                                'constructor': [],
                                'docstring': '',
                                'methods': [],
                                'properties': ['ok_file_methods']},
             'rexec.FileDelegate': {'bases': ['rexec.FileBase'],
                                    'constructor': ['mod', 'name'],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': ['mod', 'name', 'm']},
             'rexec.FileWrapper': {'bases': ['rexec.FileBase'],
                                   'constructor': ['f'],
                                   'docstring': '',
                                   'methods': [('close', [], '')],
                                   'properties': []},
             'rexec.RExec': {'bases': ['ihooks._Verbose'],
                             'constructor': ['hooks=None', 'verbose=0'],
                             'docstring': 'Basic restricted execution framework.\n\n    Code executed in this restricted environment will only have access to\n    modules and functions that are deemed safe; you can subclass RExec to\n    add or remove capabilities as desired.\n\n    The RExec class can prevent code from performing unsafe operations like\n    reading or writing disk files, or using TCP/IP sockets.  However, it does\n    not protect against code using extremely large amounts of memory or\n    processor time.\n\n    ',
                             'methods': [('set_trusted_path', [], ''),
                                         ('load_dynamic', ['name', 'filename', 'file'], ''),
                                         ('make_initial_modules', [], ''),
                                         ('get_suffixes', [], ''),
                                         ('is_builtin', ['mname'], ''),
                                         ('make_builtin', [], ''),
                                         ('make_main', [], ''),
                                         ('make_osname', [], ''),
                                         ('make_sys', [], ''),
                                         ('copy_except', ['src', 'exceptions'], ''),
                                         ('copy_only', ['src', 'names'], ''),
                                         ('copy_none', ['src'], ''),
                                         ('add_module', ['mname'], ''),
                                         ('r_exec',
                                          ['code'],
                                          "Execute code within a restricted environment.\n\n        The code parameter must either be a string containing one or more\n        lines of Python code, or a compiled code object, which will be\n        executed in the restricted environment's __main__ module.\n\n        "),
                                         ('r_eval',
                                          ['code'],
                                          "Evaluate code within a restricted environment.\n\n        The code parameter must either be a string containing a Python\n        expression, or a compiled code object, which will be evaluated in\n        the restricted environment's __main__ module.  The value of the\n        expression or code object will be returned.\n\n        "),
                                         ('r_execfile',
                                          ['file'],
                                          "Execute the Python code in the file in the restricted\n        environment's __main__ module.\n\n        "),
                                         ('r_import',
                                          ['mname', 'globals={}', 'locals={}', 'fromlist=[]'],
                                          'Import a module, raising an ImportError exception if the module\n        is considered unsafe.\n\n        This method is implicitly called by code executing in the\n        restricted environment.  Overriding this method in a subclass is\n        used to change the policies enforced by a restricted environment.\n\n        '),
                                         ('r_reload',
                                          ['m'],
                                          'Reload the module object, re-parsing and re-initializing it.\n\n        This method is implicitly called by code executing in the\n        restricted environment.  Overriding this method in a subclass is\n        used to change the policies enforced by a restricted environment.\n\n        '),
                                         ('r_unload',
                                          ['m'],
                                          "Unload the module.\n\n        Removes it from the restricted environment's sys.modules dictionary.\n\n        This method is implicitly called by code executing in the\n        restricted environment.  Overriding this method in a subclass is\n        used to change the policies enforced by a restricted environment.\n\n        "),
                                         ('make_delegate_files', [], ''),
                                         ('set_files', [], ''),
                                         ('reset_files', [], ''),
                                         ('save_files', [], ''),
                                         ('restore_files', [], ''),
                                         ('s_apply', ['func', 'args=()', 'kw={}'], ''),
                                         ('s_exec',
                                          ['*args'],
                                          "Execute code within a restricted environment.\n\n        Similar to the r_exec() method, but the code will be granted access\n        to restricted versions of the standard I/O streams sys.stdin,\n        sys.stderr, and sys.stdout.\n\n        The code parameter must either be a string containing one or more\n        lines of Python code, or a compiled code object, which will be\n        executed in the restricted environment's __main__ module.\n\n        "),
                                         ('s_eval',
                                          ['*args'],
                                          "Evaluate code within a restricted environment.\n\n        Similar to the r_eval() method, but the code will be granted access\n        to restricted versions of the standard I/O streams sys.stdin,\n        sys.stderr, and sys.stdout.\n\n        The code parameter must either be a string containing a Python\n        expression, or a compiled code object, which will be evaluated in\n        the restricted environment's __main__ module.  The value of the\n        expression or code object will be returned.\n\n        "),
                                         ('s_execfile',
                                          ['*args'],
                                          "Execute the Python code in the file in the restricted\n        environment's __main__ module.\n\n        Similar to the r_execfile() method, but the code will be granted\n        access to restricted versions of the standard I/O streams sys.stdin,\n        sys.stderr, and sys.stdout.\n\n        "),
                                         ('s_import',
                                          ['*args'],
                                          'Import a module, raising an ImportError exception if the module\n        is considered unsafe.\n\n        This method is implicitly called by code executing in the\n        restricted environment.  Overriding this method in a subclass is\n        used to change the policies enforced by a restricted environment.\n\n        Similar to the r_import() method, but has access to restricted\n        versions of the standard I/O streams sys.stdin, sys.stderr, and\n        sys.stdout.\n\n        '),
                                         ('s_reload',
                                          ['*args'],
                                          'Reload the module object, re-parsing and re-initializing it.\n\n        This method is implicitly called by code executing in the\n        restricted environment.  Overriding this method in a subclass is\n        used to change the policies enforced by a restricted environment.\n\n        Similar to the r_reload() method, but has access to restricted\n        versions of the standard I/O streams sys.stdin, sys.stderr, and\n        sys.stdout.\n\n        '),
                                         ('s_unload',
                                          ['*args'],
                                          "Unload the module.\n\n        Removes it from the restricted environment's sys.modules dictionary.\n\n        This method is implicitly called by code executing in the\n        restricted environment.  Overriding this method in a subclass is\n        used to change the policies enforced by a restricted environment.\n\n        Similar to the r_unload() method, but has access to restricted\n        versions of the standard I/O streams sys.stdin, sys.stderr, and\n        sys.stdout.\n\n        "),
                                         ('r_open',
                                          ['file', "mode='r'", 'buf=-1'],
                                          "Method called when open() is called in the restricted environment.\n\n        The arguments are identical to those of the open() function, and a\n        file object (or a class instance compatible with file objects)\n        should be returned.  RExec's default behaviour is allow opening\n        any file for reading, but forbidding any attempt to write a file.\n\n        This method is implicitly called by code executing in the\n        restricted environment.  Overriding this method in a subclass is\n        used to change the policies enforced by a restricted environment.\n\n        "),
                                         ('r_exc_info', [], '')],
                             'properties': ['ok_path',
                                            'ok_builtin_modules',
                                            'ok_posix_names',
                                            'ok_sys_names',
                                            'nok_builtin_names',
                                            'ok_file_types',
                                            'hooks',
                                            'modules',
                                            'ok_dynamic_modules',
                                            'loader',
                                            'importer',
                                            'trusted_path',
                                            'delegate_stdin',
                                            'delegate_stdout',
                                            'delegate_stderr',
                                            'restricted_stdin',
                                            'restricted_stdout',
                                            'restricted_stderr',
                                            'save_stdin',
                                            'save_stdout',
                                            'save_stderr']},
             'rexec.RHooks': {'bases': ['ihooks.Hooks'],
                              'constructor': ['*args'],
                              'docstring': '',
                              'methods': [('set_rexec', ['rexec'], ''),
                                          ('get_suffixes', [], ''),
                                          ('is_builtin', ['name'], ''),
                                          ('init_builtin', ['name'], ''),
                                          ('init_frozen', ['name'], ''),
                                          ('load_source', ['*args'], ''),
                                          ('load_compiled', ['*args'], ''),
                                          ('load_package', ['*args'], ''),
                                          ('load_dynamic', ['name', 'filename', 'file'], ''),
                                          ('add_module', ['name'], ''),
                                          ('modules_dict', [], ''),
                                          ('default_path', [], '')],
                              'properties': ['rexec']},
             'rfc822.AddressList': {'bases': ['rfc822.AddrlistClass'],
                                    'constructor': ['field'],
                                    'docstring': 'An AddressList encapsulates a list of parsed RFC 2822 addresses.',
                                    'methods': [('__len__', [], ''),
                                                ('__str__', [], ''),
                                                ('__add__', ['other'], ''),
                                                ('__iadd__', ['other'], ''),
                                                ('__sub__', ['other'], ''),
                                                ('__isub__', ['other'], ''),
                                                ('__getitem__', ['index'], '')],
                                    'properties': ['addresslist']},
             'rfc822.AddrlistClass': {'bases': [],
                                      'constructor': ['field'],
                                      'docstring': 'Address parser class by Ben Escoto.\n\n    To understand what this class does, it helps to have a copy of\n    RFC 2822 in front of you.\n\n    http://www.faqs.org/rfcs/rfc2822.html\n\n    Note: this class interface is deprecated and may be removed in the future.\n    Use rfc822.AddressList instead.\n    ',
                                      'methods': [('gotonext',
                                                   [],
                                                   'Parse up to the start of the next address.'),
                                                  ('getaddrlist',
                                                   [],
                                                   'Parse all addresses.\n\n        Returns a list containing all of the addresses.\n        '),
                                                  ('getaddress', [], 'Parse the next address.'),
                                                  ('getrouteaddr',
                                                   [],
                                                   'Parse a route address (Return-path value).\n\n        This method just skips all the route stuff and returns the addrspec.\n        '),
                                                  ('getaddrspec',
                                                   [],
                                                   'Parse an RFC 2822 addr-spec.'),
                                                  ('getdomain',
                                                   [],
                                                   'Get the complete domain name from an address.'),
                                                  ('getdelimited',
                                                   ['beginchar',
                                                    'endchars',
                                                    'allowcomments=1'],
                                                   "Parse a header fragment delimited by special characters.\n\n        `beginchar' is the start character for the fragment.  If self is not\n        looking at an instance of `beginchar' then getdelimited returns the\n        empty string.\n\n        `endchars' is a sequence of allowable end-delimiting characters.\n        Parsing stops when one of these is encountered.\n\n        If `allowcomments' is non-zero, embedded RFC 2822 comments are allowed\n        within the parsed fragment.\n        "),
                                                  ('getquote',
                                                   [],
                                                   "Get a quote-delimited fragment from self's field."),
                                                  ('getcomment',
                                                   [],
                                                   "Get a parenthesis-delimited fragment from self's field."),
                                                  ('getdomainliteral',
                                                   [],
                                                   'Parse an RFC 2822 domain-literal.'),
                                                  ('getatom',
                                                   ['atomends=None'],
                                                   "Parse an RFC 2822 atom.\n\n        Optional atomends specifies a different set of end token delimiters\n        (the default is to use self.atomends).  This is used e.g. in\n        getphraselist() since phrase endings must not include the `.' (which\n        is legal in phrases)."),
                                                  ('getphraselist',
                                                   [],
                                                   'Parse a sequence of RFC 2822 phrases.\n\n        A phrase is a sequence of words, which are in turn either RFC 2822\n        atoms or quoted-strings.  Phrases are canonicalized by squeezing all\n        runs of continuous whitespace into one space.\n        ')],
                                      'properties': ['specials',
                                                     'pos',
                                                     'LWS',
                                                     'CR',
                                                     'atomends',
                                                     'phraseends',
                                                     'field',
                                                     'commentlist']},
             'rfc822.Message': {'bases': [],
                                'constructor': ['fp', 'seekable=1'],
                                'docstring': 'Represents a single RFC 2822-compliant message.',
                                'methods': [('rewindbody',
                                             [],
                                             'Rewind the file to the start of the body (if seekable).'),
                                            ('readheaders',
                                             [],
                                             'Read header lines.\n\n        Read header lines up to the entirely blank line that terminates them.\n        The (normally blank) line that ends the headers is skipped, but not\n        included in the returned list.  If a non-header line ends the headers,\n        (which is an error), an attempt is made to backspace over it; it is\n        never included in the returned list.\n\n        The variable self.status is set to the empty string if all went well,\n        otherwise it is an error message.  The variable self.headers is a\n        completely uninterpreted list of lines contained in the header (so\n        printing them will reproduce the header exactly as it appears in the\n        file).\n        '),
                                            ('isheader',
                                             ['line'],
                                             'Determine whether a given line is a legal header.\n\n        This method should return the header name, suitably canonicalized.\n        You may override this method in order to use Message parsing on tagged\n        data in RFC 2822-like formats with special header formats.\n        '),
                                            ('islast',
                                             ['line'],
                                             "Determine whether a line is a legal end of RFC 2822 headers.\n\n        You may override this method if your application wants to bend the\n        rules, e.g. to strip trailing whitespace, or to recognize MH template\n        separators ('--------').  For convenience (e.g. for code reading from\n        sockets) a line consisting of \r\n also matches.\n        "),
                                            ('iscomment',
                                             ['line'],
                                             'Determine whether a line should be skipped entirely.\n\n        You may override this method in order to use Message parsing on tagged\n        data in RFC 2822-like formats that support embedded comments or\n        free-text data.\n        '),
                                            ('getallmatchingheaders',
                                             ['name'],
                                             'Find all header lines matching a given header name.\n\n        Look through the list of headers and find all lines matching a given\n        header name (and their continuation lines).  A list of the lines is\n        returned, without interpretation.  If the header does not occur, an\n        empty list is returned.  If the header occurs multiple times, all\n        occurrences are returned.  Case is not important in the header name.\n        '),
                                            ('getfirstmatchingheader',
                                             ['name'],
                                             'Get the first header line matching name.\n\n        This is similar to getallmatchingheaders, but it returns only the\n        first matching header (and its continuation lines).\n        '),
                                            ('getrawheader',
                                             ['name'],
                                             'A higher-level interface to getfirstmatchingheader().\n\n        Return a string containing the literal text of the header but with the\n        keyword stripped.  All leading, trailing and embedded whitespace is\n        kept in the string, however.  Return None if the header does not\n        occur.\n        '),
                                            ('getheader',
                                             ['name', 'default=None'],
                                             "Get the header value for a name.\n\n        This is the normal interface: it returns a stripped version of the\n        header value for a given header name, or None if it doesn't exist.\n        This uses the dictionary version which finds the *last* such header.\n        "),
                                            ('getheaders',
                                             ['name'],
                                             'Get all values for a header.\n\n        This returns a list of values for headers given more than once; each\n        value in the result list is stripped in the same way as the result of\n        getheader().  If the header is not given, return an empty list.\n        '),
                                            ('getaddr',
                                             ['name'],
                                             "Get a single address from a header, as a tuple.\n\n        An example return value:\n        ('Guido van Rossum', 'guido@cwi.nl')\n        "),
                                            ('getaddrlist',
                                             ['name'],
                                             'Get a list of addresses from a header.\n\n        Retrieves a list of addresses from a header, where each address is a\n        tuple as returned by getaddr().  Scans all named headers, so it works\n        properly with multiple To: or Cc: headers for example.\n        '),
                                            ('getdate',
                                             ['name'],
                                             'Retrieve a date field from a header.\n\n        Retrieves a date field from the named header, returning a tuple\n        compatible with time.mktime().\n        '),
                                            ('getdate_tz',
                                             ['name'],
                                             "Retrieve a date field from a header as a 10-tuple.\n\n        The first 9 elements make up a tuple compatible with time.mktime(),\n        and the 10th is the offset of the poster's time zone from GMT/UTC.\n        "),
                                            ('__len__',
                                             [],
                                             'Get the number of headers in a message.'),
                                            ('__getitem__',
                                             ['name'],
                                             'Get a specific header, as from a dictionary.'),
                                            ('__setitem__',
                                             ['name', 'value'],
                                             'Set the value of a header.\n\n        Note: This is not a perfect inversion of __getitem__, because any\n        changed headers get stuck at the end of the raw-headers list rather\n        than where the altered header was.\n        '),
                                            ('__delitem__',
                                             ['name'],
                                             'Delete all occurrences of a specific header, if it is present.'),
                                            ('setdefault', ['name', "default=''"], ''),
                                            ('has_key',
                                             ['name'],
                                             'Determine whether a message contains the named header.'),
                                            ('__contains__',
                                             ['name'],
                                             'Determine whether a message contains the named header.'),
                                            ('__iter__', [], ''),
                                            ('keys',
                                             [],
                                             "Get all of a message's header field names."),
                                            ('values',
                                             [],
                                             "Get all of a message's header field values."),
                                            ('items',
                                             [],
                                             "Get all of a message's headers.\n\n        Returns a list of name, value tuples.\n        "),
                                            ('__str__', [], '')],
                                'properties': ['fp',
                                               'seekable',
                                               'startofheaders',
                                               'startofbody',
                                               'dict',
                                               'unixfrom',
                                               'headers',
                                               'status',
                                               'get']},
             'rlcompleter.Completer': {'bases': [],
                                       'constructor': ['namespace=None'],
                                       'docstring': '',
                                       'methods': [('complete',
                                                    ['text', 'state'],
                                                    "Return the next possible completion for 'text'.\n\n        This is called successively with state == 0, 1, 2, ... until it\n        returns None.  The completion should begin with 'text'.\n\n        "),
                                                   ('_callable_postfix', ['val', 'word'], ''),
                                                   ('global_matches',
                                                    ['text'],
                                                    'Compute matches when text is a simple name.\n\n        Return a list of all keywords, built-in functions and names currently\n        defined in self.namespace that match.\n\n        '),
                                                   ('attr_matches',
                                                    ['text'],
                                                    'Compute matches when text contains a dot.\n\n        Assuming the text is of the form NAME.NAME....[NAME], and is\n        evaluatable in self.namespace, it will be evaluated and its attributes\n        (as revealed by dir()) are used as possible completions.  (For class\n        instances, class members are also considered.)\n\n        WARNING: this can still invoke arbitrary C code, if an object\n        with a __getattr__ hook is evaluated.\n\n        ')],
                                       'properties': ['use_main_ns', 'namespace', 'matches']},
             'robotparser.Entry': {'bases': [],
                                   'constructor': [],
                                   'docstring': 'An entry has one or more user-agents and zero or more rulelines',
                                   'methods': [('__str__', [], ''),
                                               ('applies_to',
                                                ['useragent'],
                                                'check if this entry applies to the specified agent'),
                                               ('allowance',
                                                ['filename'],
                                                'Preconditions:\n        - our agent applies to this entry\n        - filename is URL decoded')],
                                   'properties': ['useragents', 'rulelines']},
             'robotparser.RobotFileParser': {'bases': [],
                                             'constructor': ["url=''"],
                                             'docstring': ' This class provides a set of methods to read, parse and answer\n    questions about a single robots.txt file.\n\n    ',
                                             'methods': [('mtime',
                                                          [],
                                                          'Returns the time the robots.txt file was last fetched.\n\n        This is useful for long-running web spiders that need to\n        check for new robots.txt files periodically.\n\n        '),
                                                         ('modified',
                                                          [],
                                                          'Sets the time the robots.txt file was last fetched to the\n        current time.\n\n        '),
                                                         ('set_url',
                                                          ['url'],
                                                          'Sets the URL referring to a robots.txt file.'),
                                                         ('read',
                                                          [],
                                                          'Reads the robots.txt URL and feeds it to the parser.'),
                                                         ('_add_entry', ['entry'], ''),
                                                         ('parse',
                                                          ['lines'],
                                                          'parse the input lines from a robots.txt file.\n           We allow that a user-agent: line is not preceded by\n           one or more blank lines.'),
                                                         ('can_fetch',
                                                          ['useragent', 'url'],
                                                          'using the parsed robots.txt decide if useragent can fetch url'),
                                                         ('__str__', [], '')],
                                             'properties': ['entries',
                                                            'default_entry',
                                                            'disallow_all',
                                                            'allow_all',
                                                            'last_checked',
                                                            'url',
                                                            'host',
                                                            'path',
                                                            'errcode']},
             'robotparser.RuleLine': {'bases': [],
                                      'constructor': ['path', 'allowance'],
                                      'docstring': 'A rule line is a single "Allow:" (allowance==True) or "Disallow:"\n       (allowance==False) followed by a path.',
                                      'methods': [('applies_to', ['filename'], ''),
                                                  ('__str__', [], '')],
                                      'properties': ['path', 'allowance']},
             'robotparser.URLopener': {'bases': ['urllib.FancyURLopener'],
                                       'constructor': ['*args'],
                                       'docstring': '',
                                       'methods': [('prompt_user_passwd',
                                                    ['host', 'realm'],
                                                    ''),
                                                   ('http_error_default',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers'],
                                                    '')],
                                       'properties': ['errcode']},
             'runpy._ModifiedArgv0': {'bases': ['object'],
                                      'constructor': ['value'],
                                      'docstring': '',
                                      'methods': [('__enter__', [], ''),
                                                  ('__exit__', ['*args'], '')],
                                      'properties': ['value', '_saved_value', '_sentinel']},
             'runpy._TempModule': {'bases': ['object'],
                                   'constructor': ['mod_name'],
                                   'docstring': 'Temporarily replace a module in sys.modules with an empty namespace',
                                   'methods': [('__enter__', [], ''),
                                               ('__exit__', ['*args'], '')],
                                   'properties': ['mod_name', 'module', '_saved_module']},
             'sched.scheduler': {'bases': [],
                                 'constructor': ['timefunc', 'delayfunc'],
                                 'docstring': '',
                                 'methods': [('enterabs',
                                              ['time', 'priority', 'action', 'argument'],
                                              'Enter a new event in the queue at an absolute time.\n\n        Returns an ID for the event which can be used to remove it,\n        if necessary.\n\n        '),
                                             ('enter',
                                              ['delay', 'priority', 'action', 'argument'],
                                              'A variant that specifies the time as a relative time.\n\n        This is actually the more commonly used interface.\n\n        '),
                                             ('cancel',
                                              ['event'],
                                              'Remove an event from the queue.\n\n        This must be presented the ID as returned by enter().\n        If the event is not in the queue, this raises ValueError.\n\n        '),
                                             ('empty', [], 'Check whether the queue is empty.'),
                                             ('run',
                                              [],
                                              "Execute events until the queue is empty.\n\n        When there is a positive delay until the first event, the\n        delay function is called and the event is left in the queue;\n        otherwise, the event is removed from the queue and executed\n        (its action function is called, passing it the argument).  If\n        the delay function returns prematurely, it is simply\n        restarted.\n\n        It is legal for both the delay function and the action\n        function to to modify the queue or to raise an exception;\n        exceptions are not caught but the scheduler's state remains\n        well-defined so run() may be called again.\n\n        A questionable hack is added to allow other threads to run:\n        just after an event is executed, a delay of 0 is executed, to\n        avoid monopolizing the CPU when other threads are also\n        runnable.\n\n        ")],
                                 'properties': ['_queue', 'timefunc', 'delayfunc', 'queue']},
             'sets.BaseSet': {'bases': ['object'],
                              'constructor': [],
                              'docstring': 'Common base class for mutable and immutable sets.',
                              'methods': [('__len__',
                                           [],
                                           'Return the number of elements of a set.'),
                                          ('__repr__',
                                           [],
                                           "Return string representation of a set.\n\n        This looks like 'Set([<list of elements>])'.\n        "),
                                          ('_repr', ['sorted=False'], ''),
                                          ('__iter__',
                                           [],
                                           'Return an iterator over the elements or a set.\n\n        This is the keys iterator for the underlying dict.\n        '),
                                          ('__cmp__', ['other'], ''),
                                          ('__eq__', ['other'], ''),
                                          ('__ne__', ['other'], ''),
                                          ('copy', [], 'Return a shallow copy of a set.'),
                                          ('__deepcopy__',
                                           ['memo'],
                                           'Return a deep copy of a set; used by copy module.'),
                                          ('__or__',
                                           ['other'],
                                           'Return the union of two sets as a new set.\n\n        (I.e. all elements that are in either set.)\n        '),
                                          ('union',
                                           ['other'],
                                           'Return the union of two sets as a new set.\n\n        (I.e. all elements that are in either set.)\n        '),
                                          ('__and__',
                                           ['other'],
                                           'Return the intersection of two sets as a new set.\n\n        (I.e. all elements that are in both sets.)\n        '),
                                          ('intersection',
                                           ['other'],
                                           'Return the intersection of two sets as a new set.\n\n        (I.e. all elements that are in both sets.)\n        '),
                                          ('__xor__',
                                           ['other'],
                                           'Return the symmetric difference of two sets as a new set.\n\n        (I.e. all elements that are in exactly one of the sets.)\n        '),
                                          ('symmetric_difference',
                                           ['other'],
                                           'Return the symmetric difference of two sets as a new set.\n\n        (I.e. all elements that are in exactly one of the sets.)\n        '),
                                          ('__sub__',
                                           ['other'],
                                           'Return the difference of two sets as a new Set.\n\n        (I.e. all elements that are in this set and not in the other.)\n        '),
                                          ('difference',
                                           ['other'],
                                           'Return the difference of two sets as a new Set.\n\n        (I.e. all elements that are in this set and not in the other.)\n        '),
                                          ('__contains__',
                                           ['element'],
                                           "Report whether an element is a member of a set.\n\n        (Called in response to the expression `element in self'.)\n        "),
                                          ('issubset',
                                           ['other'],
                                           'Report whether another set contains this set.'),
                                          ('issuperset',
                                           ['other'],
                                           'Report whether this set contains another set.'),
                                          ('__lt__', ['other'], ''),
                                          ('__gt__', ['other'], ''),
                                          ('_binary_sanity_check', ['other'], ''),
                                          ('_compute_hash', [], ''),
                                          ('_update', ['iterable'], '')],
                              'properties': ['__slots__',
                                             '__str__',
                                             '__copy__',
                                             '__le__',
                                             '__ge__',
                                             '__hash__']},
             'sets.ImmutableSet': {'bases': ['sets.BaseSet'],
                                   'constructor': ['iterable=None'],
                                   'docstring': 'Immutable set class.',
                                   'methods': [('__hash__', [], ''),
                                               ('__getstate__', [], ''),
                                               ('__setstate__', ['state'], '')],
                                   'properties': ['__slots__', '_hashcode', '_data']},
             'sets.Set': {'bases': ['sets.BaseSet'],
                          'constructor': ['iterable=None'],
                          'docstring': ' Mutable set class.',
                          'methods': [('__getstate__', [], ''),
                                      ('__setstate__', ['data'], ''),
                                      ('__ior__',
                                       ['other'],
                                       'Update a set with the union of itself and another.'),
                                      ('union_update',
                                       ['other'],
                                       'Update a set with the union of itself and another.'),
                                      ('__iand__',
                                       ['other'],
                                       'Update a set with the intersection of itself and another.'),
                                      ('intersection_update',
                                       ['other'],
                                       'Update a set with the intersection of itself and another.'),
                                      ('__ixor__',
                                       ['other'],
                                       'Update a set with the symmetric difference of itself and another.'),
                                      ('symmetric_difference_update',
                                       ['other'],
                                       'Update a set with the symmetric difference of itself and another.'),
                                      ('__isub__',
                                       ['other'],
                                       'Remove all elements of another set from this set.'),
                                      ('difference_update',
                                       ['other'],
                                       'Remove all elements of another set from this set.'),
                                      ('update',
                                       ['iterable'],
                                       'Add all values from an iterable (such as a list or file).'),
                                      ('clear', [], 'Remove all elements from this set.'),
                                      ('add',
                                       ['element'],
                                       'Add an element to a set.\n\n        This has no effect if the element is already present.\n        '),
                                      ('remove',
                                       ['element'],
                                       'Remove an element from a set; it must be a member.\n\n        If the element is not a member, raise a KeyError.\n        '),
                                      ('discard',
                                       ['element'],
                                       'Remove an element from a set if it is a member.\n\n        If the element is not a member, do nothing.\n        '),
                                      ('pop',
                                       [],
                                       'Remove and return an arbitrary set element.'),
                                      ('__as_immutable__', [], ''),
                                      ('__as_temporarily_immutable__', [], '')],
                          'properties': ['__slots__', '_data']},
             'sets._TemporarilyImmutableSet': {'bases': ['sets.BaseSet'],
                                               'constructor': ['set'],
                                               'docstring': '',
                                               'methods': [('__hash__', [], '')],
                                               'properties': ['_set', '_data']},
             'sgmllib.SGMLParseError': {'bases': ['RuntimeError'],
                                        'constructor': [],
                                        'docstring': 'Exception raised for all parse errors.',
                                        'methods': [],
                                        'properties': []},
             'sgmllib.SGMLParser': {'bases': ['markupbase.ParserBase'],
                                    'constructor': ['verbose=0'],
                                    'docstring': '',
                                    'methods': [('reset',
                                                 [],
                                                 'Reset this instance. Loses all unprocessed data.'),
                                                ('setnomoretags',
                                                 [],
                                                 'Enter literal mode (CDATA) till EOF.\n\n        Intended for derived classes only.\n        '),
                                                ('setliteral',
                                                 ['*args'],
                                                 'Enter literal mode (CDATA).\n\n        Intended for derived classes only.\n        '),
                                                ('feed',
                                                 ['data'],
                                                 "Feed some data to the parser.\n\n        Call this as often as you want, with as little or as much text\n        as you want (may include '\n').  (This just saves the text,\n        all the processing is done by goahead().)\n        "),
                                                ('close', [], 'Handle the remaining data.'),
                                                ('error', ['message'], ''),
                                                ('goahead', ['end'], ''),
                                                ('parse_pi', ['i'], ''),
                                                ('get_starttag_text', [], ''),
                                                ('parse_starttag', ['i'], ''),
                                                ('_convert_ref', ['match'], ''),
                                                ('parse_endtag', ['i'], ''),
                                                ('finish_shorttag', ['tag', 'data'], ''),
                                                ('finish_starttag', ['tag', 'attrs'], ''),
                                                ('finish_endtag', ['tag'], ''),
                                                ('handle_starttag',
                                                 ['tag', 'method', 'attrs'],
                                                 ''),
                                                ('handle_endtag', ['tag', 'method'], ''),
                                                ('report_unbalanced', ['tag'], ''),
                                                ('convert_charref',
                                                 ['name'],
                                                 'Convert character reference, may be overridden.'),
                                                ('convert_codepoint', ['codepoint'], ''),
                                                ('handle_charref',
                                                 ['name'],
                                                 'Handle character reference, no need to override.'),
                                                ('convert_entityref',
                                                 ['name'],
                                                 'Convert entity references.\n\n        As an alternative to overriding this method; one can tailor the\n        results by setting up the self.entitydefs mapping appropriately.\n        '),
                                                ('handle_entityref',
                                                 ['name'],
                                                 'Handle entity references, no need to override.'),
                                                ('handle_data', ['data'], ''),
                                                ('handle_comment', ['data'], ''),
                                                ('handle_decl', ['decl'], ''),
                                                ('handle_pi', ['data'], ''),
                                                ('unknown_starttag', ['tag', 'attrs'], ''),
                                                ('unknown_endtag', ['tag'], ''),
                                                ('unknown_charref', ['ref'], ''),
                                                ('unknown_entityref', ['ref'], '')],
                                    'properties': ['entity_or_charref',
                                                   'verbose',
                                                   '__starttag_text',
                                                   'rawdata',
                                                   'stack',
                                                   'lasttag',
                                                   'nomoretags',
                                                   'literal',
                                                   '_decl_otherchars',
                                                   'entitydefs']},
             'sgmllib.TestSGMLParser': {'bases': ['sgmllib.SGMLParser'],
                                        'constructor': ['verbose=0'],
                                        'docstring': '',
                                        'methods': [('handle_data', ['data'], ''),
                                                    ('flush', [], ''),
                                                    ('handle_comment', ['data'], ''),
                                                    ('unknown_starttag', ['tag', 'attrs'], ''),
                                                    ('unknown_endtag', ['tag'], ''),
                                                    ('unknown_entityref', ['ref'], ''),
                                                    ('unknown_charref', ['ref'], ''),
                                                    ('unknown_decl', ['data'], ''),
                                                    ('close', [], '')],
                                        'properties': ['testdata']},
             'shelve.BsdDbShelf': {'bases': ['shelve.Shelf'],
                                   'constructor': ['dict', 'protocol=None', 'writeback=False'],
                                   'docstring': 'Shelf implementation using the "BSD" db interface.\n\n    This adds methods first(), next(), previous(), last() and\n    set_location() that have no counterpart in [g]dbm databases.\n\n    The actual database must be opened using one of the "bsddb"\n    modules "open" routines (i.e. bsddb.hashopen, bsddb.btopen or\n    bsddb.rnopen) and passed to the constructor.\n\n    See the module\'s __doc__ string for an overview of the interface.\n    ',
                                   'methods': [('set_location', ['key'], ''),
                                               ('next', [], ''),
                                               ('previous', [], ''),
                                               ('first', [], ''),
                                               ('last', [], '')],
                                   'properties': []},
             'shelve.DbfilenameShelf': {'bases': ['shelve.Shelf'],
                                        'constructor': ['filename',
                                                        "flag='c'",
                                                        'protocol=None',
                                                        'writeback=False'],
                                        'docstring': 'Shelf implementation using the "anydbm" generic dbm interface.\n\n    This is initialized with the filename for the dbm database.\n    See the module\'s __doc__ string for an overview of the interface.\n    ',
                                        'methods': [],
                                        'properties': []},
             'shelve.Shelf': {'bases': ['UserDict.DictMixin'],
                              'constructor': ['dict', 'protocol=None', 'writeback=False'],
                              'docstring': "Base class for shelf implementations.\n\n    This is initialized with a dictionary-like object.\n    See the module's __doc__ string for an overview of the interface.\n    ",
                              'methods': [('keys', [], ''),
                                          ('__len__', [], ''),
                                          ('has_key', ['key'], ''),
                                          ('__contains__', ['key'], ''),
                                          ('get', ['key', 'default=None'], ''),
                                          ('__getitem__', ['key'], ''),
                                          ('__setitem__', ['key', 'value'], ''),
                                          ('__delitem__', ['key'], ''),
                                          ('close', [], ''),
                                          ('__del__', [], ''),
                                          ('sync', [], '')],
                              'properties': ['dict', '_protocol', 'writeback', 'cache']},
             'shelve._ClosedDict': {'bases': ['UserDict.DictMixin'],
                                    'constructor': [],
                                    'docstring': 'Marker for a closed dict.  Access attempts raise a ValueError.',
                                    'methods': [('closed', ['*args'], ''), ('__repr__', [], '')],
                                    'properties': ['__getitem__',
                                                   '__setitem__',
                                                   '__delitem__',
                                                   'keys']},
             'shlex.shlex': {'bases': [],
                             'constructor': ['instream=None', 'infile=None', 'posix=False'],
                             'docstring': 'A lexical analyzer class for simple shell-like syntaxes.',
                             'methods': [('push_token',
                                          ['tok'],
                                          'Push a token onto the stack popped by the get_token method'),
                                         ('push_source',
                                          ['newstream', 'newfile=None'],
                                          "Push an input source onto the lexer's input source stack."),
                                         ('pop_source', [], 'Pop the input source stack.'),
                                         ('get_token',
                                          [],
                                          "Get a token from the input stream (or from stack if it's nonempty)"),
                                         ('read_token', [], ''),
                                         ('sourcehook',
                                          ['newfile'],
                                          'Hook called on a filename to be sourced.'),
                                         ('error_leader',
                                          ['infile=None', 'lineno=None'],
                                          'Emit a C-compiler-like, Emacs-friendly error-message leader.'),
                                         ('__iter__', [], ''),
                                         ('next', [], '')],
                             'properties': ['instream',
                                            'infile',
                                            'posix',
                                            'eof',
                                            'commenters',
                                            'wordchars',
                                            'whitespace',
                                            'whitespace_split',
                                            'quotes',
                                            'escape',
                                            'escapedquotes',
                                            'state',
                                            'pushback',
                                            'lineno',
                                            'debug',
                                            'token',
                                            'filestack',
                                            'source']},
             'shutil.Error': {'bases': ['EnvironmentError'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': []},
             'shutil.ExecError': {'bases': ['EnvironmentError'],
                                  'constructor': [],
                                  'docstring': 'Raised when a command could not be executed',
                                  'methods': [],
                                  'properties': []},
             'shutil.SpecialFileError': {'bases': ['EnvironmentError'],
                                         'constructor': [],
                                         'docstring': 'Raised when trying to do a kind of operation (e.g. copying) which is\n    not supported on a special file (e.g. a named pipe)',
                                         'methods': [],
                                         'properties': []},
             'site._Helper': {'bases': ['object'],
                              'constructor': [],
                              'docstring': "Define the builtin 'help'.\n    This is a wrapper around pydoc.help (with a twist).\n\n    ",
                              'methods': [('__repr__', [], ''),
                                          ('__call__', ['*args', '**kwds'], '')],
                              'properties': []},
             'site._Printer': {'bases': ['object'],
                               'constructor': ['name', 'data', 'files=()', 'dirs=()'],
                               'docstring': 'interactive prompt objects for printing the license text, a list of\n    contributors and the copyright notice.',
                               'methods': [('__setup', [], ''),
                                           ('__repr__', [], ''),
                                           ('__call__', [], '')],
                               'properties': ['MAXLINES',
                                              '__name',
                                              '__data',
                                              '__files',
                                              '__dirs',
                                              '__lines',
                                              '__linecnt']},
             'smtpd.DebuggingServer': {'bases': ['smtpd.SMTPServer'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('process_message',
                                                    ['peer', 'mailfrom', 'rcpttos', 'data'],
                                                    '')],
                                       'properties': []},
             'smtpd.Devnull': {'bases': [],
                               'constructor': [],
                               'docstring': '',
                               'methods': [('write', ['msg'], ''), ('flush', [], '')],
                               'properties': []},
             'smtpd.MailmanProxy': {'bases': ['smtpd.PureProxy'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('process_message',
                                                 ['peer', 'mailfrom', 'rcpttos', 'data'],
                                                 '')],
                                    'properties': []},
             'smtpd.Options': {'bases': [],
                               'constructor': [],
                               'docstring': '',
                               'methods': [],
                               'properties': ['setuid', 'classname']},
             'smtpd.PureProxy': {'bases': ['smtpd.SMTPServer'],
                                 'constructor': [],
                                 'docstring': '',
                                 'methods': [('process_message',
                                              ['peer', 'mailfrom', 'rcpttos', 'data'],
                                              ''),
                                             ('_deliver', ['mailfrom', 'rcpttos', 'data'], '')],
                                 'properties': []},
             'smtpd.SMTPChannel': {'bases': ['asynchat.async_chat'],
                                   'constructor': ['server', 'conn', 'addr'],
                                   'docstring': '',
                                   'methods': [('push', ['msg'], ''),
                                               ('collect_incoming_data', ['data'], ''),
                                               ('found_terminator', [], ''),
                                               ('smtp_HELO', ['arg'], ''),
                                               ('smtp_NOOP', ['arg'], ''),
                                               ('smtp_QUIT', ['arg'], ''),
                                               ('__getaddr', ['keyword', 'arg'], ''),
                                               ('smtp_MAIL', ['arg'], ''),
                                               ('smtp_RCPT', ['arg'], ''),
                                               ('smtp_RSET', ['arg'], ''),
                                               ('smtp_DATA', ['arg'], '')],
                                   'properties': ['COMMAND',
                                                  'DATA',
                                                  '__server',
                                                  '__conn',
                                                  '__addr',
                                                  '__line',
                                                  '__state',
                                                  '__greeting',
                                                  '__mailfrom',
                                                  '__rcpttos',
                                                  '__data',
                                                  '__fqdn',
                                                  '__peer']},
             'smtpd.SMTPServer': {'bases': ['asyncore.dispatcher'],
                                  'constructor': ['localaddr', 'remoteaddr'],
                                  'docstring': '',
                                  'methods': [('handle_accept', [], ''),
                                              ('process_message',
                                               ['peer', 'mailfrom', 'rcpttos', 'data'],
                                               "Override this abstract method to handle messages from the client.\n\n        peer is a tuple containing (ipaddr, port) of the client that made the\n        socket connection to our smtp port.\n\n        mailfrom is the raw address the client claims the message is coming\n        from.\n\n        rcpttos is a list of raw addresses the client wishes to deliver the\n        message to.\n\n        data is a string containing the entire full text of the message,\n        headers (if supplied) and all.  It has been `de-transparencied'\n        according to RFC 821, Section 4.5.2.  In other words, a line\n        containing a `.' followed by other text has had the leading dot\n        removed.\n\n        This function should return None, for a normal `250 Ok' response;\n        otherwise it returns the desired response string in RFC 821 format.\n\n        ")],
                                  'properties': ['_localaddr', '_remoteaddr']},
             'smtplib.LMTP': {'bases': ['smtplib.SMTP'],
                              'constructor': ["host=''",
                                              'port=LMTP_PORT',
                                              'local_hostname=None'],
                              'docstring': "LMTP - Local Mail Transfer Protocol\n\n    The LMTP protocol, which is very similar to ESMTP, is heavily based\n    on the standard SMTP client. It's common to use Unix sockets for LMTP,\n    so our connect() method must support that as well as a regular\n    host:port server. To specify a Unix socket, you must use an absolute\n    path as the host, starting with a '/'.\n\n    Authentication is supported, using the regular SMTP mechanism. When\n    using a Unix socket, LMTP generally don't support or require any\n    authentication, but your mileage might vary.",
                              'methods': [('connect',
                                           ["host='localhost'", 'port=0'],
                                           'Connect to the LMTP daemon, on either a Unix or a TCP socket.')],
                              'properties': ['ehlo_msg', 'sock']},
             'smtplib.SMTP': {'bases': [],
                              'constructor': ["host=''",
                                              'port=0',
                                              'local_hostname=None',
                                              'timeout=socket._GLOBAL_DEFAULT_TIMEOUT'],
                              'docstring': "This class manages a connection to an SMTP or ESMTP server.\n    SMTP Objects:\n        SMTP objects have the following attributes:\n            helo_resp\n                This is the message given by the server in response to the\n                most recent HELO command.\n\n            ehlo_resp\n                This is the message given by the server in response to the\n                most recent EHLO command. This is usually multiline.\n\n            does_esmtp\n                This is a True value _after you do an EHLO command_, if the\n                server supports ESMTP.\n\n            esmtp_features\n                This is a dictionary, which, if the server supports ESMTP,\n                will _after you do an EHLO command_, contain the names of the\n                SMTP service extensions this server supports, and their\n                parameters (if any).\n\n                Note, all extension names are mapped to lower case in the\n                dictionary.\n\n        See each method's docstrings for details.  In general, there is a\n        method of the same name to perform each SMTP command.  There is also a\n        method called 'sendmail' that will do an entire mail transaction.\n        ",
                              'methods': [('set_debuglevel',
                                           ['debuglevel'],
                                           'Set the debug output level.\n\n        A non-false value results in debug messages for connection and for all\n        messages sent to and received from the server.\n\n        '),
                                          ('_get_socket', ['port', 'host', 'timeout'], ''),
                                          ('connect',
                                           ["host='localhost'", 'port=0'],
                                           "Connect to a host on a given port.\n\n        If the hostname ends with a colon (`:') followed by a number, and\n        there is no port specified, that suffix will be stripped off and the\n        number interpreted as the port number to use.\n\n        Note: This method is automatically invoked by __init__, if a host is\n        specified during instantiation.\n\n        "),
                                          ('send', ['str'], "Send `str' to the server."),
                                          ('putcmd',
                                           ['cmd', "args=''"],
                                           'Send a command to the server.'),
                                          ('getreply',
                                           [],
                                           "Get a reply from the server.\n\n        Returns a tuple consisting of:\n\n          - server response code (e.g. '250', or such, if all goes well)\n            Note: returns -1 if it can't read response code.\n\n          - server response string corresponding to response code (multiline\n            responses are converted to a single, multiline string).\n\n        Raises SMTPServerDisconnected if end-of-file is reached.\n        "),
                                          ('docmd',
                                           ['cmd', "args=''"],
                                           'Send a command, and return its response code.'),
                                          ('helo',
                                           ["name=''"],
                                           "SMTP 'helo' command.\n        Hostname to send for this command defaults to the FQDN of the local\n        host.\n        "),
                                          ('ehlo',
                                           ["name=''"],
                                           " SMTP 'ehlo' command.\n        Hostname to send for this command defaults to the FQDN of the local\n        host.\n        "),
                                          ('has_extn',
                                           ['opt'],
                                           'Does the server support a given SMTP service extension?'),
                                          ('help',
                                           ["args=''"],
                                           "SMTP 'help' command.\n        Returns help text from server."),
                                          ('rset',
                                           [],
                                           "SMTP 'rset' command -- resets session."),
                                          ('noop',
                                           [],
                                           "SMTP 'noop' command -- doesn't do anything :>"),
                                          ('mail',
                                           ['sender', 'options=[]'],
                                           "SMTP 'mail' command -- begins mail xfer session."),
                                          ('rcpt',
                                           ['recip', 'options=[]'],
                                           "SMTP 'rcpt' command -- indicates 1 recipient for this mail."),
                                          ('data',
                                           ['msg'],
                                           "SMTP 'DATA' command -- sends message data to server.\n\n        Automatically quotes lines beginning with a period per rfc821.\n        Raises SMTPDataError if there is an unexpected reply to the\n        DATA command; the return value from this method is the final\n        response code received when the all data is sent.\n        "),
                                          ('verify',
                                           ['address'],
                                           "SMTP 'verify' command -- checks for address validity."),
                                          ('expn',
                                           ['address'],
                                           "SMTP 'expn' command -- expands a mailing list."),
                                          ('ehlo_or_helo_if_needed',
                                           [],
                                           "Call self.ehlo() and/or self.helo() if needed.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError            The server didn't reply properly to\n                                  the helo greeting.\n        "),
                                          ('login',
                                           ['user', 'password'],
                                           "Log in on an SMTP server that requires authentication.\n\n        The arguments are:\n            - user:     The user name to authenticate with.\n            - password: The password for the authentication.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.\n\n        This method will return normally if the authentication was successful.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError            The server didn't reply properly to\n                                  the helo greeting.\n         SMTPAuthenticationError  The server didn't accept the username/\n                                  password combination.\n         SMTPException            No suitable authentication method was\n                                  found.\n        "),
                                          ('starttls',
                                           ['keyfile=None', 'certfile=None'],
                                           "Puts the connection to the SMTP server into TLS mode.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.\n\n        If the server supports TLS, this will encrypt the rest of the SMTP\n        session. If you provide the keyfile and certfile parameters,\n        the identity of the SMTP server and client can be checked. This,\n        however, depends on whether the socket module really checks the\n        certificates.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError            The server didn't reply properly to\n                                  the helo greeting.\n        "),
                                          ('sendmail',
                                           ['from_addr',
                                            'to_addrs',
                                            'msg',
                                            'mail_options=[]',
                                            'rcpt_options=[]'],
                                           'This command performs an entire mail transaction.\n\n        The arguments are:\n            - from_addr    : The address sending this mail.\n            - to_addrs     : A list of addresses to send this mail to.  A bare\n                             string will be treated as a list with 1 address.\n            - msg          : The message to send.\n            - mail_options : List of ESMTP options (such as 8bitmime) for the\n                             mail command.\n            - rcpt_options : List of ESMTP options (such as DSN commands) for\n                             all the rcpt commands.\n\n        If there has been no previous EHLO or HELO command this session, this\n        method tries ESMTP EHLO first.  If the server does ESMTP, message size\n        and each of the specified options will be passed to it.  If EHLO\n        fails, HELO will be tried and ESMTP options suppressed.\n\n        This method will return normally if the mail is accepted for at least\n        one recipient.  It returns a dictionary, with one entry for each\n        recipient that was refused.  Each entry contains a tuple of the SMTP\n        error code and the accompanying error message sent by the server.\n\n        This method may raise the following exceptions:\n\n         SMTPHeloError          The server didn\'t reply properly to\n                                the helo greeting.\n         SMTPRecipientsRefused  The server rejected ALL recipients\n                                (no mail was sent).\n         SMTPSenderRefused      The server didn\'t accept the from_addr.\n         SMTPDataError          The server replied with an unexpected\n                                error code (other than a refusal of\n                                a recipient).\n\n        Note: the connection will be open even after an exception is raised.\n\n        Example:\n\n         >>> import smtplib\n         >>> s=smtplib.SMTP("localhost")\n         >>> tolist=["one@one.org","two@two.org","three@three.org","four@four.org"]\n         >>> msg = \'\'\'\\\n         ... From: Me@my.org\n         ... Subject: testin\'...\n         ...\n         ... This is a test \'\'\'\n         >>> s.sendmail("me@my.org",tolist,msg)\n         { "three@three.org" : ( 550 ,"User unknown" ) }\n         >>> s.quit()\n\n        In the above example, the message was accepted for delivery to three\n        of the four addresses, and one was rejected, with the error code\n        550.  If all addresses are accepted, then the method will return an\n        empty dictionary.\n\n        '),
                                          ('close',
                                           [],
                                           'Close the connection to the SMTP server.'),
                                          ('quit', [], 'Terminate the SMTP session.')],
                              'properties': ['debuglevel',
                                             'file',
                                             'helo_resp',
                                             'ehlo_msg',
                                             'ehlo_resp',
                                             'does_esmtp',
                                             'timeout',
                                             'esmtp_features',
                                             'default_port',
                                             'local_hostname',
                                             'sock',
                                             'vrfy']},
             'smtplib.SMTPAuthenticationError': {'bases': ['smtplib.SMTPResponseException'],
                                                 'constructor': [],
                                                 'docstring': "Authentication error.\n\n    Most probably the server didn't accept the username/password\n    combination provided.\n    ",
                                                 'methods': [],
                                                 'properties': []},
             'smtplib.SMTPConnectError': {'bases': ['smtplib.SMTPResponseException'],
                                          'constructor': [],
                                          'docstring': 'Error during connection establishment.',
                                          'methods': [],
                                          'properties': []},
             'smtplib.SMTPDataError': {'bases': ['smtplib.SMTPResponseException'],
                                       'constructor': [],
                                       'docstring': "The SMTP server didn't accept the data.",
                                       'methods': [],
                                       'properties': []},
             'smtplib.SMTPException': {'bases': ['Exception'],
                                       'constructor': [],
                                       'docstring': 'Base class for all exceptions raised by this module.',
                                       'methods': [],
                                       'properties': []},
             'smtplib.SMTPHeloError': {'bases': ['smtplib.SMTPResponseException'],
                                       'constructor': [],
                                       'docstring': 'The server refused our HELO reply.',
                                       'methods': [],
                                       'properties': []},
             'smtplib.SMTPRecipientsRefused': {'bases': ['smtplib.SMTPException'],
                                               'constructor': ['recipients'],
                                               'docstring': "All recipient addresses refused.\n\n    The errors for each recipient are accessible through the attribute\n    'recipients', which is a dictionary of exactly the same sort as\n    SMTP.sendmail() returns.\n    ",
                                               'methods': [],
                                               'properties': ['recipients', 'args']},
             'smtplib.SMTPResponseException': {'bases': ['smtplib.SMTPException'],
                                               'constructor': ['code', 'msg'],
                                               'docstring': "Base class for all exceptions that include an SMTP error code.\n\n    These exceptions are generated in some instances when the SMTP\n    server returns an error code.  The error code is stored in the\n    `smtp_code' attribute of the error, and the `smtp_error' attribute\n    is set to the error message.\n    ",
                                               'methods': [],
                                               'properties': ['smtp_code', 'smtp_error', 'args']},
             'smtplib.SMTPSenderRefused': {'bases': ['smtplib.SMTPResponseException'],
                                           'constructor': ['code', 'msg', 'sender'],
                                           'docstring': "Sender address refused.\n\n    In addition to the attributes set by on all SMTPResponseException\n    exceptions, this sets `sender' to the string that the SMTP refused.\n    ",
                                           'methods': [],
                                           'properties': ['smtp_code',
                                                          'smtp_error',
                                                          'sender',
                                                          'args']},
             'smtplib.SMTPServerDisconnected': {'bases': ['smtplib.SMTPException'],
                                                'constructor': [],
                                                'docstring': 'Not connected to any SMTP server.\n\n    This exception is raised when the server unexpectedly disconnects,\n    or when an attempt is made to use the SMTP instance before\n    connecting it to a server.\n    ',
                                                'methods': [],
                                                'properties': []},
             'smtplib.SMTP_SSL': {'bases': ['smtplib.SMTP'],
                                  'constructor': ["host=''",
                                                  'port=0',
                                                  'local_hostname=None',
                                                  'keyfile=None',
                                                  'certfile=None',
                                                  'timeout=socket._GLOBAL_DEFAULT_TIMEOUT'],
                                  'docstring': " This is a subclass derived from SMTP that connects over an SSL encrypted\n        socket (to use this class you need a socket module that was compiled with SSL\n        support). If host is not specified, '' (the local host) is used. If port is\n        omitted, the standard SMTP-over-SSL port (465) is used. keyfile and certfile\n        are also optional - they can contain a PEM formatted private key and\n        certificate chain file for the SSL connection.\n        ",
                                  'methods': [('_get_socket', ['host', 'port', 'timeout'], '')],
                                  'properties': ['keyfile', 'certfile', 'default_port', 'file']},
             'smtplib.SSLFakeFile': {'bases': [],
                                     'constructor': ['sslobj'],
                                     'docstring': 'A fake file like object that really wraps a SSLObject.\n\n        It only supports what is needed in smtplib.\n        ',
                                     'methods': [('readline', [], ''), ('close', [], '')],
                                     'properties': ['sslobj']},
             'socket._closedsocket': {'bases': ['object'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('_dummy', [], '')],
                                      'properties': ['__slots__',
                                                     'send',
                                                     'recv',
                                                     'recv_into',
                                                     'sendto',
                                                     'recvfrom',
                                                     'recvfrom_into',
                                                     '__getattr__']},
             'socket._fileobject': {'bases': ['object'],
                                    'constructor': ['sock',
                                                    "mode='rb'",
                                                    'bufsize=-1',
                                                    'close=False'],
                                    'docstring': 'Faux file object attached to a socket object.',
                                    'methods': [('_getclosed', [], ''),
                                                ('close', [], ''),
                                                ('__del__', [], ''),
                                                ('flush', [], ''),
                                                ('fileno', [], ''),
                                                ('write', ['data'], ''),
                                                ('writelines', ['list'], ''),
                                                ('read', ['size=-1'], ''),
                                                ('readline', ['size=-1'], ''),
                                                ('readlines', ['sizehint=0'], ''),
                                                ('__iter__', [], ''),
                                                ('next', [], '')],
                                    'properties': ['default_bufsize',
                                                   'name',
                                                   '__slots__',
                                                   '_sock',
                                                   'mode',
                                                   'bufsize',
                                                   'softspace',
                                                   '_rbufsize',
                                                   '_wbufsize',
                                                   '_rbuf',
                                                   '_wbuf',
                                                   '_wbuf_len',
                                                   '_close',
                                                   'closed']},
             'socket._socketobject': {'bases': ['object'],
                                      'constructor': ['family=AF_INET',
                                                      'type=SOCK_STREAM',
                                                      'proto=0',
                                                      '_sock=None'],
                                      'docstring': '',
                                      'methods': [('close',
                                                   ['_closedsocket=_closedsocket',
                                                    '_delegate_methods=_delegate_methods',
                                                    'setattr=setattr'],
                                                   ''),
                                                  ('accept', [], ''),
                                                  ('dup',
                                                   [],
                                                   'dup() -> socket object\n\n        Return a new socket object connected to the same system resource.'),
                                                  ('makefile',
                                                   ["mode='r'", 'bufsize=-1'],
                                                   'makefile([mode[, bufsize]]) -> file object\n\n        Return a regular file object corresponding to the socket.  The mode\n        and bufsize arguments are as for the built-in open() function.')],
                                      'properties': ['__doc__',
                                                     '__slots__',
                                                     '_sock',
                                                     'family',
                                                     'type',
                                                     'proto']},
             'sre_constants.error': {'bases': ['Exception'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': []},
             'sre_parse.Pattern': {'bases': [],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [('opengroup', ['name=None'], ''),
                                               ('closegroup', ['gid'], ''),
                                               ('checkgroup', ['gid'], '')],
                                   'properties': ['flags', 'open', 'groups', 'groupdict']},
             'sre_parse.SubPattern': {'bases': [],
                                      'constructor': ['pattern', 'data=None'],
                                      'docstring': '',
                                      'methods': [('dump', ['level=0'], ''),
                                                  ('__repr__', [], ''),
                                                  ('__len__', [], ''),
                                                  ('__delitem__', ['index'], ''),
                                                  ('__getitem__', ['index'], ''),
                                                  ('__setitem__', ['index', 'code'], ''),
                                                  ('insert', ['index', 'code'], ''),
                                                  ('append', ['code'], ''),
                                                  ('getwidth', [], '')],
                                      'properties': ['pattern', 'data', 'width']},
             'sre_parse.Tokenizer': {'bases': [],
                                     'constructor': ['string'],
                                     'docstring': '',
                                     'methods': [('__next', [], ''),
                                                 ('match', ['char', 'skip=1'], ''),
                                                 ('get', [], ''),
                                                 ('tell', [], ''),
                                                 ('seek', ['index'], '')],
                                     'properties': ['string', 'index', 'next']},
             'ssl.SSLSocket': {'bases': ['socket.socket'],
                               'constructor': ['sock',
                                               'keyfile=None',
                                               'certfile=None',
                                               'server_side=False',
                                               'cert_reqs=CERT_NONE',
                                               'ssl_version=PROTOCOL_SSLv23',
                                               'ca_certs=None',
                                               'do_handshake_on_connect=True',
                                               'suppress_ragged_eofs=True',
                                               'ciphers=None'],
                               'docstring': 'This class implements a subtype of socket.socket that wraps\n    the underlying OS socket in an SSL context when necessary, and\n    provides read and write methods over that channel.',
                               'methods': [('read',
                                            ['len=1024'],
                                            'Read up to LEN bytes and return them.\n        Return zero-length string on EOF.'),
                                           ('write',
                                            ['data'],
                                            'Write DATA to the underlying SSL channel.  Returns\n        number of bytes of DATA actually transmitted.'),
                                           ('getpeercert',
                                            ['binary_form=False'],
                                            'Returns a formatted version of the data in the\n        certificate provided by the other end of the SSL channel.\n        Return None if no certificate was provided, {} if a\n        certificate was provided, but not validated.'),
                                           ('cipher', [], ''),
                                           ('send', ['data', 'flags=0'], ''),
                                           ('sendto',
                                            ['data', 'flags_or_addr', 'addr=None'],
                                            ''),
                                           ('sendall', ['data', 'flags=0'], ''),
                                           ('recv', ['buflen=1024', 'flags=0'], ''),
                                           ('recv_into',
                                            ['buffer', 'nbytes=None', 'flags=0'],
                                            ''),
                                           ('recvfrom', ['buflen=1024', 'flags=0'], ''),
                                           ('recvfrom_into',
                                            ['buffer', 'nbytes=None', 'flags=0'],
                                            ''),
                                           ('pending', [], ''),
                                           ('unwrap', [], ''),
                                           ('shutdown', ['how'], ''),
                                           ('close', [], ''),
                                           ('do_handshake', [], 'Perform a TLS/SSL handshake.'),
                                           ('connect',
                                            ['addr'],
                                            'Connects to remote ADDR, and then wraps the connection in\n        an SSL channel.'),
                                           ('accept',
                                            [],
                                            'Accepts a new connection from a remote client, and returns\n        a tuple containing that new connection wrapped with a server-side\n        SSL channel, and the address of the remote client.'),
                                           ('makefile',
                                            ["mode='r'", 'bufsize=-1'],
                                            'Make and return a file-like object that\n        works with the SSL connection.  Just use the code\n        from the socket module.')],
                               'properties': ['_sslobj',
                                              'keyfile',
                                              'certfile',
                                              'cert_reqs',
                                              'ssl_version',
                                              'ca_certs',
                                              'ciphers',
                                              'do_handshake_on_connect',
                                              'suppress_ragged_eofs',
                                              '_makefile_refs']},
             'string.Formatter': {'bases': ['object'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [('format',
                                               ['format_string', '*args', '**kwargs'],
                                               ''),
                                              ('vformat',
                                               ['format_string', 'args', 'kwargs'],
                                               ''),
                                              ('_vformat',
                                               ['format_string',
                                                'args',
                                                'kwargs',
                                                'used_args',
                                                'recursion_depth'],
                                               ''),
                                              ('get_value', ['key', 'args', 'kwargs'], ''),
                                              ('check_unused_args',
                                               ['used_args', 'args', 'kwargs'],
                                               ''),
                                              ('format_field', ['value', 'format_spec'], ''),
                                              ('convert_field', ['value', 'conversion'], ''),
                                              ('parse', ['format_string'], ''),
                                              ('get_field',
                                               ['field_name', 'args', 'kwargs'],
                                               '')],
                                  'properties': []},
             'string.Template': {'bases': [],
                                 'constructor': ['template'],
                                 'docstring': 'A string class for supporting $-substitutions.',
                                 'methods': [('_invalid', ['mo'], ''),
                                             ('substitute', ['*args', '**kws'], ''),
                                             ('safe_substitute', ['*args', '**kws'], '')],
                                 'properties': ['__metaclass__',
                                                'delimiter',
                                                'idpattern',
                                                'template']},
             'string._TemplateMetaclass': {'bases': ['type'],
                                           'constructor': ['name', 'bases', 'dct'],
                                           'docstring': '',
                                           'methods': [],
                                           'properties': ['pattern']},
             'string._multimap': {'bases': [],
                                  'constructor': ['primary', 'secondary'],
                                  'docstring': 'Helper class for combining multiple mappings.\n\n    Used by .{safe_,}substitute() to combine the mapping and keyword\n    arguments.\n    ',
                                  'methods': [('__getitem__', ['key'], '')],
                                  'properties': ['_primary', '_secondary']},
             'subprocess.CalledProcessError': {'bases': ['Exception'],
                                               'constructor': ['returncode',
                                                               'cmd',
                                                               'output=None'],
                                               'docstring': 'This exception is raised when a process run by check_call() or\n    check_output() returns a non-zero exit status.\n    The exit status will be stored in the returncode attribute;\n    check_output() will also store the output in the output attribute.\n    ',
                                               'methods': [('__str__', [], '')],
                                               'properties': ['returncode', 'cmd', 'output']},
             'subprocess.Popen': {'bases': ['object'],
                                  'constructor': ['args',
                                                  'bufsize=0',
                                                  'executable=None',
                                                  'stdin=None',
                                                  'stdout=None',
                                                  'stderr=None',
                                                  'preexec_fn=None',
                                                  'close_fds=False',
                                                  'shell=False',
                                                  'cwd=None',
                                                  'env=None',
                                                  'universal_newlines=False',
                                                  'startupinfo=None',
                                                  'creationflags=0'],
                                  'docstring': '',
                                  'methods': [('_translate_newlines', ['data'], ''),
                                              ('__del__',
                                               ['_maxint=sys.maxint', '_active=_active'],
                                               ''),
                                              ('communicate',
                                               ['input=None'],
                                               'Interact with process: Send data to stdin.  Read data from\n        stdout and stderr, until end-of-file is reached.  Wait for\n        process to terminate.  The optional input argument should be a\n        string to be sent to the child process, or None, if no data\n        should be sent to the child.\n\n        communicate() returns a tuple (stdout, stderr).'),
                                              ('poll', [], ''),
                                              ('_get_handles',
                                               ['stdin', 'stdout', 'stderr'],
                                               'Construct and return tuple with IO objects:\n            p2cread, p2cwrite, c2pread, c2pwrite, errread, errwrite\n            '),
                                              ('_make_inheritable',
                                               ['handle'],
                                               'Return a duplicate of handle, which is inheritable'),
                                              ('_find_w9xpopen',
                                               [],
                                               'Find and return absolut path to w9xpopen.exe'),
                                              ('_execute_child',
                                               ['args',
                                                'executable',
                                                'preexec_fn',
                                                'close_fds',
                                                'cwd',
                                                'env',
                                                'universal_newlines',
                                                'startupinfo',
                                                'creationflags',
                                                'shell',
                                                'p2cread',
                                                'p2cwrite',
                                                'c2pread',
                                                'c2pwrite',
                                                'errread',
                                                'errwrite'],
                                               'Execute program (MS Windows version)'),
                                              ('_internal_poll',
                                               ['_deadstate=None',
                                                '_WaitForSingleObject=_subprocess.WaitForSingleObject',
                                                '_WAIT_OBJECT_0=_subprocess.WAIT_OBJECT_0',
                                                '_GetExitCodeProcess=_subprocess.GetExitCodeProcess'],
                                               'Check if child process has terminated.  Returns returncode\n            attribute.\n\n            This method is called by __del__, so it can only refer to objects\n            in its local scope.\n\n            '),
                                              ('wait',
                                               [],
                                               'Wait for child process to terminate.  Returns returncode\n            attribute.'),
                                              ('_readerthread', ['fh', 'buffer'], ''),
                                              ('_communicate', ['input'], ''),
                                              ('send_signal',
                                               ['sig'],
                                               'Send a signal to the process\n            '),
                                              ('terminate',
                                               [],
                                               'Terminates the process\n            '),
                                              ('_set_cloexec_flag', ['fd', 'cloexec=True'], ''),
                                              ('_close_fds', ['but'], ''),
                                              ('_execute_child',
                                               ['args',
                                                'executable',
                                                'preexec_fn',
                                                'close_fds',
                                                'cwd',
                                                'env',
                                                'universal_newlines',
                                                'startupinfo',
                                                'creationflags',
                                                'shell',
                                                'p2cread',
                                                'p2cwrite',
                                                'c2pread',
                                                'c2pwrite',
                                                'errread',
                                                'errwrite'],
                                               'Execute program (POSIX version)'),
                                              ('_handle_exitstatus',
                                               ['sts',
                                                '_WIFSIGNALED=os.WIFSIGNALED',
                                                '_WTERMSIG=os.WTERMSIG',
                                                '_WIFEXITED=os.WIFEXITED',
                                                '_WEXITSTATUS=os.WEXITSTATUS'],
                                               ''),
                                              ('_internal_poll',
                                               ['_deadstate=None',
                                                '_waitpid=os.waitpid',
                                                '_WNOHANG=os.WNOHANG',
                                                '_os_error=os.error'],
                                               'Check if child process has terminated.  Returns returncode\n            attribute.\n\n            This method is called by __del__, so it cannot reference anything\n            outside of the local scope (nor can any methods it calls).\n\n            '),
                                              ('_communicate_with_poll', ['input'], ''),
                                              ('_communicate_with_select', ['input'], ''),
                                              ('terminate',
                                               [],
                                               'Terminate the process with SIGTERM\n            '),
                                              ('kill',
                                               [],
                                               'Kill the process with SIGKILL\n            ')],
                                  'properties': ['_child_created',
                                                 'stdin',
                                                 'stdout',
                                                 'stderr',
                                                 'pid',
                                                 'returncode',
                                                 'universal_newlines',
                                                 '_handle',
                                                 'kill']},
             'subprocess.STARTUPINFO': {'bases': [],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': ['dwFlags',
                                                       'hStdInput',
                                                       'hStdOutput',
                                                       'hStdError',
                                                       'wShowWindow']},
             'subprocess.pywintypes': {'bases': [],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [],
                                       'properties': ['error']},
             'sunau.Au_read': {'bases': [],
                               'constructor': ['f'],
                               'docstring': '',
                               'methods': [('__del__', [], ''),
                                           ('initfp', ['file'], ''),
                                           ('getfp', [], ''),
                                           ('getnchannels', [], ''),
                                           ('getsampwidth', [], ''),
                                           ('getframerate', [], ''),
                                           ('getnframes', [], ''),
                                           ('getcomptype', [], ''),
                                           ('getcompname', [], ''),
                                           ('getparams', [], ''),
                                           ('getmarkers', [], ''),
                                           ('getmark', ['id'], ''),
                                           ('readframes', ['nframes'], ''),
                                           ('rewind', [], ''),
                                           ('tell', [], ''),
                                           ('setpos', ['pos'], ''),
                                           ('close', [], '')],
                               'properties': ['_file',
                                              '_soundpos',
                                              '_hdr_size',
                                              '_data_size',
                                              '_encoding',
                                              '_sampwidth',
                                              '_framesize',
                                              '_framerate',
                                              '_nchannels',
                                              '_info']},
             'sunau.Au_write': {'bases': [],
                                'constructor': ['f'],
                                'docstring': '',
                                'methods': [('__del__', [], ''),
                                            ('initfp', ['file'], ''),
                                            ('setnchannels', ['nchannels'], ''),
                                            ('getnchannels', [], ''),
                                            ('setsampwidth', ['sampwidth'], ''),
                                            ('getsampwidth', [], ''),
                                            ('setframerate', ['framerate'], ''),
                                            ('getframerate', [], ''),
                                            ('setnframes', ['nframes'], ''),
                                            ('getnframes', [], ''),
                                            ('setcomptype', ['type', 'name'], ''),
                                            ('getcomptype', [], ''),
                                            ('getcompname', [], ''),
                                            ('setparams', ['params'], ''),
                                            ('getparams', [], ''),
                                            ('tell', [], ''),
                                            ('writeframesraw', ['data'], ''),
                                            ('writeframes', ['data'], ''),
                                            ('close', [], ''),
                                            ('_ensure_header_written', [], ''),
                                            ('_write_header', [], ''),
                                            ('_patchheader', [], '')],
                                'properties': ['_file',
                                               '_framerate',
                                               '_nchannels',
                                               '_sampwidth',
                                               '_framesize',
                                               '_nframes',
                                               '_nframeswritten',
                                               '_datawritten',
                                               '_datalength',
                                               '_info',
                                               '_comptype']},
             'sunau.Error': {'bases': ['Exception'],
                             'constructor': [],
                             'docstring': '',
                             'methods': [],
                             'properties': []},
             'sunaudio.error': {'bases': ['Exception'],
                                'constructor': [],
                                'docstring': '',
                                'methods': [],
                                'properties': []},
             'symtable.Class': {'bases': ['symtable.SymbolTable'],
                                'constructor': [],
                                'docstring': '',
                                'methods': [('get_methods', [], '')],
                                'properties': ['__methods']},
             'symtable.Function': {'bases': ['symtable.SymbolTable'],
                                   'constructor': [],
                                   'docstring': '',
                                   'methods': [('__idents_matching', ['test_func'], ''),
                                               ('get_parameters', [], ''),
                                               ('get_locals', [], ''),
                                               ('get_globals', [], ''),
                                               ('get_frees', [], '')],
                                   'properties': ['__params',
                                                  '__locals',
                                                  '__frees',
                                                  '__globals']},
             'symtable.Symbol': {'bases': ['object'],
                                 'constructor': ['name', 'flags', 'namespaces=None'],
                                 'docstring': '',
                                 'methods': [('__repr__', [], ''),
                                             ('get_name', [], ''),
                                             ('is_referenced', [], ''),
                                             ('is_parameter', [], ''),
                                             ('is_global', [], ''),
                                             ('is_declared_global', [], ''),
                                             ('is_local', [], ''),
                                             ('is_free', [], ''),
                                             ('is_imported', [], ''),
                                             ('is_assigned', [], ''),
                                             ('is_namespace',
                                              [],
                                              'Returns true if name binding introduces new namespace.\n\n        If the name is used as the target of a function or class\n        statement, this will be true.\n\n        Note that a single name can be bound to multiple objects.  If\n        is_namespace() is true, the name may also be bound to other\n        objects, like an int or list, that does not introduce a new\n        namespace.\n        '),
                                             ('get_namespaces',
                                              [],
                                              'Return a list of namespaces bound to this name'),
                                             ('get_namespace',
                                              [],
                                              'Returns the single namespace bound to this name.\n\n        Raises ValueError if the name is bound to multiple namespaces.\n        ')],
                                 'properties': ['__name', '__flags', '__scope', '__namespaces']},
             'symtable.SymbolTable': {'bases': ['object'],
                                      'constructor': ['raw_table', 'filename'],
                                      'docstring': '',
                                      'methods': [('__repr__', [], ''),
                                                  ('get_type', [], ''),
                                                  ('get_id', [], ''),
                                                  ('get_name', [], ''),
                                                  ('get_lineno', [], ''),
                                                  ('is_optimized', [], ''),
                                                  ('is_nested', [], ''),
                                                  ('has_children', [], ''),
                                                  ('has_exec',
                                                   [],
                                                   'Return true if the scope uses exec'),
                                                  ('has_import_star',
                                                   [],
                                                   'Return true if the scope uses import *'),
                                                  ('get_identifiers', [], ''),
                                                  ('lookup', ['name'], ''),
                                                  ('get_symbols', [], ''),
                                                  ('__check_children', ['name'], ''),
                                                  ('get_children', [], '')],
                                      'properties': ['_table', '_filename', '_symbols']},
             'symtable.SymbolTableFactory': {'bases': [],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('new', ['table', 'filename'], ''),
                                                         ('__call__',
                                                          ['table', 'filename'],
                                                          '')],
                                             'properties': ['__memo']},
             'tabnanny.NannyNag': {'bases': ['Exception'],
                                   'constructor': ['lineno', 'msg', 'line'],
                                   'docstring': '\n    Raised by tokeneater() if detecting an ambiguous indent.\n    Captured and handled in check().\n    ',
                                   'methods': [('get_lineno', [], ''),
                                               ('get_msg', [], ''),
                                               ('get_line', [], '')],
                                   'properties': ['lineno', 'msg', 'line']},
             'tabnanny.Whitespace': {'bases': [],
                                     'constructor': ['ws'],
                                     'docstring': '',
                                     'methods': [('longest_run_of_spaces', [], ''),
                                                 ('indent_level', ['tabsize'], ''),
                                                 ('equal', ['other'], ''),
                                                 ('not_equal_witness', ['other'], ''),
                                                 ('less', ['other'], ''),
                                                 ('not_less_witness', ['other'], '')],
                                     'properties': ['S',
                                                    'T',
                                                    'raw',
                                                    'n',
                                                    'nt',
                                                    'norm',
                                                    'is_simple']},
             'tarfile.CompressionError': {'bases': ['tarfile.TarError'],
                                          'constructor': [],
                                          'docstring': 'Exception for unavailable compression methods.',
                                          'methods': [],
                                          'properties': []},
             'tarfile.EOFHeaderError': {'bases': ['tarfile.HeaderError'],
                                        'constructor': [],
                                        'docstring': 'Exception for end of file headers.',
                                        'methods': [],
                                        'properties': []},
             'tarfile.EmptyHeaderError': {'bases': ['tarfile.HeaderError'],
                                          'constructor': [],
                                          'docstring': 'Exception for empty headers.',
                                          'methods': [],
                                          'properties': []},
             'tarfile.ExFileObject': {'bases': ['object'],
                                      'constructor': ['tarfile', 'tarinfo'],
                                      'docstring': 'File-like object for reading an archive member.\n       Is returned by TarFile.extractfile().\n    ',
                                      'methods': [('read',
                                                   ['size=None'],
                                                   'Read at most size bytes from the file. If size is not\n           present or None, read all data until EOF is reached.\n        '),
                                                  ('readline',
                                                   ['size=-1'],
                                                   'Read one entire line from the file. If size is present\n           and non-negative, return a string with at most that\n           size, which may be an incomplete line.\n        '),
                                                  ('readlines',
                                                   [],
                                                   'Return a list with all remaining lines.\n        '),
                                                  ('tell',
                                                   [],
                                                   'Return the current file position.\n        '),
                                                  ('seek',
                                                   ['pos', 'whence=os.SEEK_SET'],
                                                   'Seek to a position in the file.\n        '),
                                                  ('close',
                                                   [],
                                                   'Close the file object.\n        '),
                                                  ('__iter__',
                                                   [],
                                                   "Get an iterator over the file's lines.\n        ")],
                                      'properties': ['blocksize',
                                                     'fileobj',
                                                     'name',
                                                     'mode',
                                                     'closed',
                                                     'size',
                                                     'position',
                                                     'buffer']},
             'tarfile.ExtractError': {'bases': ['tarfile.TarError'],
                                      'constructor': [],
                                      'docstring': 'General exception for extract errors.',
                                      'methods': [],
                                      'properties': []},
             'tarfile.HeaderError': {'bases': ['tarfile.TarError'],
                                     'constructor': [],
                                     'docstring': 'Base exception for header errors.',
                                     'methods': [],
                                     'properties': []},
             'tarfile.InvalidHeaderError': {'bases': ['tarfile.HeaderError'],
                                            'constructor': [],
                                            'docstring': 'Exception for invalid headers.',
                                            'methods': [],
                                            'properties': []},
             'tarfile.ReadError': {'bases': ['tarfile.TarError'],
                                   'constructor': [],
                                   'docstring': 'Exception for unreadble tar archives.',
                                   'methods': [],
                                   'properties': []},
             'tarfile.StreamError': {'bases': ['tarfile.TarError'],
                                     'constructor': [],
                                     'docstring': 'Exception for unsupported operations on stream-like TarFiles.',
                                     'methods': [],
                                     'properties': []},
             'tarfile.SubsequentHeaderError': {'bases': ['tarfile.HeaderError'],
                                               'constructor': [],
                                               'docstring': 'Exception for missing and invalid extended headers.',
                                               'methods': [],
                                               'properties': []},
             'tarfile.TarError': {'bases': ['Exception'],
                                  'constructor': [],
                                  'docstring': 'Base exception.',
                                  'methods': [],
                                  'properties': []},
             'tarfile.TarFile': {'bases': ['object'],
                                 'constructor': ['name=None',
                                                 "mode='r'",
                                                 'fileobj=None',
                                                 'format=None',
                                                 'tarinfo=None',
                                                 'dereference=None',
                                                 'ignore_zeros=None',
                                                 'encoding=None',
                                                 'errors=None',
                                                 'pax_headers=None',
                                                 'debug=None',
                                                 'errorlevel=None'],
                                 'docstring': 'The TarFile Class provides an interface to tar archives.\n    ',
                                 'methods': [('_getposix', [], ''),
                                             ('_setposix', ['value'], ''),
                                             ('open',
                                              ['name=None',
                                               "mode='r'",
                                               'fileobj=None',
                                               'bufsize=RECORDSIZE',
                                               '**kwargs'],
                                              "Open a tar archive for reading, writing or appending. Return\n           an appropriate TarFile class.\n\n           mode:\n           'r' or 'r:*' open for reading with transparent compression\n           'r:'         open for reading exclusively uncompressed\n           'r:gz'       open for reading with gzip compression\n           'r:bz2'      open for reading with bzip2 compression\n           'a' or 'a:'  open for appending, creating the file if necessary\n           'w' or 'w:'  open for writing without compression\n           'w:gz'       open for writing with gzip compression\n           'w:bz2'      open for writing with bzip2 compression\n\n           'r|*'        open a stream of tar blocks with transparent compression\n           'r|'         open an uncompressed stream of tar blocks for reading\n           'r|gz'       open a gzip compressed stream of tar blocks\n           'r|bz2'      open a bzip2 compressed stream of tar blocks\n           'w|'         open an uncompressed stream for writing\n           'w|gz'       open a gzip compressed stream for writing\n           'w|bz2'      open a bzip2 compressed stream for writing\n        "),
                                             ('taropen',
                                              ['name', "mode='r'", 'fileobj=None', '**kwargs'],
                                              'Open uncompressed tar archive name for reading or writing.\n        '),
                                             ('gzopen',
                                              ['name',
                                               "mode='r'",
                                               'fileobj=None',
                                               'compresslevel=9',
                                               '**kwargs'],
                                              'Open gzip compressed tar archive name for reading or writing.\n           Appending is not allowed.\n        '),
                                             ('bz2open',
                                              ['name',
                                               "mode='r'",
                                               'fileobj=None',
                                               'compresslevel=9',
                                               '**kwargs'],
                                              'Open bzip2 compressed tar archive name for reading or writing.\n           Appending is not allowed.\n        '),
                                             ('close',
                                              [],
                                              'Close the TarFile. In write-mode, two finishing zero blocks are\n           appended to the archive.\n        '),
                                             ('getmember',
                                              ['name'],
                                              "Return a TarInfo object for member `name'. If `name' can not be\n           found in the archive, KeyError is raised. If a member occurs more\n           than once in the archive, its last occurrence is assumed to be the\n           most up-to-date version.\n        "),
                                             ('getmembers',
                                              [],
                                              'Return the members of the archive as a list of TarInfo objects. The\n           list has the same order as the members in the archive.\n        '),
                                             ('getnames',
                                              [],
                                              'Return the members of the archive as a list of their names. It has\n           the same order as the list returned by getmembers().\n        '),
                                             ('gettarinfo',
                                              ['name=None', 'arcname=None', 'fileobj=None'],
                                              "Create a TarInfo object for either the file `name' or the file\n           object `fileobj' (using os.fstat on its file descriptor). You can\n           modify some of the TarInfo's attributes before you add it using\n           addfile(). If given, `arcname' specifies an alternative name for the\n           file in the archive.\n        "),
                                             ('list',
                                              ['verbose=True'],
                                              "Print a table of contents to sys.stdout. If `verbose' is False, only\n           the names of the members are printed. If it is True, an `ls -l'-like\n           output is produced.\n        "),
                                             ('add',
                                              ['name',
                                               'arcname=None',
                                               'recursive=True',
                                               'exclude=None',
                                               'filter=None'],
                                              "Add the file `name' to the archive. `name' may be any type of file\n           (directory, fifo, symbolic link, etc.). If given, `arcname'\n           specifies an alternative name for the file in the archive.\n           Directories are added recursively by default. This can be avoided by\n           setting `recursive' to False. `exclude' is a function that should\n           return True for each filename to be excluded. `filter' is a function\n           that expects a TarInfo object argument and returns the changed\n           TarInfo object, if it returns None the TarInfo object will be\n           excluded from the archive.\n        "),
                                             ('addfile',
                                              ['tarinfo', 'fileobj=None'],
                                              "Add the TarInfo object `tarinfo' to the archive. If `fileobj' is\n           given, tarinfo.size bytes are read from it and added to the archive.\n           You can create TarInfo objects using gettarinfo().\n           On Windows platforms, `fileobj' should always be opened with mode\n           'rb' to avoid irritation about the file size.\n        "),
                                             ('extractall',
                                              ["path='.'", 'members=None'],
                                              "Extract all members from the archive to the current working\n           directory and set owner, modification time and permissions on\n           directories afterwards. `path' specifies a different directory\n           to extract to. `members' is optional and must be a subset of the\n           list returned by getmembers().\n        "),
                                             ('extract',
                                              ['member', "path=''"],
                                              "Extract a member from the archive to the current working directory,\n           using its full name. Its file information is extracted as accurately\n           as possible. `member' may be a filename or a TarInfo object. You can\n           specify a different directory using `path'.\n        "),
                                             ('extractfile',
                                              ['member'],
                                              "Extract a member from the archive as a file object. `member' may be\n           a filename or a TarInfo object. If `member' is a regular file, a\n           file-like object is returned. If `member' is a link, a file-like\n           object is constructed from the link's target. If `member' is none of\n           the above, None is returned.\n           The file-like object is read-only and provides the following\n           methods: read(), readline(), readlines(), seek() and tell()\n        "),
                                             ('_extract_member',
                                              ['tarinfo', 'targetpath'],
                                              'Extract the TarInfo object tarinfo to a physical\n           file called targetpath.\n        '),
                                             ('makedir',
                                              ['tarinfo', 'targetpath'],
                                              'Make a directory called targetpath.\n        '),
                                             ('makefile',
                                              ['tarinfo', 'targetpath'],
                                              'Make a file called targetpath.\n        '),
                                             ('makeunknown',
                                              ['tarinfo', 'targetpath'],
                                              'Make a file from a TarInfo object with an unknown type\n           at targetpath.\n        '),
                                             ('makefifo',
                                              ['tarinfo', 'targetpath'],
                                              'Make a fifo called targetpath.\n        '),
                                             ('makedev',
                                              ['tarinfo', 'targetpath'],
                                              'Make a character or block device called targetpath.\n        '),
                                             ('makelink',
                                              ['tarinfo', 'targetpath'],
                                              'Make a (symbolic) link called targetpath. If it cannot be created\n          (platform limitation), we try to make a copy of the referenced file\n          instead of a link.\n        '),
                                             ('chown',
                                              ['tarinfo', 'targetpath'],
                                              'Set owner of targetpath according to tarinfo.\n        '),
                                             ('chmod',
                                              ['tarinfo', 'targetpath'],
                                              'Set file permissions of targetpath according to tarinfo.\n        '),
                                             ('utime',
                                              ['tarinfo', 'targetpath'],
                                              'Set modification time of targetpath according to tarinfo.\n        '),
                                             ('next',
                                              [],
                                              'Return the next member of the archive as a TarInfo object, when\n           TarFile is opened for reading. Return None if there is no more\n           available.\n        '),
                                             ('_getmember',
                                              ['name', 'tarinfo=None', 'normalize=False'],
                                              'Find an archive member by name from bottom to top.\n           If tarinfo is given, it is used as the starting point.\n        '),
                                             ('_load',
                                              [],
                                              'Read through the entire archive file and look for readable\n           members.\n        '),
                                             ('_check',
                                              ['mode=None'],
                                              "Check if TarFile is still open, and if the operation's mode\n           corresponds to TarFile's mode.\n        "),
                                             ('_find_link_target',
                                              ['tarinfo'],
                                              'Find the target member of a symlink or hardlink member in the\n           archive.\n        '),
                                             ('__iter__',
                                              [],
                                              'Provide an iterator object.\n        '),
                                             ('_dbg',
                                              ['level', 'msg'],
                                              'Write debugging output to sys.stderr.\n        '),
                                             ('__enter__', [], ''),
                                             ('__exit__', ['type', 'value', 'traceback'], '')],
                                 'properties': ['debug',
                                                'dereference',
                                                'ignore_zeros',
                                                'errorlevel',
                                                'format',
                                                'encoding',
                                                'errors',
                                                'tarinfo',
                                                'fileobject',
                                                'mode',
                                                '_mode',
                                                '_extfileobj',
                                                'name',
                                                'fileobj',
                                                'pax_headers',
                                                'closed',
                                                'members',
                                                '_loaded',
                                                'offset',
                                                'inodes',
                                                'firstmember',
                                                'posix',
                                                'OPEN_METH']},
             'tarfile.TarFileCompat': {'bases': [],
                                       'constructor': ['file',
                                                       "mode='r'",
                                                       'compression=TAR_PLAIN'],
                                       'docstring': "TarFile class compatible with standard module zipfile's\n       ZipFile class.\n    ",
                                       'methods': [('namelist', [], ''),
                                                   ('infolist', [], ''),
                                                   ('printdir', [], ''),
                                                   ('testzip', [], ''),
                                                   ('getinfo', ['name'], ''),
                                                   ('read', ['name'], ''),
                                                   ('write',
                                                    ['filename',
                                                     'arcname=None',
                                                     'compress_type=None'],
                                                    ''),
                                                   ('writestr', ['zinfo', 'bytes'], ''),
                                                   ('close', [], '')],
                                       'properties': ['tarfile']},
             'tarfile.TarInfo': {'bases': ['object'],
                                 'constructor': ["name=''"],
                                 'docstring': 'Informational class which holds the details about an\n       archive member given by a tar header block.\n       TarInfo objects are returned by TarFile.getmember(),\n       TarFile.getmembers() and TarFile.gettarinfo() and are\n       usually created internally.\n    ',
                                 'methods': [('_getpath', [], ''),
                                             ('_setpath', ['name'], ''),
                                             ('_getlinkpath', [], ''),
                                             ('_setlinkpath', ['linkname'], ''),
                                             ('__repr__', [], ''),
                                             ('get_info',
                                              ['encoding', 'errors'],
                                              "Return the TarInfo's attributes as a dictionary.\n        "),
                                             ('tobuf',
                                              ['format=DEFAULT_FORMAT',
                                               'encoding=ENCODING',
                                               "errors='strict'"],
                                              'Return a tar header as a string of 512 byte blocks.\n        '),
                                             ('create_ustar_header',
                                              ['info'],
                                              'Return the object as a ustar header block.\n        '),
                                             ('create_gnu_header',
                                              ['info'],
                                              'Return the object as a GNU header block sequence.\n        '),
                                             ('create_pax_header',
                                              ['info', 'encoding', 'errors'],
                                              'Return the object as a ustar header block. If it cannot be\n           represented this way, prepend a pax extended header sequence\n           with supplement information.\n        '),
                                             ('create_pax_global_header',
                                              ['pax_headers'],
                                              'Return the object as a pax global header block sequence.\n        '),
                                             ('_posix_split_name',
                                              ['name'],
                                              'Split a name longer than 100 chars into a prefix\n           and a name part.\n        '),
                                             ('_create_header',
                                              ['format'],
                                              'Return a header block. info is a dictionary with file\n           information, format must be one of the *_FORMAT constants.\n        '),
                                             ('_create_payload',
                                              [],
                                              'Return the string payload filled with zero bytes\n           up to the next 512 byte border.\n        '),
                                             ('_create_gnu_long_header',
                                              ['name', 'type'],
                                              'Return a GNUTYPE_LONGNAME or GNUTYPE_LONGLINK sequence\n           for name.\n        '),
                                             ('_create_pax_generic_header',
                                              ['pax_headers', 'type=XHDTYPE'],
                                              'Return a POSIX.1-2001 extended or global header sequence\n           that contains a list of keyword, value pairs. The values\n           must be unicode objects.\n        '),
                                             ('frombuf',
                                              ['buf'],
                                              'Construct a TarInfo object from a 512 byte string buffer.\n        '),
                                             ('fromtarfile',
                                              ['tarfile'],
                                              'Return the next TarInfo object from TarFile object\n           tarfile.\n        '),
                                             ('_proc_member',
                                              ['tarfile'],
                                              'Choose the right processing method depending on\n           the type and call it.\n        '),
                                             ('_proc_builtin',
                                              ['tarfile'],
                                              'Process a builtin type or an unknown type which\n           will be treated as a regular file.\n        '),
                                             ('_proc_gnulong',
                                              ['tarfile'],
                                              'Process the blocks that hold a GNU longname\n           or longlink member.\n        '),
                                             ('_proc_sparse',
                                              ['tarfile'],
                                              'Process a GNU sparse header plus extra headers.\n        '),
                                             ('_proc_pax',
                                              ['tarfile'],
                                              'Process an extended or global header as described in\n           POSIX.1-2001.\n        '),
                                             ('_apply_pax_info',
                                              ['pax_headers', 'encoding', 'errors'],
                                              'Replace fields with supplemental information from a previous\n           pax extended or global header.\n        '),
                                             ('_block',
                                              ['count'],
                                              'Round up a byte count by BLOCKSIZE and return it,\n           e.g. _block(834) => 1024.\n        '),
                                             ('isreg', [], ''),
                                             ('isfile', [], ''),
                                             ('isdir', [], ''),
                                             ('issym', [], ''),
                                             ('islnk', [], ''),
                                             ('ischr', [], ''),
                                             ('isblk', [], ''),
                                             ('isfifo', [], ''),
                                             ('issparse', [], ''),
                                             ('isdev', [], '')],
                                 'properties': ['name',
                                                'mode',
                                                'uid',
                                                'gid',
                                                'size',
                                                'mtime',
                                                'chksum',
                                                'type',
                                                'linkname',
                                                'uname',
                                                'gname',
                                                'devmajor',
                                                'devminor',
                                                'offset',
                                                'offset_data',
                                                'pax_headers',
                                                'path',
                                                'linkpath',
                                                'sparse']},
             'tarfile.TarIter': {'bases': [],
                                 'constructor': ['tarfile'],
                                 'docstring': 'Iterator Class.\n\n       for tarinfo in TarFile(...):\n           suite...\n    ',
                                 'methods': [('__iter__',
                                              [],
                                              'Return iterator object.\n        '),
                                             ('next',
                                              [],
                                              "Return the next item using TarFile's next() method.\n           When all members have been read, set TarFile as _loaded.\n        ")],
                                 'properties': ['tarfile', 'index']},
             'tarfile.TruncatedHeaderError': {'bases': ['tarfile.HeaderError'],
                                              'constructor': [],
                                              'docstring': 'Exception for truncated headers.',
                                              'methods': [],
                                              'properties': []},
             'tarfile._BZ2Proxy': {'bases': ['object'],
                                   'constructor': ['fileobj', 'mode'],
                                   'docstring': 'Small proxy class that enables external file object\n       support for "r:bz2" and "w:bz2" modes. This is actually\n       a workaround for a limitation in bz2 module\'s BZ2File\n       class which (unlike gzip.GzipFile) has no support for\n       a file object argument.\n    ',
                                   'methods': [('init', [], ''),
                                               ('read', ['size'], ''),
                                               ('seek', ['pos'], ''),
                                               ('tell', [], ''),
                                               ('write', ['data'], ''),
                                               ('close', [], '')],
                                   'properties': ['blocksize',
                                                  'fileobj',
                                                  'mode',
                                                  'name',
                                                  'pos',
                                                  'bz2obj',
                                                  'buf']},
             'tarfile._FileInFile': {'bases': ['object'],
                                     'constructor': ['fileobj', 'offset', 'size', 'sparse=None'],
                                     'docstring': 'A thin wrapper around an existing file object that\n       provides a part of its data as an individual file\n       object.\n    ',
                                     'methods': [('tell',
                                                  [],
                                                  'Return the current file position.\n        '),
                                                 ('seek',
                                                  ['position'],
                                                  'Seek to a position in the file.\n        '),
                                                 ('read',
                                                  ['size=None'],
                                                  'Read data from the file.\n        '),
                                                 ('readnormal',
                                                  ['size'],
                                                  'Read operation for regular files.\n        '),
                                                 ('readsparse',
                                                  ['size'],
                                                  'Read operation for sparse files.\n        '),
                                                 ('readsparsesection',
                                                  ['size'],
                                                  'Read a single section of a sparse file.\n        ')],
                                     'properties': ['fileobj',
                                                    'offset',
                                                    'size',
                                                    'sparse',
                                                    'position']},
             'tarfile._LowLevelFile': {'bases': [],
                                       'constructor': ['name', 'mode'],
                                       'docstring': 'Low-level file object. Supports reading and writing.\n       It is used instead of a regular file object for streaming\n       access.\n    ',
                                       'methods': [('close', [], ''),
                                                   ('read', ['size'], ''),
                                                   ('write', ['s'], '')],
                                       'properties': ['fd']},
             'tarfile._Stream': {'bases': [],
                                 'constructor': ['name',
                                                 'mode',
                                                 'comptype',
                                                 'fileobj',
                                                 'bufsize'],
                                 'docstring': 'Class that serves as an adapter between TarFile and\n       a stream-like object.  The stream-like object only\n       needs to have a read() or write() method and is accessed\n       blockwise.  Use of gzip or bzip2 compression is possible.\n       A stream-like object could be for example: sys.stdin,\n       sys.stdout, a socket, a tape device etc.\n\n       _Stream is intended to be used only internally.\n    ',
                                 'methods': [('__del__', [], ''),
                                             ('_init_write_gz',
                                              [],
                                              'Initialize for writing with gzip compression.\n        '),
                                             ('write',
                                              ['s'],
                                              'Write string s to the stream.\n        '),
                                             ('__write',
                                              ['s'],
                                              'Write string s to the stream if a whole new block\n           is ready to be written.\n        '),
                                             ('close',
                                              [],
                                              'Close the _Stream object. No operation should be\n           done on it afterwards.\n        '),
                                             ('_init_read_gz',
                                              [],
                                              'Initialize for reading a gzip compressed fileobj.\n        '),
                                             ('tell',
                                              [],
                                              "Return the stream's file pointer position.\n        "),
                                             ('seek',
                                              ['pos=0'],
                                              "Set the stream's file pointer to pos. Negative seeking\n           is forbidden.\n        "),
                                             ('read',
                                              ['size=None'],
                                              'Return the next size number of bytes from the stream.\n           If size is not defined, return all bytes of the stream\n           up to EOF.\n        '),
                                             ('_read',
                                              ['size'],
                                              'Return size bytes from the stream.\n        '),
                                             ('__read',
                                              ['size'],
                                              'Return size bytes from stream. If internal buffer is empty,\n           read another block from the stream.\n        ')],
                                 'properties': ['_extfileobj',
                                                'name',
                                                'mode',
                                                'comptype',
                                                'fileobj',
                                                'bufsize',
                                                'buf',
                                                'pos',
                                                'closed',
                                                'zlib',
                                                'crc',
                                                'dbuf',
                                                'cmp']},
             'tarfile._StreamProxy': {'bases': ['object'],
                                      'constructor': ['fileobj'],
                                      'docstring': "Small proxy class that enables transparent compression\n       detection for the Stream interface (mode 'r|*').\n    ",
                                      'methods': [('read', ['size'], ''),
                                                  ('getcomptype', [], ''),
                                                  ('close', [], '')],
                                      'properties': ['fileobj', 'buf', 'read']},
             'tarfile._data': {'bases': ['tarfile._section'],
                               'constructor': ['offset', 'size', 'realpos'],
                               'docstring': 'Represent a data section in a sparse file.\n    ',
                               'methods': [],
                               'properties': ['realpos']},
             'tarfile._hole': {'bases': ['tarfile._section'],
                               'constructor': [],
                               'docstring': 'Represent a hole section in a sparse file.\n    ',
                               'methods': [],
                               'properties': []},
             'tarfile._ringbuffer': {'bases': ['list'],
                                     'constructor': [],
                                     'docstring': 'Ringbuffer class which increases performance\n       over a regular list.\n    ',
                                     'methods': [('find', ['offset'], '')],
                                     'properties': ['idx']},
             'tarfile._section': {'bases': [],
                                  'constructor': ['offset', 'size'],
                                  'docstring': 'Base class for _data and _hole.\n    ',
                                  'methods': [('__contains__', ['offset'], '')],
                                  'properties': ['offset', 'size']},
             'telnetlib.Telnet': {'bases': [],
                                  'constructor': ['host=None',
                                                  'port=0',
                                                  'timeout=socket._GLOBAL_DEFAULT_TIMEOUT'],
                                  'docstring': "Telnet interface class.\n\n    An instance of this class represents a connection to a telnet\n    server.  The instance is initially not connected; the open()\n    method must be used to establish a connection.  Alternatively, the\n    host name and optional port number can be passed to the\n    constructor, too.\n\n    Don't try to reopen an already connected instance.\n\n    This class has many read_*() methods.  Note that some of them\n    raise EOFError when the end of the connection is read, because\n    they can return an empty string for other reasons.  See the\n    individual doc strings.\n\n    read_until(expected, [timeout])\n        Read until the expected string has been seen, or a timeout is\n        hit (default is no timeout); may block.\n\n    read_all()\n        Read all data until EOF; may block.\n\n    read_some()\n        Read at least one byte or EOF; may block.\n\n    read_very_eager()\n        Read all data available already queued or on the socket,\n        without blocking.\n\n    read_eager()\n        Read either data already queued or some data available on the\n        socket, without blocking.\n\n    read_lazy()\n        Read all data in the raw queue (processing it first), without\n        doing any socket I/O.\n\n    read_very_lazy()\n        Reads all data in the cooked queue, without doing any socket\n        I/O.\n\n    read_sb_data()\n        Reads available data between SB ... SE sequence. Don't block.\n\n    set_option_negotiation_callback(callback)\n        Each time a telnet option is read on the input flow, this callback\n        (if set) is called with the following parameters :\n        callback(telnet socket, command, option)\n            option will be chr(0) when there is no option.\n        No other action is done afterwards by telnetlib.\n\n    ",
                                  'methods': [('open',
                                               ['host',
                                                'port=0',
                                                'timeout=socket._GLOBAL_DEFAULT_TIMEOUT'],
                                               "Connect to a host.\n\n        The optional second argument is the port number, which\n        defaults to the standard telnet port (23).\n\n        Don't try to reopen an already connected instance.\n        "),
                                              ('__del__',
                                               [],
                                               'Destructor -- close the connection.'),
                                              ('msg',
                                               ['msg', '*args'],
                                               'Print a debug message, when the debug level is > 0.\n\n        If extra arguments are present, they are substituted in the\n        message using the standard string formatting operator.\n\n        '),
                                              ('set_debuglevel',
                                               ['debuglevel'],
                                               'Set the debug level.\n\n        The higher it is, the more debug output you get (on sys.stdout).\n\n        '),
                                              ('close', [], 'Close the connection.'),
                                              ('get_socket',
                                               [],
                                               'Return the socket object used internally.'),
                                              ('fileno',
                                               [],
                                               'Return the fileno() of the socket object used internally.'),
                                              ('write',
                                               ['buffer'],
                                               'Write a string to the socket, doubling any IAC characters.\n\n        Can block if the connection is blocked.  May raise\n        socket.error if the connection is closed.\n\n        '),
                                              ('read_until',
                                               ['match', 'timeout=None'],
                                               'Read until a given string is encountered or until timeout.\n\n        When no match is found, return whatever is available instead,\n        possibly the empty string.  Raise EOFError if the connection\n        is closed and no cooked data is available.\n\n        '),
                                              ('read_all',
                                               [],
                                               'Read all data until EOF; block until connection closed.'),
                                              ('read_some',
                                               [],
                                               "Read at least one byte of cooked data unless EOF is hit.\n\n        Return '' if EOF is hit.  Block if no data is immediately\n        available.\n\n        "),
                                              ('read_very_eager',
                                               [],
                                               "Read everything that's possible without blocking in I/O (eager).\n\n        Raise EOFError if connection closed and no cooked data\n        available.  Return '' if no cooked data available otherwise.\n        Don't block unless in the midst of an IAC sequence.\n\n        "),
                                              ('read_eager',
                                               [],
                                               "Read readily available data.\n\n        Raise EOFError if connection closed and no cooked data\n        available.  Return '' if no cooked data available otherwise.\n        Don't block unless in the midst of an IAC sequence.\n\n        "),
                                              ('read_lazy',
                                               [],
                                               "Process and return data that's already in the queues (lazy).\n\n        Raise EOFError if connection closed and no data available.\n        Return '' if no cooked data available otherwise.  Don't block\n        unless in the midst of an IAC sequence.\n\n        "),
                                              ('read_very_lazy',
                                               [],
                                               "Return any data available in the cooked queue (very lazy).\n\n        Raise EOFError if connection closed and no data available.\n        Return '' if no cooked data available otherwise.  Don't block.\n\n        "),
                                              ('read_sb_data',
                                               [],
                                               "Return any data available in the SB ... SE queue.\n\n        Return '' if no SB ... SE available. Should only be called\n        after seeing a SB or SE command. When a new SB command is\n        found, old unread SB data will be discarded. Don't block.\n\n        "),
                                              ('set_option_negotiation_callback',
                                               ['callback'],
                                               'Provide a callback function called after each receipt of a telnet option.'),
                                              ('process_rawq',
                                               [],
                                               "Transfer from raw queue to cooked queue.\n\n        Set self.eof when connection is closed.  Don't block unless in\n        the midst of an IAC sequence.\n\n        "),
                                              ('rawq_getchar',
                                               [],
                                               'Get next char from raw queue.\n\n        Block if no data is immediately available.  Raise EOFError\n        when connection is closed.\n\n        '),
                                              ('fill_rawq',
                                               [],
                                               'Fill raw queue from exactly one recv() system call.\n\n        Block if no data is immediately available.  Set self.eof when\n        connection is closed.\n\n        '),
                                              ('sock_avail',
                                               [],
                                               'Test whether data is available on the socket.'),
                                              ('interact',
                                               [],
                                               'Interaction function, emulates a very dumb telnet client.'),
                                              ('mt_interact',
                                               [],
                                               'Multithreaded version of interact().'),
                                              ('listener',
                                               [],
                                               'Helper for mt_interact() -- this executes in the other thread.'),
                                              ('expect',
                                               ['list', 'timeout=None'],
                                               "Read until one from a list of a regular expressions matches.\n\n        The first argument is a list of regular expressions, either\n        compiled (re.RegexObject instances) or uncompiled (strings).\n        The optional second argument is a timeout, in seconds; default\n        is no timeout.\n\n        Return a tuple of three items: the index in the list of the\n        first regular expression that matches; the match object\n        returned; and the text read up till and including the match.\n\n        If EOF is read and no text was read, raise EOFError.\n        Otherwise, when nothing matches, return (-1, None, text) where\n        text is the text received so far (may be the empty string if a\n        timeout happened).\n\n        If a regular expression ends with a greedy match (e.g. '.*')\n        or if more than one expression can match the same input, the\n        results are undeterministic, and may depend on the I/O timing.\n\n        ")],
                                  'properties': ['debuglevel',
                                                 'host',
                                                 'port',
                                                 'timeout',
                                                 'sock',
                                                 'rawq',
                                                 'irawq',
                                                 'cookedq',
                                                 'eof',
                                                 'iacseq',
                                                 'sb',
                                                 'sbdataq',
                                                 'option_callback']},
             'tempfile.SpooledTemporaryFile': {'bases': [],
                                               'constructor': ['max_size=0',
                                                               "mode='w+b'",
                                                               'bufsize=-1',
                                                               "suffix=''",
                                                               'prefix=template',
                                                               'dir=None'],
                                               'docstring': 'Temporary file wrapper, specialized to switch from\n    StringIO to a real file when it exceeds a certain size or\n    when a fileno is needed.\n    ',
                                               'methods': [('_check', ['file'], ''),
                                                           ('rollover', [], ''),
                                                           ('__enter__', [], ''),
                                                           ('__exit__',
                                                            ['exc', 'value', 'tb'],
                                                            ''),
                                                           ('__iter__', [], ''),
                                                           ('close', [], ''),
                                                           ('fileno', [], ''),
                                                           ('flush', [], ''),
                                                           ('isatty', [], ''),
                                                           ('next', [], ''),
                                                           ('read', ['*args'], ''),
                                                           ('readline', ['*args'], ''),
                                                           ('readlines', ['*args'], ''),
                                                           ('seek', ['*args'], ''),
                                                           ('tell', [], ''),
                                                           ('truncate', [], ''),
                                                           ('write', ['s'], ''),
                                                           ('writelines', ['iterable'], ''),
                                                           ('xreadlines', ['*args'], '')],
                                               'properties': ['_rolled',
                                                              '_file',
                                                              '_max_size',
                                                              '_TemporaryFileArgs',
                                                              'closed',
                                                              'encoding',
                                                              'mode',
                                                              'name',
                                                              'newlines',
                                                              'softspace']},
             'tempfile._RandomNameSequence': {'bases': [],
                                              'constructor': [],
                                              'docstring': 'An instance of _RandomNameSequence generates an endless\n    sequence of unpredictable strings which can safely be incorporated\n    into file names.  Each string is six characters long.  Multiple\n    threads can safely use the same instance at the same time.\n\n    _RandomNameSequence is an iterator.',
                                              'methods': [('__iter__', [], ''),
                                                          ('next', [], '')],
                                              'properties': ['characters',
                                                             'mutex',
                                                             'rng',
                                                             'normcase']},
             'tempfile._TemporaryFileWrapper': {'bases': [],
                                                'constructor': ['file', 'name', 'delete=True'],
                                                'docstring': 'Temporary file wrapper\n\n    This class provides a wrapper around files opened for\n    temporary use.  In particular, it seeks to automatically\n    remove the file when it is no longer needed.\n    ',
                                                'methods': [('__getattr__', ['name'], ''),
                                                            ('__enter__', [], ''),
                                                            ('close', [], ''),
                                                            ('__del__', [], ''),
                                                            ('__exit__',
                                                             ['exc', 'value', 'tb'],
                                                             '')],
                                                'properties': ['file',
                                                               'name',
                                                               'close_called',
                                                               'delete',
                                                               'unlink']},
             'textwrap.TextWrapper': {'bases': [],
                                      'constructor': ['width=70',
                                                      "initial_indent=''",
                                                      "subsequent_indent=''",
                                                      'expand_tabs=True',
                                                      'replace_whitespace=True',
                                                      'fix_sentence_endings=False',
                                                      'break_long_words=True',
                                                      'drop_whitespace=True',
                                                      'break_on_hyphens=True'],
                                      'docstring': '\n    Object for wrapping/filling text.  The public interface consists of\n    the wrap() and fill() methods; the other methods are just there for\n    subclasses to override in order to tweak the default behaviour.\n    If you want to completely replace the main wrapping algorithm,\n    you\'ll probably have to override _wrap_chunks().\n\n    Several instance attributes control various aspects of wrapping:\n      width (default: 70)\n        the maximum width of wrapped lines (unless break_long_words\n        is false)\n      initial_indent (default: "")\n        string that will be prepended to the first line of wrapped\n        output.  Counts towards the line\'s width.\n      subsequent_indent (default: "")\n        string that will be prepended to all lines save the first\n        of wrapped output; also counts towards each line\'s width.\n      expand_tabs (default: true)\n        Expand tabs in input text to spaces before further processing.\n        Each tab will become 1 .. 8 spaces, depending on its position in\n        its line.  If false, each tab is treated as a single character.\n      replace_whitespace (default: true)\n        Replace all whitespace characters in the input text by spaces\n        after tab expansion.  Note that if expand_tabs is false and\n        replace_whitespace is true, every tab will be converted to a\n        single space!\n      fix_sentence_endings (default: false)\n        Ensure that sentence-ending punctuation is always followed\n        by two spaces.  Off by default because the algorithm is\n        (unavoidably) imperfect.\n      break_long_words (default: true)\n        Break words longer than \'width\'.  If false, those words will not\n        be broken, and some lines might be longer than \'width\'.\n      break_on_hyphens (default: true)\n        Allow breaking hyphenated words. If true, wrapping will occur\n        preferably on whitespaces and right after hyphens part of\n        compound words.\n      drop_whitespace (default: true)\n        Drop leading and trailing whitespace from lines.\n    ',
                                      'methods': [('_munge_whitespace',
                                                   ['text'],
                                                   '_munge_whitespace(text : string) -> string\n\n        Munge whitespace in text: expand tabs and convert all other\n        whitespace characters to spaces.  Eg. " foo\tbar\n\nbaz"\n        becomes " foo    bar  baz".\n        '),
                                                  ('_split',
                                                   ['text'],
                                                   "_split(text : string) -> [string]\n\n        Split the text to wrap into indivisible chunks.  Chunks are\n        not quite the same as words; see _wrap_chunks() for full\n        details.  As an example, the text\n          Look, goof-ball -- use the -b option!\n        breaks into the following chunks:\n          'Look,', ' ', 'goof-', 'ball', ' ', '--', ' ',\n          'use', ' ', 'the', ' ', '-b', ' ', 'option!'\n        if break_on_hyphens is True, or in:\n          'Look,', ' ', 'goof-ball', ' ', '--', ' ',\n          'use', ' ', 'the', ' ', '-b', ' ', option!'\n        otherwise.\n        "),
                                                  ('_fix_sentence_endings',
                                                   ['chunks'],
                                                   '_fix_sentence_endings(chunks : [string])\n\n        Correct for sentence endings buried in \'chunks\'.  Eg. when the\n        original text contains "... foo.\nBar ...", munge_whitespace()\n        and split() will convert that to [..., "foo.", " ", "Bar", ...]\n        which has one too few spaces; this method simply changes the one\n        space to two.\n        '),
                                                  ('_handle_long_word',
                                                   ['reversed_chunks',
                                                    'cur_line',
                                                    'cur_len',
                                                    'width'],
                                                   '_handle_long_word(chunks : [string],\n                             cur_line : [string],\n                             cur_len : int, width : int)\n\n        Handle a chunk of text (most likely a word, not whitespace) that\n        is too long to fit in any line.\n        '),
                                                  ('_wrap_chunks',
                                                   ['chunks'],
                                                   '_wrap_chunks(chunks : [string]) -> [string]\n\n        Wrap a sequence of text chunks and return a list of lines of\n        length \'self.width\' or less.  (If \'break_long_words\' is false,\n        some lines may be longer than this.)  Chunks correspond roughly\n        to words and the whitespace between them: each chunk is\n        indivisible (modulo \'break_long_words\'), but a line break can\n        come between any two chunks.  Chunks should not have internal\n        whitespace; ie. a chunk is either all whitespace or a "word".\n        Whitespace chunks will be removed from the beginning and end of\n        lines, but apart from that whitespace is preserved.\n        '),
                                                  ('wrap',
                                                   ['text'],
                                                   "wrap(text : string) -> [string]\n\n        Reformat the single paragraph in 'text' so it fits in lines of\n        no more than 'self.width' columns, and return a list of wrapped\n        lines.  Tabs in 'text' are expanded with string.expandtabs(),\n        and all other whitespace characters (including newline) are\n        converted to space.\n        "),
                                                  ('fill',
                                                   ['text'],
                                                   "fill(text : string) -> string\n\n        Reformat the single paragraph in 'text' to fit in lines of no\n        more than 'self.width' columns, and return a new string\n        containing the entire wrapped paragraph.\n        ")],
                                      'properties': ['whitespace_trans',
                                                     'unicode_whitespace_trans',
                                                     'uspace',
                                                     'x',
                                                     'wordsep_re',
                                                     'wordsep_simple_re',
                                                     'sentence_end_re',
                                                     'width',
                                                     'initial_indent',
                                                     'subsequent_indent',
                                                     'expand_tabs',
                                                     'replace_whitespace',
                                                     'fix_sentence_endings',
                                                     'break_long_words',
                                                     'drop_whitespace',
                                                     'break_on_hyphens',
                                                     'wordsep_re_uni',
                                                     'wordsep_simple_re_uni']},
             'threading.Thread': {'bases': ['threading._Verbose'],
                                  'constructor': ['group=None',
                                                  'target=None',
                                                  'name=None',
                                                  'args=()',
                                                  'kwargs=None',
                                                  'verbose=None'],
                                  'docstring': '',
                                  'methods': [('_reset_internal_locks', [], ''),
                                              ('_set_daemon', [], ''),
                                              ('__repr__', [], ''),
                                              ('start', [], ''),
                                              ('run', [], ''),
                                              ('__bootstrap', [], ''),
                                              ('_set_ident', [], ''),
                                              ('__bootstrap_inner', [], ''),
                                              ('__stop', [], ''),
                                              ('__delete',
                                               [],
                                               'Remove current thread from the dict of currently running threads.'),
                                              ('join', ['timeout=None'], ''),
                                              ('name', ['name'], ''),
                                              ('isAlive', [], ''),
                                              ('daemon', ['daemonic'], ''),
                                              ('isDaemon', [], ''),
                                              ('setDaemon', ['daemonic'], ''),
                                              ('getName', [], ''),
                                              ('setName', ['name'], '')],
                                  'properties': ['__initialized',
                                                 '__exc_info',
                                                 '__exc_clear',
                                                 '__target',
                                                 '__name',
                                                 '__args',
                                                 '__kwargs',
                                                 '__daemonic',
                                                 '__ident',
                                                 '__started',
                                                 '__stopped',
                                                 '__block',
                                                 '__stderr',
                                                 '_block',
                                                 'name',
                                                 'ident',
                                                 'is_alive',
                                                 'daemon']},
             'threading._BoundedSemaphore': {'bases': ['threading._Semaphore'],
                                             'constructor': ['value=1', 'verbose=None'],
                                             'docstring': 'Semaphore that checks that # releases is <= # acquires',
                                             'methods': [('release', [], '')],
                                             'properties': ['_initial_value']},
             'threading._Condition': {'bases': ['threading._Verbose'],
                                      'constructor': ['lock=None', 'verbose=None'],
                                      'docstring': '',
                                      'methods': [('__enter__', [], ''),
                                                  ('__exit__', ['*args'], ''),
                                                  ('__repr__', [], ''),
                                                  ('_release_save', [], ''),
                                                  ('_acquire_restore', ['x'], ''),
                                                  ('_is_owned', [], ''),
                                                  ('wait', ['timeout=None'], ''),
                                                  ('notify', ['n=1'], ''),
                                                  ('notifyAll', [], '')],
                                      'properties': ['__lock',
                                                     'acquire',
                                                     'release',
                                                     '_release_save',
                                                     '_acquire_restore',
                                                     '_is_owned',
                                                     '__waiters',
                                                     'notify_all']},
             'threading._DummyThread': {'bases': ['threading.Thread'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('_set_daemon', [], ''),
                                                    ('join', ['timeout=None'], '')],
                                        'properties': ['_Thread__block']},
             'threading._Event': {'bases': ['threading._Verbose'],
                                  'constructor': ['verbose=None'],
                                  'docstring': '',
                                  'methods': [('_reset_internal_locks', [], ''),
                                              ('isSet', [], ''),
                                              ('set', [], ''),
                                              ('clear', [], ''),
                                              ('wait', ['timeout=None'], '')],
                                  'properties': ['__cond', '__flag', 'is_set']},
             'threading._MainThread': {'bases': ['threading.Thread'],
                                       'constructor': [],
                                       'docstring': '',
                                       'methods': [('_set_daemon', [], ''),
                                                   ('_exitfunc', [], '')],
                                       'properties': []},
             'threading._RLock': {'bases': ['threading._Verbose'],
                                  'constructor': ['verbose=None'],
                                  'docstring': '',
                                  'methods': [('__repr__', [], ''),
                                              ('acquire', ['blocking=1'], ''),
                                              ('release', [], ''),
                                              ('__exit__', ['t', 'v', 'tb'], ''),
                                              ('_acquire_restore', ['count_owner'], ''),
                                              ('_release_save', [], ''),
                                              ('_is_owned', [], '')],
                                  'properties': ['__block', '__owner', '__count', '__enter__']},
             'threading._Semaphore': {'bases': ['threading._Verbose'],
                                      'constructor': ['value=1', 'verbose=None'],
                                      'docstring': '',
                                      'methods': [('acquire', ['blocking=1'], ''),
                                                  ('release', [], ''),
                                                  ('__exit__', ['t', 'v', 'tb'], '')],
                                      'properties': ['__cond', '__value', '__enter__']},
             'threading._Timer': {'bases': ['threading.Thread'],
                                  'constructor': ['interval',
                                                  'function',
                                                  'args=[]',
                                                  'kwargs={}'],
                                  'docstring': "Call a function after a specified number of seconds:\n\n    t = Timer(30.0, f, args=[], kwargs={})\n    t.start()\n    t.cancel() # stop the timer's action if it's still waiting\n    ",
                                  'methods': [('cancel',
                                               [],
                                               "Stop the timer if it hasn't finished yet"),
                                              ('run', [], '')],
                                  'properties': ['interval',
                                                 'function',
                                                 'args',
                                                 'kwargs',
                                                 'finished']},
             'threading._Verbose': {'bases': ['object'],
                                    'constructor': ['verbose=None'],
                                    'docstring': '',
                                    'methods': [('_note', ['*args'], '')],
                                    'properties': []},
             'timeit.Timer': {'bases': [],
                              'constructor': ["stmt='pass'",
                                              "setup='pass'",
                                              'timer=default_timer'],
                              'docstring': "Class for timing execution speed of small code snippets.\n\n    The constructor takes a statement to be timed, an additional\n    statement used for setup, and a timer function.  Both statements\n    default to 'pass'; the timer function is platform-dependent (see\n    module doc string).\n\n    To measure the execution time of the first statement, use the\n    timeit() method.  The repeat() method is a convenience to call\n    timeit() multiple times and return a list of results.\n\n    The statements may contain newlines, as long as they don't contain\n    multi-line string literals.\n    ",
                              'methods': [('print_exc',
                                           ['file=None'],
                                           'Helper to print a traceback from the timed code.\n\n        Typical use:\n\n            t = Timer(...)       # outside the try/except\n            try:\n                t.timeit(...)    # or t.repeat(...)\n            except:\n                t.print_exc()\n\n        The advantage over the standard traceback is that source lines\n        in the compiled template will be displayed.\n\n        The optional file argument directs where the traceback is\n        sent; it defaults to sys.stderr.\n        '),
                                          ('timeit',
                                           ['number=default_number'],
                                           "Time 'number' executions of the main statement.\n\n        To be precise, this executes the setup statement once, and\n        then returns the time it takes to execute the main statement\n        a number of times, as a float measured in seconds.  The\n        argument is the number of times through the loop, defaulting\n        to one million.  The main statement, the setup statement and\n        the timer function to be used are passed to the constructor.\n        "),
                                          ('repeat',
                                           ['repeat=default_repeat', 'number=default_number'],
                                           "Call timeit() a few times.\n\n        This is a convenience function that calls the timeit()\n        repeatedly, returning a list of results.  The first argument\n        specifies how many times to call timeit(), defaulting to 3;\n        the second argument specifies the timer argument, defaulting\n        to one million.\n\n        Note: it's tempting to calculate mean and standard deviation\n        from the result vector and report these.  However, this is not\n        very useful.  In a typical case, the lowest value gives a\n        lower bound for how fast your machine can run the given code\n        snippet; higher values in the result vector are typically not\n        caused by variability in Python's speed, but by other\n        processes interfering with your timing accuracy.  So the min()\n        of the result is probably the only number you should be\n        interested in.  After that, you should look at the entire\n        vector and apply common sense rather than statistics.\n        ")],
                              'properties': ['timer', 'src', 'inner']},
             'toaiff.error': {'bases': ['Exception'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': []},
             'tokenize.StopTokenizing': {'bases': ['Exception'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': []},
             'tokenize.TokenError': {'bases': ['Exception'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [],
                                     'properties': []},
             'tokenize.Untokenizer': {'bases': [],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('add_whitespace', ['start'], ''),
                                                  ('untokenize', ['iterable'], ''),
                                                  ('compat', ['token', 'iterable'], '')],
                                      'properties': ['tokens', 'prev_row', 'prev_col']},
             'trace.CoverageResults': {'bases': [],
                                       'constructor': ['counts=None',
                                                       'calledfuncs=None',
                                                       'infile=None',
                                                       'callers=None',
                                                       'outfile=None'],
                                       'docstring': '',
                                       'methods': [('update',
                                                    ['other'],
                                                    'Merge in the data from another CoverageResults'),
                                                   ('write_results',
                                                    ['show_missing=True',
                                                     'summary=False',
                                                     'coverdir=None'],
                                                    '\n        @param coverdir\n        '),
                                                   ('write_results_file',
                                                    ['path', 'lines', 'lnotab', 'lines_hit'],
                                                    'Return a coverage results file in path.')],
                                       'properties': ['counts',
                                                      'counter',
                                                      'calledfuncs',
                                                      'callers',
                                                      'infile',
                                                      'outfile']},
             'trace.Ignore': {'bases': [],
                              'constructor': ['modules=None', 'dirs=None'],
                              'docstring': '',
                              'methods': [('names', ['filename', 'modulename'], '')],
                              'properties': ['_mods', '_dirs', '_ignore']},
             'trace.Trace': {'bases': [],
                             'constructor': ['count=1',
                                             'trace=1',
                                             'countfuncs=0',
                                             'countcallers=0',
                                             'ignoremods=()',
                                             'ignoredirs=()',
                                             'infile=None',
                                             'outfile=None',
                                             'timing=False'],
                             'docstring': '',
                             'methods': [('run', ['cmd'], ''),
                                         ('runctx', ['cmd', 'globals=None', 'locals=None'], ''),
                                         ('runfunc', ['func', '*args', '**kw'], ''),
                                         ('file_module_function_of', ['frame'], ''),
                                         ('globaltrace_trackcallers',
                                          ['frame', 'why', 'arg'],
                                          'Handler for call events.\n\n        Adds information about who called who to the self._callers dict.\n        '),
                                         ('globaltrace_countfuncs',
                                          ['frame', 'why', 'arg'],
                                          'Handler for call events.\n\n        Adds (filename, modulename, funcname) to the self._calledfuncs dict.\n        '),
                                         ('globaltrace_lt',
                                          ['frame', 'why', 'arg'],
                                          "Handler for call events.\n\n        If the code block being entered is to be ignored, returns `None',\n        else returns self.localtrace.\n        "),
                                         ('localtrace_trace_and_count',
                                          ['frame', 'why', 'arg'],
                                          ''),
                                         ('localtrace_trace', ['frame', 'why', 'arg'], ''),
                                         ('localtrace_count', ['frame', 'why', 'arg'], ''),
                                         ('results', [], '')],
                             'properties': ['infile',
                                            'outfile',
                                            'ignore',
                                            'counts',
                                            'blabbed',
                                            'pathtobasename',
                                            'donothing',
                                            'trace',
                                            '_calledfuncs',
                                            '_callers',
                                            '_caller_cache',
                                            'start_time',
                                            'globaltrace',
                                            'localtrace']},
             'types._C': {'bases': [],
                          'constructor': [],
                          'docstring': '',
                          'methods': [('_m', [], '')],
                          'properties': []},
             'urllib.ContentTooShortError': {'bases': ['IOError'],
                                             'constructor': ['message', 'content'],
                                             'docstring': '',
                                             'methods': [],
                                             'properties': ['content']},
             'urllib.FancyURLopener': {'bases': ['urllib.URLopener'],
                                       'constructor': ['*args', '**kwargs'],
                                       'docstring': 'Derived class with handlers for errors we can handle (perhaps).',
                                       'methods': [('http_error_default',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers'],
                                                    "Default error handling -- don't raise an exception."),
                                                   ('http_error_302',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers',
                                                     'data=None'],
                                                    'Error 302 -- relocated (temporarily).'),
                                                   ('redirect_internal',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers',
                                                     'data'],
                                                    ''),
                                                   ('http_error_301',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers',
                                                     'data=None'],
                                                    'Error 301 -- also relocated (permanently).'),
                                                   ('http_error_303',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers',
                                                     'data=None'],
                                                    'Error 303 -- also relocated (essentially identical to 302).'),
                                                   ('http_error_307',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers',
                                                     'data=None'],
                                                    'Error 307 -- relocated, but turn POST into error.'),
                                                   ('http_error_401',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers',
                                                     'data=None'],
                                                    'Error 401 -- authentication required.\n        This function supports Basic authentication only.'),
                                                   ('http_error_407',
                                                    ['url',
                                                     'fp',
                                                     'errcode',
                                                     'errmsg',
                                                     'headers',
                                                     'data=None'],
                                                    'Error 407 -- proxy authentication required.\n        This function supports Basic authentication only.'),
                                                   ('retry_proxy_http_basic_auth',
                                                    ['url', 'realm', 'data=None'],
                                                    ''),
                                                   ('retry_proxy_https_basic_auth',
                                                    ['url', 'realm', 'data=None'],
                                                    ''),
                                                   ('retry_http_basic_auth',
                                                    ['url', 'realm', 'data=None'],
                                                    ''),
                                                   ('retry_https_basic_auth',
                                                    ['url', 'realm', 'data=None'],
                                                    ''),
                                                   ('get_user_passwd',
                                                    ['host', 'realm', 'clear_cache=0'],
                                                    ''),
                                                   ('prompt_user_passwd',
                                                    ['host', 'realm'],
                                                    'Override this in a GUI environment!')],
                                       'properties': ['auth_cache', 'tries', 'maxtries']},
             'urllib.URLopener': {'bases': [],
                                  'constructor': ['proxies=None', '**x509'],
                                  'docstring': "Class to open URLs.\n    This is a class rather than just a subroutine because we may need\n    more than one set of global protocol-specific options.\n    Note -- this is a base class for those who don't want the\n    automatic handling of errors type 302 (relocated) and 401\n    (authorization needed).",
                                  'methods': [('__del__', [], ''),
                                              ('close', [], ''),
                                              ('cleanup', [], ''),
                                              ('addheader',
                                               ['*args'],
                                               "Add a header to be used by the HTTP interface only\n        e.g. u.addheader('Accept', 'sound/basic')"),
                                              ('open',
                                               ['fullurl', 'data=None'],
                                               "Use URLopener().open(file) instead of open(file, 'r')."),
                                              ('open_unknown',
                                               ['fullurl', 'data=None'],
                                               'Overridable interface to open unknown URL type.'),
                                              ('open_unknown_proxy',
                                               ['proxy', 'fullurl', 'data=None'],
                                               'Overridable interface to open unknown URL type.'),
                                              ('retrieve',
                                               ['url',
                                                'filename=None',
                                                'reporthook=None',
                                                'data=None'],
                                               'retrieve(url) returns (filename, headers) for a local object\n        or (tempfilename, headers) for a remote object.'),
                                              ('open_http',
                                               ['url', 'data=None'],
                                               'Use HTTP protocol.'),
                                              ('http_error',
                                               ['url',
                                                'fp',
                                                'errcode',
                                                'errmsg',
                                                'headers',
                                                'data=None'],
                                               'Handle http errors.\n        Derived class can override this, or provide specific handlers\n        named http_error_DDD where DDD is the 3-digit error code.'),
                                              ('http_error_default',
                                               ['url', 'fp', 'errcode', 'errmsg', 'headers'],
                                               'Default error handler: close the connection and raise IOError.'),
                                              ('open_https',
                                               ['url', 'data=None'],
                                               'Use HTTPS protocol.'),
                                              ('open_file',
                                               ['url'],
                                               'Use local file or FTP depending on form of URL.'),
                                              ('open_local_file', ['url'], 'Use local file.'),
                                              ('open_ftp', ['url'], 'Use FTP protocol.'),
                                              ('open_data',
                                               ['url', 'data=None'],
                                               'Use "data" URL.')],
                                  'properties': ['__tempfiles',
                                                 'version',
                                                 'proxies',
                                                 'key_file',
                                                 'cert_file',
                                                 'addheaders',
                                                 '__unlink',
                                                 'tempcache',
                                                 'ftpcache',
                                                 'type']},
             'urllib.addbase': {'bases': [],
                                'constructor': ['fp'],
                                'docstring': 'Base class for addinfo and addclosehook.',
                                'methods': [('__repr__', [], ''), ('close', [], '')],
                                'properties': ['fp',
                                               'read',
                                               'readline',
                                               'readlines',
                                               'fileno',
                                               '__iter__',
                                               'next']},
             'urllib.addclosehook': {'bases': ['urllib.addbase'],
                                     'constructor': ['fp', 'closehook', '*hookargs'],
                                     'docstring': 'Class to add a close hook to an open file.',
                                     'methods': [('close', [], '')],
                                     'properties': ['closehook', 'hookargs']},
             'urllib.addinfo': {'bases': ['urllib.addbase'],
                                'constructor': ['fp', 'headers'],
                                'docstring': 'class to add an info() method to an open file.',
                                'methods': [('info', [], '')],
                                'properties': ['headers']},
             'urllib.addinfourl': {'bases': ['urllib.addbase'],
                                   'constructor': ['fp', 'headers', 'url', 'code=None'],
                                   'docstring': 'class to add info() and geturl() methods to an open file.',
                                   'methods': [('info', [], ''),
                                               ('getcode', [], ''),
                                               ('geturl', [], '')],
                                   'properties': ['headers', 'url', 'code']},
             'urllib.ftpwrapper': {'bases': [],
                                   'constructor': ['user',
                                                   'passwd',
                                                   'host',
                                                   'port',
                                                   'dirs',
                                                   'timeout=socket._GLOBAL_DEFAULT_TIMEOUT'],
                                   'docstring': 'Class used by open_ftp() for cache of open FTP connections.',
                                   'methods': [('init', [], ''),
                                               ('retrfile', ['file', 'type'], ''),
                                               ('endtransfer', [], ''),
                                               ('close', [], '')],
                                   'properties': ['user',
                                                  'passwd',
                                                  'host',
                                                  'port',
                                                  'dirs',
                                                  'timeout',
                                                  'busy',
                                                  'ftp']},
             'urllib2.AbstractBasicAuthHandler': {'bases': [],
                                                  'constructor': ['password_mgr=None'],
                                                  'docstring': '',
                                                  'methods': [('reset_retry_count', [], ''),
                                                              ('http_error_auth_reqed',
                                                               ['authreq',
                                                                'host',
                                                                'req',
                                                                'headers'],
                                                               ''),
                                                              ('retry_http_basic_auth',
                                                               ['host', 'req', 'realm'],
                                                               '')],
                                                  'properties': ['rx',
                                                                 'passwd',
                                                                 'add_password',
                                                                 'retried']},
             'urllib2.AbstractDigestAuthHandler': {'bases': [],
                                                   'constructor': ['passwd=None'],
                                                   'docstring': '',
                                                   'methods': [('reset_retry_count', [], ''),
                                                               ('http_error_auth_reqed',
                                                                ['auth_header',
                                                                 'host',
                                                                 'req',
                                                                 'headers'],
                                                                ''),
                                                               ('retry_http_digest_auth',
                                                                ['req', 'auth'],
                                                                ''),
                                                               ('get_cnonce', ['nonce'], ''),
                                                               ('get_authorization',
                                                                ['req', 'chal'],
                                                                ''),
                                                               ('get_algorithm_impls',
                                                                ['algorithm'],
                                                                ''),
                                                               ('get_entity_digest',
                                                                ['data', 'chal'],
                                                                '')],
                                                   'properties': ['passwd',
                                                                  'add_password',
                                                                  'retried',
                                                                  'nonce_count',
                                                                  'last_nonce']},
             'urllib2.AbstractHTTPHandler': {'bases': ['urllib2.BaseHandler'],
                                             'constructor': ['debuglevel=0'],
                                             'docstring': '',
                                             'methods': [('set_http_debuglevel', ['level'], ''),
                                                         ('do_request_', ['request'], ''),
                                                         ('do_open',
                                                          ['http_class', 'req'],
                                                          'Return an addinfourl object for the request, using http_class.\n\n        http_class must implement the HTTPConnection API from httplib.\n        The addinfourl return value is a file-like object.  It also\n        has methods and attributes including:\n            - info(): return a mimetools.Message object for the headers\n            - geturl(): return the original request URL\n            - code: HTTP status code\n        ')],
                                             'properties': ['_debuglevel']},
             'urllib2.BaseHandler': {'bases': [],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('add_parent', ['parent'], ''),
                                                 ('close', [], ''),
                                                 ('__lt__', ['other'], '')],
                                     'properties': ['handler_order', 'parent']},
             'urllib2.CacheFTPHandler': {'bases': ['urllib2.FTPHandler'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('setTimeout', ['t'], ''),
                                                     ('setMaxConns', ['m'], ''),
                                                     ('connect_ftp',
                                                      ['user',
                                                       'passwd',
                                                       'host',
                                                       'port',
                                                       'dirs',
                                                       'timeout'],
                                                      ''),
                                                     ('check_cache', [], '')],
                                         'properties': ['cache',
                                                        'timeout',
                                                        'soonest',
                                                        'delay',
                                                        'max_conns']},
             'urllib2.FTPHandler': {'bases': ['urllib2.BaseHandler'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('ftp_open', ['req'], ''),
                                                ('connect_ftp',
                                                 ['user',
                                                  'passwd',
                                                  'host',
                                                  'port',
                                                  'dirs',
                                                  'timeout'],
                                                 '')],
                                    'properties': []},
             'urllib2.FileHandler': {'bases': ['urllib2.BaseHandler'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('file_open', ['req'], ''),
                                                 ('get_names', [], ''),
                                                 ('open_local_file', ['req'], '')],
                                     'properties': ['names']},
             'urllib2.HTTPBasicAuthHandler': {'bases': ['urllib2.AbstractBasicAuthHandler',
                                                        'urllib2.BaseHandler'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [('http_error_401',
                                                           ['req',
                                                            'fp',
                                                            'code',
                                                            'msg',
                                                            'headers'],
                                                           '')],
                                              'properties': ['auth_header']},
             'urllib2.HTTPCookieProcessor': {'bases': ['urllib2.BaseHandler'],
                                             'constructor': ['cookiejar=None'],
                                             'docstring': '',
                                             'methods': [('http_request', ['request'], ''),
                                                         ('http_response',
                                                          ['request', 'response'],
                                                          '')],
                                             'properties': ['cookiejar',
                                                            'https_request',
                                                            'https_response']},
             'urllib2.HTTPDefaultErrorHandler': {'bases': ['urllib2.BaseHandler'],
                                                 'constructor': [],
                                                 'docstring': '',
                                                 'methods': [('http_error_default',
                                                              ['req',
                                                               'fp',
                                                               'code',
                                                               'msg',
                                                               'hdrs'],
                                                              '')],
                                                 'properties': []},
             'urllib2.HTTPDigestAuthHandler': {'bases': ['urllib2.BaseHandler',
                                                         'urllib2.AbstractDigestAuthHandler'],
                                               'constructor': [],
                                               'docstring': 'An authentication protocol defined by RFC 2069\n\n    Digest authentication improves on basic authentication because it\n    does not transmit passwords in the clear.\n    ',
                                               'methods': [('http_error_401',
                                                            ['req',
                                                             'fp',
                                                             'code',
                                                             'msg',
                                                             'headers'],
                                                            '')],
                                               'properties': ['auth_header', 'handler_order']},
             'urllib2.HTTPError': {'bases': ['urllib2.URLError', 'urllib.addinfourl'],
                                   'constructor': ['url', 'code', 'msg', 'hdrs', 'fp'],
                                   'docstring': 'Raised when HTTP error occurs, but also acts like non-error return',
                                   'methods': [('__str__', [], '')],
                                   'properties': ['__super_init',
                                                  'code',
                                                  'msg',
                                                  'hdrs',
                                                  'fp',
                                                  'filename']},
             'urllib2.HTTPErrorProcessor': {'bases': ['urllib2.BaseHandler'],
                                            'constructor': [],
                                            'docstring': 'Process HTTP error responses.',
                                            'methods': [('http_response',
                                                         ['request', 'response'],
                                                         '')],
                                            'properties': ['handler_order', 'https_response']},
             'urllib2.HTTPHandler': {'bases': ['urllib2.AbstractHTTPHandler'],
                                     'constructor': [],
                                     'docstring': '',
                                     'methods': [('http_open', ['req'], '')],
                                     'properties': ['http_request']},
             'urllib2.HTTPPasswordMgr': {'bases': [],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('add_password',
                                                      ['realm', 'uri', 'user', 'passwd'],
                                                      ''),
                                                     ('find_user_password',
                                                      ['realm', 'authuri'],
                                                      ''),
                                                     ('reduce_uri',
                                                      ['uri', 'default_port=True'],
                                                      'Accept authority or URI and extract only the authority and path.'),
                                                     ('is_suburi',
                                                      ['base', 'test'],
                                                      'Check if test is below base in a URI tree\n\n        Both args must be URIs in reduced form.\n        ')],
                                         'properties': ['passwd']},
             'urllib2.HTTPPasswordMgrWithDefaultRealm': {'bases': ['urllib2.HTTPPasswordMgr'],
                                                         'constructor': [],
                                                         'docstring': '',
                                                         'methods': [('find_user_password',
                                                                      ['realm', 'authuri'],
                                                                      '')],
                                                         'properties': []},
             'urllib2.HTTPRedirectHandler': {'bases': ['urllib2.BaseHandler'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('redirect_request',
                                                          ['req',
                                                           'fp',
                                                           'code',
                                                           'msg',
                                                           'headers',
                                                           'newurl'],
                                                          "Return a Request or None in response to a redirect.\n\n        This is called by the http_error_30x methods when a\n        redirection response is received.  If a redirection should\n        take place, return a new Request to allow http_error_30x to\n        perform the redirect.  Otherwise, raise HTTPError if no-one\n        else should try to handle this url.  Return None if you can't\n        but another Handler might.\n        "),
                                                         ('http_error_302',
                                                          ['req',
                                                           'fp',
                                                           'code',
                                                           'msg',
                                                           'headers'],
                                                          '')],
                                             'properties': ['max_repeats',
                                                            'max_redirections',
                                                            'http_error_301',
                                                            'http_error_303',
                                                            'http_error_307',
                                                            'inf_msg']},
             'urllib2.HTTPSHandler': {'bases': ['urllib2.AbstractHTTPHandler'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('https_open', ['req'], '')],
                                      'properties': ['https_request']},
             'urllib2.OpenerDirector': {'bases': [],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('add_handler', ['handler'], ''),
                                                    ('close', [], ''),
                                                    ('_call_chain',
                                                     ['chain', 'kind', 'meth_name', '*args'],
                                                     ''),
                                                    ('open',
                                                     ['fullurl',
                                                      'data=None',
                                                      'timeout=socket._GLOBAL_DEFAULT_TIMEOUT'],
                                                     ''),
                                                    ('_open', ['req', 'data=None'], ''),
                                                    ('error', ['proto', '*args'], '')],
                                        'properties': ['addheaders',
                                                       'handlers',
                                                       'handle_open',
                                                       'handle_error',
                                                       'process_response',
                                                       'process_request']},
             'urllib2.ProxyBasicAuthHandler': {'bases': ['urllib2.AbstractBasicAuthHandler',
                                                         'urllib2.BaseHandler'],
                                               'constructor': [],
                                               'docstring': '',
                                               'methods': [('http_error_407',
                                                            ['req',
                                                             'fp',
                                                             'code',
                                                             'msg',
                                                             'headers'],
                                                            '')],
                                               'properties': ['auth_header']},
             'urllib2.ProxyDigestAuthHandler': {'bases': ['urllib2.BaseHandler',
                                                          'urllib2.AbstractDigestAuthHandler'],
                                                'constructor': [],
                                                'docstring': '',
                                                'methods': [('http_error_407',
                                                             ['req',
                                                              'fp',
                                                              'code',
                                                              'msg',
                                                              'headers'],
                                                             '')],
                                                'properties': ['auth_header', 'handler_order']},
             'urllib2.ProxyHandler': {'bases': ['urllib2.BaseHandler'],
                                      'constructor': ['proxies=None'],
                                      'docstring': '',
                                      'methods': [('proxy_open', ['req', 'proxy', 'type'], '')],
                                      'properties': ['handler_order', 'proxies']},
             'urllib2.Request': {'bases': [],
                                 'constructor': ['url',
                                                 'data=None',
                                                 'headers={}',
                                                 'origin_req_host=None',
                                                 'unverifiable=False'],
                                 'docstring': '',
                                 'methods': [('__getattr__', ['attr'], ''),
                                             ('get_method', [], ''),
                                             ('add_data', ['data'], ''),
                                             ('has_data', [], ''),
                                             ('get_data', [], ''),
                                             ('get_full_url', [], ''),
                                             ('get_type', [], ''),
                                             ('get_host', [], ''),
                                             ('get_selector', [], ''),
                                             ('set_proxy', ['host', 'type'], ''),
                                             ('has_proxy', [], ''),
                                             ('get_origin_req_host', [], ''),
                                             ('is_unverifiable', [], ''),
                                             ('add_header', ['key', 'val'], ''),
                                             ('add_unredirected_header', ['key', 'val'], ''),
                                             ('has_header', ['header_name'], ''),
                                             ('get_header',
                                              ['header_name', 'default=None'],
                                              ''),
                                             ('header_items', [], '')],
                                 'properties': ['__original',
                                                'type',
                                                'host',
                                                'port',
                                                '_tunnel_host',
                                                'data',
                                                'headers',
                                                'unredirected_hdrs',
                                                'origin_req_host',
                                                'unverifiable',
                                                '__r_type',
                                                '__r_host']},
             'urllib2.URLError': {'bases': ['IOError'],
                                  'constructor': ['reason'],
                                  'docstring': '',
                                  'methods': [('__str__', [], '')],
                                  'properties': ['args', 'reason']},
             'urllib2.UnknownHandler': {'bases': ['urllib2.BaseHandler'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [('unknown_open', ['req'], '')],
                                        'properties': []},
             'urlparse.ParseResult': {'bases': ["collections.namedtuple('ParseResult', 'scheme netloc path params query fragment')",
                                                'urlparse.ResultMixin'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('geturl', [], '')],
                                      'properties': ['__slots__']},
             'urlparse.ResultMixin': {'bases': ['object'],
                                      'constructor': [],
                                      'docstring': 'Shared methods for the parsed result objects.',
                                      'methods': [],
                                      'properties': ['username', 'password', 'hostname', 'port']},
             'urlparse.SplitResult': {'bases': ["collections.namedtuple('SplitResult', 'scheme netloc path query fragment')",
                                                'urlparse.ResultMixin'],
                                      'constructor': [],
                                      'docstring': '',
                                      'methods': [('geturl', [], '')],
                                      'properties': ['__slots__']},
             'uu.Error': {'bases': ['Exception'],
                          'constructor': [],
                          'docstring': '',
                          'methods': [],
                          'properties': []},
             'uuid.UUID': {'bases': ['object'],
                           'constructor': ['hex=None',
                                           'bytes=None',
                                           'bytes_le=None',
                                           'fields=None',
                                           'int=None',
                                           'version=None'],
                           'docstring': "Instances of the UUID class represent UUIDs as specified in RFC 4122.\n    UUID objects are immutable, hashable, and usable as dictionary keys.\n    Converting a UUID to a string with str() yields something in the form\n    '12345678-1234-1234-1234-123456789abc'.  The UUID constructor accepts\n    five possible forms: a similar string of hexadecimal digits, or a tuple\n    of six integer fields (with 32-bit, 16-bit, 16-bit, 8-bit, 8-bit, and\n    48-bit values respectively) as an argument named 'fields', or a string\n    of 16 bytes (with all the integer fields in big-endian order) as an\n    argument named 'bytes', or a string of 16 bytes (with the first three\n    fields in little-endian order) as an argument named 'bytes_le', or a\n    single 128-bit integer as an argument named 'int'.\n\n    UUIDs have these read-only attributes:\n\n        bytes       the UUID as a 16-byte string (containing the six\n                    integer fields in big-endian byte order)\n\n        bytes_le    the UUID as a 16-byte string (with time_low, time_mid,\n                    and time_hi_version in little-endian byte order)\n\n        fields      a tuple of the six integer fields of the UUID,\n                    which are also available as six individual attributes\n                    and two derived attributes:\n\n            time_low                the first 32 bits of the UUID\n            time_mid                the next 16 bits of the UUID\n            time_hi_version         the next 16 bits of the UUID\n            clock_seq_hi_variant    the next 8 bits of the UUID\n            clock_seq_low           the next 8 bits of the UUID\n            node                    the last 48 bits of the UUID\n\n            time                    the 60-bit timestamp\n            clock_seq               the 14-bit sequence number\n\n        hex         the UUID as a 32-character hexadecimal string\n\n        int         the UUID as a 128-bit integer\n\n        urn         the UUID as a URN as specified in RFC 4122\n\n        variant     the UUID variant (one of the constants RESERVED_NCS,\n                    RFC_4122, RESERVED_MICROSOFT, or RESERVED_FUTURE)\n\n        version     the UUID version number (1 through 5, meaningful only\n                    when the variant is RFC_4122)\n    ",
                           'methods': [('__cmp__', ['other'], ''),
                                       ('__hash__', [], ''),
                                       ('__int__', [], ''),
                                       ('__repr__', [], ''),
                                       ('__setattr__', ['name', 'value'], ''),
                                       ('__str__', [], ''),
                                       ('get_bytes', [], ''),
                                       ('get_bytes_le', [], ''),
                                       ('get_fields', [], ''),
                                       ('get_time_low', [], ''),
                                       ('get_time_mid', [], ''),
                                       ('get_time_hi_version', [], ''),
                                       ('get_clock_seq_hi_variant', [], ''),
                                       ('get_clock_seq_low', [], ''),
                                       ('get_time', [], ''),
                                       ('get_clock_seq', [], ''),
                                       ('get_node', [], ''),
                                       ('get_hex', [], ''),
                                       ('get_urn', [], ''),
                                       ('get_variant', [], ''),
                                       ('get_version', [], '')],
                           'properties': ['bytes',
                                          'bytes_le',
                                          'fields',
                                          'time_low',
                                          'time_mid',
                                          'time_hi_version',
                                          'clock_seq_hi_variant',
                                          'clock_seq_low',
                                          'time',
                                          'clock_seq',
                                          'node',
                                          'hex',
                                          'urn',
                                          'variant',
                                          'version']},
             'warnings.WarningMessage': {'bases': ['object'],
                                         'constructor': ['message',
                                                         'category',
                                                         'filename',
                                                         'lineno',
                                                         'file=None',
                                                         'line=None'],
                                         'docstring': 'Holds the result of a single showwarning() call.',
                                         'methods': [('__str__', [], '')],
                                         'properties': ['_WARNING_DETAILS', '_category_name']},
             'warnings._OptionError': {'bases': ['Exception'],
                                       'constructor': [],
                                       'docstring': 'Exception used by option processing helpers.',
                                       'methods': [],
                                       'properties': []},
             'warnings.catch_warnings': {'bases': ['object'],
                                         'constructor': ['record=False', 'module=None'],
                                         'docstring': "A context manager that copies and restores the warnings filter upon\n    exiting the context.\n\n    The 'record' argument specifies whether warnings should be captured by a\n    custom implementation of warnings.showwarning() and be appended to a list\n    returned by the context manager. Otherwise None is returned by the context\n    manager. The objects appended to the list are arguments whose attributes\n    mirror the arguments to showwarning().\n\n    The 'module' argument is to specify an alternative module to the module\n    named 'warnings' and imported under that name. This argument is only useful\n    when testing the warnings module itself.\n\n    ",
                                         'methods': [('__repr__', [], ''),
                                                     ('__enter__', [], ''),
                                                     ('__exit__', ['*exc_info'], '')],
                                         'properties': ['_record',
                                                        '_module',
                                                        '_entered',
                                                        '_filters',
                                                        '_showwarning']},
             'wave.Error': {'bases': ['Exception'],
                            'constructor': [],
                            'docstring': '',
                            'methods': [],
                            'properties': []},
             'wave.Wave_read': {'bases': [],
                                'constructor': ['f'],
                                'docstring': "Variables used in this class:\n\n    These variables are available to the user though appropriate\n    methods of this class:\n    _file -- the open file with methods read(), close(), and seek()\n              set through the __init__() method\n    _nchannels -- the number of audio channels\n              available through the getnchannels() method\n    _nframes -- the number of audio frames\n              available through the getnframes() method\n    _sampwidth -- the number of bytes per audio sample\n              available through the getsampwidth() method\n    _framerate -- the sampling frequency\n              available through the getframerate() method\n    _comptype -- the AIFF-C compression type ('NONE' if AIFF)\n              available through the getcomptype() method\n    _compname -- the human-readable AIFF-C compression type\n              available through the getcomptype() method\n    _soundpos -- the position in the audio stream\n              available through the tell() method, set through the\n              setpos() method\n\n    These variables are used internally only:\n    _fmt_chunk_read -- 1 iff the FMT chunk has been read\n    _data_seek_needed -- 1 iff positioned correctly in audio\n              file for readframes()\n    _data_chunk -- instantiation of a chunk class for the DATA chunk\n    _framesize -- size of one frame in the file\n    ",
                                'methods': [('initfp', ['file'], ''),
                                            ('__del__', [], ''),
                                            ('getfp', [], ''),
                                            ('rewind', [], ''),
                                            ('close', [], ''),
                                            ('tell', [], ''),
                                            ('getnchannels', [], ''),
                                            ('getnframes', [], ''),
                                            ('getsampwidth', [], ''),
                                            ('getframerate', [], ''),
                                            ('getcomptype', [], ''),
                                            ('getcompname', [], ''),
                                            ('getparams', [], ''),
                                            ('getmarkers', [], ''),
                                            ('getmark', ['id'], ''),
                                            ('setpos', ['pos'], ''),
                                            ('readframes', ['nframes'], ''),
                                            ('_read_fmt_chunk', ['chunk'], '')],
                                'properties': ['_convert',
                                               '_soundpos',
                                               '_file',
                                               '_fmt_chunk_read',
                                               '_data_chunk',
                                               '_data_seek_needed',
                                               '_nframes',
                                               '_i_opened_the_file',
                                               '_nchannels',
                                               '_framerate',
                                               '_sampwidth',
                                               '_framesize',
                                               '_comptype',
                                               '_compname']},
             'wave.Wave_write': {'bases': [],
                                 'constructor': ['f'],
                                 'docstring': "Variables used in this class:\n\n    These variables are user settable through appropriate methods\n    of this class:\n    _file -- the open file with methods write(), close(), tell(), seek()\n              set through the __init__() method\n    _comptype -- the AIFF-C compression type ('NONE' in AIFF)\n              set through the setcomptype() or setparams() method\n    _compname -- the human-readable AIFF-C compression type\n              set through the setcomptype() or setparams() method\n    _nchannels -- the number of audio channels\n              set through the setnchannels() or setparams() method\n    _sampwidth -- the number of bytes per audio sample\n              set through the setsampwidth() or setparams() method\n    _framerate -- the sampling frequency\n              set through the setframerate() or setparams() method\n    _nframes -- the number of audio frames written to the header\n              set through the setnframes() or setparams() method\n\n    These variables are used internally only:\n    _datalength -- the size of the audio samples written to the header\n    _nframeswritten -- the number of frames actually written\n    _datawritten -- the size of the audio samples actually written\n    ",
                                 'methods': [('initfp', ['file'], ''),
                                             ('__del__', [], ''),
                                             ('setnchannels', ['nchannels'], ''),
                                             ('getnchannels', [], ''),
                                             ('setsampwidth', ['sampwidth'], ''),
                                             ('getsampwidth', [], ''),
                                             ('setframerate', ['framerate'], ''),
                                             ('getframerate', [], ''),
                                             ('setnframes', ['nframes'], ''),
                                             ('getnframes', [], ''),
                                             ('setcomptype', ['comptype', 'compname'], ''),
                                             ('getcomptype', [], ''),
                                             ('getcompname', [], ''),
                                             ('setparams', ['params'], ''),
                                             ('getparams', [], ''),
                                             ('setmark', ['id', 'pos', 'name'], ''),
                                             ('getmark', ['id'], ''),
                                             ('getmarkers', [], ''),
                                             ('tell', [], ''),
                                             ('writeframesraw', ['data'], ''),
                                             ('writeframes', ['data'], ''),
                                             ('close', [], ''),
                                             ('_ensure_header_written', ['datasize'], ''),
                                             ('_write_header', ['initlength'], ''),
                                             ('_patchheader', [], '')],
                                 'properties': ['_i_opened_the_file',
                                                '_file',
                                                '_convert',
                                                '_nchannels',
                                                '_sampwidth',
                                                '_framerate',
                                                '_nframes',
                                                '_nframeswritten',
                                                '_datawritten',
                                                '_datalength',
                                                '_headerwritten',
                                                '_comptype',
                                                '_compname',
                                                '_form_length_pos',
                                                '_data_length_pos']},
             'weakref.KeyedRef': {'bases': ['_weakref.ref'],
                                  'constructor': ['ob', 'callback', 'key'],
                                  'docstring': "Specialized reference that includes a key corresponding to the value.\n\n    This is used in the WeakValueDictionary to avoid having to create\n    a function object for each key stored in the mapping.  A shared\n    callback object can use the 'key' attribute of a KeyedRef instead\n    of getting a reference to the key from an enclosing scope.\n\n    ",
                                  'methods': [('__new__', ['ob', 'callback', 'key'], '')],
                                  'properties': ['__slots__', 'key']},
             'weakref.WeakKeyDictionary': {'bases': ['UserDict.UserDict'],
                                           'constructor': ['dict=None'],
                                           'docstring': ' Mapping class that references keys weakly.\n\n    Entries in the dictionary will be discarded when there is no\n    longer a strong reference to the key. This can be used to\n    associate additional data with an object owned by other parts of\n    an application without adding attributes to those objects. This\n    can be especially useful with objects that override attribute\n    accesses.\n    ',
                                           'methods': [('__delitem__', ['key'], ''),
                                                       ('__getitem__', ['key'], ''),
                                                       ('__repr__', [], ''),
                                                       ('__setitem__', ['key', 'value'], ''),
                                                       ('copy', [], ''),
                                                       ('__deepcopy__', ['memo'], ''),
                                                       ('get', ['key', 'default=None'], ''),
                                                       ('has_key', ['key'], ''),
                                                       ('__contains__', ['key'], ''),
                                                       ('items', [], ''),
                                                       ('iteritems', [], ''),
                                                       ('iterkeyrefs',
                                                        [],
                                                        "Return an iterator that yields the weak references to the keys.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the keys around longer than needed.\n\n        "),
                                                       ('iterkeys', [], ''),
                                                       ('__iter__', [], ''),
                                                       ('itervalues', [], ''),
                                                       ('keyrefs',
                                                        [],
                                                        "Return a list of weak references to the keys.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the keys around longer than needed.\n\n        "),
                                                       ('keys', [], ''),
                                                       ('popitem', [], ''),
                                                       ('pop', ['key', '*args'], ''),
                                                       ('setdefault',
                                                        ['key', 'default=None'],
                                                        ''),
                                                       ('update',
                                                        ['dict=None', '**kwargs'],
                                                        '')],
                                           'properties': ['data', '_remove', '__copy__']},
             'weakref.WeakValueDictionary': {'bases': ['UserDict.UserDict'],
                                             'constructor': ['*args', '**kw'],
                                             'docstring': 'Mapping class that references values weakly.\n\n    Entries in the dictionary will be discarded when no strong\n    reference to the value exists anymore\n    ',
                                             'methods': [('__getitem__', ['key'], ''),
                                                         ('__contains__', ['key'], ''),
                                                         ('has_key', ['key'], ''),
                                                         ('__repr__', [], ''),
                                                         ('__setitem__', ['key', 'value'], ''),
                                                         ('copy', [], ''),
                                                         ('__deepcopy__', ['memo'], ''),
                                                         ('get', ['key', 'default=None'], ''),
                                                         ('items', [], ''),
                                                         ('iteritems', [], ''),
                                                         ('iterkeys', [], ''),
                                                         ('__iter__', [], ''),
                                                         ('itervaluerefs',
                                                          [],
                                                          "Return an iterator that yields the weak references to the values.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the values around longer than needed.\n\n        "),
                                                         ('itervalues', [], ''),
                                                         ('popitem', [], ''),
                                                         ('pop', ['key', '*args'], ''),
                                                         ('setdefault',
                                                          ['key', 'default=None'],
                                                          ''),
                                                         ('update',
                                                          ['dict=None', '**kwargs'],
                                                          ''),
                                                         ('valuerefs',
                                                          [],
                                                          "Return a list of weak references to the values.\n\n        The references are not guaranteed to be 'live' at the time\n        they are used, so the result of calling the references needs\n        to be checked before being used.  This can be used to avoid\n        creating references that will cause the garbage collector to\n        keep the values around longer than needed.\n\n        "),
                                                         ('values', [], '')],
                                             'properties': ['_remove', '__copy__']},
             'webbrowser.BackgroundBrowser': {'bases': ['webbrowser.GenericBrowser'],
                                              'constructor': [],
                                              'docstring': 'Class for all browsers which are to be started in the\n       background.',
                                              'methods': [('open',
                                                           ['url', 'new=0', 'autoraise=True'],
                                                           '')],
                                              'properties': []},
             'webbrowser.BaseBrowser': {'bases': ['object'],
                                        'constructor': ["name=''"],
                                        'docstring': 'Parent class for all browsers. Do not use directly.',
                                        'methods': [('open',
                                                     ['url', 'new=0', 'autoraise=True'],
                                                     ''),
                                                    ('open_new', ['url'], ''),
                                                    ('open_new_tab', ['url'], '')],
                                        'properties': ['args', 'name', 'basename']},
             'webbrowser.Elinks': {'bases': ['webbrowser.UnixBrowser'],
                                   'constructor': [],
                                   'docstring': 'Launcher class for Elinks browsers.',
                                   'methods': [],
                                   'properties': ['remote_args',
                                                  'remote_action',
                                                  'remote_action_newwin',
                                                  'remote_action_newtab',
                                                  'background',
                                                  'redirect_stdout']},
             'webbrowser.Error': {'bases': ['Exception'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [],
                                  'properties': []},
             'webbrowser.Galeon': {'bases': ['webbrowser.UnixBrowser'],
                                   'constructor': [],
                                   'docstring': 'Launcher class for Galeon/Epiphany browsers.',
                                   'methods': [],
                                   'properties': ['raise_opts',
                                                  'remote_args',
                                                  'remote_action',
                                                  'remote_action_newwin',
                                                  'background']},
             'webbrowser.GenericBrowser': {'bases': ['webbrowser.BaseBrowser'],
                                           'constructor': ['name'],
                                           'docstring': 'Class for all browsers started with a command\n       and without remote functionality.',
                                           'methods': [('open',
                                                        ['url', 'new=0', 'autoraise=True'],
                                                        '')],
                                           'properties': ['name', 'args', 'basename']},
             'webbrowser.Grail': {'bases': ['webbrowser.BaseBrowser'],
                                  'constructor': [],
                                  'docstring': '',
                                  'methods': [('_find_grail_rc', [], ''),
                                              ('_remote', ['action'], ''),
                                              ('open', ['url', 'new=0', 'autoraise=True'], '')],
                                  'properties': []},
             'webbrowser.Konqueror': {'bases': ['webbrowser.BaseBrowser'],
                                      'constructor': [],
                                      'docstring': 'Controller for the KDE File Manager (kfm, or Konqueror).\n\n    See the output of ``kfmclient --commands``\n    for more information on the Konqueror remote-control interface.\n    ',
                                      'methods': [('open',
                                                   ['url', 'new=0', 'autoraise=True'],
                                                   '')],
                                      'properties': []},
             'webbrowser.MacOSX': {'bases': ['webbrowser.BaseBrowser'],
                                   'constructor': ['name'],
                                   'docstring': 'Launcher class for Aqua browsers on Mac OS X\n\n        Optionally specify a browser name on instantiation.  Note that this\n        will not work for Aqua browsers if the user has moved the application\n        package after installation.\n\n        If no browser is specified, the default browser, as specified in the\n        Internet System Preferences panel, will be used.\n        ',
                                   'methods': [('open', ['url', 'new=0', 'autoraise=True'], '')],
                                   'properties': ['name']},
             'webbrowser.MacOSXOSAScript': {'bases': ['webbrowser.BaseBrowser'],
                                            'constructor': ['name'],
                                            'docstring': '',
                                            'methods': [('open',
                                                         ['url', 'new=0', 'autoraise=True'],
                                                         '')],
                                            'properties': ['_name']},
             'webbrowser.Mozilla': {'bases': ['webbrowser.UnixBrowser'],
                                    'constructor': [],
                                    'docstring': 'Launcher class for Mozilla/Netscape browsers.',
                                    'methods': [],
                                    'properties': ['raise_opts',
                                                   'remote_args',
                                                   'remote_action',
                                                   'remote_action_newwin',
                                                   'remote_action_newtab',
                                                   'background']},
             'webbrowser.Opera': {'bases': ['webbrowser.UnixBrowser'],
                                  'constructor': [],
                                  'docstring': 'Launcher class for Opera browser.',
                                  'methods': [],
                                  'properties': ['raise_opts',
                                                 'remote_args',
                                                 'remote_action',
                                                 'remote_action_newwin',
                                                 'remote_action_newtab',
                                                 'background']},
             'webbrowser.UnixBrowser': {'bases': ['webbrowser.BaseBrowser'],
                                        'constructor': [],
                                        'docstring': 'Parent class for all Unix browsers with remote functionality.',
                                        'methods': [('_invoke',
                                                     ['args', 'remote', 'autoraise'],
                                                     ''),
                                                    ('open',
                                                     ['url', 'new=0', 'autoraise=True'],
                                                     '')],
                                        'properties': ['raise_opts',
                                                       'remote_args',
                                                       'remote_action',
                                                       'remote_action_newwin',
                                                       'remote_action_newtab',
                                                       'background',
                                                       'redirect_stdout']},
             'webbrowser.WindowsDefault': {'bases': ['webbrowser.BaseBrowser'],
                                           'constructor': [],
                                           'docstring': '',
                                           'methods': [('open',
                                                        ['url', 'new=0', 'autoraise=True'],
                                                        '')],
                                           'properties': []},
             'xdrlib.ConversionError': {'bases': ['xdrlib.Error'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': []},
             'xdrlib.Error': {'bases': ['Exception'],
                              'constructor': ['msg'],
                              'docstring': 'Exception class for this module. Use:\n\n    except xdrlib.Error, var:\n        # var has the Error instance for the exception\n\n    Public ivars:\n        msg -- contains the message\n\n    ',
                              'methods': [('__repr__', [], ''), ('__str__', [], '')],
                              'properties': ['msg']},
             'xdrlib.Packer': {'bases': [],
                               'constructor': [],
                               'docstring': 'Pack various data representations into a buffer.',
                               'methods': [('reset', [], ''),
                                           ('get_buffer', [], ''),
                                           ('pack_uint', ['x'], ''),
                                           ('pack_bool', ['x'], ''),
                                           ('pack_uhyper', ['x'], ''),
                                           ('pack_float', ['x'], ''),
                                           ('pack_double', ['x'], ''),
                                           ('pack_fstring', ['n', 's'], ''),
                                           ('pack_string', ['s'], ''),
                                           ('pack_list', ['list', 'pack_item'], ''),
                                           ('pack_farray', ['n', 'list', 'pack_item'], ''),
                                           ('pack_array', ['list', 'pack_item'], '')],
                               'properties': ['__buf',
                                              'get_buf',
                                              'pack_int',
                                              'pack_enum',
                                              'pack_hyper',
                                              'pack_fopaque',
                                              'pack_opaque',
                                              'pack_bytes']},
             'xdrlib.Unpacker': {'bases': [],
                                 'constructor': ['data'],
                                 'docstring': 'Unpacks various data representations from the given buffer.',
                                 'methods': [('reset', ['data'], ''),
                                             ('get_position', [], ''),
                                             ('set_position', ['position'], ''),
                                             ('get_buffer', [], ''),
                                             ('done', [], ''),
                                             ('unpack_uint', [], ''),
                                             ('unpack_int', [], ''),
                                             ('unpack_bool', [], ''),
                                             ('unpack_uhyper', [], ''),
                                             ('unpack_hyper', [], ''),
                                             ('unpack_float', [], ''),
                                             ('unpack_double', [], ''),
                                             ('unpack_fstring', ['n'], ''),
                                             ('unpack_string', [], ''),
                                             ('unpack_list', ['unpack_item'], ''),
                                             ('unpack_farray', ['n', 'unpack_item'], ''),
                                             ('unpack_array', ['unpack_item'], '')],
                                 'properties': ['__buf',
                                                '__pos',
                                                'unpack_enum',
                                                'unpack_fopaque',
                                                'unpack_opaque',
                                                'unpack_bytes']},
             'xmllib.Error': {'bases': ['RuntimeError'],
                              'constructor': [],
                              'docstring': '',
                              'methods': [],
                              'properties': []},
             'xmllib.TestXMLParser': {'bases': ['xmllib.XMLParser'],
                                      'constructor': ['**kw'],
                                      'docstring': '',
                                      'methods': [('handle_xml',
                                                   ['encoding', 'standalone'],
                                                   ''),
                                                  ('handle_doctype',
                                                   ['tag', 'pubid', 'syslit', 'data'],
                                                   ''),
                                                  ('handle_data', ['data'], ''),
                                                  ('flush', [], ''),
                                                  ('handle_cdata', ['data'], ''),
                                                  ('handle_proc', ['name', 'data'], ''),
                                                  ('handle_comment', ['data'], ''),
                                                  ('syntax_error', ['message'], ''),
                                                  ('unknown_starttag', ['tag', 'attrs'], ''),
                                                  ('unknown_endtag', ['tag'], ''),
                                                  ('unknown_entityref', ['ref'], ''),
                                                  ('unknown_charref', ['ref'], ''),
                                                  ('close', [], '')],
                                      'properties': ['testdata']},
             'xmllib.XMLParser': {'bases': [],
                                  'constructor': ['**kw'],
                                  'docstring': '',
                                  'methods': [('__fixelements', [], ''),
                                              ('__fixclass', ['kl'], ''),
                                              ('__fixdict', ['dict'], ''),
                                              ('reset', [], ''),
                                              ('setnomoretags', [], ''),
                                              ('setliteral', ['*args'], ''),
                                              ('feed', ['data'], ''),
                                              ('close', [], ''),
                                              ('translate_references', ['data', 'all=1'], ''),
                                              ('getnamespace', [], ''),
                                              ('goahead', ['end'], ''),
                                              ('parse_comment', ['i'], ''),
                                              ('parse_doctype', ['res'], ''),
                                              ('parse_cdata', ['i'], ''),
                                              ('parse_proc', ['i'], ''),
                                              ('parse_attributes', ['tag', 'i', 'j'], ''),
                                              ('parse_starttag', ['i'], ''),
                                              ('parse_endtag', ['i'], ''),
                                              ('finish_starttag',
                                               ['tagname', 'attrdict', 'method'],
                                               ''),
                                              ('finish_endtag', ['tag'], ''),
                                              ('handle_xml', ['encoding', 'standalone'], ''),
                                              ('handle_doctype',
                                               ['tag', 'pubid', 'syslit', 'data'],
                                               ''),
                                              ('handle_starttag',
                                               ['tag', 'method', 'attrs'],
                                               ''),
                                              ('handle_endtag', ['tag', 'method'], ''),
                                              ('handle_charref', ['name'], ''),
                                              ('handle_data', ['data'], ''),
                                              ('handle_cdata', ['data'], ''),
                                              ('handle_comment', ['data'], ''),
                                              ('handle_proc', ['name', 'data'], ''),
                                              ('syntax_error', ['message'], ''),
                                              ('unknown_starttag', ['tag', 'attrs'], ''),
                                              ('unknown_endtag', ['tag'], ''),
                                              ('unknown_charref', ['ref'], ''),
                                              ('unknown_entityref', ['name'], '')],
                                  'properties': ['attributes',
                                                 'elements',
                                                 '__accept_unquoted_attributes',
                                                 '__accept_missing_endtag_name',
                                                 '__map_case',
                                                 '__accept_utf8',
                                                 '__translate_attribute_references',
                                                 '__fixed',
                                                 'rawdata',
                                                 'stack',
                                                 'nomoretags',
                                                 'literal',
                                                 'lineno',
                                                 '__at_start',
                                                 '__seen_doctype',
                                                 '__seen_starttag',
                                                 '__use_namespaces',
                                                 '__namespaces',
                                                 '__xml_namespace_attributes',
                                                 'entitydefs']},
             'xmlrpclib.Binary': {'bases': [],
                                  'constructor': ['data=None'],
                                  'docstring': 'Wrapper for binary data.',
                                  'methods': [('__str__', [], ''),
                                              ('__cmp__', ['other'], ''),
                                              ('decode', ['data'], ''),
                                              ('encode', ['out'], '')],
                                  'properties': ['data']},
             'xmlrpclib.Boolean': {'bases': [],
                                   'constructor': ['value=0'],
                                   'docstring': 'Boolean-value wrapper.\n\n        Use True or False to generate a "boolean" XML-RPC value.\n        ',
                                   'methods': [('encode', ['out'], ''),
                                               ('__cmp__', ['other'], ''),
                                               ('__repr__', [], ''),
                                               ('__int__', [], ''),
                                               ('__nonzero__', [], '')],
                                   'properties': ['value']},
             'xmlrpclib.DateTime': {'bases': [],
                                    'constructor': ['value=0'],
                                    'docstring': "DateTime wrapper for an ISO 8601 string or time tuple or\n    localtime integer value to generate 'dateTime.iso8601' XML-RPC\n    value.\n    ",
                                    'methods': [('make_comparable', ['other'], ''),
                                                ('__lt__', ['other'], ''),
                                                ('__le__', ['other'], ''),
                                                ('__gt__', ['other'], ''),
                                                ('__ge__', ['other'], ''),
                                                ('__eq__', ['other'], ''),
                                                ('__ne__', ['other'], ''),
                                                ('timetuple', [], ''),
                                                ('__cmp__', ['other'], ''),
                                                ('__str__', [], ''),
                                                ('__repr__', [], ''),
                                                ('decode', ['data'], ''),
                                                ('encode', ['out'], '')],
                                    'properties': ['value']},
             'xmlrpclib.Error': {'bases': ['Exception'],
                                 'constructor': [],
                                 'docstring': 'Base class for client errors.',
                                 'methods': [('__str__', [], '')],
                                 'properties': []},
             'xmlrpclib.ExpatParser': {'bases': [],
                                       'constructor': ['target'],
                                       'docstring': '',
                                       'methods': [('feed', ['data'], ''), ('close', [], '')],
                                       'properties': ['_parser', '_target']},
             'xmlrpclib.Fault': {'bases': ['xmlrpclib.Error'],
                                 'constructor': ['faultCode', 'faultString', '**extra'],
                                 'docstring': 'Indicates an XML-RPC fault package.',
                                 'methods': [('__repr__', [], '')],
                                 'properties': ['faultCode', 'faultString']},
             'xmlrpclib.GzipDecodedResponse': {'bases': ["xmlrpclib.IfExp(Name('gzip'), Getattr(Name('gzip'), 'GzipFile'), Name('object'))"],
                                               'constructor': ['response'],
                                               'docstring': 'a file-like object to decode a response encoded with the gzip\n    method, as described in RFC 1952.\n    ',
                                               'methods': [('close', [], '')],
                                               'properties': ['stringio']},
             'xmlrpclib.Marshaller': {'bases': [],
                                      'constructor': ['encoding=None', 'allow_none=0'],
                                      'docstring': 'Generate an XML-RPC params chunk from a Python data structure.\n\n    Create a Marshaller instance for each set of parameters, and use\n    the "dumps" method to convert your data (represented as a tuple)\n    to an XML-RPC params chunk.  To write a fault response, pass a\n    Fault instance instead.  You may prefer to use the "dumps" module\n    function for this purpose.\n    ',
                                      'methods': [('dumps', ['values'], ''),
                                                  ('__dump', ['value', 'write'], ''),
                                                  ('dump_nil', ['value', 'write'], ''),
                                                  ('dump_int', ['value', 'write'], ''),
                                                  ('dump_bool', ['value', 'write'], ''),
                                                  ('dump_long', ['value', 'write'], ''),
                                                  ('dump_double', ['value', 'write'], ''),
                                                  ('dump_string',
                                                   ['value', 'write', 'escape=escape'],
                                                   ''),
                                                  ('dump_unicode',
                                                   ['value', 'write', 'escape=escape'],
                                                   ''),
                                                  ('dump_array', ['value', 'write'], ''),
                                                  ('dump_struct',
                                                   ['value', 'write', 'escape=escape'],
                                                   ''),
                                                  ('dump_datetime', ['value', 'write'], ''),
                                                  ('dump_instance', ['value', 'write'], '')],
                                      'properties': ['memo',
                                                     'data',
                                                     'encoding',
                                                     'allow_none',
                                                     'dispatch',
                                                     'write']},
             'xmlrpclib.MultiCall': {'bases': [],
                                     'constructor': ['server'],
                                     'docstring': 'server -> a object used to boxcar method calls\n\n    server should be a ServerProxy object.\n\n    Methods can be added to the MultiCall using normal\n    method call syntax e.g.:\n\n    multicall = MultiCall(server_proxy)\n    multicall.add(2,3)\n    multicall.get_address("Guido")\n\n    To execute the multicall, call the MultiCall object e.g.:\n\n    add_result, address = multicall()\n    ',
                                     'methods': [('__repr__', [], ''),
                                                 ('__getattr__', ['name'], ''),
                                                 ('__call__', [], '')],
                                     'properties': ['__server', '__call_list', '__str__']},
             'xmlrpclib.MultiCallIterator': {'bases': [],
                                             'constructor': ['results'],
                                             'docstring': 'Iterates over the results of a multicall. Exceptions are\n    thrown in response to xmlrpc faults.',
                                             'methods': [('__getitem__', ['i'], '')],
                                             'properties': ['results']},
             'xmlrpclib.ProtocolError': {'bases': ['xmlrpclib.Error'],
                                         'constructor': ['url', 'errcode', 'errmsg', 'headers'],
                                         'docstring': 'Indicates an HTTP protocol error.',
                                         'methods': [('__repr__', [], '')],
                                         'properties': ['url', 'errcode', 'errmsg', 'headers']},
             'xmlrpclib.ResponseError': {'bases': ['xmlrpclib.Error'],
                                         'constructor': [],
                                         'docstring': 'Indicates a broken response package.',
                                         'methods': [],
                                         'properties': []},
             'xmlrpclib.SafeTransport': {'bases': ['xmlrpclib.Transport'],
                                         'constructor': [],
                                         'docstring': 'Handles an HTTPS transaction to an XML-RPC server.',
                                         'methods': [('make_connection', ['host'], '')],
                                         'properties': ['_extra_headers', '_connection']},
             'xmlrpclib.ServerProxy': {'bases': [],
                                       'constructor': ['uri',
                                                       'transport=None',
                                                       'encoding=None',
                                                       'verbose=0',
                                                       'allow_none=0',
                                                       'use_datetime=0'],
                                       'docstring': 'uri [,options] -> a logical connection to an XML-RPC server\n\n    uri is the connection point on the server, given as\n    scheme://host/target.\n\n    The standard implementation always supports the "http" scheme.  If\n    SSL socket support is available (Python 2.0), it also supports\n    "https".\n\n    If the target part and the slash preceding it are both omitted,\n    "/RPC2" is assumed.\n\n    The following options can be given as keyword arguments:\n\n        transport: a transport factory\n        encoding: the request encoding (default is UTF-8)\n\n    All 8-bit strings passed to the server proxy are assumed to use\n    the given encoding.\n    ',
                                       'methods': [('__close', [], ''),
                                                   ('__request', ['methodname', 'params'], ''),
                                                   ('__repr__', [], ''),
                                                   ('__getattr__', ['name'], ''),
                                                   ('__call__',
                                                    ['attr'],
                                                    'A workaround to get special attributes on the ServerProxy\n           without interfering with the magic __getattr__\n        ')],
                                       'properties': ['__host',
                                                      '__handler',
                                                      '__transport',
                                                      '__encoding',
                                                      '__verbose',
                                                      '__allow_none',
                                                      '__str__']},
             'xmlrpclib.SlowParser': {'bases': [],
                                      'constructor': ['target'],
                                      'docstring': 'Default XML parser (based on xmllib.XMLParser).',
                                      'methods': [],
                                      'properties': ['handle_xml',
                                                     'unknown_starttag',
                                                     'handle_data',
                                                     'handle_cdata',
                                                     'unknown_endtag']},
             'xmlrpclib.Transport': {'bases': [],
                                     'constructor': ['use_datetime=0'],
                                     'docstring': 'Handles an HTTP transaction to an XML-RPC server.',
                                     'methods': [('request',
                                                  ['host',
                                                   'handler',
                                                   'request_body',
                                                   'verbose=0'],
                                                  ''),
                                                 ('single_request',
                                                  ['host',
                                                   'handler',
                                                   'request_body',
                                                   'verbose=0'],
                                                  ''),
                                                 ('getparser', [], ''),
                                                 ('get_host_info', ['host'], ''),
                                                 ('make_connection', ['host'], ''),
                                                 ('close', [], ''),
                                                 ('send_request',
                                                  ['connection', 'handler', 'request_body'],
                                                  ''),
                                                 ('send_host', ['connection', 'host'], ''),
                                                 ('send_user_agent', ['connection'], ''),
                                                 ('send_content',
                                                  ['connection', 'request_body'],
                                                  ''),
                                                 ('parse_response', ['response'], '')],
                                     'properties': ['user_agent',
                                                    'accept_gzip_encoding',
                                                    'encode_threshold',
                                                    '_use_datetime',
                                                    '_connection',
                                                    '_extra_headers',
                                                    'verbose']},
             'xmlrpclib.Unmarshaller': {'bases': [],
                                        'constructor': ['use_datetime=0'],
                                        'docstring': 'Unmarshal an XML-RPC response, based on incoming XML event\n    messages (start, data, end).  Call close() to get the resulting\n    data structure.\n\n    Note that this reader is fairly tolerant, and gladly accepts bogus\n    XML-RPC data without complaining (but not bogus XML).\n    ',
                                        'methods': [('close', [], ''),
                                                    ('getmethodname', [], ''),
                                                    ('xml', ['encoding', 'standalone'], ''),
                                                    ('start', ['tag', 'attrs'], ''),
                                                    ('data', ['text'], ''),
                                                    ('end', ['tag', 'join=string.join'], ''),
                                                    ('end_dispatch', ['tag', 'data'], ''),
                                                    ('end_nil', ['data'], ''),
                                                    ('end_boolean', ['data'], ''),
                                                    ('end_int', ['data'], ''),
                                                    ('end_double', ['data'], ''),
                                                    ('end_string', ['data'], ''),
                                                    ('end_array', ['data'], ''),
                                                    ('end_struct', ['data'], ''),
                                                    ('end_base64', ['data'], ''),
                                                    ('end_dateTime', ['data'], ''),
                                                    ('end_value', ['data'], ''),
                                                    ('end_params', ['data'], ''),
                                                    ('end_fault', ['data'], ''),
                                                    ('end_methodName', ['data'], '')],
                                        'properties': ['_type',
                                                       '_stack',
                                                       '_marks',
                                                       '_data',
                                                       '_methodname',
                                                       '_encoding',
                                                       'append',
                                                       '_use_datetime',
                                                       '_value',
                                                       'dispatch']},
             'xmlrpclib._Method': {'bases': [],
                                   'constructor': ['send', 'name'],
                                   'docstring': '',
                                   'methods': [('__getattr__', ['name'], ''),
                                               ('__call__', ['*args'], '')],
                                   'properties': ['__send', '__name']},
             'xmlrpclib._MultiCallMethod': {'bases': [],
                                            'constructor': ['call_list', 'name'],
                                            'docstring': '',
                                            'methods': [('__getattr__', ['name'], ''),
                                                        ('__call__', ['*args'], '')],
                                            'properties': ['__call_list', '__name']},
             'zipfile.BadZipfile': {'bases': ['Exception'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [],
                                    'properties': []},
             'zipfile.LargeZipFile': {'bases': ['Exception'],
                                      'constructor': [],
                                      'docstring': '\n    Raised when writing a zipfile, the zipfile requires ZIP64 extensions\n    and those extensions are disabled.\n    ',
                                      'methods': [],
                                      'properties': []},
             'zipfile.PyZipFile': {'bases': ['zipfile.ZipFile'],
                                   'constructor': [],
                                   'docstring': 'Class to create ZIP archives with Python library files and packages.',
                                   'methods': [('writepy',
                                                ['pathname', "basename=''"],
                                                'Add all files from "pathname" to the ZIP archive.\n\n        If pathname is a package directory, search the directory and\n        all package subdirectories recursively for all *.py and enter\n        the modules into the archive.  If pathname is a plain\n        directory, listdir *.py and enter all modules.  Else, pathname\n        must be a Python *.py file and the module will be put into the\n        archive.  Added modules are always module.pyo or module.pyc.\n        This method will compile the module.py into module.pyc if\n        necessary.\n        '),
                                               ('_get_codename',
                                                ['pathname', 'basename'],
                                                'Return (filename, archivename) for the path.\n\n        Given a module name path, return the correct file path and\n        archive name, compiling if necessary.  For example, given\n        /python/lib/string, return (/python/lib/string.pyc, string).\n        ')],
                                   'properties': []},
             'zipfile.ZipExtFile': {'bases': ['io.BufferedIOBase'],
                                    'constructor': ['fileobj',
                                                    'mode',
                                                    'zipinfo',
                                                    'decrypter=None'],
                                    'docstring': 'File-like object for reading an archive member.\n       Is returned by ZipFile.open().\n    ',
                                    'methods': [('readline',
                                                 ['limit=-1'],
                                                 'Read and return a line from the stream.\n\n        If limit is specified, at most limit bytes will be read.\n        '),
                                                ('peek',
                                                 ['n=1'],
                                                 'Returns buffered bytes without advancing the position.'),
                                                ('readable', [], ''),
                                                ('read',
                                                 ['n=-1'],
                                                 'Read and return up to n bytes.\n        If the argument is omitted, None, or negative, data is read and returned until EOF is reached..\n        '),
                                                ('_update_crc', ['newdata', 'eof'], ''),
                                                ('read1',
                                                 ['n'],
                                                 'Read up to n bytes with at most one read() system call.')],
                                    'properties': ['MAX_N',
                                                   'MIN_READ_SIZE',
                                                   'PATTERN',
                                                   '_fileobj',
                                                   '_decrypter',
                                                   '_compress_type',
                                                   '_compress_size',
                                                   '_compress_left',
                                                   '_decompressor',
                                                   '_unconsumed',
                                                   '_readbuffer',
                                                   '_offset',
                                                   '_universal',
                                                   'newlines',
                                                   'mode',
                                                   'name',
                                                   '_expected_crc',
                                                   '_running_crc']},
             'zipfile.ZipFile': {'bases': [],
                                 'constructor': ['file',
                                                 "mode='r'",
                                                 'compression=ZIP_STORED',
                                                 'allowZip64=False'],
                                 'docstring': ' Class with methods to open, read, write, close, list zip files.\n\n    z = ZipFile(file, mode="r", compression=ZIP_STORED, allowZip64=False)\n\n    file: Either the path to the file, or a file-like object.\n          If it is a path, the file will be opened and closed by ZipFile.\n    mode: The mode can be either read "r", write "w" or append "a".\n    compression: ZIP_STORED (no compression) or ZIP_DEFLATED (requires zlib).\n    allowZip64: if True ZipFile will create files with ZIP64 extensions when\n                needed, otherwise it will raise an exception when this would\n                be necessary.\n\n    ',
                                 'methods': [('__enter__', [], ''),
                                             ('__exit__', ['type', 'value', 'traceback'], ''),
                                             ('_GetContents',
                                              [],
                                              'Read the directory, making sure we close the file if the format\n        is bad.'),
                                             ('_RealGetContents',
                                              [],
                                              'Read in the table of contents for the ZIP file.'),
                                             ('namelist',
                                              [],
                                              'Return a list of file names in the archive.'),
                                             ('infolist',
                                              [],
                                              'Return a list of class ZipInfo instances for files in the\n        archive.'),
                                             ('printdir',
                                              [],
                                              'Print a table of contents for the zip file.'),
                                             ('testzip',
                                              [],
                                              'Read all the files and check the CRC.'),
                                             ('getinfo',
                                              ['name'],
                                              "Return the instance of ZipInfo given 'name'."),
                                             ('setpassword',
                                              ['pwd'],
                                              'Set default password for encrypted files.'),
                                             ('read',
                                              ['name', 'pwd=None'],
                                              'Return file bytes (as a string) for name.'),
                                             ('open',
                                              ['name', "mode='r'", 'pwd=None'],
                                              "Return file-like object for 'name'."),
                                             ('extract',
                                              ['member', 'path=None', 'pwd=None'],
                                              "Extract a member from the archive to the current working directory,\n           using its full name. Its file information is extracted as accurately\n           as possible. `member' may be a filename or a ZipInfo object. You can\n           specify a different directory using `path'.\n        "),
                                             ('extractall',
                                              ['path=None', 'members=None', 'pwd=None'],
                                              "Extract all members from the archive to the current working\n           directory. `path' specifies a different directory to extract to.\n           `members' is optional and must be a subset of the list returned\n           by namelist().\n        "),
                                             ('_extract_member',
                                              ['member', 'targetpath', 'pwd'],
                                              "Extract the ZipInfo object 'member' to a physical\n           file on the path targetpath.\n        "),
                                             ('_writecheck',
                                              ['zinfo'],
                                              'Check for errors before writing a file to the archive.'),
                                             ('write',
                                              ['filename',
                                               'arcname=None',
                                               'compress_type=None'],
                                              'Put the bytes from filename into the archive under the name\n        arcname.'),
                                             ('writestr',
                                              ['zinfo_or_arcname',
                                               'bytes',
                                               'compress_type=None'],
                                              "Write a file into the archive.  The contents is the string\n        'bytes'.  'zinfo_or_arcname' is either a ZipInfo instance or\n        the name of the file in the archive."),
                                             ('__del__',
                                              [],
                                              'Call the "close()" method in case the user forgot.'),
                                             ('close',
                                              [],
                                              'Close the file, and for mode "w" and "a" write the ending\n        records.')],
                                 'properties': ['fp',
                                                '_allowZip64',
                                                '_didModify',
                                                'debug',
                                                'NameToInfo',
                                                'filelist',
                                                'compression',
                                                'mode',
                                                'pwd',
                                                'comment',
                                                '_filePassed',
                                                'filename',
                                                'start_dir']},
             'zipfile.ZipInfo': {'bases': ['object'],
                                 'constructor': ["filename='NoName'",
                                                 'date_time=(1980, 1, 1, 0, 0, 0)'],
                                 'docstring': 'Class with attributes describing each file in the ZIP archive.',
                                 'methods': [('FileHeader',
                                              [],
                                              'Return the per-file header as a string.'),
                                             ('_encodeFilenameFlags', [], ''),
                                             ('_decodeFilename', [], ''),
                                             ('_decodeExtra', [], '')],
                                 'properties': ['__slots__',
                                                'orig_filename',
                                                'filename',
                                                'date_time',
                                                'compress_type',
                                                'comment',
                                                'extra',
                                                'create_system',
                                                'create_version',
                                                'extract_version',
                                                'reserved',
                                                'flag_bits',
                                                'volume',
                                                'internal_attr',
                                                'external_attr',
                                                'file_size',
                                                'compress_size',
                                                'header_offset']},
             'zipfile._ZipDecrypter': {'bases': [],
                                       'constructor': ['pwd'],
                                       'docstring': 'Class to handle decryption of files stored within a ZIP archive.\n\n    ZIP supports a password-based form of encryption. Even though known\n    plaintext attacks have been found against it, it is still useful\n    to be able to get data out of such a file.\n\n    Usage:\n        zd = _ZipDecrypter(mypwd)\n        plain_char = zd(cypher_char)\n        plain_text = map(zd, cypher_text)\n    ',
                                       'methods': [('_GenerateCRCTable',
                                                    [],
                                                    'Generate a CRC-32 table.\n\n        ZIP encryption uses the CRC32 one-byte primitive for scrambling some\n        internal keys. We noticed that a direct implementation is faster than\n        relying on binascii.crc32().\n        '),
                                                   ('_crc32',
                                                    ['ch', 'crc'],
                                                    'Compute the CRC32 primitive on one byte.'),
                                                   ('_UpdateKeys', ['c'], ''),
                                                   ('__call__',
                                                    ['c'],
                                                    'Decrypt a single character.')],
                                       'properties': ['crctable', 'key0', 'key1', 'key2']}},
 'CONSTANTS': ['_abcoll.__all__',
               'abc._InstanceType',
               'aifc.__all__',
               'aifc._AIFC_version',
               'aifc._HUGE_VAL',
               'aifc.openfp',
               'aifc.fn',
               'aifc.f',
               'aifc.gn',
               'aifc.g',
               'aifc.data',
               'anydbm._names',
               'anydbm._errors',
               'anydbm._defaultmod',
               'anydbm._name',
               'anydbm._mod',
               'anydbm._defaultmod',
               'anydbm.error',
               'argparse.__version__',
               'argparse.__all__',
               'argparse.SUPPRESS',
               'argparse.OPTIONAL',
               'argparse.ZERO_OR_MORE',
               'argparse.ONE_OR_MORE',
               'argparse.PARSER',
               'argparse.REMAINDER',
               'argparse._UNRECOGNIZED_ARGS_ATTR',
               'asyncore.socket_map',
               'asyncore._reraised_exceptions',
               'asyncore.poll3',
               'atexit.__all__',
               'atexit._exithandlers',
               'audiodev.warnpy3k',
               'audiodev.__all__',
               'base64.__all__',
               'base64._translation',
               'base64._x',
               'base64.EMPTYSTRING',
               'base64._b32alphabet',
               'base64._b32tab',
               'base64._b32tab',
               'base64.k',
               'base64.v',
               'base64._b32rev',
               'base64.k',
               'base64.v',
               'base64.MAXLINESIZE',
               'base64.MAXBINSIZE',
               'BaseHTTPServer.__version__',
               'BaseHTTPServer.__all__',
               'BaseHTTPServer.DEFAULT_ERROR_MESSAGE',
               'BaseHTTPServer.DEFAULT_ERROR_CONTENT_TYPE',
               'Bastion.warnpy3k',
               'Bastion.__all__',
               'bdb.__all__',
               'binhex.__all__',
               'binhex._DID_HEADER',
               'binhex._DID_DATA',
               'binhex._DID_RSRC',
               'binhex.REASONABLY_LARGE',
               'binhex.LINELEN',
               'binhex.RUNCHAR',
               'bisect.insort',
               'bisect.bisect',
               'calendar.__all__',
               'calendar.error',
               'calendar.January',
               'calendar.February',
               'calendar.mdays',
               'calendar.day_name',
               'calendar.day_abbr',
               'calendar.month_name',
               'calendar.month_abbr',
               'calendar.MONDAY',
               'calendar.TUESDAY',
               'calendar.WEDNESDAY',
               'calendar.THURSDAY',
               'calendar.FRIDAY',
               'calendar.SATURDAY',
               'calendar.SUNDAY',
               'calendar.c',
               'calendar.firstweekday',
               'calendar.monthcalendar',
               'calendar.prweek',
               'calendar.week',
               'calendar.weekheader',
               'calendar.prmonth',
               'calendar.month',
               'calendar.calendar',
               'calendar.prcal',
               'calendar._colwidth',
               'calendar._spacing',
               'calendar.EPOCH',
               'calendar._EPOCH_ORD',
               'CGIHTTPServer.__version__',
               'CGIHTTPServer.__all__',
               'CGIHTTPServer.nobody',
               'cgi.__version__',
               'cgi.__all__',
               'cgi.logfile',
               'cgi.logfp',
               'cgi.log',
               'cgi.maxlen',
               'cgitb.__UNDEF__',
               'cgitb.handler',
               'cmd.__all__',
               'cmd.PROMPT',
               'cmd.IDENTCHARS',
               'codecs.why',
               'codecs.__all__',
               'codecs.BOM_UTF8',
               'codecs.BOM_LE',
               'codecs.BOM_UTF16_LE',
               'codecs.BOM_BE',
               'codecs.BOM_UTF16_BE',
               'codecs.BOM_UTF32_LE',
               'codecs.BOM_UTF32_BE',
               'codecs.BOM',
               'codecs.BOM_UTF16',
               'codecs.BOM_UTF32',
               'codecs.BOM',
               'codecs.BOM_UTF16',
               'codecs.BOM_UTF32',
               'codecs.BOM32_LE',
               'codecs.BOM32_BE',
               'codecs.BOM64_LE',
               'codecs.BOM64_BE',
               'codecs.strict_errors',
               'codecs.ignore_errors',
               'codecs.replace_errors',
               'codecs.xmlcharrefreplace_errors',
               'codecs.backslashreplace_errors',
               'codecs.strict_errors',
               'codecs.ignore_errors',
               'codecs.replace_errors',
               'codecs.xmlcharrefreplace_errors',
               'codecs.backslashreplace_errors',
               'codecs._false',
               'codeop._features',
               'codeop.fname',
               'codeop.__all__',
               'codeop.PyCF_DONT_IMPLY_DEDENT',
               'code.__all__',
               'collections.__all__',
               'collections.Point',
               'collections.p',
               'collections.p',
               'collections.Point3D',
               'collections.TestResults',
               'colorsys.__all__',
               'colorsys.ONE_THIRD',
               'colorsys.ONE_SIXTH',
               'colorsys.TWO_THIRD',
               'commands.warnpy3k',
               'commands.__all__',
               'compileall.__all__',
               'compileall.exit_status',
               'ConfigParser._default_dict',
               'ConfigParser.__all__',
               'ConfigParser.DEFAULTSECT',
               'ConfigParser.MAX_INTERPOLATION_DEPTH',
               'contextlib.__all__',
               'cookielib.__all__',
               'cookielib.debug',
               'cookielib.logger',
               'cookielib.DEFAULT_HTTP_PORT',
               'cookielib.MISSING_FILENAME_TEXT',
               'cookielib.EPOCH_YEAR',
               'cookielib.DAYS',
               'cookielib.MONTHS',
               'cookielib.MONTHS_LOWER',
               'cookielib.month',
               'cookielib.UTC_ZONES',
               'cookielib.TIMEZONE_RE',
               'cookielib.STRICT_DATE_RE',
               'cookielib.WEEKDAY_RE',
               'cookielib.LOOSE_HTTP_DATE_RE',
               'cookielib.ISO_DATE_RE',
               'cookielib.HEADER_TOKEN_RE',
               'cookielib.HEADER_QUOTED_VALUE_RE',
               'cookielib.HEADER_VALUE_RE',
               'cookielib.HEADER_ESCAPE_RE',
               'cookielib.HEADER_JOIN_ESCAPE_RE',
               'cookielib.IPV4_RE',
               'cookielib.cut_port_re',
               'cookielib.HTTP_PATH_SAFE',
               'cookielib.ESCAPED_CHAR_RE',
               'Cookie.__all__',
               'Cookie._nulljoin',
               'Cookie._semispacejoin',
               'Cookie._spacejoin',
               'Cookie._LegalChars',
               'Cookie._Translator',
               'Cookie._idmap',
               'Cookie.x',
               'Cookie._OctalPatt',
               'Cookie._QuotePatt',
               'Cookie._weekdayname',
               'Cookie._monthname',
               'Cookie._LegalCharsPatt',
               'Cookie._CookiePattern',
               'Cookie.Cookie',
               'copy.error',
               'copy.PyStringMap',
               'copy.__all__',
               'copy._copy_dispatch',
               'copy.d',
               'copy.t',
               'copy.name',
               'copy.t',
               'copy.t',
               'copy.d',
               'copy._deepcopy_dispatch',
               'copy.d',
               'copy.d',
               'copy.types',
               'copy_reg.__all__',
               'copy_reg.dispatch_table',
               'copy_reg._HEAPTYPE',
               'copy_reg._extension_registry',
               'copy_reg._inverted_registry',
               'copy_reg._extension_cache',
               'cProfile.__all__',
               'csv.__all__',
               'csv.complex',
               'dbhash.__all__',
               'dbhash.error',
               'decimal.__all__',
               'decimal.__version__',
               'decimal.DecimalTuple',
               'decimal.DecimalTuple',
               'decimal.ROUND_DOWN',
               'decimal.ROUND_HALF_UP',
               'decimal.ROUND_HALF_EVEN',
               'decimal.ROUND_CEILING',
               'decimal.ROUND_FLOOR',
               'decimal.ROUND_UP',
               'decimal.ROUND_HALF_DOWN',
               'decimal.ROUND_05UP',
               'decimal._signals',
               'decimal._condition_map',
               'decimal.threading',
               'decimal.sys',
               'decimal.MockThreading',
               'decimal.local',
               'decimal.threading',
               'decimal.local',
               'decimal.rounding_functions',
               'decimal.name',
               'decimal.name',
               'decimal.globalname',
               'decimal.val',
               'decimal.name',
               'decimal.val',
               'decimal.globalname',
               'decimal.rounding_functions',
               'decimal._log10_digits',
               'decimal.DefaultContext',
               'decimal.BasicContext',
               'decimal.ExtendedContext',
               'decimal._parser',
               'decimal._all_zeros',
               'decimal._exact_half',
               'decimal._parse_format_specifier_regex',
               'decimal.re',
               'decimal._Infinity',
               'decimal._NegativeInfinity',
               'decimal._NaN',
               'decimal._Zero',
               'decimal._One',
               'decimal._NegativeOne',
               'decimal._SignedInfinity',
               'difflib.__all__',
               'difflib.Match',
               'difflib._file_template',
               'difflib._styles',
               'difflib._table_template',
               'difflib._legend',
               'difflib.re',
               'dircache.warnpy3k',
               'dircache.__all__',
               'dircache.cache',
               'dircache.opendir',
               'dis.__all__',
               'dis._opcodes_all',
               'dis._have_code',
               'dis.disco',
               'doctest.__docformat__',
               'doctest.__all__',
               'doctest.TestResults',
               'doctest.OPTIONFLAGS_BY_NAME',
               'doctest.DONT_ACCEPT_TRUE_FOR_1',
               'doctest.DONT_ACCEPT_BLANKLINE',
               'doctest.NORMALIZE_WHITESPACE',
               'doctest.ELLIPSIS',
               'doctest.SKIP',
               'doctest.IGNORE_EXCEPTION_DETAIL',
               'doctest.COMPARISON_FLAGS',
               'doctest.REPORT_UDIFF',
               'doctest.REPORT_CDIFF',
               'doctest.REPORT_NDIFF',
               'doctest.REPORT_ONLY_FIRST_FAILURE',
               'doctest.REPORTING_FLAGS',
               'doctest.BLANKLINE_MARKER',
               'doctest.ELLIPSIS_MARKER',
               'doctest._encoding',
               'doctest.master',
               'doctest._unittest_reportflags',
               'doctest.__test__',
               'dumbdbm._open',
               'dumbdbm._BLOCKSIZE',
               'dumbdbm.error',
               'dummy_threading.holding_thread',
               'dummy_threading.holding_threading',
               'dummy_threading.holding__threading_local',
               'dummy_threading.held_thread',
               'dummy_threading.holding_thread',
               'dummy_threading.held_threading',
               'dummy_threading.holding_threading',
               'dummy_threading.held__threading_local',
               'dummy_threading.holding__threading_local',
               'dummy_threading.held_threading',
               'dummy_threading.holding_threading',
               'dummy_threading.held__threading_local',
               'dummy_threading.holding__threading_local',
               'dummy_threading.held_thread',
               'dummy_threading.holding_thread',
               'dummy_threading.dummy_thread',
               'dummy_threading.sys_modules',
               'dummy_thread.__all__',
               'dummy_thread._interrupt',
               'dummy_thread._main',
               'filecmp.__all__',
               'filecmp._cache',
               'filecmp.BUFSIZE',
               'fileinput.__all__',
               'fileinput._state',
               'fileinput.DEFAULT_BUFSIZE',
               'fnmatch.__all__',
               'fnmatch._cache',
               'fnmatch._MAXCACHE',
               'formatter.AS_IS',
               'fpformat.warnpy3k',
               'fpformat.__all__',
               'fpformat.decoder',
               'fpformat.NotANumber',
               'fractions.__all__',
               'fractions.Rational',
               'fractions._RATIONAL_FORMAT',
               'ftplib.socket',
               'ftplib.SOCKS',
               'ftplib.getfqdn',
               'ftplib.__all__',
               'ftplib.MSG_OOB',
               'ftplib.FTP_PORT',
               'ftplib.all_errors',
               'ftplib.CRLF',
               'ftplib.all_errors',
               'ftplib._150_re',
               'ftplib._227_re',
               'functools.WRAPPER_ASSIGNMENTS',
               'functools.WRAPPER_UPDATES',
               '__future__.all_feature_names',
               '__future__.__all__',
               '__future__.CO_NESTED',
               '__future__.CO_GENERATOR_ALLOWED',
               '__future__.CO_FUTURE_DIVISION',
               '__future__.CO_FUTURE_ABSOLUTE_IMPORT',
               '__future__.CO_FUTURE_WITH_STATEMENT',
               '__future__.CO_FUTURE_PRINT_FUNCTION',
               '__future__.CO_FUTURE_UNICODE_LITERALS',
               '__future__.nested_scopes',
               '__future__.generators',
               '__future__.division',
               '__future__.absolute_import',
               '__future__.with_statement',
               '__future__.print_function',
               '__future__.unicode_literals',
               'genericpath.__all__',
               'getopt.__all__',
               'getopt.error',
               'getpass.__all__',
               'getpass.getpass',
               'getpass.getpass',
               'getpass.getpass',
               'getpass.getpass',
               'gettext.__all__',
               'gettext._default_localedir',
               'gettext._translations',
               'gettext._localedirs',
               'gettext._localecodesets',
               'gettext._current_domain',
               'gettext.Catalog',
               'glob.__all__',
               'glob.magic_check',
               'gzip.__all__',
               'gzip.FTEXT',
               'gzip.FHCRC',
               'gzip.FEXTRA',
               'gzip.FNAME',
               'gzip.FCOMMENT',
               'gzip.READ',
               'gzip.WRITE',
               'hashlib.__doc__',
               'hashlib.__always_supported',
               'hashlib.algorithms',
               'hashlib.__all__',
               'hashlib.new',
               'hashlib.__get_hash',
               'hashlib.new',
               'hashlib.__get_hash',
               'hashlib.__func_name',
               'hashlib.__always_supported',
               'hashlib.__func_name',
               'hashlib.__get_hash',
               'hashlib.__py_new',
               'hashlib.__hash_new',
               'hashlib.__get_openssl_constructor',
               'heapq.__about__',
               'heapq.__all__',
               'heapq._nsmallest',
               'heapq._nlargest',
               'heapq.heap',
               'heapq.data',
               'heapq.item',
               'heapq.sort',
               'hmac.trans_5C',
               'hmac.x',
               'hmac.trans_36',
               'hmac.x',
               'hmac.digest_size',
               'hmac._secret_backdoor_key',
               'htmlentitydefs.name2codepoint',
               'htmlentitydefs.codepoint2name',
               'htmlentitydefs.entitydefs',
               'htmlentitydefs.name',
               'htmlentitydefs.codepoint',
               'htmlentitydefs.name',
               'htmlentitydefs.codepoint',
               'htmllib.warnpy3k',
               'htmllib.__all__',
               'HTMLParser.interesting_normal',
               'HTMLParser.interesting_cdata',
               'HTMLParser.incomplete',
               'HTMLParser.entityref',
               'HTMLParser.charref',
               'HTMLParser.starttagopen',
               'HTMLParser.piclose',
               'HTMLParser.commentclose',
               'HTMLParser.tagfind',
               'HTMLParser.attrfind',
               'HTMLParser.locatestarttagend',
               'HTMLParser.endendtag',
               'HTMLParser.endtagfind',
               'httplib.__all__',
               'httplib.HTTP_PORT',
               'httplib.HTTPS_PORT',
               'httplib._UNKNOWN',
               'httplib._CS_IDLE',
               'httplib._CS_REQ_STARTED',
               'httplib._CS_REQ_SENT',
               'httplib.CONTINUE',
               'httplib.SWITCHING_PROTOCOLS',
               'httplib.PROCESSING',
               'httplib.OK',
               'httplib.CREATED',
               'httplib.ACCEPTED',
               'httplib.NON_AUTHORITATIVE_INFORMATION',
               'httplib.NO_CONTENT',
               'httplib.RESET_CONTENT',
               'httplib.PARTIAL_CONTENT',
               'httplib.MULTI_STATUS',
               'httplib.IM_USED',
               'httplib.MULTIPLE_CHOICES',
               'httplib.MOVED_PERMANENTLY',
               'httplib.FOUND',
               'httplib.SEE_OTHER',
               'httplib.NOT_MODIFIED',
               'httplib.USE_PROXY',
               'httplib.TEMPORARY_REDIRECT',
               'httplib.BAD_REQUEST',
               'httplib.UNAUTHORIZED',
               'httplib.PAYMENT_REQUIRED',
               'httplib.FORBIDDEN',
               'httplib.NOT_FOUND',
               'httplib.METHOD_NOT_ALLOWED',
               'httplib.NOT_ACCEPTABLE',
               'httplib.PROXY_AUTHENTICATION_REQUIRED',
               'httplib.REQUEST_TIMEOUT',
               'httplib.CONFLICT',
               'httplib.GONE',
               'httplib.LENGTH_REQUIRED',
               'httplib.PRECONDITION_FAILED',
               'httplib.REQUEST_ENTITY_TOO_LARGE',
               'httplib.REQUEST_URI_TOO_LONG',
               'httplib.UNSUPPORTED_MEDIA_TYPE',
               'httplib.REQUESTED_RANGE_NOT_SATISFIABLE',
               'httplib.EXPECTATION_FAILED',
               'httplib.UNPROCESSABLE_ENTITY',
               'httplib.LOCKED',
               'httplib.FAILED_DEPENDENCY',
               'httplib.UPGRADE_REQUIRED',
               'httplib.INTERNAL_SERVER_ERROR',
               'httplib.NOT_IMPLEMENTED',
               'httplib.BAD_GATEWAY',
               'httplib.SERVICE_UNAVAILABLE',
               'httplib.GATEWAY_TIMEOUT',
               'httplib.HTTP_VERSION_NOT_SUPPORTED',
               'httplib.INSUFFICIENT_STORAGE',
               'httplib.NOT_EXTENDED',
               'httplib.responses',
               'httplib.MAXAMOUNT',
               'httplib._MAXLINE',
               'httplib.error',
               'ihooks.warnpy3k',
               'ihooks.__all__',
               'ihooks.VERBOSE',
               'ihooks.BUILTIN_MODULE',
               'ihooks.FROZEN_MODULE',
               'ihooks.default_importer',
               'ihooks.current_importer',
               'imaplib.__version__',
               'imaplib.__all__',
               'imaplib.CRLF',
               'imaplib.Debug',
               'imaplib.IMAP4_PORT',
               'imaplib.IMAP4_SSL_PORT',
               'imaplib.AllowedVersions',
               'imaplib.Commands',
               'imaplib.Continuation',
               'imaplib.Flags',
               'imaplib.InternalDate',
               'imaplib.Literal',
               'imaplib.MapCRLF',
               'imaplib.Response_code',
               'imaplib.Untagged_response',
               'imaplib.Untagged_status',
               'imaplib.Mon2num',
               'imaplib.optlist',
               'imaplib.args',
               'imaplib.val',
               'imaplib.optlist',
               'imaplib.args',
               'imaplib.stream_command',
               'imaplib.opt',
               'imaplib.val',
               'imaplib.Debug',
               'imaplib.stream_command',
               'imaplib.args',
               'imaplib.args',
               'imaplib.host',
               'imaplib.USER',
               'imaplib.PASSWD',
               'imaplib.test_mesg',
               'imaplib.test_seq1',
               'imaplib.test_seq2',
               'imaplib.M',
               'imaplib.M',
               'imaplib.test_seq1',
               'imaplib.cmd',
               'imaplib.args',
               'imaplib.ml',
               'imaplib.mo',
               'imaplib.path',
               'imaplib.path',
               'imaplib.cmd',
               'imaplib.args',
               'imaplib.dat',
               'imaplib.uid',
               'imghdr.__all__',
               'imghdr.tests',
               'imputil.warnpy3k',
               'imputil.__all__',
               'imputil._StringType',
               'imputil._ModuleType',
               'imputil._suffix_char',
               'imputil._suffix',
               'imputil._os_stat',
               'imputil._os_path_join',
               'inspect.__author__',
               'inspect.__date__',
               'inspect.CO_OPTIMIZED',
               'inspect.CO_NEWLOCALS',
               'inspect.CO_VARARGS',
               'inspect.CO_VARKEYWORDS',
               'inspect.CO_NESTED',
               'inspect.CO_GENERATOR',
               'inspect.CO_NOFREE',
               'inspect.TPFLAGS_IS_ABSTRACT',
               'inspect.Attribute',
               'inspect.ModuleInfo',
               'inspect.modulesbyfile',
               'inspect._filesbymodname',
               'inspect.Arguments',
               'inspect.ArgSpec',
               'inspect.ArgInfo',
               'inspect.Traceback',
               'inspect.currentframe',
               'inspect.currentframe',
               'io.__author__',
               'io.__all__',
               'io.OpenWrapper',
               'io.SEEK_SET',
               'io.SEEK_CUR',
               'io.SEEK_END',
               'io.klass',
               'io.klass',
               'io.klass',
               'keyword.__all__',
               'keyword.kwlist',
               'keyword.iskeyword',
               'linecache.__all__',
               'linecache.cache',
               'locale.__all__',
               'locale.CHAR_MAX',
               'locale.LC_ALL',
               'locale.LC_COLLATE',
               'locale.LC_CTYPE',
               'locale.LC_MESSAGES',
               'locale.LC_MONETARY',
               'locale.LC_NUMERIC',
               'locale.LC_TIME',
               'locale.Error',
               'locale._localeconv',
               'locale._override_localeconv',
               'locale._percent_re',
               'locale._setlocale',
               'locale.locale_encoding_alias',
               'locale.locale_alias',
               'locale.windows_locale',
               'macpath.__all__',
               'macpath.curdir',
               'macpath.pardir',
               'macpath.extsep',
               'macpath.sep',
               'macpath.pathsep',
               'macpath.defpath',
               'macpath.altsep',
               'macpath.devnull',
               'macpath.supports_unicode_filenames',
               'macurl2path.__all__',
               'mailbox.fcntl',
               'mailbox.__all__',
               'mailcap.__all__',
               'markupbase._declname_match',
               'markupbase._declstringlit_match',
               'markupbase._commentclose',
               'markupbase._markedsectionclose',
               'markupbase._msmarkedsectionclose',
               'markupbase.re',
               'md5.new',
               'md5.blocksize',
               'md5.digest_size',
               'mhlib.warnpy3k',
               'mhlib.MH_PROFILE',
               'mhlib.PATH',
               'mhlib.MH_SEQUENCES',
               'mhlib.FOLDER_PROTECT',
               'mhlib.__all__',
               'mhlib.numericprog',
               'mimetools.__all__',
               'mimetools._counter_lock',
               'mimetools.thread',
               'mimetools._counter',
               'mimetools._prefix',
               'mimetools.uudecode_pipe',
               'mimetools.decodetab',
               'mimetools.encodetab',
               'mimetypes._winreg',
               'mimetypes.__all__',
               'mimetypes.knownfiles',
               'mimetypes.inited',
               'mimetypes._db',
               'mimetypes.USAGE',
               'mimetypes.opts',
               'mimetypes.args',
               'mimetypes.msg',
               'mimetypes.strict',
               'mimetypes.extension',
               'mimetypes.opt',
               'mimetypes.arg',
               'mimetypes.strict',
               'mimetypes.extension',
               'mimetypes.gtype',
               'mimetypes.guess',
               'mimetypes.guess',
               'mimetypes.encoding',
               'MimeWriter.__all__',
               'mimify.MAXLEN',
               'mimify.CHARSET',
               'mimify.QUOTE',
               'mimify.__all__',
               'mimify.qp',
               'mimify.base64_re',
               'mimify.mp',
               'mimify.chrset',
               'mimify.he',
               'mimify.mime_code',
               'mimify.mime_head',
               'mimify.repl',
               'mimify.mime_char',
               'mimify.mime_header_char',
               'mimify.mime_header',
               'mimify.mv',
               'mimify.cte',
               'mimify.iso_char',
               'mimify.usage',
               'mimify.decode_base64',
               'mimify.opts',
               'mimify.args',
               'mimify.o',
               'mimify.a',
               'mimify.encode',
               'mimify.encode',
               'mimify.MAXLEN',
               'mimify.decode_base64',
               'mimify.encode_args',
               'mimify.encode_args',
               'mimify.encode_args',
               'mimify.encode_args',
               'modulefinder.READ_MODE',
               'modulefinder.READ_MODE',
               'modulefinder.LOAD_CONST',
               'modulefinder.IMPORT_NAME',
               'modulefinder.STORE_NAME',
               'modulefinder.STORE_GLOBAL',
               'modulefinder.STORE_OPS',
               'modulefinder.HAVE_ARGUMENT',
               'modulefinder.packagePathMap',
               'modulefinder.replacePackageMap',
               'modulefinder.mf',
               'multifile.warn',
               'multifile.__all__',
               'mutex.warnpy3k',
               'netrc.__all__',
               'new.warnpy3k',
               'nntplib.__all__',
               'nntplib.error_reply',
               'nntplib.error_temp',
               'nntplib.error_perm',
               'nntplib.error_proto',
               'nntplib.error_data',
               'nntplib.NNTP_PORT',
               'nntplib.LONGRESP',
               'nntplib.CRLF',
               'nntplib.newshost',
               'nntplib.mode',
               'nntplib.mode',
               'nntplib.s',
               'nntplib.resp',
               'nntplib.count',
               'nntplib.first',
               'nntplib.last',
               'nntplib.name',
               'nntplib.resp',
               'nntplib.subs',
               'nntplib.item',
               'nntplib.resp',
               'ntpath.__all__',
               'ntpath.curdir',
               'ntpath.pardir',
               'ntpath.extsep',
               'ntpath.sep',
               'ntpath.pathsep',
               'ntpath.altsep',
               'ntpath.defpath',
               'ntpath.defpath',
               'ntpath.altsep',
               'ntpath.devnull',
               'ntpath.lexists',
               'ntpath.realpath',
               'ntpath.supports_unicode_filenames',
               'numbers.__all__',
               'opcode.__all__',
               'opcode.cmp_op',
               'opcode.hasconst',
               'opcode.hasname',
               'opcode.hasjrel',
               'opcode.hasjabs',
               'opcode.haslocal',
               'opcode.hascompare',
               'opcode.hasfree',
               'opcode.opmap',
               'opcode.opname',
               'opcode.op',
               'opcode.op',
               'opcode.HAVE_ARGUMENT',
               'opcode.EXTENDED_ARG',
               'opcode.def_op',
               'opcode.name_op',
               'opcode.jrel_op',
               'opcode.jabs_op',
               'optparse.__version__',
               'optparse.__all__',
               'optparse.__copyright__',
               'optparse._',
               'optparse._builtin_cvt',
               'optparse.NO_DEFAULT',
               'optparse.SUPPRESS_HELP',
               'optparse.SUPPRESS_USAGE',
               'optparse.make_option',
               'os2emxpath.__all__',
               'os2emxpath.curdir',
               'os2emxpath.pardir',
               'os2emxpath.extsep',
               'os2emxpath.sep',
               'os2emxpath.altsep',
               'os2emxpath.pathsep',
               'os2emxpath.defpath',
               'os2emxpath.devnull',
               'os2emxpath.lexists',
               'os2emxpath.realpath',
               'os2emxpath.supports_unicode_filenames',
               'os._names',
               'os.__all__',
               'os.name',
               'os.linesep',
               'os.posix',
               'os.name',
               'os.linesep',
               'os.nt',
               'os.name',
               'os.linesep',
               'os.os2',
               'os.name',
               'os.linesep',
               'os.ce',
               'os.name',
               'os.linesep',
               'os.riscos',
               'os._names',
               'os.SEEK_SET',
               'os.SEEK_CUR',
               'os.SEEK_END',
               'os.environ',
               'os.environ',
               'os.P_WAIT',
               'os.P_NOWAIT',
               'os.P_NOWAITO',
               'pdb._repr',
               'pdb._saferepr',
               'pdb.__all__',
               'pdb.line_prefix',
               'pdb.TESTCMD',
               'pickle.__version__',
               'pickle.__all__',
               'pickle.format_version',
               'pickle.compatible_formats',
               'pickle.HIGHEST_PROTOCOL',
               'pickle.mloads',
               'pickle.PyStringMap',
               'pickle.UnicodeType',
               'pickle.MARK',
               'pickle.STOP',
               'pickle.POP',
               'pickle.POP_MARK',
               'pickle.DUP',
               'pickle.FLOAT',
               'pickle.INT',
               'pickle.BININT',
               'pickle.BININT1',
               'pickle.LONG',
               'pickle.BININT2',
               'pickle.NONE',
               'pickle.PERSID',
               'pickle.BINPERSID',
               'pickle.REDUCE',
               'pickle.STRING',
               'pickle.BINSTRING',
               'pickle.SHORT_BINSTRING',
               'pickle.UNICODE',
               'pickle.BINUNICODE',
               'pickle.APPEND',
               'pickle.BUILD',
               'pickle.GLOBAL',
               'pickle.DICT',
               'pickle.EMPTY_DICT',
               'pickle.APPENDS',
               'pickle.GET',
               'pickle.BINGET',
               'pickle.INST',
               'pickle.LONG_BINGET',
               'pickle.LIST',
               'pickle.EMPTY_LIST',
               'pickle.OBJ',
               'pickle.PUT',
               'pickle.BINPUT',
               'pickle.LONG_BINPUT',
               'pickle.SETITEM',
               'pickle.TUPLE',
               'pickle.EMPTY_TUPLE',
               'pickle.SETITEMS',
               'pickle.BINFLOAT',
               'pickle.TRUE',
               'pickle.FALSE',
               'pickle.PROTO',
               'pickle.NEWOBJ',
               'pickle.EXT1',
               'pickle.EXT2',
               'pickle.EXT4',
               'pickle.TUPLE1',
               'pickle.TUPLE2',
               'pickle.TUPLE3',
               'pickle.NEWTRUE',
               'pickle.NEWFALSE',
               'pickle.LONG1',
               'pickle.LONG4',
               'pickle._tuplesize2code',
               'pickle.x',
               'pickle.x',
               'pickle.classmap',
               'pickletools.__all__',
               'pickletools.UP_TO_NEWLINE',
               'pickletools.TAKEN_FROM_ARGUMENT1',
               'pickletools.TAKEN_FROM_ARGUMENT4',
               'pickletools.uint1',
               'pickletools.uint2',
               'pickletools.int4',
               'pickletools.stringnl',
               'pickletools.stringnl_noescape',
               'pickletools.stringnl_noescape_pair',
               'pickletools.string4',
               'pickletools.string1',
               'pickletools.unicodestringnl',
               'pickletools.unicodestring4',
               'pickletools.decimalnl_short',
               'pickletools.decimalnl_long',
               'pickletools.floatnl',
               'pickletools.float8',
               'pickletools.long1',
               'pickletools.long4',
               'pickletools.pyint',
               'pickletools.pylong',
               'pickletools.pyinteger_or_bool',
               'pickletools.pybool',
               'pickletools.pyfloat',
               'pickletools.pystring',
               'pickletools.pyunicode',
               'pickletools.pynone',
               'pickletools.pytuple',
               'pickletools.pylist',
               'pickletools.pydict',
               'pickletools.anyobject',
               'pickletools.markobject',
               'pickletools.stackslice',
               'pickletools.I',
               'pickletools.opcodes',
               'pickletools.I',
               'pickletools.name2i',
               'pickletools.code2i',
               'pickletools.i',
               'pickletools.d',
               'pickletools.name2i',
               'pickletools.code2i',
               'pickletools.i',
               'pickletools.d',
               'pickletools.code2op',
               'pickletools.d',
               'pickletools.d',
               'pickletools.assure_pickle_consistency',
               'pickletools._dis_test',
               'pickletools._memo_test',
               'pickletools.__test__',
               'pipes.__all__',
               'pipes.FILEIN_FILEOUT',
               'pipes.STDIN_FILEOUT',
               'pipes.FILEIN_STDOUT',
               'pipes.STDIN_STDOUT',
               'pipes.SOURCE',
               'pipes.SINK',
               'pipes.stepkinds',
               'pipes._safechars',
               'pkgutil.__all__',
               'pkgutil.iter_importer_modules',
               'platform.__copyright__',
               'platform.__version__',
               'platform.DEV_NULL',
               'platform.DEV_NULL',
               'platform.DEV_NULL',
               'platform._libc_search',
               'platform._release_filename',
               'platform._lsb_release_version',
               'platform._release_version',
               'platform._supported_dists',
               'platform._distributor_id_file_re',
               'platform._release_file_re',
               'platform._codename_file_re',
               'platform._ver_output',
               'platform._abspath',
               'platform._default_architecture',
               'platform._architecture_split',
               'platform._uname_cache',
               'platform._sys_version_parser',
               'platform._ironpython_sys_version_parser',
               'platform._pypy_sys_version_parser',
               'platform._sys_version_cache',
               'platform._platform_cache',
               'platform.terse',
               'platform.aliased',
               'plistlib.__all__',
               'plistlib._dateParser',
               'plistlib._controlCharPat',
               'plistlib.PLISTHEADER',
               'popen2.__all__',
               'popen2.MAXFD',
               'popen2.MAXFD',
               'popen2._active',
               'popen2.Popen3',
               'popen2.Popen4',
               'poplib.__all__',
               'poplib.POP3_PORT',
               'poplib.POP3_SSL_PORT',
               'poplib.CR',
               'poplib.LF',
               'poplib.CRLF',
               'poplib.a',
               'poplib.numMsgs',
               'poplib.totalSize',
               'poplib.i',
               'poplib.header',
               'poplib.msg',
               'poplib.octets',
               'poplib.line',
               'posixfile.SEEK_SET',
               'posixfile.SEEK_CUR',
               'posixfile.SEEK_END',
               'posixpath.__all__',
               'posixpath.curdir',
               'posixpath.pardir',
               'posixpath.extsep',
               'posixpath.sep',
               'posixpath.pathsep',
               'posixpath.defpath',
               'posixpath.altsep',
               'posixpath.devnull',
               'posixpath._varprog',
               'posixpath.supports_unicode_filenames',
               'pprint.__all__',
               'pprint._commajoin',
               'pprint._id',
               'pprint._len',
               'pprint._type',
               'pty.__all__',
               'pty.STDIN_FILENO',
               'pty.STDOUT_FILENO',
               'pty.STDERR_FILENO',
               'pty.CHILD',
               'pyclbr.__all__',
               'pyclbr._modules',
               'py_compile.MAGIC',
               'py_compile.__all__',
               'pydoc.__author__',
               'pydoc.__date__',
               'pydoc.__version__',
               'pydoc.__credits__',
               'pydoc._re_stripid',
               'pydoc.text',
               'pydoc.html',
               'pydoc._OLD_INSTANCE_TYPE',
               'pydoc.help',
               '_pyio.__metaclass__',
               '_pyio.DEFAULT_BUFFER_SIZE',
               'Queue.__all__',
               'quopri.__all__',
               'quopri.ESCAPE',
               'quopri.MAXLINESIZE',
               'quopri.HEX',
               'quopri.EMPTYSTRING',
               'quopri.a2b_qp',
               'quopri.b2a_qp',
               'random.__all__',
               'random.NV_MAGICCONST',
               'random.TWOPI',
               'random.LOG4',
               'random.SG_MAGICCONST',
               'random.BPF',
               'random.RECIP_BPF',
               'random._inst',
               'random.seed',
               'random.random',
               'random.uniform',
               'random.triangular',
               'random.randint',
               'random.choice',
               'random.randrange',
               'random.sample',
               'random.shuffle',
               'random.normalvariate',
               'random.lognormvariate',
               'random.expovariate',
               'random.vonmisesvariate',
               'random.gammavariate',
               'random.gauss',
               'random.betavariate',
               'random.paretovariate',
               'random.weibullvariate',
               'random.getstate',
               'random.setstate',
               'random.jumpahead',
               'random.getrandbits',
               'repr.__all__',
               'repr.aRepr',
               'repr.repr',
               're.__all__',
               're.__version__',
               're.I',
               're.IGNORECASE',
               're.L',
               're.LOCALE',
               're.U',
               're.UNICODE',
               're.M',
               're.MULTILINE',
               're.S',
               're.DOTALL',
               're.X',
               're.VERBOSE',
               're.T',
               're.TEMPLATE',
               're.DEBUG',
               're.error',
               're._alphanum',
               're.c',
               're.c',
               're._cache',
               're._cache_repl',
               're._pattern_type',
               're._MAXCACHE',
               'rexec.warnpy3k',
               'rexec.__all__',
               'rexec.TEMPLATE',
               'rexec.RModuleLoader',
               'rexec.RModuleImporter',
               'rfc822.__all__',
               'rfc822._blanklines',
               'rfc822._monthnames',
               'rfc822._daynames',
               'rfc822._timezones',
               'rfc822.file',
               'rfc822.file',
               'rfc822.f',
               'rfc822.m',
               'rfc822.date',
               'rfc822.tz',
               'rfc822.date',
               'rfc822.hhmmss',
               'rfc822.hhmm',
               'rfc822.ss',
               'rfc822.hh',
               'rfc822.mm',
               'rfc822.n',
               'rlcompleter.__all__',
               'robotparser.__all__',
               'runpy.__all__',
               'sched.__all__',
               'sched.Event',
               'sets.__all__',
               'sgmllib.warnpy3k',
               'sgmllib.__all__',
               'sgmllib.interesting',
               'sgmllib.incomplete',
               'sgmllib.entityref',
               'sgmllib.charref',
               'sgmllib.starttagopen',
               'sgmllib.shorttagopen',
               'sgmllib.shorttag',
               'sgmllib.piclose',
               'sgmllib.endbracket',
               'sgmllib.tagfind',
               'sgmllib.attrfind',
               'sha.new',
               'sha.blocksize',
               'sha.digest_size',
               'sha.digestsize',
               'shelve.__all__',
               'shlex.__all__',
               'shlex.lexer',
               'shlex.file',
               'shlex.lexer',
               'shlex.tt',
               'shutil.getpwnam',
               'shutil.getgrnam',
               'shutil.__all__',
               'shutil.WindowsError',
               'shutil._ARCHIVE_FORMATS',
               'SimpleHTTPServer.__version__',
               'SimpleHTTPServer.__all__',
               'SimpleXMLRPCServer.fcntl',
               'SimpleXMLRPCServer.server',
               'site.PREFIXES',
               'site.ENABLE_USER_SITE',
               'site.USER_SITE',
               'site.USER_BASE',
               'smtpd.__all__',
               'smtpd.program',
               'smtpd.__version__',
               'smtpd.DEBUGSTREAM',
               'smtpd.NEWLINE',
               'smtpd.EMPTYSTRING',
               'smtpd.COMMASPACE',
               'smtpd.options',
               'smtpd.nobody',
               'smtpd.e',
               'smtpd.classname',
               'smtpd.lastdot',
               'smtpd.mod',
               'smtpd.classname',
               'smtpd.class_',
               'smtpd.proxy',
               'smtplib.__all__',
               'smtplib.SMTP_PORT',
               'smtplib.SMTP_SSL_PORT',
               'smtplib.CRLF',
               'smtplib.OLDSTYLE_AUTH',
               'smtplib._have_ssl',
               'smtplib._have_ssl',
               'smtplib.LMTP_PORT',
               'smtplib.fromaddr',
               'smtplib.toaddrs',
               'smtplib.msg',
               'smtplib.line',
               'smtplib.msg',
               'smtplib.server',
               'sndhdr.__all__',
               'sndhdr.tests',
               'socket.errno',
               'socket.EBADF',
               'socket.EINTR',
               'socket.__all__',
               'socket._realsocket',
               'socket.errorTab',
               'socket._socketmethods',
               'socket._socketmethods',
               'socket._socketmethods',
               'socket._delegate_methods',
               'socket._m',
               'socket.p',
               'socket.m',
               'socket.socket',
               'socket.SocketType',
               'socket._GLOBAL_DEFAULT_TIMEOUT',
               'SocketServer.__version__',
               'SocketServer.__all__',
               'sre_compile.MAXCODE',
               'sre_compile.MAXCODE',
               'sre_compile._LITERAL_CODES',
               'sre_compile._REPEATING_CODES',
               'sre_compile._SUCCESS_CODES',
               'sre_compile._ASSERT_CODES',
               'sre_compile.STRING_TYPES',
               'sre_compile.STRING_TYPES',
               'sre_constants.MAGIC',
               'sre_constants.MAXREPEAT',
               'sre_constants.FAILURE',
               'sre_constants.SUCCESS',
               'sre_constants.ANY',
               'sre_constants.ANY_ALL',
               'sre_constants.ASSERT',
               'sre_constants.ASSERT_NOT',
               'sre_constants.AT',
               'sre_constants.BIGCHARSET',
               'sre_constants.BRANCH',
               'sre_constants.CALL',
               'sre_constants.CATEGORY',
               'sre_constants.CHARSET',
               'sre_constants.GROUPREF',
               'sre_constants.GROUPREF_IGNORE',
               'sre_constants.GROUPREF_EXISTS',
               'sre_constants.IN',
               'sre_constants.IN_IGNORE',
               'sre_constants.INFO',
               'sre_constants.JUMP',
               'sre_constants.LITERAL',
               'sre_constants.LITERAL_IGNORE',
               'sre_constants.MARK',
               'sre_constants.MAX_REPEAT',
               'sre_constants.MAX_UNTIL',
               'sre_constants.MIN_REPEAT',
               'sre_constants.MIN_UNTIL',
               'sre_constants.NEGATE',
               'sre_constants.NOT_LITERAL',
               'sre_constants.NOT_LITERAL_IGNORE',
               'sre_constants.RANGE',
               'sre_constants.REPEAT',
               'sre_constants.REPEAT_ONE',
               'sre_constants.SUBPATTERN',
               'sre_constants.MIN_REPEAT_ONE',
               'sre_constants.AT_BEGINNING',
               'sre_constants.AT_BEGINNING_LINE',
               'sre_constants.AT_BEGINNING_STRING',
               'sre_constants.AT_BOUNDARY',
               'sre_constants.AT_NON_BOUNDARY',
               'sre_constants.AT_END',
               'sre_constants.AT_END_LINE',
               'sre_constants.AT_END_STRING',
               'sre_constants.AT_LOC_BOUNDARY',
               'sre_constants.AT_LOC_NON_BOUNDARY',
               'sre_constants.AT_UNI_BOUNDARY',
               'sre_constants.AT_UNI_NON_BOUNDARY',
               'sre_constants.CATEGORY_DIGIT',
               'sre_constants.CATEGORY_NOT_DIGIT',
               'sre_constants.CATEGORY_SPACE',
               'sre_constants.CATEGORY_NOT_SPACE',
               'sre_constants.CATEGORY_WORD',
               'sre_constants.CATEGORY_NOT_WORD',
               'sre_constants.CATEGORY_LINEBREAK',
               'sre_constants.CATEGORY_NOT_LINEBREAK',
               'sre_constants.CATEGORY_LOC_WORD',
               'sre_constants.CATEGORY_LOC_NOT_WORD',
               'sre_constants.CATEGORY_UNI_DIGIT',
               'sre_constants.CATEGORY_UNI_NOT_DIGIT',
               'sre_constants.CATEGORY_UNI_SPACE',
               'sre_constants.CATEGORY_UNI_NOT_SPACE',
               'sre_constants.CATEGORY_UNI_WORD',
               'sre_constants.CATEGORY_UNI_NOT_WORD',
               'sre_constants.CATEGORY_UNI_LINEBREAK',
               'sre_constants.CATEGORY_UNI_NOT_LINEBREAK',
               'sre_constants.OPCODES',
               'sre_constants.ATCODES',
               'sre_constants.CHCODES',
               'sre_constants.OPCODES',
               'sre_constants.ATCODES',
               'sre_constants.CHCODES',
               'sre_constants.OP_IGNORE',
               'sre_constants.AT_MULTILINE',
               'sre_constants.AT_LOCALE',
               'sre_constants.AT_UNICODE',
               'sre_constants.CH_LOCALE',
               'sre_constants.CH_UNICODE',
               'sre_constants.SRE_FLAG_TEMPLATE',
               'sre_constants.SRE_FLAG_IGNORECASE',
               'sre_constants.SRE_FLAG_LOCALE',
               'sre_constants.SRE_FLAG_MULTILINE',
               'sre_constants.SRE_FLAG_DOTALL',
               'sre_constants.SRE_FLAG_UNICODE',
               'sre_constants.SRE_FLAG_VERBOSE',
               'sre_constants.SRE_FLAG_DEBUG',
               'sre_constants.SRE_INFO_PREFIX',
               'sre_constants.SRE_INFO_LITERAL',
               'sre_constants.SRE_INFO_CHARSET',
               'sre_constants.f',
               'sre_parse.SPECIAL_CHARS',
               'sre_parse.REPEAT_CHARS',
               'sre_parse.DIGITS',
               'sre_parse.OCTDIGITS',
               'sre_parse.HEXDIGITS',
               'sre_parse.WHITESPACE',
               'sre_parse.ESCAPES',
               'sre_parse.CATEGORIES',
               'sre_parse.FLAGS',
               'sre_parse._PATTERNENDERS',
               'sre_parse._ASSERTCHARS',
               'sre_parse._LOOKBEHINDASSERTCHARS',
               'sre_parse._REPEATCODES',
               'ssl.PEM_HEADER',
               'ssl.PEM_FOOTER',
               'stat.ST_MODE',
               'stat.ST_INO',
               'stat.ST_DEV',
               'stat.ST_NLINK',
               'stat.ST_UID',
               'stat.ST_GID',
               'stat.ST_SIZE',
               'stat.ST_ATIME',
               'stat.ST_MTIME',
               'stat.ST_CTIME',
               'stat.S_IFDIR',
               'stat.S_IFCHR',
               'stat.S_IFBLK',
               'stat.S_IFREG',
               'stat.S_IFIFO',
               'stat.S_IFLNK',
               'stat.S_IFSOCK',
               'stat.S_ISUID',
               'stat.S_ISGID',
               'stat.S_ENFMT',
               'stat.S_ISVTX',
               'stat.S_IREAD',
               'stat.S_IWRITE',
               'stat.S_IEXEC',
               'stat.S_IRWXU',
               'stat.S_IRUSR',
               'stat.S_IWUSR',
               'stat.S_IXUSR',
               'stat.S_IRWXG',
               'stat.S_IRGRP',
               'stat.S_IWGRP',
               'stat.S_IXGRP',
               'stat.S_IRWXO',
               'stat.S_IROTH',
               'stat.S_IWOTH',
               'stat.S_IXOTH',
               'stat.UF_NODUMP',
               'stat.UF_IMMUTABLE',
               'stat.UF_APPEND',
               'stat.UF_OPAQUE',
               'stat.UF_NOUNLINK',
               'stat.SF_ARCHIVED',
               'stat.SF_IMMUTABLE',
               'stat.SF_APPEND',
               'stat.SF_NOUNLINK',
               'stat.SF_SNAPSHOT',
               'statvfs.warnpy3k',
               'statvfs.F_BSIZE',
               'statvfs.F_FRSIZE',
               'statvfs.F_BLOCKS',
               'statvfs.F_BFREE',
               'statvfs.F_BAVAIL',
               'statvfs.F_FILES',
               'statvfs.F_FFREE',
               'statvfs.F_FAVAIL',
               'statvfs.F_FLAG',
               'statvfs.F_NAMEMAX',
               'StringIO.EINVAL',
               'StringIO.__all__',
               'stringold.warnpy3k',
               'stringold.whitespace',
               'stringold.lowercase',
               'stringold.uppercase',
               'stringold.letters',
               'stringold.digits',
               'stringold.hexdigits',
               'stringold.octdigits',
               'stringold._idmap',
               'stringold.i',
               'stringold._idmap',
               'stringold.i',
               'stringold.index_error',
               'stringold.atoi_error',
               'stringold.atof_error',
               'stringold.atol_error',
               'stringold.splitfields',
               'stringold.joinfields',
               'stringold._apply',
               'stringold._float',
               'stringold._int',
               'stringold._long',
               'stringold._StringType',
               'stringold._idmapL',
               'stringold.letters',
               'stringprep.b1_set',
               'stringprep.b3_exceptions',
               'stringprep.c22_specials',
               'stringprep.c6_set',
               'stringprep.c7_set',
               'stringprep.c8_set',
               'stringprep.c9_set',
               'string.whitespace',
               'string.lowercase',
               'string.uppercase',
               'string.letters',
               'string.ascii_lowercase',
               'string.ascii_uppercase',
               'string.ascii_letters',
               'string.digits',
               'string.hexdigits',
               'string.octdigits',
               'string.punctuation',
               'string.printable',
               'string.l',
               'string._idmap',
               'string.l',
               'string._idmapL',
               'string.index_error',
               'string.atoi_error',
               'string.atof_error',
               'string.atol_error',
               'string.splitfields',
               'string.joinfields',
               'string._float',
               'string._int',
               'string._long',
               'string.letters',
               '_strptime.__all__',
               '_strptime._cache_lock',
               '_strptime._TimeRE_cache',
               '_strptime._CACHE_MAX_SIZE',
               '_strptime._regex_cache',
               'subprocess.mswindows',
               'subprocess._has_poll',
               'subprocess._PIPE_BUF',
               'subprocess.__all__',
               'subprocess.MAXFD',
               'subprocess.MAXFD',
               'subprocess._active',
               'subprocess.PIPE',
               'subprocess.STDOUT',
               'sunaudio.warnpy3k',
               'sunaudio.MAGIC',
               'sunau.AUDIO_FILE_MAGIC',
               'sunau.AUDIO_FILE_ENCODING_MULAW_8',
               'sunau.AUDIO_FILE_ENCODING_LINEAR_8',
               'sunau.AUDIO_FILE_ENCODING_LINEAR_16',
               'sunau.AUDIO_FILE_ENCODING_LINEAR_24',
               'sunau.AUDIO_FILE_ENCODING_LINEAR_32',
               'sunau.AUDIO_FILE_ENCODING_FLOAT',
               'sunau.AUDIO_FILE_ENCODING_DOUBLE',
               'sunau.AUDIO_FILE_ENCODING_ADPCM_G721',
               'sunau.AUDIO_FILE_ENCODING_ADPCM_G722',
               'sunau.AUDIO_FILE_ENCODING_ADPCM_G723_3',
               'sunau.AUDIO_FILE_ENCODING_ADPCM_G723_5',
               'sunau.AUDIO_FILE_ENCODING_ALAW_8',
               'sunau.AUDIO_UNKNOWN_SIZE',
               'sunau._simple_encodings',
               'sunau.openfp',
               'symbol.single_input',
               'symbol.file_input',
               'symbol.eval_input',
               'symbol.decorator',
               'symbol.decorators',
               'symbol.decorated',
               'symbol.funcdef',
               'symbol.parameters',
               'symbol.varargslist',
               'symbol.fpdef',
               'symbol.fplist',
               'symbol.stmt',
               'symbol.simple_stmt',
               'symbol.small_stmt',
               'symbol.expr_stmt',
               'symbol.augassign',
               'symbol.print_stmt',
               'symbol.del_stmt',
               'symbol.pass_stmt',
               'symbol.flow_stmt',
               'symbol.break_stmt',
               'symbol.continue_stmt',
               'symbol.return_stmt',
               'symbol.yield_stmt',
               'symbol.raise_stmt',
               'symbol.import_stmt',
               'symbol.import_name',
               'symbol.import_from',
               'symbol.import_as_name',
               'symbol.dotted_as_name',
               'symbol.import_as_names',
               'symbol.dotted_as_names',
               'symbol.dotted_name',
               'symbol.global_stmt',
               'symbol.exec_stmt',
               'symbol.assert_stmt',
               'symbol.compound_stmt',
               'symbol.if_stmt',
               'symbol.while_stmt',
               'symbol.for_stmt',
               'symbol.try_stmt',
               'symbol.with_stmt',
               'symbol.with_item',
               'symbol.except_clause',
               'symbol.suite',
               'symbol.testlist_safe',
               'symbol.old_test',
               'symbol.old_lambdef',
               'symbol.test',
               'symbol.or_test',
               'symbol.and_test',
               'symbol.not_test',
               'symbol.comparison',
               'symbol.comp_op',
               'symbol.expr',
               'symbol.xor_expr',
               'symbol.and_expr',
               'symbol.shift_expr',
               'symbol.arith_expr',
               'symbol.term',
               'symbol.factor',
               'symbol.power',
               'symbol.atom',
               'symbol.listmaker',
               'symbol.testlist_comp',
               'symbol.lambdef',
               'symbol.trailer',
               'symbol.subscriptlist',
               'symbol.subscript',
               'symbol.sliceop',
               'symbol.exprlist',
               'symbol.testlist',
               'symbol.dictorsetmaker',
               'symbol.classdef',
               'symbol.arglist',
               'symbol.argument',
               'symbol.list_iter',
               'symbol.list_for',
               'symbol.list_if',
               'symbol.comp_iter',
               'symbol.comp_for',
               'symbol.comp_if',
               'symbol.testlist1',
               'symbol.encoding_decl',
               'symbol.yield_expr',
               'symbol.sym_name',
               'symbol._name',
               'symbol._value',
               'symtable.__all__',
               'symtable._newSymbolTable',
               'symtable.src',
               'symtable.mod',
               'symtable.ident',
               'symtable.info',
               'sysconfig._INSTALL_SCHEMES',
               'sysconfig._SCHEME_KEYS',
               'sysconfig._PY_VERSION',
               'sysconfig._PY_VERSION_SHORT',
               'sysconfig._PY_VERSION_SHORT_NO_DOT',
               'sysconfig._PREFIX',
               'sysconfig._EXEC_PREFIX',
               'sysconfig._CONFIG_VARS',
               'sysconfig._USER_BASE',
               'sysconfig._PROJECT_BASE',
               'sysconfig._PROJECT_BASE',
               'sysconfig._PROJECT_BASE',
               'sysconfig._PROJECT_BASE',
               'sysconfig._PROJECT_BASE',
               'sysconfig._PYTHON_BUILD',
               'sysconfig.scheme',
               'tabnanny.__version__',
               'tabnanny.__all__',
               'tabnanny.verbose',
               'tabnanny.filename_only',
               'tarfile.__version__',
               'tarfile.version',
               'tarfile.__author__',
               'tarfile.__date__',
               'tarfile.__cvsid__',
               'tarfile.__credits__',
               'tarfile.grp',
               'tarfile.pwd',
               'tarfile.__all__',
               'tarfile.NUL',
               'tarfile.BLOCKSIZE',
               'tarfile.RECORDSIZE',
               'tarfile.GNU_MAGIC',
               'tarfile.POSIX_MAGIC',
               'tarfile.LENGTH_NAME',
               'tarfile.LENGTH_LINK',
               'tarfile.LENGTH_PREFIX',
               'tarfile.REGTYPE',
               'tarfile.AREGTYPE',
               'tarfile.LNKTYPE',
               'tarfile.SYMTYPE',
               'tarfile.CHRTYPE',
               'tarfile.BLKTYPE',
               'tarfile.DIRTYPE',
               'tarfile.FIFOTYPE',
               'tarfile.CONTTYPE',
               'tarfile.GNUTYPE_LONGNAME',
               'tarfile.GNUTYPE_LONGLINK',
               'tarfile.GNUTYPE_SPARSE',
               'tarfile.XHDTYPE',
               'tarfile.XGLTYPE',
               'tarfile.SOLARIS_XHDTYPE',
               'tarfile.USTAR_FORMAT',
               'tarfile.GNU_FORMAT',
               'tarfile.PAX_FORMAT',
               'tarfile.DEFAULT_FORMAT',
               'tarfile.SUPPORTED_TYPES',
               'tarfile.REGULAR_TYPES',
               'tarfile.GNU_TYPES',
               'tarfile.PAX_FIELDS',
               'tarfile.PAX_NUMBER_FIELDS',
               'tarfile.S_IFLNK',
               'tarfile.S_IFREG',
               'tarfile.S_IFBLK',
               'tarfile.S_IFDIR',
               'tarfile.S_IFCHR',
               'tarfile.S_IFIFO',
               'tarfile.TSUID',
               'tarfile.TSGID',
               'tarfile.TSVTX',
               'tarfile.TUREAD',
               'tarfile.TUWRITE',
               'tarfile.TUEXEC',
               'tarfile.TGREAD',
               'tarfile.TGWRITE',
               'tarfile.TGEXEC',
               'tarfile.TOREAD',
               'tarfile.TOWRITE',
               'tarfile.TOEXEC',
               'tarfile.ENCODING',
               'tarfile.ENCODING',
               'tarfile.filemode_table',
               'tarfile.TAR_PLAIN',
               'tarfile.TAR_GZIPPED',
               'tarfile.bltn_open',
               'tarfile.open',
               'telnetlib.__all__',
               'telnetlib.DEBUGLEVEL',
               'telnetlib.TELNET_PORT',
               'telnetlib.IAC',
               'telnetlib.DONT',
               'telnetlib.DO',
               'telnetlib.WONT',
               'telnetlib.WILL',
               'telnetlib.theNULL',
               'telnetlib.SE',
               'telnetlib.NOP',
               'telnetlib.DM',
               'telnetlib.BRK',
               'telnetlib.IP',
               'telnetlib.AO',
               'telnetlib.AYT',
               'telnetlib.EC',
               'telnetlib.EL',
               'telnetlib.GA',
               'telnetlib.SB',
               'telnetlib.BINARY',
               'telnetlib.ECHO',
               'telnetlib.RCP',
               'telnetlib.SGA',
               'telnetlib.NAMS',
               'telnetlib.STATUS',
               'telnetlib.TM',
               'telnetlib.RCTE',
               'telnetlib.NAOL',
               'telnetlib.NAOP',
               'telnetlib.NAOCRD',
               'telnetlib.NAOHTS',
               'telnetlib.NAOHTD',
               'telnetlib.NAOFFD',
               'telnetlib.NAOVTS',
               'telnetlib.NAOVTD',
               'telnetlib.NAOLFD',
               'telnetlib.XASCII',
               'telnetlib.LOGOUT',
               'telnetlib.BM',
               'telnetlib.DET',
               'telnetlib.SUPDUP',
               'telnetlib.SUPDUPOUTPUT',
               'telnetlib.SNDLOC',
               'telnetlib.TTYPE',
               'telnetlib.EOR',
               'telnetlib.TUID',
               'telnetlib.OUTMRK',
               'telnetlib.TTYLOC',
               'telnetlib.VT3270REGIME',
               'telnetlib.X3PAD',
               'telnetlib.NAWS',
               'telnetlib.TSPEED',
               'telnetlib.LFLOW',
               'telnetlib.LINEMODE',
               'telnetlib.XDISPLOC',
               'telnetlib.OLD_ENVIRON',
               'telnetlib.AUTHENTICATION',
               'telnetlib.ENCRYPT',
               'telnetlib.NEW_ENVIRON',
               'telnetlib.TN3270E',
               'telnetlib.XAUTH',
               'telnetlib.CHARSET',
               'telnetlib.RSP',
               'telnetlib.COM_PORT_OPTION',
               'telnetlib.SUPPRESS_LOCAL_ECHO',
               'telnetlib.TLS',
               'telnetlib.KERMIT',
               'telnetlib.SEND_URL',
               'telnetlib.FORWARD_X',
               'telnetlib.PRAGMA_LOGON',
               'telnetlib.SSPI_LOGON',
               'telnetlib.PRAGMA_HEARTBEAT',
               'telnetlib.EXOPL',
               'telnetlib.NOOPT',
               'tempfile.__all__',
               'tempfile._allocate_lock',
               'tempfile._text_openflags',
               'tempfile._bin_openflags',
               'tempfile.TMP_MAX',
               'tempfile.TMP_MAX',
               'tempfile.template',
               'tempfile._once_lock',
               'tempfile._stat',
               'tempfile._stat',
               'tempfile._name_sequence',
               'tempfile.tempdir',
               'tempfile.TemporaryFile',
               'textwrap.__revision__',
               'textwrap.__all__',
               'textwrap._whitespace',
               'textwrap._whitespace_only_re',
               'textwrap._leading_whitespace_re',
               'this.s',
               'this.d',
               'this.c',
               'this.i',
               'this.c',
               '_threading_local.__all__',
               'threading.__all__',
               'threading._start_new_thread',
               'threading._allocate_lock',
               'threading._get_ident',
               'threading.ThreadError',
               'threading.thread',
               'threading._VERBOSE',
               'threading._profile_hook',
               'threading._trace_hook',
               'threading.Lock',
               'threading._counter',
               'threading._active_limbo_lock',
               'threading._active',
               'threading._limbo',
               'threading.current_thread',
               'threading.active_count',
               'threading._shutdown',
               'timeit.itertools',
               'timeit.__all__',
               'timeit.dummy_src_name',
               'timeit.default_number',
               'timeit.default_repeat',
               'timeit.default_timer',
               'timeit.default_timer',
               'timeit.template',
               'toaiff.warnpy3k',
               'toaiff.__all__',
               'toaiff.table',
               'toaiff.t',
               'toaiff.t',
               'toaiff.t',
               'toaiff.t',
               'toaiff.t',
               'toaiff.t',
               'toaiff.t',
               'toaiff.uncompress',
               'tokenize.__author__',
               'tokenize.__credits__',
               'tokenize.__all__',
               'tokenize.x',
               'tokenize.x',
               'tokenize.token',
               'tokenize.COMMENT',
               'tokenize.NL',
               'tokenize.Whitespace',
               'tokenize.Comment',
               'tokenize.Ignore',
               'tokenize.Name',
               'tokenize.Hexnumber',
               'tokenize.Octnumber',
               'tokenize.Binnumber',
               'tokenize.Decnumber',
               'tokenize.Intnumber',
               'tokenize.Exponent',
               'tokenize.Pointfloat',
               'tokenize.Expfloat',
               'tokenize.Floatnumber',
               'tokenize.Imagnumber',
               'tokenize.Number',
               'tokenize.Single',
               'tokenize.Double',
               'tokenize.Single3',
               'tokenize.Double3',
               'tokenize.Triple',
               'tokenize.String',
               'tokenize.Operator',
               'tokenize.Bracket',
               'tokenize.Special',
               'tokenize.Funny',
               'tokenize.PlainToken',
               'tokenize.Token',
               'tokenize.ContStr',
               'tokenize.PseudoExtras',
               'tokenize.PseudoToken',
               'tokenize.tokenprog',
               'tokenize.pseudoprog',
               'tokenize.single3prog',
               'tokenize.double3prog',
               'tokenize.endprogs',
               'tokenize.triple_quoted',
               'tokenize.t',
               'tokenize.single_quoted',
               'tokenize.t',
               'tokenize.tabsize',
               'token.ENDMARKER',
               'token.NAME',
               'token.NUMBER',
               'token.STRING',
               'token.NEWLINE',
               'token.INDENT',
               'token.DEDENT',
               'token.LPAR',
               'token.RPAR',
               'token.LSQB',
               'token.RSQB',
               'token.COLON',
               'token.COMMA',
               'token.SEMI',
               'token.PLUS',
               'token.MINUS',
               'token.STAR',
               'token.SLASH',
               'token.VBAR',
               'token.AMPER',
               'token.LESS',
               'token.GREATER',
               'token.EQUAL',
               'token.DOT',
               'token.PERCENT',
               'token.BACKQUOTE',
               'token.LBRACE',
               'token.RBRACE',
               'token.EQEQUAL',
               'token.NOTEQUAL',
               'token.LESSEQUAL',
               'token.GREATEREQUAL',
               'token.TILDE',
               'token.CIRCUMFLEX',
               'token.LEFTSHIFT',
               'token.RIGHTSHIFT',
               'token.DOUBLESTAR',
               'token.PLUSEQUAL',
               'token.MINEQUAL',
               'token.STAREQUAL',
               'token.SLASHEQUAL',
               'token.PERCENTEQUAL',
               'token.AMPEREQUAL',
               'token.VBAREQUAL',
               'token.CIRCUMFLEXEQUAL',
               'token.LEFTSHIFTEQUAL',
               'token.RIGHTSHIFTEQUAL',
               'token.DOUBLESTAREQUAL',
               'token.DOUBLESLASH',
               'token.DOUBLESLASHEQUAL',
               'token.AT',
               'token.OP',
               'token.ERRORTOKEN',
               'token.N_TOKENS',
               'token.NT_OFFSET',
               'token.tok_name',
               'token._name',
               'token._value',
               'token._name',
               'token._value',
               'traceback.__all__',
               'trace.pickle',
               'trace._settrace',
               'trace.PRAGMA_NOCOVER',
               'trace.rx_blank',
               'tty.__all__',
               'tty.IFLAG',
               'tty.OFLAG',
               'tty.CFLAG',
               'tty.LFLAG',
               'tty.ISPEED',
               'tty.OSPEED',
               'tty.CC',
               'types.NoneType',
               'types.TypeType',
               'types.ObjectType',
               'types.IntType',
               'types.LongType',
               'types.FloatType',
               'types.BooleanType',
               'types.ComplexType',
               'types.StringType',
               'types.UnicodeType',
               'types.StringTypes',
               'types.StringTypes',
               'types.BufferType',
               'types.TupleType',
               'types.ListType',
               'types.DictType',
               'types.DictionaryType',
               'types.FunctionType',
               'types.LambdaType',
               'types.CodeType',
               'types.GeneratorType',
               'types.ClassType',
               'types.UnboundMethodType',
               'types._x',
               'types.InstanceType',
               'types.MethodType',
               'types.BuiltinFunctionType',
               'types.BuiltinMethodType',
               'types.ModuleType',
               'types.FileType',
               'types.XRangeType',
               'types.tb',
               'types.TracebackType',
               'types.FrameType',
               'types.tb',
               'types.SliceType',
               'types.EllipsisType',
               'types.DictProxyType',
               'types.NotImplementedType',
               'types.GetSetDescriptorType',
               'types.MemberDescriptorType',
               'types.sys',
               'types._f',
               'types._g',
               'types._C',
               'types._x',
               'urllib2.__version__',
               'urllib2._opener',
               'urllib2._cut_port_re',
               'urllib.__all__',
               'urllib.__version__',
               'urllib.MAXFTPCACHE',
               'urllib._urlopener',
               'urllib._have_ssl',
               'urllib._have_ssl',
               'urllib.ftpcache',
               'urllib._localhost',
               'urllib._thishost',
               'urllib._ftperrors',
               'urllib._noheaders',
               'urllib._typeprog',
               'urllib._hostprog',
               'urllib._userprog',
               'urllib._passwdprog',
               'urllib._portprog',
               'urllib._nportprog',
               'urllib._queryprog',
               'urllib._tagprog',
               'urllib._valueprog',
               'urllib._hexdig',
               'urllib._hextochr',
               'urllib.a',
               'urllib.b',
               'urllib.always_safe',
               'urllib._safe_map',
               'urllib.i',
               'urllib.c',
               'urllib._safe_quoters',
               'urllib.getproxies',
               'urllib.proxy_bypass',
               'urlparse.__all__',
               'urlparse.uses_relative',
               'urlparse.uses_netloc',
               'urlparse.non_hierarchical',
               'urlparse.uses_params',
               'urlparse.uses_query',
               'urlparse.uses_fragment',
               'urlparse.scheme_chars',
               'urlparse.MAX_CACHE_SIZE',
               'urlparse._parse_cache',
               'urlparse._hexdig',
               'urlparse._hextochr',
               'urlparse.a',
               'urlparse.b',
               'user.warnpy3k',
               'user.home',
               'user.home',
               'user.home',
               'user.home',
               'user.home',
               'user.pythonrc',
               'user.f',
               'UserString.__all__',
               'UserString.called_in_dir',
               'UserString.called_as',
               'UserString.called_as',
               'UserString.py',
               'uuid.__author__',
               'uuid.RESERVED_NCS',
               'uuid.RFC_4122',
               'uuid.RESERVED_MICROSOFT',
               'uuid.RESERVED_FUTURE',
               'uuid._uuid_generate_random',
               'uuid._uuid_generate_time',
               'uuid._UuidCreate',
               'uuid.libname',
               'uuid.lib',
               'uuid._uuid_generate_random',
               'uuid._uuid_generate_time',
               'uuid._uuid_generate_random',
               'uuid._uuid_generate_time',
               'uuid.lib',
               'uuid.lib',
               'uuid._UuidCreate',
               'uuid._node',
               'uuid._last_timestamp',
               'uuid.NAMESPACE_DNS',
               'uuid.NAMESPACE_URL',
               'uuid.NAMESPACE_OID',
               'uuid.NAMESPACE_X500',
               'uu.__all__',
               'warnings.__all__',
               'warnings.showwarning',
               'warnings._warnings_defaults',
               'warnings.defaultaction',
               'warnings.onceregistry',
               'warnings._warnings_defaults',
               'warnings.filters',
               'warnings.defaultaction',
               'warnings.onceregistry',
               'warnings.silence',
               'warnings.cls',
               'warnings.bytes_warning',
               'warnings.bytes_action',
               'warnings.bytes_action',
               'warnings.bytes_action',
               'warnings._warnings_defaults',
               'wave.__all__',
               'wave.WAVE_FORMAT_PCM',
               'wave._array_fmts',
               'wave.big_endian',
               'wave.big_endian',
               'wave.openfp',
               'weakref.ProxyTypes',
               'weakref.__all__',
               '_weakrefset.__all__',
               'webbrowser.__all__',
               'webbrowser._browsers',
               'webbrowser._tryorder',
               'webbrowser.Netscape',
               'webbrowser._tryorder',
               'webbrowser._browsers',
               'webbrowser.iexplore',
               'webbrowser.browser',
               'webbrowser._tryorder',
               'webbrowser._browsers',
               'webbrowser._userchoices',
               'webbrowser.cmdline',
               'webbrowser.cmd',
               'webbrowser.cmdline',
               'webbrowser.cmdline',
               'webbrowser._userchoices',
               'whichdb._dbmerror',
               'whichdb.dbm',
               'whichdb._dbmerror',
               'whichdb.filename',
               'xdrlib.__all__',
               'xmllib.warnings',
               'xmllib.version',
               'xmllib._S',
               'xmllib._opS',
               'xmllib._Name',
               'xmllib._QStr',
               'xmllib.illegal',
               'xmllib.interesting',
               'xmllib.amp',
               'xmllib.ref',
               'xmllib.entityref',
               'xmllib.charref',
               'xmllib.space',
               'xmllib.newline',
               'xmllib.attrfind',
               'xmllib.starttagopen',
               'xmllib.starttagend',
               'xmllib.starttagmatch',
               'xmllib.endtagopen',
               'xmllib.endbracket',
               'xmllib.endbracketfind',
               'xmllib.tagfind',
               'xmllib.cdataopen',
               'xmllib.cdataclose',
               'xmllib._SystemLiteral',
               'xmllib._PublicLiteral',
               'xmllib._ExternalId',
               'xmllib.doctype',
               'xmllib.xmldecl',
               'xmllib.procopen',
               'xmllib.procclose',
               'xmllib.commentopen',
               'xmllib.commentclose',
               'xmllib.doubledash',
               'xmllib.attrtrans',
               'xmllib._NCName',
               'xmllib.ncname',
               'xmllib.qname',
               'xmllib.xmlns',
               'xmlrpclib.gzip',
               'xmlrpclib.unicode',
               'xmlrpclib.datetime',
               'xmlrpclib._bool_is_builtin',
               'xmlrpclib._bool_is_builtin',
               'xmlrpclib.__version__',
               'xmlrpclib.MAXINT',
               'xmlrpclib.MININT',
               'xmlrpclib.PARSE_ERROR',
               'xmlrpclib.SERVER_ERROR',
               'xmlrpclib.APPLICATION_ERROR',
               'xmlrpclib.SYSTEM_ERROR',
               'xmlrpclib.TRANSPORT_ERROR',
               'xmlrpclib.NOT_WELLFORMED_ERROR',
               'xmlrpclib.UNSUPPORTED_ENCODING',
               'xmlrpclib.INVALID_ENCODING_CHAR',
               'xmlrpclib.INVALID_XMLRPC',
               'xmlrpclib.METHOD_NOT_FOUND',
               'xmlrpclib.INVALID_METHOD_PARAMS',
               'xmlrpclib.INTERNAL_ERROR',
               'xmlrpclib.mod_dict',
               'xmlrpclib.boolean',
               'xmlrpclib.Boolean',
               'xmlrpclib.modules',
               'xmlrpclib.mod_dict',
               'xmlrpclib.WRAPPERS',
               'xmlrpclib.WRAPPERS',
               'xmlrpclib.FastParser',
               'xmlrpclib.FastUnmarshaller',
               'xmlrpclib.FastParser',
               'xmlrpclib.FastUnmarshaller',
               'xmlrpclib.FastMarshaller',
               'xmlrpclib.FastMarshaller',
               'xmlrpclib.ExpatParser',
               'xmlrpclib.Server',
               'xmlrpclib.server',
               'xmlrpclib.v',
               'xmlrpclib.multi',
               'xmlrpclib.response',
               'xmlrpclib.v',
               'zipfile.crc32',
               'zipfile.zlib',
               'zipfile.crc32',
               'zipfile.__all__',
               'zipfile.error',
               'zipfile.ZIP64_LIMIT',
               'zipfile.ZIP_FILECOUNT_LIMIT',
               'zipfile.ZIP_MAX_COMMENT',
               'zipfile.ZIP_STORED',
               'zipfile.ZIP_DEFLATED',
               'zipfile.structEndArchive',
               'zipfile.stringEndArchive',
               'zipfile.sizeEndCentDir',
               'zipfile._ECD_SIGNATURE',
               'zipfile._ECD_DISK_NUMBER',
               'zipfile._ECD_DISK_START',
               'zipfile._ECD_ENTRIES_THIS_DISK',
               'zipfile._ECD_ENTRIES_TOTAL',
               'zipfile._ECD_SIZE',
               'zipfile._ECD_OFFSET',
               'zipfile._ECD_COMMENT_SIZE',
               'zipfile._ECD_COMMENT',
               'zipfile._ECD_LOCATION',
               'zipfile.structCentralDir',
               'zipfile.stringCentralDir',
               'zipfile.sizeCentralDir',
               'zipfile._CD_SIGNATURE',
               'zipfile._CD_CREATE_VERSION',
               'zipfile._CD_CREATE_SYSTEM',
               'zipfile._CD_EXTRACT_VERSION',
               'zipfile._CD_EXTRACT_SYSTEM',
               'zipfile._CD_FLAG_BITS',
               'zipfile._CD_COMPRESS_TYPE',
               'zipfile._CD_TIME',
               'zipfile._CD_DATE',
               'zipfile._CD_CRC',
               'zipfile._CD_COMPRESSED_SIZE',
               'zipfile._CD_UNCOMPRESSED_SIZE',
               'zipfile._CD_FILENAME_LENGTH',
               'zipfile._CD_EXTRA_FIELD_LENGTH',
               'zipfile._CD_COMMENT_LENGTH',
               'zipfile._CD_DISK_NUMBER_START',
               'zipfile._CD_INTERNAL_FILE_ATTRIBUTES',
               'zipfile._CD_EXTERNAL_FILE_ATTRIBUTES',
               'zipfile._CD_LOCAL_HEADER_OFFSET',
               'zipfile.structFileHeader',
               'zipfile.stringFileHeader',
               'zipfile.sizeFileHeader',
               'zipfile._FH_SIGNATURE',
               'zipfile._FH_EXTRACT_VERSION',
               'zipfile._FH_EXTRACT_SYSTEM',
               'zipfile._FH_GENERAL_PURPOSE_FLAG_BITS',
               'zipfile._FH_COMPRESSION_METHOD',
               'zipfile._FH_LAST_MOD_TIME',
               'zipfile._FH_LAST_MOD_DATE',
               'zipfile._FH_CRC',
               'zipfile._FH_COMPRESSED_SIZE',
               'zipfile._FH_UNCOMPRESSED_SIZE',
               'zipfile._FH_FILENAME_LENGTH',
               'zipfile._FH_EXTRA_FIELD_LENGTH',
               'zipfile.structEndArchive64Locator',
               'zipfile.stringEndArchive64Locator',
               'zipfile.sizeEndCentDir64Locator',
               'zipfile.structEndArchive64',
               'zipfile.stringEndArchive64',
               'zipfile.sizeEndCentDir64',
               'zipfile._CD64_SIGNATURE',
               'zipfile._CD64_DIRECTORY_RECSIZE',
               'zipfile._CD64_CREATE_VERSION',
               'zipfile._CD64_EXTRACT_VERSION',
               'zipfile._CD64_DISK_NUMBER',
               'zipfile._CD64_DISK_NUMBER_START',
               'zipfile._CD64_NUMBER_ENTRIES_THIS_DISK',
               'zipfile._CD64_NUMBER_ENTRIES_TOTAL',
               'zipfile._CD64_DIRECTORY_SIZE',
               'zipfile._CD64_OFFSET_START_CENTDIR'],
 'FUNCTIONS': [('_abcoll._hasattr', ['C', 'attr'], ''),
               ('abc.abstractmethod',
                ['funcobj'],
                "A decorator indicating abstract methods.\n\n    Requires that the metaclass is ABCMeta or derived from it.  A\n    class that has a metaclass derived from ABCMeta cannot be\n    instantiated unless all of its abstract methods are overridden.\n    The abstract methods can be called using any of the normal\n    'super' call mechanisms.\n\n    Usage:\n\n        class C:\n            __metaclass__ = ABCMeta\n            @abstractmethod\n            def my_abstract_method(self, ...):\n                ...\n    "),
               ('aifc._read_long', ['file'], ''),
               ('aifc._read_ulong', ['file'], ''),
               ('aifc._read_short', ['file'], ''),
               ('aifc._read_string', ['file'], ''),
               ('aifc._read_float', ['f'], ''),
               ('aifc._write_short', ['f', 'x'], ''),
               ('aifc._write_long', ['f', 'x'], ''),
               ('aifc._write_string', ['f', 's'], ''),
               ('aifc._write_float', ['f', 'x'], ''),
               ('aifc.open', ['f', 'mode=None'], ''),
               ('anydbm.open', ['file', "flag='r'", 'mode=438'], ''),
               ('argparse._callable', ['obj'], ''),
               ('argparse._ensure_value', ['namespace', 'name', 'value'], ''),
               ('argparse._get_action_name', ['argument'], ''),
               ('ast.parse',
                ['source', "filename='<unknown>'", "mode='exec'"],
                '\n    Parse the source into an AST node.\n    Equivalent to compile(source, filename, mode, PyCF_ONLY_AST).\n    '),
               ('ast.literal_eval',
                ['node_or_string'],
                '\n    Safely evaluate an expression node or a string containing a Python\n    expression.  The string or node provided may only consist of the following\n    Python literal structures: strings, numbers, tuples, lists, dicts, booleans,\n    and None.\n    '),
               ('ast.dump',
                ['node', 'annotate_fields=True', 'include_attributes=False'],
                '\n    Return a formatted dump of the tree in *node*.  This is mainly useful for\n    debugging purposes.  The returned string will show the names and the values\n    for fields.  This makes the code impossible to evaluate, so if evaluation is\n    wanted *annotate_fields* must be set to False.  Attributes such as line\n    numbers and column offsets are not dumped by default.  If this is wanted,\n    *include_attributes* can be set to True.\n    '),
               ('ast.copy_location',
                ['new_node', 'old_node'],
                '\n    Copy source location (`lineno` and `col_offset` attributes) from\n    *old_node* to *new_node* if possible, and return *new_node*.\n    '),
               ('ast.fix_missing_locations',
                ['node'],
                '\n    When you compile a node tree with compile(), the compiler expects lineno and\n    col_offset attributes for every node that supports them.  This is rather\n    tedious to fill in for generated nodes, so this helper adds these attributes\n    recursively where not already set, by setting them to the values of the\n    parent node.  It works recursively starting at *node*.\n    '),
               ('ast.increment_lineno',
                ['node', 'n=1'],
                '\n    Increment the line number of each node in the tree starting at *node* by *n*.\n    This is useful to "move code" to a different location in a file.\n    '),
               ('ast.iter_fields',
                ['node'],
                '\n    Yield a tuple of ``(fieldname, value)`` for each field in ``node._fields``\n    that is present on *node*.\n    '),
               ('ast.iter_child_nodes',
                ['node'],
                '\n    Yield all direct child nodes of *node*, that is, all fields that are nodes\n    and all items of fields that are lists of nodes.\n    '),
               ('ast.get_docstring',
                ['node', 'clean=True'],
                '\n    Return the docstring for the given node or None if no docstring can\n    be found.  If the node provided does not have docstrings a TypeError\n    will be raised.\n    '),
               ('ast.walk',
                ['node'],
                "\n    Recursively yield all descendant nodes in the tree starting at *node*\n    (including *node* itself), in no specified order.  This is useful if you\n    only want to modify nodes in place and don't care about the context.\n    "),
               ('asynchat.find_prefix_at_end', ['haystack', 'needle'], ''),
               ('asyncore._strerror', ['err'], ''),
               ('asyncore.read', ['obj'], ''),
               ('asyncore.write', ['obj'], ''),
               ('asyncore._exception', ['obj'], ''),
               ('asyncore.readwrite', ['obj', 'flags'], ''),
               ('asyncore.poll', ['timeout=0.0', 'map=None'], ''),
               ('asyncore.poll2', ['timeout=0.0', 'map=None'], ''),
               ('asyncore.loop',
                ['timeout=30.0', 'use_poll=False', 'map=None', 'count=None'],
                ''),
               ('asyncore.compact_traceback', [], ''),
               ('asyncore.close_all', ['map=None', 'ignore_all=False'], ''),
               ('atexit._run_exitfuncs',
                [],
                'run any registered exit functions\n\n    _exithandlers is traversed in reverse order so functions are executed\n    last in, first out.\n    '),
               ('atexit.register',
                ['func', '*targs', '**kargs'],
                'register a function to be executed upon normal program termination\n\n    func - function to be called at exit\n    targs - optional arguments to pass to func\n    kargs - optional keyword arguments to pass to func\n\n    func is returned to facilitate usage as a decorator.\n    '),
               ('atexit.x1', [], ''),
               ('atexit.x2', ['n'], ''),
               ('atexit.x3', ['n', 'kwd=None'], ''),
               ('audiodev.AudioDev', [], ''),
               ('audiodev.test', ['fn=None'], ''),
               ('base64._translate', ['s', 'altchars'], ''),
               ('base64.b64encode',
                ['s', 'altchars=None'],
                "Encode a string using Base64.\n\n    s is the string to encode.  Optional altchars must be a string of at least\n    length 2 (additional characters are ignored) which specifies an\n    alternative alphabet for the '+' and '/' characters.  This allows an\n    application to e.g. generate url or filesystem safe Base64 strings.\n\n    The encoded string is returned.\n    "),
               ('base64.b64decode',
                ['s', 'altchars=None'],
                "Decode a Base64 encoded string.\n\n    s is the string to decode.  Optional altchars must be a string of at least\n    length 2 (additional characters are ignored) which specifies the\n    alternative alphabet used instead of the '+' and '/' characters.\n\n    The decoded string is returned.  A TypeError is raised if s were\n    incorrectly padded or if there are non-alphabet characters present in the\n    string.\n    "),
               ('base64.standard_b64encode',
                ['s'],
                'Encode a string using the standard Base64 alphabet.\n\n    s is the string to encode.  The encoded string is returned.\n    '),
               ('base64.standard_b64decode',
                ['s'],
                'Decode a string encoded with the standard Base64 alphabet.\n\n    s is the string to decode.  The decoded string is returned.  A TypeError\n    is raised if the string is incorrectly padded or if there are non-alphabet\n    characters present in the string.\n    '),
               ('base64.urlsafe_b64encode',
                ['s'],
                "Encode a string using a url-safe Base64 alphabet.\n\n    s is the string to encode.  The encoded string is returned.  The alphabet\n    uses '-' instead of '+' and '_' instead of '/'.\n    "),
               ('base64.urlsafe_b64decode',
                ['s'],
                "Decode a string encoded with the standard Base64 alphabet.\n\n    s is the string to decode.  The decoded string is returned.  A TypeError\n    is raised if the string is incorrectly padded or if there are non-alphabet\n    characters present in the string.\n\n    The alphabet uses '-' instead of '+' and '_' instead of '/'.\n    "),
               ('base64.b32encode',
                ['s'],
                'Encode a string using Base32.\n\n    s is the string to encode.  The encoded string is returned.\n    '),
               ('base64.b32decode',
                ['s', 'casefold=False', 'map01=None'],
                'Decode a Base32 encoded string.\n\n    s is the string to decode.  Optional casefold is a flag specifying whether\n    a lowercase alphabet is acceptable as input.  For security purposes, the\n    default is False.\n\n    RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O\n    (oh), and for optional mapping of the digit 1 (one) to either the letter I\n    (eye) or letter L (el).  The optional argument map01 when not None,\n    specifies which letter the digit 1 should be mapped to (when map01 is not\n    None, the digit 0 is always mapped to the letter O).  For security\n    purposes the default is None, so that 0 and 1 are not allowed in the\n    input.\n\n    The decoded string is returned.  A TypeError is raised if s were\n    incorrectly padded or if there are non-alphabet characters present in the\n    string.\n    '),
               ('base64.b16encode',
                ['s'],
                'Encode a string using Base16.\n\n    s is the string to encode.  The encoded string is returned.\n    '),
               ('base64.b16decode',
                ['s', 'casefold=False'],
                'Decode a Base16 encoded string.\n\n    s is the string to decode.  Optional casefold is a flag specifying whether\n    a lowercase alphabet is acceptable as input.  For security purposes, the\n    default is False.\n\n    The decoded string is returned.  A TypeError is raised if s were\n    incorrectly padded or if there are non-alphabet characters present in the\n    string.\n    '),
               ('base64.encode', ['input', 'output'], 'Encode a file.'),
               ('base64.decode', ['input', 'output'], 'Decode a file.'),
               ('base64.encodestring',
                ['s'],
                'Encode a string into multiple lines of base-64 data.'),
               ('base64.decodestring', ['s'], 'Decode a string.'),
               ('base64.test', [], 'Small test program'),
               ('base64.test1', [], ''),
               ('BaseHTTPServer._quote_html', ['html'], ''),
               ('BaseHTTPServer.test',
                ['HandlerClass=BaseHTTPRequestHandler',
                 'ServerClass=HTTPServer',
                 "protocol='HTTP/1.0'"],
                'Test the HTTP request handler class.\n\n    This runs an HTTP server on port 8000 (or the first command line\n    argument).\n\n    '),
               ('Bastion.Bastion',
                ['object',
                 "filter=lambda name: name[:1] != '_'",
                 'name=None',
                 'bastionclass=BastionClass'],
                "Create a bastion for an object, using an optional filter.\n\n    See the Bastion module's documentation for background.\n\n    Arguments:\n\n    object - the original object\n    filter - a predicate that decides whether a function name is OK;\n             by default all names are OK that don't start with '_'\n    name - the name of the object; default repr(object)\n    bastionclass - class used to create the bastion; default BastionClass\n\n    "),
               ('Bastion._test', [], 'Test the Bastion() function.'),
               ('bdb.set_trace', [], ''),
               ('bdb.checkfuncname',
                ['b', 'frame'],
                'Check whether we should break here because of `b.funcname`.'),
               ('bdb.effective',
                ['file', 'line', 'frame'],
                'Determine which breakpoint for this file:line is to be acted upon.\n\n    Called only if we know there is a bpt at this\n    location.  Returns breakpoint that was triggered and a flag\n    that indicates if it is ok to delete a temporary bp.\n\n    '),
               ('bdb.foo', ['n'], ''),
               ('bdb.bar', ['a'], ''),
               ('bdb.test', [], ''),
               ('binhex.getfileinfo', ['name'], ''),
               ('binhex.openrsrc', ['name', '*mode'], ''),
               ('binhex.getfileinfo', ['name'], ''),
               ('binhex.binhex',
                ['inp', 'out'],
                '(infilename, outfilename) - Create binhex-encoded copy of a file'),
               ('binhex.hexbin',
                ['inp', 'out'],
                '(infilename, outfilename) - Decode binhexed file'),
               ('binhex._test', [], ''),
               ('bisect.insort_right',
                ['a', 'x', 'lo=0', 'hi=None'],
                'Insert item x in list a, and keep it sorted assuming a is sorted.\n\n    If x is already in a, insert it to the right of the rightmost x.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    '),
               ('bisect.bisect_right',
                ['a', 'x', 'lo=0', 'hi=None'],
                'Return the index where to insert item x in list a, assuming a is sorted.\n\n    The return value i is such that all e in a[:i] have e <= x, and all e in\n    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will\n    insert just after the rightmost x already there.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    '),
               ('bisect.insort_left',
                ['a', 'x', 'lo=0', 'hi=None'],
                'Insert item x in list a, and keep it sorted assuming a is sorted.\n\n    If x is already in a, insert it to the left of the leftmost x.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    '),
               ('bisect.bisect_left',
                ['a', 'x', 'lo=0', 'hi=None'],
                'Return the index where to insert item x in list a, assuming a is sorted.\n\n    The return value i is such that all e in a[:i] have e < x, and all e in\n    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will\n    insert just before the leftmost x already there.\n\n    Optional args lo (default 0) and hi (default len(a)) bound the\n    slice of a to be searched.\n    '),
               ('calendar.isleap',
                ['year'],
                'Return True for leap years, False for non-leap years.'),
               ('calendar.leapdays',
                ['y1', 'y2'],
                'Return number of leap years in range [y1, y2).\n       Assume y1 <= y2.'),
               ('calendar.weekday',
                ['year', 'month', 'day'],
                'Return weekday (0-6 ~ Mon-Sun) for year (1970-...), month (1-12),\n       day (1-31).'),
               ('calendar.monthrange',
                ['year', 'month'],
                'Return weekday (0-6 ~ Mon-Sun) and number of days (28-31) for\n       year, month.'),
               ('calendar.setfirstweekday', ['firstweekday'], ''),
               ('calendar.format',
                ['cols', 'colwidth=_colwidth', 'spacing=_spacing'],
                'Prints multi-column formatting for year calendars'),
               ('calendar.formatstring',
                ['cols', 'colwidth=_colwidth', 'spacing=_spacing'],
                'Returns a string formatted from n strings, centered within n columns.'),
               ('calendar.timegm',
                ['tuple'],
                'Unrelated but handy function to calculate Unix timestamp from GMT.'),
               ('calendar.main', ['args'], ''),
               ('CGIHTTPServer._url_collapse_path_split',
                ['path'],
                "\n    Given a URL path, remove extra '/'s and '.' path elements and collapse\n    any '..' references.\n\n    Implements something akin to RFC-2396 5.2 step 6 to parse relative paths.\n\n    Returns: A tuple of (head, tail) where tail is everything after the final /\n    and head is everything before it.  Head will always start with a '/' and,\n    if it contains anything else, never have a trailing '/'.\n\n    Raises: IndexError if too many '..' occur within the path.\n    "),
               ('CGIHTTPServer.nobody_uid', [], "Internal routine to get nobody's uid"),
               ('CGIHTTPServer.executable', ['path'], 'Test for executable file.'),
               ('CGIHTTPServer.test',
                ['HandlerClass=CGIHTTPRequestHandler', 'ServerClass=BaseHTTPServer.HTTPServer'],
                ''),
               ('cgi.initlog',
                ['*allargs'],
                'Write a log message, if there is a log file.\n\n    Even though this function is called initlog(), you should always\n    use log(); log is a variable that is set either to initlog\n    (initially), to dolog (once the log file has been opened), or to\n    nolog (when logging is disabled).\n\n    The first argument is a format string; the remaining arguments (if\n    any) are arguments to the % operator, so e.g.\n        log("%s: %s", "a", "b")\n    will write "a: b" to the log file, followed by a newline.\n\n    If the global logfp is not None, it should be a file object to\n    which log data is written.\n\n    If the global logfp is None, the global logfile may be a string\n    giving a filename to open, in append mode.  This file should be\n    world writable!!!  If the file can\'t be opened, logging is\n    silently disabled (since there is no safe place where we could\n    send an error message).\n\n    '),
               ('cgi.dolog',
                ['fmt', '*args'],
                'Write a log message to the log file.  See initlog() for docs.'),
               ('cgi.nolog',
                ['*allargs'],
                'Dummy function, assigned to log when logging is disabled.'),
               ('cgi.parse',
                ['fp=None', 'environ=os.environ', 'keep_blank_values=0', 'strict_parsing=0'],
                'Parse a query in the environment or from a file (default stdin)\n\n        Arguments, all optional:\n\n        fp              : file pointer; default: sys.stdin\n\n        environ         : environment dictionary; default: os.environ\n\n        keep_blank_values: flag indicating whether blank values in\n            percent-encoded forms should be treated as blank strings.\n            A true value indicates that blanks should be retained as\n            blank strings.  The default false value indicates that\n            blank values are to be ignored and treated as if they were\n            not included.\n\n        strict_parsing: flag indicating what to do with parsing errors.\n            If false (the default), errors are silently ignored.\n            If true, errors raise a ValueError exception.\n    '),
               ('cgi.parse_qs',
                ['qs', 'keep_blank_values=0', 'strict_parsing=0'],
                'Parse a query given as a string argument.'),
               ('cgi.parse_qsl',
                ['qs', 'keep_blank_values=0', 'strict_parsing=0'],
                'Parse a query given as a string argument.'),
               ('cgi.parse_multipart',
                ['fp', 'pdict'],
                'Parse multipart input.\n\n    Arguments:\n    fp   : input file\n    pdict: dictionary containing other parameters of content-type header\n\n    Returns a dictionary just like parse_qs(): keys are the field names, each\n    value is a list of values for that field.  This is easy to use but not\n    much good if you are expecting megabytes to be uploaded -- in that case,\n    use the FieldStorage class instead which is much more flexible.  Note\n    that content-type is the raw, unparsed contents of the content-type\n    header.\n\n    XXX This does not parse nested multipart parts -- use FieldStorage for\n    that.\n\n    XXX This should really be subsumed by FieldStorage altogether -- no\n    point in having two implementations of the same parsing algorithm.\n    Also, FieldStorage protects itself better against certain DoS attacks\n    by limiting the size of the data read in one chunk.  The API here\n    does not support that kind of protection.  This also affects parse()\n    since it can call parse_multipart().\n\n    '),
               ('cgi._parseparam', ['s'], ''),
               ('cgi.parse_header',
                ['line'],
                'Parse a Content-type like header.\n\n    Return the main content-type and a dictionary of options.\n\n    '),
               ('cgi.test',
                ['environ=os.environ'],
                'Robust test CGI script, usable as main program.\n\n    Write minimal HTTP headers and dump all information provided to\n    the script in HTML form.\n\n    '),
               ('cgi.print_exception', ['type=None', 'value=None', 'tb=None', 'limit=None'], ''),
               ('cgi.print_environ',
                ['environ=os.environ'],
                'Dump the shell environment as HTML.'),
               ('cgi.print_form', ['form'], 'Dump the contents of a form as HTML.'),
               ('cgi.print_directory', [], 'Dump the current directory as HTML.'),
               ('cgi.print_arguments', [], ''),
               ('cgi.print_environ_usage',
                [],
                'Dump a list of environment variables used by CGI as HTML.'),
               ('cgi.escape',
                ['s', 'quote=None'],
                'Replace special characters "&", "<" and ">" to HTML-safe sequences.\n    If the optional flag quote is true, the quotation mark character (")\n    is also translated.'),
               ('cgi.valid_boundary', ['s', "_vb_pattern='^[ -~]{0,200}[!-~]$'"], ''),
               ('cgitb.reset',
                [],
                'Return a string that resets the CGI and browser to a known state.'),
               ('cgitb.small', ['text'], ''),
               ('cgitb.strong', ['text'], ''),
               ('cgitb.grey', ['text'], ''),
               ('cgitb.lookup',
                ['name', 'frame', 'locals'],
                'Find the value for a given name in the given environment.'),
               ('cgitb.scanvars',
                ['reader', 'frame', 'locals'],
                'Scan one logical line of Python and look up values of variables used.'),
               ('cgitb.html',
                ['einfo', 'context=5'],
                'Return a nice HTML document describing a given traceback.'),
               ('cgitb.text',
                ['einfo', 'context=5'],
                'Return a plain text document describing a given traceback.'),
               ('cgitb.enable',
                ['display=1', 'logdir=None', 'context=5', "format='html'"],
                "Install an exception handler that formats tracebacks as HTML.\n\n    The optional argument 'display' can be set to 0 to suppress sending the\n    traceback to the browser, and 'logdir' can be set to a directory to cause\n    tracebacks to be written to files there."),
               ('codecs.open',
                ['filename', "mode='rb'", 'encoding=None', "errors='strict'", 'buffering=1'],
                " Open an encoded file using the given mode and return\n        a wrapped version providing transparent encoding/decoding.\n\n        Note: The wrapped version will only accept the object format\n        defined by the codecs, i.e. Unicode objects for most builtin\n        codecs. Output is also codec dependent and will usually be\n        Unicode as well.\n\n        Files are always opened in binary mode, even if no binary mode\n        was specified. This is done to avoid data loss due to encodings\n        using 8-bit values. The default file mode is 'rb' meaning to\n        open the file in binary read mode.\n\n        encoding specifies the encoding which is to be used for the\n        file.\n\n        errors may be given to define the error handling. It defaults\n        to 'strict' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        buffering has the same meaning as for the builtin open() API.\n        It defaults to line buffered.\n\n        The returned wrapped file object provides an extra attribute\n        .encoding which allows querying the used encoding. This\n        attribute is only available if an encoding was specified as\n        parameter.\n\n    "),
               ('codecs.EncodedFile',
                ['file', 'data_encoding', 'file_encoding=None', "errors='strict'"],
                " Return a wrapped version of file which provides transparent\n        encoding translation.\n\n        Strings written to the wrapped file are interpreted according\n        to the given data_encoding and then written to the original\n        file as string using file_encoding. The intermediate encoding\n        will usually be Unicode but depends on the specified codecs.\n\n        Strings are read from the file using file_encoding and then\n        passed back to the caller as string using data_encoding.\n\n        If file_encoding is not given, it defaults to data_encoding.\n\n        errors may be given to define the error handling. It defaults\n        to 'strict' which causes ValueErrors to be raised in case an\n        encoding error occurs.\n\n        The returned wrapped file object provides two extra attributes\n        .data_encoding and .file_encoding which reflect the given\n        parameters of the same name. The attributes can be used for\n        introspection by Python programs.\n\n    "),
               ('codecs.getencoder',
                ['encoding'],
                ' Lookup up the codec for the given encoding and return\n        its encoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    '),
               ('codecs.getdecoder',
                ['encoding'],
                ' Lookup up the codec for the given encoding and return\n        its decoder function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    '),
               ('codecs.getincrementalencoder',
                ['encoding'],
                " Lookup up the codec for the given encoding and return\n        its IncrementalEncoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental encoder.\n\n    "),
               ('codecs.getincrementaldecoder',
                ['encoding'],
                " Lookup up the codec for the given encoding and return\n        its IncrementalDecoder class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found\n        or the codecs doesn't provide an incremental decoder.\n\n    "),
               ('codecs.getreader',
                ['encoding'],
                ' Lookup up the codec for the given encoding and return\n        its StreamReader class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    '),
               ('codecs.getwriter',
                ['encoding'],
                ' Lookup up the codec for the given encoding and return\n        its StreamWriter class or factory function.\n\n        Raises a LookupError in case the encoding cannot be found.\n\n    '),
               ('codecs.iterencode',
                ['iterator', 'encoding', "errors='strict'", '**kwargs'],
                '\n    Encoding iterator.\n\n    Encodes the input strings from the iterator using a IncrementalEncoder.\n\n    errors and kwargs are passed through to the IncrementalEncoder\n    constructor.\n    '),
               ('codecs.iterdecode',
                ['iterator', 'encoding', "errors='strict'", '**kwargs'],
                '\n    Decoding iterator.\n\n    Decodes the input strings from the iterator using a IncrementalDecoder.\n\n    errors and kwargs are passed through to the IncrementalDecoder\n    constructor.\n    '),
               ('codecs.make_identity_dict',
                ['rng'],
                ' make_identity_dict(rng) -> dict\n\n        Return a dictionary where elements of the rng sequence are\n        mapped to themselves.\n\n    '),
               ('codecs.make_encoding_map',
                ['decoding_map'],
                ' Creates an encoding map from a decoding map.\n\n        If a target mapping in the decoding map occurs multiple\n        times, then that target is mapped to None (undefined mapping),\n        causing an exception when encountered by the charmap codec\n        during translation.\n\n        One example where this happens is cp875.py which decodes\n        multiple character to \\u001a.\n\n    '),
               ('codeop._maybe_compile', ['compiler', 'source', 'filename', 'symbol'], ''),
               ('codeop._compile', ['source', 'filename', 'symbol'], ''),
               ('codeop.compile_command',
                ['source', "filename='<input>'", "symbol='single'"],
                'Compile a command and determine whether it is incomplete.\n\n    Arguments:\n\n    source -- the source string; may contain \\n characters\n    filename -- optional filename from which source was read; default\n                "<input>"\n    symbol -- optional grammar start symbol; "single" (default) or "eval"\n\n    Return value / exceptions raised:\n\n    - Return a code object if the command is complete and valid\n    - Return None if the command is incomplete\n    - Raise SyntaxError, ValueError or OverflowError if the command is a\n      syntax error (OverflowError and ValueError can be produced by\n      malformed literals).\n    '),
               ('code.softspace', ['file', 'newvalue'], ''),
               ('code.interact',
                ['banner=None', 'readfunc=None', 'local=None'],
                'Closely emulate the interactive Python interpreter.\n\n    This is a backwards compatible interface to the InteractiveConsole\n    class.  When readfunc is not specified, it attempts to import the\n    readline module to enable GNU readline if it is available.\n\n    Arguments (all optional, all default to None):\n\n    banner -- passed to InteractiveConsole.interact()\n    readfunc -- if not None, replaces InteractiveConsole.raw_input()\n    local -- passed to InteractiveInterpreter.__init__()\n\n    '),
               ('collections._recursive_repr',
                ['user_function'],
                'Decorator to make a repr function return "..." for a recursive call'),
               ('collections.namedtuple',
                ['typename', 'field_names', 'verbose=False', 'rename=False'],
                "Returns a new subclass of tuple with named fields.\n\n    >>> Point = namedtuple('Point', 'x y')\n    >>> Point.__doc__                   # docstring for the new class\n    'Point(x, y)'\n    >>> p = Point(11, y=22)             # instantiate with positional args or keywords\n    >>> p[0] + p[1]                     # indexable like a plain tuple\n    33\n    >>> x, y = p                        # unpack like a regular tuple\n    >>> x, y\n    (11, 22)\n    >>> p.x + p.y                       # fields also accessable by name\n    33\n    >>> d = p._asdict()                 # convert to a dictionary\n    >>> d['x']\n    11\n    >>> Point(**d)                      # convert from a dictionary\n    Point(x=11, y=22)\n    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields\n    Point(x=100, y=22)\n\n    "),
               ('colorsys.rgb_to_yiq', ['r', 'g', 'b'], ''),
               ('colorsys.yiq_to_rgb', ['y', 'i', 'q'], ''),
               ('colorsys.rgb_to_hls', ['r', 'g', 'b'], ''),
               ('colorsys.hls_to_rgb', ['h', 'l', 's'], ''),
               ('colorsys._v', ['m1', 'm2', 'hue'], ''),
               ('colorsys.rgb_to_hsv', ['r', 'g', 'b'], ''),
               ('colorsys.hsv_to_rgb', ['h', 's', 'v'], ''),
               ('commands.getstatus', ['file'], 'Return output of "ls -ld <file>" in a string.'),
               ('commands.getoutput',
                ['cmd'],
                'Return output (stdout or stderr) of executing cmd in a shell.'),
               ('commands.getstatusoutput',
                ['cmd'],
                'Return (status, output) of executing cmd in a shell.'),
               ('commands.mk2arg', ['head', 'x'], ''),
               ('commands.mkarg', ['x'], ''),
               ('compileall.compile_dir',
                ['dir', 'maxlevels=10', 'ddir=None', 'force=0', 'rx=None', 'quiet=0'],
                'Byte-compile all modules in the given directory tree.\n\n    Arguments (only dir is required):\n\n    dir:       the directory to byte-compile\n    maxlevels: maximum recursion level (default 10)\n    ddir:      if given, purported directory name (this is the\n               directory name that will show up in error messages)\n    force:     if 1, force compilation, even if timestamps are up-to-date\n    quiet:     if 1, be quiet during compilation\n    '),
               ('compileall.compile_file',
                ['fullname', 'ddir=None', 'force=0', 'rx=None', 'quiet=0'],
                'Byte-compile one file.\n\n    Arguments (only fullname is required):\n\n    fullname:  the file to byte-compile\n    ddir:      if given, purported directory name (this is the\n               directory name that will show up in error messages)\n    force:     if 1, force compilation, even if timestamps are up-to-date\n    quiet:     if 1, be quiet during compilation\n    '),
               ('compileall.compile_path',
                ['skip_curdir=1', 'maxlevels=0', 'force=0', 'quiet=0'],
                'Byte-compile all module on sys.path.\n\n    Arguments (all optional):\n\n    skip_curdir: if true, skip current directory (default true)\n    maxlevels:   max recursion level (default 0)\n    force: as for compile_dir() (default 0)\n    quiet: as for compile_dir() (default 0)\n    '),
               ('compileall.expand_args',
                ['args', 'flist'],
                'read names in flist and append to args'),
               ('compileall.main', [], 'Script main program.'),
               ('contextlib.contextmanager',
                ['func'],
                '@contextmanager decorator.\n\n    Typical usage:\n\n        @contextmanager\n        def some_generator(<arguments>):\n            <setup>\n            try:\n                yield <value>\n            finally:\n                <cleanup>\n\n    This makes this:\n\n        with some_generator(<arguments>) as <variable>:\n            <body>\n\n    equivalent to this:\n\n        <setup>\n        try:\n            <variable> = <value>\n            <body>\n        finally:\n            <cleanup>\n\n    '),
               ('contextlib.nested',
                ['*managers'],
                'Combine multiple context managers into a single nested context manager.\n\n   This function has been deprecated in favour of the multiple manager form\n   of the with statement.\n\n   The one advantage of this function over the multiple manager form of the\n   with statement is that argument unpacking allows it to be\n   used with a variable number of context managers as follows:\n\n      with nested(*managers):\n          do_something()\n\n    '),
               ('cookielib._debug', ['*args'], ''),
               ('cookielib._warn_unhandled_exception', [], ''),
               ('cookielib._timegm', ['tt'], ''),
               ('cookielib.time2isoz',
                ['t=None'],
                'Return a string representing time in seconds since epoch, t.\n\n    If the function is called without an argument, it will use the current\n    time.\n\n    The format of the returned string is like "YYYY-MM-DD hh:mm:ssZ",\n    representing Universal Time (UTC, aka GMT).  An example of this format is:\n\n    1994-11-24 08:49:37Z\n\n    '),
               ('cookielib.time2netscape',
                ['t=None'],
                'Return a string representing time in seconds since epoch, t.\n\n    If the function is called without an argument, it will use the current\n    time.\n\n    The format of the returned string is like this:\n\n    Wed, DD-Mon-YYYY HH:MM:SS GMT\n\n    '),
               ('cookielib.offset_from_tz_string', ['tz'], ''),
               ('cookielib._str2time', ['day', 'mon', 'yr', 'hr', 'min', 'sec', 'tz'], ''),
               ('cookielib.http2time',
                ['text'],
                'Returns time in seconds since epoch of time represented by a string.\n\n    Return value is an integer.\n\n    None is returned if the format of str is unrecognized, the time is outside\n    the representable range, or the timezone string is not recognized.  If the\n    string contains no timezone, UTC is assumed.\n\n    The timezone in the string may be numerical (like "-0800" or "+0100") or a\n    string timezone (like "UTC", "GMT", "BST" or "EST").  Currently, only the\n    timezone strings equivalent to UTC (zero offset) are known to the function.\n\n    The function loosely parses the following formats:\n\n    Wed, 09 Feb 1994 22:23:32 GMT       -- HTTP format\n    Tuesday, 08-Feb-94 14:15:29 GMT     -- old rfc850 HTTP format\n    Tuesday, 08-Feb-1994 14:15:29 GMT   -- broken rfc850 HTTP format\n    09 Feb 1994 22:23:32 GMT            -- HTTP format (no weekday)\n    08-Feb-94 14:15:29 GMT              -- rfc850 format (no weekday)\n    08-Feb-1994 14:15:29 GMT            -- broken rfc850 format (no weekday)\n\n    The parser ignores leading and trailing whitespace.  The time may be\n    absent.\n\n    If the year is given with only 2 digits, the function will select the\n    century that makes the year closest to the current date.\n\n    '),
               ('cookielib.iso2time',
                ['text'],
                '\n    As for http2time, but parses the ISO 8601 formats:\n\n    1994-02-03 14:15:29 -0100    -- ISO 8601 format\n    1994-02-03 14:15:29          -- zone is optional\n    1994-02-03                   -- only date\n    1994-02-03T14:15:29          -- Use T as separator\n    19940203T141529Z             -- ISO 8601 compact format\n    19940203                     -- only date\n\n    '),
               ('cookielib.unmatched', ['match'], 'Return unmatched part of re.Match object.'),
               ('cookielib.split_header_words',
                ['header_values'],
                'Parse header values into a list of lists containing key,value pairs.\n\n    The function knows how to deal with ",", ";" and "=" as well as quoted\n    values after "=".  A list of space separated tokens are parsed as if they\n    were separated by ";".\n\n    If the header_values passed as argument contains multiple values, then they\n    are treated as if they were a single value separated by comma ",".\n\n    This means that this function is useful for parsing header fields that\n    follow this syntax (BNF as from the HTTP/1.1 specification, but we relax\n    the requirement for tokens).\n\n      headers           = #header\n      header            = (token | parameter) *( [";"] (token | parameter))\n\n      token             = 1*<any CHAR except CTLs or separators>\n      separators        = "(" | ")" | "<" | ">" | "@"\n                        | "," | ";" | ":" | "\\" | <">\n                        | "/" | "[" | "]" | "?" | "="\n                        | "{" | "}" | SP | HT\n\n      quoted-string     = ( <"> *(qdtext | quoted-pair ) <"> )\n      qdtext            = <any TEXT except <">>\n      quoted-pair       = "\\" CHAR\n\n      parameter         = attribute "=" value\n      attribute         = token\n      value             = token | quoted-string\n\n    Each header is represented by a list of key/value pairs.  The value for a\n    simple token (not part of a parameter) is None.  Syntactically incorrect\n    headers will not necessarily be parsed as you would want.\n\n    This is easier to describe with some examples:\n\n    >>> split_header_words([\'foo="bar"; port="80,81"; discard, bar=baz\'])\n    [[(\'foo\', \'bar\'), (\'port\', \'80,81\'), (\'discard\', None)], [(\'bar\', \'baz\')]]\n    >>> split_header_words([\'text/html; charset="iso-8859-1"\'])\n    [[(\'text/html\', None), (\'charset\', \'iso-8859-1\')]]\n    >>> split_header_words([r\'Basic realm="\\"foo\\bar\\""\'])\n    [[(\'Basic\', None), (\'realm\', \'"foobar"\')]]\n\n    '),
               ('cookielib.join_header_words',
                ['lists'],
                'Do the inverse (almost) of the conversion done by split_header_words.\n\n    Takes a list of lists of (key, value) pairs and produces a single header\n    value.  Attribute values are quoted if needed.\n\n    >>> join_header_words([[("text/plain", None), ("charset", "iso-8859/1")]])\n    \'text/plain; charset="iso-8859/1"\'\n    >>> join_header_words([[("text/plain", None)], [("charset", "iso-8859/1")]])\n    \'text/plain, charset="iso-8859/1"\'\n\n    '),
               ('cookielib._strip_quotes', ['text'], ''),
               ('cookielib.parse_ns_headers',
                ['ns_headers'],
                'Ad-hoc parser for Netscape protocol cookie-attributes.\n\n    The old Netscape cookie format for Set-Cookie can for instance contain\n    an unquoted "," in the expires field, so we have to use this ad-hoc\n    parser instead of split_header_words.\n\n    XXX This may not make the best possible effort to parse all the crap\n    that Netscape Cookie headers contain.  Ronald Tschalar\'s HTTPClient\n    parser is probably better, so could do worse than following that if\n    this ever gives any trouble.\n\n    Currently, this is also used for parsing RFC 2109 cookies.\n\n    '),
               ('cookielib.is_HDN', ['text'], 'Return True if text is a host domain name.'),
               ('cookielib.domain_match',
                ['A', 'B'],
                "Return True if domain A domain-matches domain B, according to RFC 2965.\n\n    A and B may be host domain names or IP addresses.\n\n    RFC 2965, section 1:\n\n    Host names can be specified either as an IP address or a HDN string.\n    Sometimes we compare one host name with another.  (Such comparisons SHALL\n    be case-insensitive.)  Host A's name domain-matches host B's if\n\n         *  their host name strings string-compare equal; or\n\n         * A is a HDN string and has the form NB, where N is a non-empty\n            name string, B has the form .B', and B' is a HDN string.  (So,\n            x.y.com domain-matches .Y.com but not Y.com.)\n\n    Note that domain-match is not a commutative operation: a.b.c.com\n    domain-matches .c.com, but not the reverse.\n\n    "),
               ('cookielib.liberal_is_HDN',
                ['text'],
                'Return True if text is a sort-of-like a host domain name.\n\n    For accepting/blocking domains.\n\n    '),
               ('cookielib.user_domain_match',
                ['A', 'B'],
                'For blocking/accepting domains.\n\n    A and B may be host domain names or IP addresses.\n\n    '),
               ('cookielib.request_host',
                ['request'],
                'Return request-host, as defined by RFC 2965.\n\n    Variation from RFC: returned value is lowercased, for convenient\n    comparison.\n\n    '),
               ('cookielib.eff_request_host',
                ['request'],
                'Return a tuple (request-host, effective request-host name).\n\n    As defined by RFC 2965, except both are lowercased.\n\n    '),
               ('cookielib.request_path',
                ['request'],
                'Path component of request-URI, as defined by RFC 2965.'),
               ('cookielib.request_port', ['request'], ''),
               ('cookielib.uppercase_escaped_char', ['match'], ''),
               ('cookielib.escape_path',
                ['path'],
                'Escape any invalid characters in HTTP URL, and uppercase all escapes.'),
               ('cookielib.reach',
                ['h'],
                'Return reach of host h, as defined by RFC 2965, section 1.\n\n    The reach R of a host name H is defined as follows:\n\n       *  If\n\n          -  H is the host domain name of a host; and,\n\n          -  H has the form A.B; and\n\n          -  A has no embedded (that is, interior) dots; and\n\n          -  B has at least one embedded dot, or B is the string "local".\n             then the reach of H is .B.\n\n       *  Otherwise, the reach of H is H.\n\n    >>> reach("www.acme.com")\n    \'.acme.com\'\n    >>> reach("acme.com")\n    \'acme.com\'\n    >>> reach("acme.local")\n    \'.local\'\n\n    '),
               ('cookielib.is_third_party',
                ['request'],
                '\n\n    RFC 2965, section 3.3.6:\n\n        An unverifiable transaction is to a third-party host if its request-\n        host U does not domain-match the reach R of the request-host O in the\n        origin transaction.\n\n    '),
               ('cookielib.vals_sorted_by_key', ['adict'], ''),
               ('cookielib.deepvalues',
                ['mapping'],
                'Iterates over nested mapping, depth-first, in sorted order by key.'),
               ('Cookie._quote',
                ['str', 'LegalChars=_LegalChars', 'idmap=_idmap', 'translate=string.translate'],
                ''),
               ('Cookie._unquote', ['str'], ''),
               ('Cookie._getdate',
                ['future=0', 'weekdayname=_weekdayname', 'monthname=_monthname'],
                ''),
               ('Cookie._test', [], ''),
               ('copy.copy',
                ['x'],
                "Shallow copy operation on arbitrary Python objects.\n\n    See the module's __doc__ string for more info.\n    "),
               ('copy._copy_immutable', ['x'], ''),
               ('copy._copy_with_constructor', ['x'], ''),
               ('copy._copy_with_copy_method', ['x'], ''),
               ('copy._copy_inst', ['x'], ''),
               ('copy.deepcopy',
                ['x', 'memo=None', '_nil=[]'],
                "Deep copy operation on arbitrary Python objects.\n\n    See the module's __doc__ string for more info.\n    "),
               ('copy._deepcopy_atomic', ['x', 'memo'], ''),
               ('copy._deepcopy_list', ['x', 'memo'], ''),
               ('copy._deepcopy_tuple', ['x', 'memo'], ''),
               ('copy._deepcopy_dict', ['x', 'memo'], ''),
               ('copy._deepcopy_method', ['x', 'memo'], ''),
               ('copy._keep_alive',
                ['x', 'memo'],
                'Keeps a reference to the object x in the memo.\n\n    Because we remember objects by their id, we have\n    to assure that possibly temporary objects are kept\n    alive by referencing them.\n    We store a reference at the id of the memo, which should\n    normally not be used unless someone tries to deepcopy\n    the memo itself...\n    '),
               ('copy._deepcopy_inst', ['x', 'memo'], ''),
               ('copy._reconstruct', ['x', 'info', 'deep', 'memo=None'], ''),
               ('copy._test', [], ''),
               ('copy_reg.pickle', ['ob_type', 'pickle_function', 'constructor_ob=None'], ''),
               ('copy_reg.constructor', ['object'], ''),
               ('copy_reg.pickle_complex', ['c'], ''),
               ('copy_reg._reconstructor', ['cls', 'base', 'state'], ''),
               ('copy_reg._reduce_ex', ['self', 'proto'], ''),
               ('copy_reg.__newobj__', ['cls', '*args'], ''),
               ('copy_reg._slotnames',
                ['cls'],
                "Return a list of slot names for a given class.\n\n    This needs to find slots defined by the class and its bases, so we\n    can't simply return the __slots__ attribute.  We must walk down\n    the Method Resolution Order and concatenate the __slots__ of each\n    class found there.  (This assumes classes don't modify their\n    __slots__ attribute to misrepresent their slots after the class is\n    defined.)\n    "),
               ('copy_reg.add_extension',
                ['module', 'name', 'code'],
                'Register an extension code.'),
               ('copy_reg.remove_extension',
                ['module', 'name', 'code'],
                'Unregister an extension code.  For testing only.'),
               ('copy_reg.clear_extension_cache', [], ''),
               ('cProfile.run',
                ['statement', 'filename=None', 'sort=-1'],
                'Run statement under profiler optionally saving results in filename\n\n    This function takes a single argument that can be passed to the\n    "exec" statement, and an optional file name.  In all cases this\n    routine attempts to "exec" its first argument and gather profiling\n    statistics from the execution. If no file name is present, then this\n    function automatically prints a simple profiling report, sorted by the\n    standard name string (file/line/function-name) that is presented in\n    each line.\n    '),
               ('cProfile.runctx',
                ['statement', 'globals', 'locals', 'filename=None', 'sort=-1'],
                'Run statement under profiler, supplying your own globals and locals,\n    optionally saving results in filename.\n\n    statement and filename have the same semantics as profile.run\n    '),
               ('cProfile.help', [], ''),
               ('cProfile.label', ['code'], ''),
               ('cProfile.main', [], ''),
               ('dbhash.open', ['file', "flag='r'", 'mode=438'], ''),
               ('decimal.setcontext', ['context'], "Set this thread's context to context."),
               ('decimal.getcontext',
                [],
                "Returns this thread's context.\n\n        If this thread does not yet have a context, returns\n        a new context and sets this thread's context.\n        New contexts are copies of DefaultContext.\n        "),
               ('decimal.getcontext',
                ['_local=local'],
                "Returns this thread's context.\n\n        If this thread does not yet have a context, returns\n        a new context and sets this thread's context.\n        New contexts are copies of DefaultContext.\n        "),
               ('decimal.setcontext',
                ['context', '_local=local'],
                "Set this thread's context to context."),
               ('decimal.localcontext',
                ['ctx=None'],
                'Return a context manager for a copy of the supplied context\n\n    Uses a copy of the current context if no context is specified\n    The returned context manager creates a local decimal context\n    in a with statement:\n        def sin(x):\n             with localcontext() as ctx:\n                 ctx.prec += 2\n                 # Rest of sin calculation algorithm\n                 # uses a precision 2 greater than normal\n             return +s  # Convert result to normal precision\n\n         def sin(x):\n             with localcontext(ExtendedContext):\n                 # Rest of sin calculation algorithm\n                 # uses the Extended Context from the\n                 # General Decimal Arithmetic Specification\n             return +s  # Convert result to normal context\n\n    >>> setcontext(DefaultContext)\n    >>> print getcontext().prec\n    28\n    >>> with localcontext():\n    ...     ctx = getcontext()\n    ...     ctx.prec += 2\n    ...     print ctx.prec\n    ...\n    30\n    >>> with localcontext(ExtendedContext):\n    ...     print getcontext().prec\n    ...\n    9\n    >>> print getcontext().prec\n    28\n    '),
               ('decimal._dec_from_triple',
                ['sign', 'coefficient', 'exponent', 'special=False'],
                'Create a decimal instance directly, without any validation,\n    normalization (e.g. removal of leading zeros) or argument\n    conversion.\n\n    This function is for *internal use only*.\n    '),
               ('decimal._normalize',
                ['op1', 'op2', 'prec=0'],
                'Normalizes op1, op2 to have the same exp and length of coefficient.\n\n    Done during addition.\n    '),
               ('decimal._nbits',
                ['n',
                 "correction={0: 4, 1: 3, 2: 2, 3: 2, 4: 1, 5: 1, 6: 1, 7: 1, 8: 0, 9: 0, 'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0}"],
                'Number of bits in binary representation of the positive integer n,\n    or 0 if n == 0.\n    '),
               ('decimal._sqrt_nearest',
                ['n', 'a'],
                'Closest integer to the square root of the positive integer n.  a is\n    an initial approximation to the square root.  Any positive integer\n    will do for a, but the closer a is to the square root of n the\n    faster convergence will be.\n\n    '),
               ('decimal._rshift_nearest',
                ['x', 'shift'],
                'Given an integer x and a nonnegative integer shift, return closest\n    integer to x / 2**shift; use round-to-even in case of a tie.\n\n    '),
               ('decimal._div_nearest',
                ['a', 'b'],
                'Closest integer to a/b, a and b positive integers; rounds to even\n    in the case of a tie.\n\n    '),
               ('decimal._ilog',
                ['x', 'M', 'L=8'],
                'Integer approximation to M*log(x/M), with absolute error boundable\n    in terms only of x/M.\n\n    Given positive integers x and M, return an integer approximation to\n    M * log(x/M).  For L = 8 and 0.1 <= x/M <= 10 the difference\n    between the approximation and the exact result is at most 22.  For\n    L = 8 and 1.0 <= x/M <= 10.0 the difference is at most 15.  In\n    both cases these are upper bounds on the error; it will usually be\n    much smaller.'),
               ('decimal._dlog10',
                ['c', 'e', 'p'],
                'Given integers c, e and p with c > 0, p >= 0, compute an integer\n    approximation to 10**p * log10(c*10**e), with an absolute error of\n    at most 1.  Assumes that c*10**e is not exactly 1.'),
               ('decimal._dlog',
                ['c', 'e', 'p'],
                'Given integers c, e and p with c > 0, compute an integer\n    approximation to 10**p * log(c*10**e), with an absolute error of\n    at most 1.  Assumes that c*10**e is not exactly 1.'),
               ('decimal._iexp',
                ['x', 'M', 'L=8'],
                'Given integers x and M, M > 0, such that x/M is small in absolute\n    value, compute an integer approximation to M*exp(x/M).  For 0 <=\n    x/M <= 2.4, the absolute error in the result is bounded by 60 (and\n    is usually much smaller).'),
               ('decimal._dexp',
                ['c', 'e', 'p'],
                'Compute an approximation to exp(c*10**e), with p decimal places of\n    precision.\n\n    Returns integers d, f such that:\n\n      10**(p-1) <= d <= 10**p, and\n      (d-1)*10**f < exp(c*10**e) < (d+1)*10**f\n\n    In other words, d*10**f is an approximation to exp(c*10**e) with p\n    digits of precision, and with an error in d of at most 1.  This is\n    almost, but not quite, the same as the error being < 1ulp: when d\n    = 10**(p-1) the error could be up to 10 ulp.'),
               ('decimal._dpower',
                ['xc', 'xe', 'yc', 'ye', 'p'],
                'Given integers xc, xe, yc and ye representing Decimals x = xc*10**xe and\n    y = yc*10**ye, compute x**y.  Returns a pair of integers (c, e) such that:\n\n      10**(p-1) <= c <= 10**p, and\n      (c-1)*10**e < x**y < (c+1)*10**e\n\n    in other words, c*10**e is an approximation to x**y with p digits\n    of precision, and with an error in c of at most 1.  (This is\n    almost, but not quite, the same as the error being < 1ulp: when c\n    == 10**(p-1) we can only guarantee error < 10ulp.)\n\n    We assume that: x is positive and not equal to 1, and y is nonzero.\n    '),
               ('decimal._log10_lb',
                ['c',
                 'correction={1: 100, 2: 70, 3: 53, 4: 40, 5: 31, 6: 23, 7: 16, 8: 10, 9: 5}'],
                'Compute a lower bound for 100*log10(c) for a positive integer c.'),
               ('decimal._convert_other',
                ['other', 'raiseit=False', 'allow_float=False'],
                "Convert other to Decimal.\n\n    Verifies that it's ok to use in an implicit construction.\n    If allow_float is true, allow conversion from float;  this\n    is used in the comparison methods (__eq__ and friends).\n\n    "),
               ('decimal._parse_format_specifier',
                ['format_spec', '_localeconv=None'],
                "Parse and validate a format specifier.\n\n    Turns a standard numeric format specifier into a dict, with the\n    following entries:\n\n      fill: fill character to pad field to minimum width\n      align: alignment type, either '<', '>', '=' or '^'\n      sign: either '+', '-' or ' '\n      minimumwidth: nonnegative integer giving minimum width\n      zeropad: boolean, indicating whether to pad with zeros\n      thousands_sep: string to use as thousands separator, or ''\n      grouping: grouping for thousands separators, in format\n        used by localeconv\n      decimal_point: string to use for decimal point\n      precision: nonnegative integer giving precision, or None\n      type: one of the characters 'eEfFgG%', or None\n      unicode: boolean (always True for Python 3.x)\n\n    "),
               ('decimal._format_align',
                ['sign', 'body', 'spec'],
                "Given an unpadded, non-aligned numeric string 'body' and sign\n    string 'sign', add padding and aligment conforming to the given\n    format specifier dictionary 'spec' (as produced by\n    parse_format_specifier).\n\n    Also converts result to unicode if necessary.\n\n    "),
               ('decimal._group_lengths',
                ['grouping'],
                'Convert a localeconv-style grouping into a (possibly infinite)\n    iterable of integers representing group lengths.\n\n    '),
               ('decimal._insert_thousands_sep',
                ['digits', 'spec', 'min_width=1'],
                "Insert thousands separators into a digit string.\n\n    spec is a dictionary whose keys should include 'thousands_sep' and\n    'grouping'; typically it's the result of parsing the format\n    specifier using _parse_format_specifier.\n\n    The min_width keyword argument gives the minimum length of the\n    result, which will be padded on the left with zeros if necessary.\n\n    If necessary, the zero padding adds an extra '0' on the left to\n    avoid a leading thousands separator.  For example, inserting\n    commas every three digits in '123456', with min_width=8, gives\n    '0,123,456', even though that has length 9.\n\n    "),
               ('decimal._format_sign', ['is_negative', 'spec'], 'Determine sign character.'),
               ('decimal._format_number',
                ['is_negative', 'intpart', 'fracpart', 'exp', 'spec'],
                "Format a number, given the following data:\n\n    is_negative: true if the number is negative, else false\n    intpart: string of digits that must appear before the decimal point\n    fracpart: string of digits that must come after the point\n    exp: exponent, as an integer\n    spec: dictionary resulting from parsing the format specifier\n\n    This function uses the information in spec to:\n      insert separators (decimal separator and thousands separators)\n      format the sign\n      format the exponent\n      add trailing '%' for the '%' type\n      zero-pad if necessary\n      fill and align if necessary\n    "),
               ('difflib._calculate_ratio', ['matches', 'length'], ''),
               ('difflib.get_close_matches',
                ['word', 'possibilities', 'n=3', 'cutoff=0.6'],
                'Use SequenceMatcher to return list of the best "good enough" matches.\n\n    word is a sequence for which close matches are desired (typically a\n    string).\n\n    possibilities is a list of sequences against which to match word\n    (typically a list of strings).\n\n    Optional arg n (default 3) is the maximum number of close matches to\n    return.  n must be > 0.\n\n    Optional arg cutoff (default 0.6) is a float in [0, 1].  Possibilities\n    that don\'t score at least that similar to word are ignored.\n\n    The best (no more than n) matches among the possibilities are returned\n    in a list, sorted by similarity score, most similar first.\n\n    >>> get_close_matches("appel", ["ape", "apple", "peach", "puppy"])\n    [\'apple\', \'ape\']\n    >>> import keyword as _keyword\n    >>> get_close_matches("wheel", _keyword.kwlist)\n    [\'while\']\n    >>> get_close_matches("apple", _keyword.kwlist)\n    []\n    >>> get_close_matches("accept", _keyword.kwlist)\n    [\'except\']\n    '),
               ('difflib._count_leading',
                ['line', 'ch'],
                "\n    Return number of `ch` characters at the start of `line`.\n\n    Example:\n\n    >>> _count_leading('   abc', ' ')\n    3\n    "),
               ('difflib.IS_LINE_JUNK',
                ['line', "pat=re.compile('\\\\s*#?\\\\s*$').match"],
                "\n    Return 1 for ignorable line: iff `line` is blank or contains a single '#'.\n\n    Examples:\n\n    >>> IS_LINE_JUNK('\\n')\n    True\n    >>> IS_LINE_JUNK('  #   \\n')\n    True\n    >>> IS_LINE_JUNK('hello\\n')\n    False\n    "),
               ('difflib.IS_CHARACTER_JUNK',
                ['ch', "ws=' \\t'"],
                "\n    Return 1 for ignorable character: iff `ch` is a space or tab.\n\n    Examples:\n\n    >>> IS_CHARACTER_JUNK(' ')\n    True\n    >>> IS_CHARACTER_JUNK('\\t')\n    True\n    >>> IS_CHARACTER_JUNK('\\n')\n    False\n    >>> IS_CHARACTER_JUNK('x')\n    False\n    "),
               ('difflib.unified_diff',
                ['a',
                 'b',
                 "fromfile=''",
                 "tofile=''",
                 "fromfiledate=''",
                 "tofiledate=''",
                 'n=3',
                 "lineterm='\\n'"],
                '\n    Compare two sequences of lines; generate the delta as a unified diff.\n\n    Unified diffs are a compact way of showing line changes and a few\n    lines of context.  The number of context lines is set by \'n\' which\n    defaults to three.\n\n    By default, the diff control lines (those with ---, +++, or @@) are\n    created with a trailing newline.  This is helpful so that inputs\n    created from file.readlines() result in diffs that are suitable for\n    file.writelines() since both the inputs and outputs have trailing\n    newlines.\n\n    For inputs that do not have trailing newlines, set the lineterm\n    argument to "" so that the output will be uniformly newline free.\n\n    The unidiff format normally has a header for filenames and modification\n    times.  Any or all of these may be specified using strings for\n    \'fromfile\', \'tofile\', \'fromfiledate\', and \'tofiledate\'.\n    The modification times are normally expressed in the ISO 8601 format.\n\n    Example:\n\n    >>> for line in unified_diff(\'one two three four\'.split(),\n    ...             \'zero one tree four\'.split(), \'Original\', \'Current\',\n    ...             \'2005-01-26 23:30:50\', \'2010-04-02 10:20:52\',\n    ...             lineterm=\'\'):\n    ...     print line                  # doctest: +NORMALIZE_WHITESPACE\n    --- Original        2005-01-26 23:30:50\n    +++ Current         2010-04-02 10:20:52\n    @@ -1,4 +1,4 @@\n    +zero\n     one\n    -two\n    -three\n    +tree\n     four\n    '),
               ('difflib.context_diff',
                ['a',
                 'b',
                 "fromfile=''",
                 "tofile=''",
                 "fromfiledate=''",
                 "tofiledate=''",
                 'n=3',
                 "lineterm='\\n'"],
                '\n    Compare two sequences of lines; generate the delta as a context diff.\n\n    Context diffs are a compact way of showing line changes and a few\n    lines of context.  The number of context lines is set by \'n\' which\n    defaults to three.\n\n    By default, the diff control lines (those with *** or ---) are\n    created with a trailing newline.  This is helpful so that inputs\n    created from file.readlines() result in diffs that are suitable for\n    file.writelines() since both the inputs and outputs have trailing\n    newlines.\n\n    For inputs that do not have trailing newlines, set the lineterm\n    argument to "" so that the output will be uniformly newline free.\n\n    The context diff format normally has a header for filenames and\n    modification times.  Any or all of these may be specified using\n    strings for \'fromfile\', \'tofile\', \'fromfiledate\', and \'tofiledate\'.\n    The modification times are normally expressed in the ISO 8601 format.\n    If not specified, the strings default to blanks.\n\n    Example:\n\n    >>> print \'\'.join(context_diff(\'one\\ntwo\\nthree\\nfour\\n\'.splitlines(1),\n    ...       \'zero\\none\\ntree\\nfour\\n\'.splitlines(1), \'Original\', \'Current\')),\n    *** Original\n    --- Current\n    ***************\n    *** 1,4 ****\n      one\n    ! two\n    ! three\n      four\n    --- 1,4 ----\n    + zero\n      one\n    ! tree\n      four\n    '),
               ('difflib.ndiff',
                ['a', 'b', 'linejunk=None', 'charjunk=IS_CHARACTER_JUNK'],
                '\n    Compare `a` and `b` (lists of strings); return a `Differ`-style delta.\n\n    Optional keyword parameters `linejunk` and `charjunk` are for filter\n    functions (or None):\n\n    - linejunk: A function that should accept a single string argument, and\n      return true iff the string is junk.  The default is None, and is\n      recommended; as of Python 2.3, an adaptive notion of "noise" lines is\n      used that does a good job on its own.\n\n    - charjunk: A function that should accept a string of length 1. The\n      default is module-level function IS_CHARACTER_JUNK, which filters out\n      whitespace characters (a blank or tab; note: bad idea to include newline\n      in this!).\n\n    Tools/scripts/ndiff.py is a command-line front-end to this function.\n\n    Example:\n\n    >>> diff = ndiff(\'one\\ntwo\\nthree\\n\'.splitlines(1),\n    ...              \'ore\\ntree\\nemu\\n\'.splitlines(1))\n    >>> print \'\'.join(diff),\n    - one\n    ?  ^\n    + ore\n    ?  ^\n    - two\n    - three\n    ?  -\n    + tree\n    + emu\n    '),
               ('difflib._mdiff',
                ['fromlines',
                 'tolines',
                 'context=None',
                 'linejunk=None',
                 'charjunk=IS_CHARACTER_JUNK'],
                'Returns generator yielding marked up from/to side by side differences.\n\n    Arguments:\n    fromlines -- list of text lines to compared to tolines\n    tolines -- list of text lines to be compared to fromlines\n    context -- number of context lines to display on each side of difference,\n               if None, all from/to text lines will be generated.\n    linejunk -- passed on to ndiff (see ndiff documentation)\n    charjunk -- passed on to ndiff (see ndiff documentation)\n\n    This function returns an interator which returns a tuple:\n    (from line tuple, to line tuple, boolean flag)\n\n    from/to line tuple -- (line num, line text)\n        line num -- integer or None (to indicate a context separation)\n        line text -- original line text with following markers inserted:\n            \'\\0+\' -- marks start of added text\n            \'\\0-\' -- marks start of deleted text\n            \'\\0^\' -- marks start of changed text\n            \'\\1\' -- marks end of added/deleted/changed text\n\n    boolean flag -- None indicates context separation, True indicates\n        either "from" or "to" line contains a change, otherwise False.\n\n    This function/iterator was originally developed to generate side by side\n    file difference for making HTML pages (see HtmlDiff class for example\n    usage).\n\n    Note, this function utilizes the ndiff function to generate the side by\n    side difference markup.  Optional ndiff arguments may be passed to this\n    function and they in turn will be passed to ndiff.\n    '),
               ('difflib.restore',
                ['delta', 'which'],
                "\n    Generate one of the two sequences that generated a delta.\n\n    Given a `delta` produced by `Differ.compare()` or `ndiff()`, extract\n    lines originating from file 1 or 2 (parameter `which`), stripping off line\n    prefixes.\n\n    Examples:\n\n    >>> diff = ndiff('one\\ntwo\\nthree\\n'.splitlines(1),\n    ...              'ore\\ntree\\nemu\\n'.splitlines(1))\n    >>> diff = list(diff)\n    >>> print ''.join(restore(diff, 1)),\n    one\n    two\n    three\n    >>> print ''.join(restore(diff, 2)),\n    ore\n    tree\n    emu\n    "),
               ('difflib._test', [], ''),
               ('dircache.reset', [], 'Reset the cache completely.'),
               ('dircache.listdir', ['path'], 'List directory contents, using cache.'),
               ('dircache.annotate', ['head', 'list'], "Add '/' suffixes to directories."),
               ('dis.dis',
                ['x=None'],
                'Disassemble classes, methods, functions, or code.\n\n    With no argument, disassemble the last traceback.\n\n    '),
               ('dis.distb', ['tb=None'], 'Disassemble a traceback (default: last traceback).'),
               ('dis.disassemble', ['co', 'lasti=-1'], 'Disassemble a code object.'),
               ('dis.disassemble_string',
                ['code', 'lasti=-1', 'varnames=None', 'names=None', 'constants=None'],
                ''),
               ('dis.findlabels',
                ['code'],
                'Detect all offsets in a byte code which are jump targets.\n\n    Return the list of offsets.\n\n    '),
               ('dis.findlinestarts',
                ['code'],
                'Find the offsets in a byte code which are start of lines in the source.\n\n    Generate pairs (offset, lineno) as described in Python/compile.c.\n\n    '),
               ('dis._test', [], 'Simple test program to disassemble a file.'),
               ('doctest.register_optionflag', ['name'], ''),
               ('doctest._extract_future_flags',
                ['globs'],
                '\n    Return the compiler-flags associated with the future features that\n    have been imported into the given namespace (globs).\n    '),
               ('doctest._normalize_module',
                ['module', 'depth=2'],
                '\n    Return the module specified by `module`.  In particular:\n      - If `module` is a module, then return module.\n      - If `module` is a string, then import and return the\n        module with that name.\n      - If `module` is None, then return the calling module.\n        The calling module is assumed to be the module of\n        the stack frame at the given depth in the call stack.\n    '),
               ('doctest._load_testfile', ['filename', 'package', 'module_relative'], ''),
               ('doctest._indent',
                ['s', 'indent=4'],
                '\n    Add the given number of space characters to the beginning of\n    every non-blank line in `s`, and return the result.\n    If the string `s` is Unicode, it is encoded using the stdout\n    encoding and the `backslashreplace` error handler.\n    '),
               ('doctest._exception_traceback',
                ['exc_info'],
                '\n    Return a string containing a traceback message for the given\n    exc_info tuple (as returned by sys.exc_info()).\n    '),
               ('doctest._ellipsis_match',
                ['want', 'got'],
                "\n    Essentially the only subtle case:\n    >>> _ellipsis_match('aa...aa', 'aaa')\n    False\n    "),
               ('doctest._comment_line', ['line'], 'Return a commented form of the given line'),
               ('doctest._module_relative_path', ['module', 'path'], ''),
               ('doctest.testmod',
                ['m=None',
                 'name=None',
                 'globs=None',
                 'verbose=None',
                 'report=True',
                 'optionflags=0',
                 'extraglobs=None',
                 'raise_on_error=False',
                 'exclude_empty=False'],
                'm=None, name=None, globs=None, verbose=None, report=True,\n       optionflags=0, extraglobs=None, raise_on_error=False,\n       exclude_empty=False\n\n    Test examples in docstrings in functions and classes reachable\n    from module m (or the current module if m is not supplied), starting\n    with m.__doc__.\n\n    Also test examples reachable from dict m.__test__ if it exists and is\n    not None.  m.__test__ maps names to functions, classes and strings;\n    function and class docstrings are tested even if the name is private;\n    strings are tested directly, as if they were docstrings.\n\n    Return (#failures, #tests).\n\n    See help(doctest) for an overview.\n\n    Optional keyword arg "name" gives the name of the module; by default\n    use m.__name__.\n\n    Optional keyword arg "globs" gives a dict to be used as the globals\n    when executing examples; by default, use m.__dict__.  A copy of this\n    dict is actually used for each docstring, so that each docstring\'s\n    examples start with a clean slate.\n\n    Optional keyword arg "extraglobs" gives a dictionary that should be\n    merged into the globals that are used to execute examples.  By\n    default, no extra globals are used.  This is new in 2.4.\n\n    Optional keyword arg "verbose" prints lots of stuff if true, prints\n    only failures if false; by default, it\'s true iff "-v" is in sys.argv.\n\n    Optional keyword arg "report" prints a summary at the end when true,\n    else prints nothing at the end.  In verbose mode, the summary is\n    detailed, else very brief (in fact, empty if all tests passed).\n\n    Optional keyword arg "optionflags" or\'s together module constants,\n    and defaults to 0.  This is new in 2.3.  Possible values (see the\n    docs for details):\n\n        DONT_ACCEPT_TRUE_FOR_1\n        DONT_ACCEPT_BLANKLINE\n        NORMALIZE_WHITESPACE\n        ELLIPSIS\n        SKIP\n        IGNORE_EXCEPTION_DETAIL\n        REPORT_UDIFF\n        REPORT_CDIFF\n        REPORT_NDIFF\n        REPORT_ONLY_FIRST_FAILURE\n\n    Optional keyword arg "raise_on_error" raises an exception on the\n    first unexpected exception or failure. This allows failures to be\n    post-mortem debugged.\n\n    Advanced tomfoolery:  testmod runs methods of a local instance of\n    class doctest.Tester, then merges the results into (or creates)\n    global Tester instance doctest.master.  Methods of doctest.master\n    can be called directly too, if you want to do something unusual.\n    Passing report=0 to testmod is especially useful then, to delay\n    displaying a summary.  Invoke doctest.master.summarize(verbose)\n    when you\'re done fiddling.\n    '),
               ('doctest.testfile',
                ['filename',
                 'module_relative=True',
                 'name=None',
                 'package=None',
                 'globs=None',
                 'verbose=None',
                 'report=True',
                 'optionflags=0',
                 'extraglobs=None',
                 'raise_on_error=False',
                 'parser=DocTestParser()',
                 'encoding=None'],
                '\n    Test examples in the given file.  Return (#failures, #tests).\n\n    Optional keyword arg "module_relative" specifies how filenames\n    should be interpreted:\n\n      - If "module_relative" is True (the default), then "filename"\n         specifies a module-relative path.  By default, this path is\n         relative to the calling module\'s directory; but if the\n         "package" argument is specified, then it is relative to that\n         package.  To ensure os-independence, "filename" should use\n         "/" characters to separate path segments, and should not\n         be an absolute path (i.e., it may not begin with "/").\n\n      - If "module_relative" is False, then "filename" specifies an\n        os-specific path.  The path may be absolute or relative (to\n        the current working directory).\n\n    Optional keyword arg "name" gives the name of the test; by default\n    use the file\'s basename.\n\n    Optional keyword argument "package" is a Python package or the\n    name of a Python package whose directory should be used as the\n    base directory for a module relative filename.  If no package is\n    specified, then the calling module\'s directory is used as the base\n    directory for module relative filenames.  It is an error to\n    specify "package" if "module_relative" is False.\n\n    Optional keyword arg "globs" gives a dict to be used as the globals\n    when executing examples; by default, use {}.  A copy of this dict\n    is actually used for each docstring, so that each docstring\'s\n    examples start with a clean slate.\n\n    Optional keyword arg "extraglobs" gives a dictionary that should be\n    merged into the globals that are used to execute examples.  By\n    default, no extra globals are used.\n\n    Optional keyword arg "verbose" prints lots of stuff if true, prints\n    only failures if false; by default, it\'s true iff "-v" is in sys.argv.\n\n    Optional keyword arg "report" prints a summary at the end when true,\n    else prints nothing at the end.  In verbose mode, the summary is\n    detailed, else very brief (in fact, empty if all tests passed).\n\n    Optional keyword arg "optionflags" or\'s together module constants,\n    and defaults to 0.  Possible values (see the docs for details):\n\n        DONT_ACCEPT_TRUE_FOR_1\n        DONT_ACCEPT_BLANKLINE\n        NORMALIZE_WHITESPACE\n        ELLIPSIS\n        SKIP\n        IGNORE_EXCEPTION_DETAIL\n        REPORT_UDIFF\n        REPORT_CDIFF\n        REPORT_NDIFF\n        REPORT_ONLY_FIRST_FAILURE\n\n    Optional keyword arg "raise_on_error" raises an exception on the\n    first unexpected exception or failure. This allows failures to be\n    post-mortem debugged.\n\n    Optional keyword arg "parser" specifies a DocTestParser (or\n    subclass) that should be used to extract tests from the files.\n\n    Optional keyword arg "encoding" specifies an encoding that should\n    be used to convert the file to unicode.\n\n    Advanced tomfoolery:  testmod runs methods of a local instance of\n    class doctest.Tester, then merges the results into (or creates)\n    global Tester instance doctest.master.  Methods of doctest.master\n    can be called directly too, if you want to do something unusual.\n    Passing report=0 to testmod is especially useful then, to delay\n    displaying a summary.  Invoke doctest.master.summarize(verbose)\n    when you\'re done fiddling.\n    '),
               ('doctest.run_docstring_examples',
                ['f',
                 'globs',
                 'verbose=False',
                 "name='NoName'",
                 'compileflags=None',
                 'optionflags=0'],
                "\n    Test examples in the given object's docstring (`f`), using `globs`\n    as globals.  Optional argument `name` is used in failure messages.\n    If the optional argument `verbose` is true, then generate output\n    even if there are no failures.\n\n    `compileflags` gives the set of flags that should be used by the\n    Python compiler when running the examples.  If not specified, then\n    it will default to the set of future-import flags that apply to\n    `globs`.\n\n    Optional keyword arg `optionflags` specifies options for the\n    testing and output.  See the documentation for `testmod` for more\n    information.\n    "),
               ('doctest.set_unittest_reportflags',
                ['flags'],
                "Sets the unittest option flags.\n\n    The old flag is returned so that a runner could restore the old\n    value if it wished to:\n\n      >>> import doctest\n      >>> old = doctest._unittest_reportflags\n      >>> doctest.set_unittest_reportflags(REPORT_NDIFF |\n      ...                          REPORT_ONLY_FIRST_FAILURE) == old\n      True\n\n      >>> doctest._unittest_reportflags == (REPORT_NDIFF |\n      ...                                   REPORT_ONLY_FIRST_FAILURE)\n      True\n\n    Only reporting flags can be set:\n\n      >>> doctest.set_unittest_reportflags(ELLIPSIS)\n      Traceback (most recent call last):\n      ...\n      ValueError: ('Only reporting flags allowed', 8)\n\n      >>> doctest.set_unittest_reportflags(old) == (REPORT_NDIFF |\n      ...                                   REPORT_ONLY_FIRST_FAILURE)\n      True\n    "),
               ('doctest.DocTestSuite',
                ['module=None',
                 'globs=None',
                 'extraglobs=None',
                 'test_finder=None',
                 '**options'],
                '\n    Convert doctest tests for a module to a unittest test suite.\n\n    This converts each documentation string in a module that\n    contains doctest tests to a unittest test case.  If any of the\n    tests in a doc string fail, then the test case fails.  An exception\n    is raised showing the name of the file containing the test and a\n    (sometimes approximate) line number.\n\n    The `module` argument provides the module to be tested.  The argument\n    can be either a module or a module name.\n\n    If no argument is given, the calling module is used.\n\n    A number of options may be provided as keyword arguments:\n\n    setUp\n      A set-up function.  This is called before running the\n      tests in each file. The setUp function will be passed a DocTest\n      object.  The setUp function can access the test globals as the\n      globs attribute of the test passed.\n\n    tearDown\n      A tear-down function.  This is called after running the\n      tests in each file.  The tearDown function will be passed a DocTest\n      object.  The tearDown function can access the test globals as the\n      globs attribute of the test passed.\n\n    globs\n      A dictionary containing initial global variables for the tests.\n\n    optionflags\n       A set of doctest option flags expressed as an integer.\n    '),
               ('doctest.DocFileTest',
                ['path',
                 'module_relative=True',
                 'package=None',
                 'globs=None',
                 'parser=DocTestParser()',
                 'encoding=None',
                 '**options'],
                ''),
               ('doctest.DocFileSuite',
                ['*paths', '**kw'],
                'A unittest suite for one or more doctest files.\n\n    The path to each doctest file is given as a string; the\n    interpretation of that string depends on the keyword argument\n    "module_relative".\n\n    A number of options may be provided as keyword arguments:\n\n    module_relative\n      If "module_relative" is True, then the given file paths are\n      interpreted as os-independent module-relative paths.  By\n      default, these paths are relative to the calling module\'s\n      directory; but if the "package" argument is specified, then\n      they are relative to that package.  To ensure os-independence,\n      "filename" should use "/" characters to separate path\n      segments, and may not be an absolute path (i.e., it may not\n      begin with "/").\n\n      If "module_relative" is False, then the given file paths are\n      interpreted as os-specific paths.  These paths may be absolute\n      or relative (to the current working directory).\n\n    package\n      A Python package or the name of a Python package whose directory\n      should be used as the base directory for module relative paths.\n      If "package" is not specified, then the calling module\'s\n      directory is used as the base directory for module relative\n      filenames.  It is an error to specify "package" if\n      "module_relative" is False.\n\n    setUp\n      A set-up function.  This is called before running the\n      tests in each file. The setUp function will be passed a DocTest\n      object.  The setUp function can access the test globals as the\n      globs attribute of the test passed.\n\n    tearDown\n      A tear-down function.  This is called after running the\n      tests in each file.  The tearDown function will be passed a DocTest\n      object.  The tearDown function can access the test globals as the\n      globs attribute of the test passed.\n\n    globs\n      A dictionary containing initial global variables for the tests.\n\n    optionflags\n      A set of doctest option flags expressed as an integer.\n\n    parser\n      A DocTestParser (or subclass) that should be used to extract\n      tests from the files.\n\n    encoding\n      An encoding that will be used to convert the files to unicode.\n    '),
               ('doctest.script_from_examples',
                ['s'],
                "Extract script from text with examples.\n\n       Converts text with examples to a Python script.  Example input is\n       converted to regular code.  Example output and all other words\n       are converted to comments:\n\n       >>> text = '''\n       ...       Here are examples of simple math.\n       ...\n       ...           Python has super accurate integer addition\n       ...\n       ...           >>> 2 + 2\n       ...           5\n       ...\n       ...           And very friendly error messages:\n       ...\n       ...           >>> 1/0\n       ...           To Infinity\n       ...           And\n       ...           Beyond\n       ...\n       ...           You can use logic if you want:\n       ...\n       ...           >>> if 0:\n       ...           ...    blah\n       ...           ...    blah\n       ...           ...\n       ...\n       ...           Ho hum\n       ...           '''\n\n       >>> print script_from_examples(text)\n       # Here are examples of simple math.\n       #\n       #     Python has super accurate integer addition\n       #\n       2 + 2\n       # Expected:\n       ## 5\n       #\n       #     And very friendly error messages:\n       #\n       1/0\n       # Expected:\n       ## To Infinity\n       ## And\n       ## Beyond\n       #\n       #     You can use logic if you want:\n       #\n       if 0:\n          blah\n          blah\n       #\n       #     Ho hum\n       <BLANKLINE>\n       "),
               ('doctest.testsource',
                ['module', 'name'],
                'Extract the test sources from a doctest docstring as a script.\n\n    Provide the module (or dotted name of the module) containing the\n    test to be debugged and the name (within the module) of the object\n    with the doc string with tests to be debugged.\n    '),
               ('doctest.debug_src',
                ['src', 'pm=False', 'globs=None'],
                "Debug a single doctest docstring, in argument `src`'"),
               ('doctest.debug_script',
                ['src', 'pm=False', 'globs=None'],
                'Debug a test script.  `src` is the script, as a string.'),
               ('doctest.debug',
                ['module', 'name', 'pm=False'],
                'Debug a single doctest docstring.\n\n    Provide the module (or dotted name of the module) containing the\n    test to be debugged and the name (within the module) of the object\n    with the docstring with tests to be debugged.\n    '),
               ('doctest._test', [], ''),
               ('dumbdbm.open',
                ['file', 'flag=None', 'mode=438'],
                'Open the database file, filename, and return corresponding object.\n\n    The flag argument, used to control how the database is opened in the\n    other DBM implementations, is ignored in the dumbdbm module; the\n    database is always opened for update, and will be created if it does\n    not exist.\n\n    The optional mode argument is the UNIX mode of the file, used only when\n    the database has to be created.  It defaults to octal code 0666 (and\n    will be modified by the prevailing umask).\n\n    '),
               ('dummy_thread.start_new_thread',
                ['function', 'args', 'kwargs={}'],
                'Dummy implementation of thread.start_new_thread().\n\n    Compatibility is maintained by making sure that ``args`` is a\n    tuple and ``kwargs`` is a dictionary.  If an exception is raised\n    and it is SystemExit (which can be done by thread.exit()) it is\n    caught and nothing is done; all other exceptions are printed out\n    by using traceback.print_exc().\n\n    If the executed function calls interrupt_main the KeyboardInterrupt will be\n    raised when the function returns.\n\n    '),
               ('dummy_thread.exit', [], 'Dummy implementation of thread.exit().'),
               ('dummy_thread.get_ident',
                [],
                'Dummy implementation of thread.get_ident().\n\n    Since this module should only be used when threadmodule is not\n    available, it is safe to assume that the current process is the\n    only thread.  Thus a constant can be safely returned.\n    '),
               ('dummy_thread.allocate_lock',
                [],
                'Dummy implementation of thread.allocate_lock().'),
               ('dummy_thread.stack_size',
                ['size=None'],
                'Dummy implementation of thread.stack_size().'),
               ('dummy_thread.interrupt_main',
                [],
                'Set _interrupt flag to True to have start_new_thread raise\n    KeyboardInterrupt upon exiting.'),
               ('filecmp.cmp',
                ['f1', 'f2', 'shallow=1'],
                'Compare two files.\n\n    Arguments:\n\n    f1 -- First file name\n\n    f2 -- Second file name\n\n    shallow -- Just check stat signature (do not read the files).\n               defaults to 1.\n\n    Return value:\n\n    True if the files are the same, False otherwise.\n\n    This function uses a cache for past comparisons and the results,\n    with a cache invalidation mechanism relying on stale signatures.\n\n    '),
               ('filecmp._sig', ['st'], ''),
               ('filecmp._do_cmp', ['f1', 'f2'], ''),
               ('filecmp.cmpfiles',
                ['a', 'b', 'common', 'shallow=1'],
                "Compare common files in two directories.\n\n    a, b -- directory names\n    common -- list of file names found in both directories\n    shallow -- if true, do comparison based solely on stat() information\n\n    Returns a tuple of three lists:\n      files that compare equal\n      files that are different\n      filenames that aren't regular files.\n\n    "),
               ('filecmp._cmp', ['a', 'b', 'sh', 'abs=abs', 'cmp=cmp'], ''),
               ('filecmp._filter', ['flist', 'skip'], ''),
               ('filecmp.demo', [], ''),
               ('fileinput.input',
                ['files=None',
                 'inplace=0',
                 "backup=''",
                 'bufsize=0',
                 "mode='r'",
                 'openhook=None'],
                'input([files[, inplace[, backup[, mode[, openhook]]]]])\n\n    Create an instance of the FileInput class. The instance will be used\n    as global state for the functions of this module, and is also returned\n    to use during iteration. The parameters to this function will be passed\n    along to the constructor of the FileInput class.\n    '),
               ('fileinput.close', [], 'Close the sequence.'),
               ('fileinput.nextfile',
                [],
                '\n    Close the current file so that the next iteration will read the first\n    line from the next file (if any); lines not read from the file will\n    not count towards the cumulative line count. The filename is not\n    changed until after the first line of the next file has been read.\n    Before the first line has been read, this function has no effect;\n    it cannot be used to skip the first file. After the last line of the\n    last file has been read, this function has no effect.\n    '),
               ('fileinput.filename',
                [],
                '\n    Return the name of the file currently being read.\n    Before the first line has been read, returns None.\n    '),
               ('fileinput.lineno',
                [],
                '\n    Return the cumulative line number of the line that has just been read.\n    Before the first line has been read, returns 0. After the last line\n    of the last file has been read, returns the line number of that line.\n    '),
               ('fileinput.filelineno',
                [],
                '\n    Return the line number in the current file. Before the first line\n    has been read, returns 0. After the last line of the last file has\n    been read, returns the line number of that line within the file.\n    '),
               ('fileinput.fileno',
                [],
                '\n    Return the file number of the current file. When no file is currently\n    opened, returns -1.\n    '),
               ('fileinput.isfirstline',
                [],
                '\n    Returns true the line just read is the first line of its file,\n    otherwise returns false.\n    '),
               ('fileinput.isstdin',
                [],
                '\n    Returns true if the last line was read from sys.stdin,\n    otherwise returns false.\n    '),
               ('fileinput.hook_compressed', ['filename', 'mode'], ''),
               ('fileinput.hook_encoded', ['encoding'], ''),
               ('fileinput._test', [], ''),
               ('fnmatch._purge', [], 'Clear the pattern cache'),
               ('fnmatch.fnmatch',
                ['name', 'pat'],
                "Test whether FILENAME matches PATTERN.\n\n    Patterns are Unix shell style:\n\n    *       matches everything\n    ?       matches any single character\n    [seq]   matches any character in seq\n    [!seq]  matches any char not in seq\n\n    An initial period in FILENAME is not special.\n    Both FILENAME and PATTERN are first case-normalized\n    if the operating system requires it.\n    If you don't want this, use fnmatchcase(FILENAME, PATTERN).\n    "),
               ('fnmatch.filter',
                ['names', 'pat'],
                'Return the subset of the list NAMES that match PAT'),
               ('fnmatch.fnmatchcase',
                ['name', 'pat'],
                "Test whether FILENAME matches PATTERN, including case.\n\n    This is a version of fnmatch() which doesn't case-normalize\n    its arguments.\n    "),
               ('fnmatch.translate',
                ['pat'],
                'Translate a shell PATTERN to a regular expression.\n\n    There is no way to quote meta-characters.\n    '),
               ('formatter.test', ['file=None'], ''),
               ('fpformat.extract',
                ['s'],
                "Return (sign, intpart, fraction, expo) or raise an exception:\n    sign is '+' or '-'\n    intpart is 0 or more digits beginning with a nonzero\n    fraction is 0 or more digits\n    expo is an integer"),
               ('fpformat.unexpo',
                ['intpart', 'fraction', 'expo'],
                'Remove the exponent by changing intpart and fraction.'),
               ('fpformat.roundfrac',
                ['intpart', 'fraction', 'digs'],
                'Round or extend the fraction to size digs.'),
               ('fpformat.fix',
                ['x', 'digs'],
                "Format x as [-]ddd.ddd with 'digs' digits after the point\n    and at least one digit before.\n    If digs <= 0, the point is suppressed."),
               ('fpformat.sci',
                ['x', 'digs'],
                "Format x as [-]d.dddE[+-]ddd with 'digs' digits after the point\n    and exactly one digit before.\n    If digs is <= 0, one digit is kept and the point is suppressed."),
               ('fpformat.test', [], 'Interactive test run.'),
               ('fractions.gcd',
                ['a', 'b'],
                'Calculate the Greatest Common Divisor of a and b.\n\n    Unless b==0, the result will have the same sign as b (so that when\n    b is divided by it, the result comes out positive).\n    '),
               ('ftplib.parse150',
                ['resp'],
                "Parse the '150' response for a RETR request.\n    Returns the expected transfer size or None; size is not guaranteed to\n    be present in the 150 message.\n    "),
               ('ftplib.parse227',
                ['resp'],
                "Parse the '227' response for a PASV request.\n    Raises error_proto if it does not contain '(h1,h2,h3,h4,p1,p2)'\n    Return ('host.addr.as.numbers', port#) tuple."),
               ('ftplib.parse229',
                ['resp', 'peer'],
                "Parse the '229' response for a EPSV request.\n    Raises error_proto if it does not contain '(|||port|)'\n    Return ('host.addr.as.numbers', port#) tuple."),
               ('ftplib.parse257',
                ['resp'],
                "Parse the '257' response for a MKD or PWD request.\n    This is a response to a MKD or PWD request: a directory name.\n    Returns the directoryname in the 257 reply."),
               ('ftplib.print_line', ['line'], 'Default retrlines callback to print a line.'),
               ('ftplib.ftpcp',
                ['source', 'sourcename', 'target', "targetname=''", "type='I'"],
                'Copy file from one FTP-instance to another.'),
               ('ftplib.test',
                [],
                'Test program.\n    Usage: ftp [-d] [-r[file]] host [-l[dir]] [-d[dir]] [-p] [file] ...\n\n    -d dir\n    -l list\n    -p password\n    '),
               ('functools.update_wrapper',
                ['wrapper',
                 'wrapped',
                 'assigned=WRAPPER_ASSIGNMENTS',
                 'updated=WRAPPER_UPDATES'],
                'Update a wrapper function to look like the wrapped function\n\n       wrapper is the function to be updated\n       wrapped is the original function\n       assigned is a tuple naming the attributes assigned directly\n       from the wrapped function to the wrapper function (defaults to\n       functools.WRAPPER_ASSIGNMENTS)\n       updated is a tuple naming the attributes of the wrapper that\n       are updated with the corresponding attribute from the wrapped\n       function (defaults to functools.WRAPPER_UPDATES)\n    '),
               ('functools.wraps',
                ['wrapped', 'assigned=WRAPPER_ASSIGNMENTS', 'updated=WRAPPER_UPDATES'],
                'Decorator factory to apply update_wrapper() to a wrapper function\n\n       Returns a decorator that invokes update_wrapper() with the decorated\n       function as the wrapper argument and the arguments to wraps() as the\n       remaining arguments. Default arguments are as for update_wrapper().\n       This is a convenience function to simplify applying partial() to\n       update_wrapper().\n    '),
               ('functools.total_ordering',
                ['cls'],
                'Class decorator that fills in missing ordering methods'),
               ('functools.cmp_to_key',
                ['mycmp'],
                'Convert a cmp= function into a key= function'),
               ('genericpath.exists',
                ['path'],
                'Test whether a path exists.  Returns False for broken symbolic links'),
               ('genericpath.isfile', ['path'], 'Test whether a path is a regular file'),
               ('genericpath.isdir',
                ['s'],
                'Return true if the pathname refers to an existing directory.'),
               ('genericpath.getsize',
                ['filename'],
                'Return the size of a file, reported by os.stat().'),
               ('genericpath.getmtime',
                ['filename'],
                'Return the last modification time of a file, reported by os.stat().'),
               ('genericpath.getatime',
                ['filename'],
                'Return the last access time of a file, reported by os.stat().'),
               ('genericpath.getctime',
                ['filename'],
                'Return the metadata change time of a file, reported by os.stat().'),
               ('genericpath.commonprefix',
                ['m'],
                'Given a list of pathnames, returns the longest common leading component'),
               ('genericpath._splitext',
                ['p', 'sep', 'altsep', 'extsep'],
                'Split the extension from a pathname.\n\n    Extension is everything from the last dot to the end, ignoring\n    leading dots.  Returns "(root, ext)"; ext may be empty.'),
               ('getopt.getopt',
                ['args', 'shortopts', 'longopts=[]'],
                'getopt(args, options[, long_options]) -> opts, args\n\n    Parses command line options and parameter list.  args is the\n    argument list to be parsed, without the leading reference to the\n    running program.  Typically, this means "sys.argv[1:]".  shortopts\n    is the string of option letters that the script wants to\n    recognize, with options that require an argument followed by a\n    colon (i.e., the same format that Unix getopt() uses).  If\n    specified, longopts is a list of strings with the names of the\n    long options which should be supported.  The leading \'--\'\n    characters should not be included in the option name.  Options\n    which require an argument should be followed by an equal sign\n    (\'=\').\n\n    The return value consists of two elements: the first is a list of\n    (option, value) pairs; the second is the list of program arguments\n    left after the option list was stripped (this is a trailing slice\n    of the first argument).  Each option-and-value pair returned has\n    the option as its first element, prefixed with a hyphen (e.g.,\n    \'-x\'), and the option argument as its second element, or an empty\n    string if the option has no argument.  The options occur in the\n    list in the same order in which they were found, thus allowing\n    multiple occurrences.  Long and short options may be mixed.\n\n    '),
               ('getopt.gnu_getopt',
                ['args', 'shortopts', 'longopts=[]'],
                "getopt(args, options[, long_options]) -> opts, args\n\n    This function works like getopt(), except that GNU style scanning\n    mode is used by default. This means that option and non-option\n    arguments may be intermixed. The getopt() function stops\n    processing options as soon as a non-option argument is\n    encountered.\n\n    If the first character of the option string is `+', or if the\n    environment variable POSIXLY_CORRECT is set, then option\n    processing stops as soon as a non-option argument is encountered.\n\n    "),
               ('getopt.do_longs', ['opts', 'opt', 'longopts', 'args'], ''),
               ('getopt.long_has_args', ['opt', 'longopts'], ''),
               ('getopt.do_shorts', ['opts', 'optstring', 'shortopts', 'args'], ''),
               ('getopt.short_has_arg', ['opt', 'shortopts'], ''),
               ('getpass.unix_getpass',
                ["prompt='Password: '", 'stream=None'],
                "Prompt for a password, with echo turned off.\n\n    Args:\n      prompt: Written on stream to ask for the input.  Default: 'Password: '\n      stream: A writable file object to display the prompt.  Defaults to\n              the tty.  If no tty is available defaults to sys.stderr.\n    Returns:\n      The seKr3t input.\n    Raises:\n      EOFError: If our input tty or stdin was closed.\n      GetPassWarning: When we were unable to turn echo off on the input.\n\n    Always restores terminal settings before returning.\n    "),
               ('getpass.win_getpass',
                ["prompt='Password: '", 'stream=None'],
                'Prompt for password with echo off, using Windows getch().'),
               ('getpass.fallback_getpass', ["prompt='Password: '", 'stream=None'], ''),
               ('getpass._raw_input', ["prompt=''", 'stream=None', 'input=None'], ''),
               ('getpass.getuser',
                [],
                'Get the username from the environment or password database.\n\n    First try various environment variables, then the password\n    database.  This works on Windows as long as USERNAME is set.\n\n    '),
               ('gettext.test',
                ['condition', 'true', 'false'],
                '\n    Implements the C expression:\n\n      condition ? true : false\n\n    Required to correctly interpret plural forms.\n    '),
               ('gettext.c2py',
                ['plural'],
                'Gets a C expression as used in PO files for plural forms and returns a\n    Python lambda function that implements an equivalent expression.\n    '),
               ('gettext._expand_lang', ['locale'], ''),
               ('gettext.find', ['domain', 'localedir=None', 'languages=None', 'all=0'], ''),
               ('gettext.translation',
                ['domain',
                 'localedir=None',
                 'languages=None',
                 'class_=None',
                 'fallback=False',
                 'codeset=None'],
                ''),
               ('gettext.install',
                ['domain', 'localedir=None', 'unicode=False', 'codeset=None', 'names=None'],
                ''),
               ('gettext.textdomain', ['domain=None'], ''),
               ('gettext.bindtextdomain', ['domain', 'localedir=None'], ''),
               ('gettext.bind_textdomain_codeset', ['domain', 'codeset=None'], ''),
               ('gettext.dgettext', ['domain', 'message'], ''),
               ('gettext.ldgettext', ['domain', 'message'], ''),
               ('gettext.dngettext', ['domain', 'msgid1', 'msgid2', 'n'], ''),
               ('gettext.ldngettext', ['domain', 'msgid1', 'msgid2', 'n'], ''),
               ('gettext.gettext', ['message'], ''),
               ('gettext.lgettext', ['message'], ''),
               ('gettext.ngettext', ['msgid1', 'msgid2', 'n'], ''),
               ('gettext.lngettext', ['msgid1', 'msgid2', 'n'], ''),
               ('glob.glob',
                ['pathname'],
                'Return a list of paths matching a pathname pattern.\n\n    The pattern may contain simple shell-style wildcards a la fnmatch.\n\n    '),
               ('glob.iglob',
                ['pathname'],
                'Return an iterator which yields the paths matching a pathname pattern.\n\n    The pattern may contain simple shell-style wildcards a la fnmatch.\n\n    '),
               ('glob.glob1', ['dirname', 'pattern'], ''),
               ('glob.glob0', ['dirname', 'basename'], ''),
               ('glob.has_magic', ['s'], ''),
               ('gzip.write32u', ['output', 'value'], ''),
               ('gzip.read32', ['input'], ''),
               ('gzip.open',
                ['filename', "mode='rb'", 'compresslevel=9'],
                "Shorthand for GzipFile(filename, mode, compresslevel).\n\n    The filename argument is required; mode defaults to 'rb'\n    and compresslevel defaults to 9.\n\n    "),
               ('gzip._test', [], ''),
               ('hashlib.__get_builtin_constructor', ['name'], ''),
               ('hashlib.__get_openssl_constructor', ['name'], ''),
               ('hashlib.__py_new',
                ['name', "string=''"],
                "new(name, string='') - Return a new hashing object using the named algorithm;\n    optionally initialized with a string.\n    "),
               ('hashlib.__hash_new',
                ['name', "string=''"],
                "new(name, string='') - Return a new hashing object using the named algorithm;\n    optionally initialized with a string.\n    "),
               ('heapq.heappush',
                ['heap', 'item'],
                'Push item onto heap, maintaining the heap invariant.'),
               ('heapq.heappop',
                ['heap'],
                'Pop the smallest item off the heap, maintaining the heap invariant.'),
               ('heapq.heapreplace',
                ['heap', 'item'],
                'Pop and return the current smallest value, and add the new item.\n\n    This is more efficient than heappop() followed by heappush(), and can be\n    more appropriate when using a fixed-size heap.  Note that the value\n    returned may be larger than item!  That constrains reasonable uses of\n    this routine unless written as part of a conditional replacement:\n\n        if item > heap[0]:\n            item = heapreplace(heap, item)\n    '),
               ('heapq.heappushpop',
                ['heap', 'item'],
                'Fast version of a heappush followed by a heappop.'),
               ('heapq.heapify',
                ['x'],
                'Transform list into a heap, in-place, in O(len(heap)) time.'),
               ('heapq.nlargest',
                ['n', 'iterable'],
                'Find the n largest elements in a dataset.\n\n    Equivalent to:  sorted(iterable, reverse=True)[:n]\n    '),
               ('heapq.nsmallest',
                ['n', 'iterable'],
                'Find the n smallest elements in a dataset.\n\n    Equivalent to:  sorted(iterable)[:n]\n    '),
               ('heapq._siftdown', ['heap', 'startpos', 'pos'], ''),
               ('heapq._siftup', ['heap', 'pos'], ''),
               ('heapq.merge',
                ['*iterables'],
                'Merge multiple sorted inputs into a single sorted output.\n\n    Similar to sorted(itertools.chain(*iterables)) but returns a generator,\n    does not pull the data into memory all at once, and assumes that each of\n    the input streams is already sorted (smallest to largest).\n\n    >>> list(merge([1,3,5,7], [0,2,4,8], [5,10,15,20], [], [25]))\n    [0, 1, 2, 3, 4, 5, 5, 7, 8, 10, 15, 20, 25]\n\n    '),
               ('heapq.nsmallest',
                ['n', 'iterable', 'key=None'],
                'Find the n smallest elements in a dataset.\n\n    Equivalent to:  sorted(iterable, key=key)[:n]\n    '),
               ('heapq.nlargest',
                ['n', 'iterable', 'key=None'],
                'Find the n largest elements in a dataset.\n\n    Equivalent to:  sorted(iterable, key=key, reverse=True)[:n]\n    '),
               ('hmac.new',
                ['key', 'msg=None', 'digestmod=None'],
                "Create a new hashing object and return it.\n\n    key: The starting key for the hash.\n    msg: if available, will immediately be hashed into the object's starting\n    state.\n\n    You can now feed arbitrary strings into the object using its update()\n    method, and can ask for the hash value at any time by calling its digest()\n    method.\n    "),
               ('htmllib.test', ['args=None'], ''),
               ('httplib.FakeSocket', ['sock', 'sslobj'], ''),
               ('httplib.test',
                [],
                'Test this module.\n\n    A hodge podge of tests collected here, because they have too many\n    external dependencies for the regular test suite.\n    '),
               ('ihooks.install', ['importer=None'], ''),
               ('ihooks.uninstall', [], ''),
               ('imaplib.Internaldate2tuple',
                ['resp'],
                'Parse an IMAP4 INTERNALDATE string.\n\n    Return corresponding local time.  The return value is a\n    time.struct_time instance or None if the string has wrong format.\n    '),
               ('imaplib.Int2AP', ['num'], 'Convert integer to A-P string representation.'),
               ('imaplib.ParseFlags', ['resp'], 'Convert IMAP4 flags response to python tuple.'),
               ('imaplib.Time2Internaldate',
                ['date_time'],
                'Convert date_time to IMAP4 INTERNALDATE representation.\n\n    Return string in form: \'"DD-Mmm-YYYY HH:MM:SS +HHMM"\'.  The\n    date_time argument can be a number (int or float) represening\n    seconds since epoch (as returned by time.time()), a 9-tuple\n    representing local time (as returned by time.localtime()), or a\n    double-quoted string.  In the last case, it is assumed to already\n    be in the correct format.\n    '),
               ('imaplib.run', ['cmd', 'args'], ''),
               ('imghdr.what', ['file', 'h=None'], ''),
               ('imghdr.test_jpeg', ['h', 'f'], 'JPEG data in JFIF format'),
               ('imghdr.test_exif', ['h', 'f'], 'JPEG data in Exif format'),
               ('imghdr.test_png', ['h', 'f'], ''),
               ('imghdr.test_gif', ['h', 'f'], "GIF ('87 and '89 variants)"),
               ('imghdr.test_tiff', ['h', 'f'], 'TIFF (can be in Motorola or Intel byte order)'),
               ('imghdr.test_rgb', ['h', 'f'], 'SGI image library'),
               ('imghdr.test_pbm', ['h', 'f'], 'PBM (portable bitmap)'),
               ('imghdr.test_pgm', ['h', 'f'], 'PGM (portable graymap)'),
               ('imghdr.test_ppm', ['h', 'f'], 'PPM (portable pixmap)'),
               ('imghdr.test_rast', ['h', 'f'], 'Sun raster file'),
               ('imghdr.test_xbm', ['h', 'f'], 'X bitmap (X10 or X11)'),
               ('imghdr.test_bmp', ['h', 'f'], ''),
               ('imghdr.test', [], ''),
               ('imghdr.testall', ['list', 'recursive', 'toplevel'], ''),
               ('imputil._compile',
                ['pathname', 'timestamp'],
                "Compile (and cache) a Python source file.\n\n    The file specified by <pathname> is compiled to a code object and\n    returned.\n\n    Presuming the appropriate privileges exist, the bytecodes will be\n    saved back to the filesystem for future imports. The source file's\n    modification timestamp must be provided as a Long value.\n    "),
               ('imputil._os_bootstrap',
                [],
                "Set up 'os' module replacement functions for use during import bootstrap."),
               ('imputil._os_path_isdir', ['pathname'], 'Local replacement for os.path.isdir().'),
               ('imputil._timestamp',
                ['pathname'],
                'Return the file modification time as a Long.'),
               ('imputil.py_suffix_importer', ['filename', 'finfo', 'fqname'], ''),
               ('imputil._print_importers', [], ''),
               ('imputil._test_revamp', [], ''),
               ('inspect.ismodule',
                ['object'],
                'Return true if the object is a module.\n\n    Module objects provide these attributes:\n        __doc__         documentation string\n        __file__        filename (missing for built-in modules)'),
               ('inspect.isclass',
                ['object'],
                'Return true if the object is a class.\n\n    Class objects provide these attributes:\n        __doc__         documentation string\n        __module__      name of module in which this class was defined'),
               ('inspect.ismethod',
                ['object'],
                'Return true if the object is an instance method.\n\n    Instance method objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this method was defined\n        im_class        class object in which this method belongs\n        im_func         function object containing implementation of method\n        im_self         instance to which this method is bound, or None'),
               ('inspect.ismethoddescriptor',
                ['object'],
                'Return true if the object is a method descriptor.\n\n    But not if ismethod() or isclass() or isfunction() are true.\n\n    This is new in Python 2.2, and, for example, is true of int.__add__.\n    An object passing this test has a __get__ attribute but not a __set__\n    attribute, but beyond that the set of attributes varies.  __name__ is\n    usually sensible, and __doc__ often is.\n\n    Methods implemented via descriptors that also pass one of the other\n    tests return false from the ismethoddescriptor() test, simply because\n    the other tests promise more -- you can, e.g., count on having the\n    im_func attribute (etc) when an object passes ismethod().'),
               ('inspect.isdatadescriptor',
                ['object'],
                'Return true if the object is a data descriptor.\n\n    Data descriptors have both a __get__ and a __set__ attribute.  Examples are\n    properties (defined in Python) and getsets and members (defined in C).\n    Typically, data descriptors will also have __name__ and __doc__ attributes\n    (properties, getsets, and members have both of these attributes), but this\n    is not guaranteed.'),
               ('inspect.ismemberdescriptor',
                ['object'],
                'Return true if the object is a member descriptor.\n\n        Member descriptors are specialized descriptors defined in extension\n        modules.'),
               ('inspect.ismemberdescriptor',
                ['object'],
                'Return true if the object is a member descriptor.\n\n        Member descriptors are specialized descriptors defined in extension\n        modules.'),
               ('inspect.isgetsetdescriptor',
                ['object'],
                'Return true if the object is a getset descriptor.\n\n        getset descriptors are specialized descriptors defined in extension\n        modules.'),
               ('inspect.isgetsetdescriptor',
                ['object'],
                'Return true if the object is a getset descriptor.\n\n        getset descriptors are specialized descriptors defined in extension\n        modules.'),
               ('inspect.isfunction',
                ['object'],
                'Return true if the object is a user-defined function.\n\n    Function objects provide these attributes:\n        __doc__         documentation string\n        __name__        name with which this function was defined\n        func_code       code object containing compiled function bytecode\n        func_defaults   tuple of any default values for arguments\n        func_doc        (same as __doc__)\n        func_globals    global namespace in which this function was defined\n        func_name       (same as __name__)'),
               ('inspect.isgeneratorfunction',
                ['object'],
                'Return true if the object is a user-defined generator function.\n\n    Generator function objects provides same attributes as functions.\n\n    See help(isfunction) for attributes listing.'),
               ('inspect.isgenerator',
                ['object'],
                'Return true if the object is a generator.\n\n    Generator objects provide these attributes:\n        __iter__        defined to support interation over container\n        close           raises a new GeneratorExit exception inside the\n                        generator to terminate the iteration\n        gi_code         code object\n        gi_frame        frame object or possibly None once the generator has\n                        been exhausted\n        gi_running      set to 1 when generator is executing, 0 otherwise\n        next            return the next item from the container\n        send            resumes the generator and "sends" a value that becomes\n                        the result of the current yield-expression\n        throw           used to raise an exception inside the generator'),
               ('inspect.istraceback',
                ['object'],
                'Return true if the object is a traceback.\n\n    Traceback objects provide these attributes:\n        tb_frame        frame object at this level\n        tb_lasti        index of last attempted instruction in bytecode\n        tb_lineno       current line number in Python source code\n        tb_next         next inner traceback object (called by this level)'),
               ('inspect.isframe',
                ['object'],
                "Return true if the object is a frame object.\n\n    Frame objects provide these attributes:\n        f_back          next outer frame object (this frame's caller)\n        f_builtins      built-in namespace seen by this frame\n        f_code          code object being executed in this frame\n        f_exc_traceback traceback if raised in this frame, or None\n        f_exc_type      exception type if raised in this frame, or None\n        f_exc_value     exception value if raised in this frame, or None\n        f_globals       global namespace seen by this frame\n        f_lasti         index of last attempted instruction in bytecode\n        f_lineno        current line number in Python source code\n        f_locals        local namespace seen by this frame\n        f_restricted    0 or 1 if frame is in restricted execution mode\n        f_trace         tracing function for this frame, or None"),
               ('inspect.iscode',
                ['object'],
                'Return true if the object is a code object.\n\n    Code objects provide these attributes:\n        co_argcount     number of arguments (not including * or ** args)\n        co_code         string of raw compiled bytecode\n        co_consts       tuple of constants used in the bytecode\n        co_filename     name of file in which this code object was created\n        co_firstlineno  number of first line in Python source code\n        co_flags        bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg\n        co_lnotab       encoded mapping of line numbers to bytecode indices\n        co_name         name with which this code object was defined\n        co_names        tuple of names of local variables\n        co_nlocals      number of local variables\n        co_stacksize    virtual machine stack space required\n        co_varnames     tuple of names of arguments and local variables'),
               ('inspect.isbuiltin',
                ['object'],
                'Return true if the object is a built-in function or method.\n\n    Built-in functions and methods provide these attributes:\n        __doc__         documentation string\n        __name__        original name of this function or method\n        __self__        instance to which a method is bound, or None'),
               ('inspect.isroutine',
                ['object'],
                'Return true if the object is any kind of function or method.'),
               ('inspect.isabstract',
                ['object'],
                'Return true if the object is an abstract base class (ABC).'),
               ('inspect.getmembers',
                ['object', 'predicate=None'],
                'Return all members of an object as (name, value) pairs sorted by name.\n    Optionally, only return members that satisfy a given predicate.'),
               ('inspect.classify_class_attrs',
                ['cls'],
                "Return list of attribute-descriptor tuples.\n\n    For each name in dir(cls), the return list contains a 4-tuple\n    with these elements:\n\n        0. The name (a string).\n\n        1. The kind of attribute this is, one of these strings:\n               'class method'    created via classmethod()\n               'static method'   created via staticmethod()\n               'property'        created via property()\n               'method'          any other flavor of method\n               'data'            not a method\n\n        2. The class which defined this attribute (a class).\n\n        3. The object as obtained directly from the defining class's\n           __dict__, not via getattr.  This is especially important for\n           data attributes:  C.data is just a data object, but\n           C.__dict__['data'] may be a data descriptor with additional\n           info, like a __doc__ string.\n    "),
               ('inspect._searchbases', ['cls', 'accum'], ''),
               ('inspect.getmro',
                ['cls'],
                'Return tuple of base classes (including cls) in method resolution order.'),
               ('inspect.indentsize',
                ['line'],
                'Return the indent size, in spaces, at the start of a line of text.'),
               ('inspect.getdoc',
                ['object'],
                'Get the documentation string for an object.\n\n    All tabs are expanded to spaces.  To clean up docstrings that are\n    indented to line up with blocks of code, any whitespace than can be\n    uniformly removed from the second line onwards is removed.'),
               ('inspect.cleandoc',
                ['doc'],
                'Clean up indentation from docstrings.\n\n    Any whitespace that can be uniformly removed from the second line\n    onwards is removed.'),
               ('inspect.getfile',
                ['object'],
                'Work out which source or compiled file an object was defined in.'),
               ('inspect.getmoduleinfo',
                ['path'],
                'Get the module name, suffix, mode, and module type for a given file.'),
               ('inspect.getmodulename',
                ['path'],
                'Return the module name for a given file, or None.'),
               ('inspect.getsourcefile',
                ['object'],
                "Return the filename that can be used to locate an object's source.\n    Return None if no way can be identified to get the source.\n    "),
               ('inspect.getabsfile',
                ['object', '_filename=None'],
                'Return an absolute path to the source or compiled file for an object.\n\n    The idea is for each object to have a unique origin, so this routine\n    normalizes the result as much as possible.'),
               ('inspect.getmodule',
                ['object', '_filename=None'],
                'Return the module an object was defined in, or None if not found.'),
               ('inspect.findsource',
                ['object'],
                'Return the entire source file and starting line number for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a list of all the lines\n    in the file and the line number indexes a line in that list.  An IOError\n    is raised if the source code cannot be retrieved.'),
               ('inspect.getcomments',
                ['object'],
                "Get lines of comments immediately preceding an object's source code.\n\n    Returns None when source can't be found.\n    "),
               ('inspect.getblock',
                ['lines'],
                'Extract the block of code at the top of the given list of lines.'),
               ('inspect.getsourcelines',
                ['object'],
                'Return a list of source lines and starting line number for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a list of the lines\n    corresponding to the object and the line number indicates where in the\n    original source file the first line of code was found.  An IOError is\n    raised if the source code cannot be retrieved.'),
               ('inspect.getsource',
                ['object'],
                'Return the text of the source code for an object.\n\n    The argument may be a module, class, method, function, traceback, frame,\n    or code object.  The source code is returned as a single string.  An\n    IOError is raised if the source code cannot be retrieved.'),
               ('inspect.walktree',
                ['classes', 'children', 'parent'],
                'Recursive helper function for getclasstree().'),
               ('inspect.getclasstree',
                ['classes', 'unique=0'],
                "Arrange the given list of classes into a hierarchy of nested lists.\n\n    Where a nested list appears, it contains classes derived from the class\n    whose entry immediately precedes the list.  Each entry is a 2-tuple\n    containing a class and a tuple of its base classes.  If the 'unique'\n    argument is true, exactly one entry appears in the returned structure\n    for each class in the given list.  Otherwise, classes using multiple\n    inheritance and their descendants will appear multiple times."),
               ('inspect.getargs',
                ['co'],
                "Get information about the arguments accepted by a code object.\n\n    Three things are returned: (args, varargs, varkw), where 'args' is\n    a list of argument names (possibly containing nested lists), and\n    'varargs' and 'varkw' are the names of the * and ** arguments or None."),
               ('inspect.getargspec',
                ['func'],
                "Get the names and default values of a function's arguments.\n\n    A tuple of four things is returned: (args, varargs, varkw, defaults).\n    'args' is a list of the argument names (it may contain nested lists).\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'defaults' is an n-tuple of the default values of the last n arguments.\n    "),
               ('inspect.getargvalues',
                ['frame'],
                "Get information about arguments passed into a particular frame.\n\n    A tuple of four things is returned: (args, varargs, varkw, locals).\n    'args' is a list of the argument names (it may contain nested lists).\n    'varargs' and 'varkw' are the names of the * and ** arguments or None.\n    'locals' is the locals dictionary of the given frame."),
               ('inspect.joinseq', ['seq'], ''),
               ('inspect.strseq',
                ['object', 'convert', 'join=joinseq'],
                'Recursively walk a sequence, stringifying each element.'),
               ('inspect.formatargspec',
                ['args',
                 'varargs=None',
                 'varkw=None',
                 'defaults=None',
                 'formatarg=str',
                 "formatvarargs=lambda name: '*'+name",
                 "formatvarkw=lambda name: '**'+name",
                 "formatvalue=lambda value: '='+repr(value)",
                 'join=joinseq'],
                'Format an argument spec from the 4 values returned by getargspec.\n\n    The first four arguments are (args, varargs, varkw, defaults).  The\n    other four arguments are the corresponding optional formatting functions\n    that are called to turn names and values into strings.  The ninth\n    argument is an optional function to format the sequence of arguments.'),
               ('inspect.formatargvalues',
                ['args',
                 'varargs',
                 'varkw',
                 'locals',
                 'formatarg=str',
                 "formatvarargs=lambda name: '*'+name",
                 "formatvarkw=lambda name: '**'+name",
                 "formatvalue=lambda value: '='+repr(value)",
                 'join=joinseq'],
                'Format an argument spec from the 4 values returned by getargvalues.\n\n    The first four arguments are (args, varargs, varkw, locals).  The\n    next four arguments are the corresponding optional formatting functions\n    that are called to turn names and values into strings.  The ninth\n    argument is an optional function to format the sequence of arguments.'),
               ('inspect.getcallargs',
                ['func', '*positional', '**named'],
                "Get the mapping of arguments to values.\n\n    A dict is returned, with keys the function argument names (including the\n    names of the * and ** arguments, if any), and values the respective bound\n    values from 'positional' and 'named'."),
               ('inspect.getframeinfo',
                ['frame', 'context=1'],
                'Get information about a frame or traceback object.\n\n    A tuple of five things is returned: the filename, the line number of\n    the current line, the function name, a list of lines of context from\n    the source code, and the index of the current line within that list.\n    The optional second argument specifies the number of lines of context\n    to return, which are centered around the current line.'),
               ('inspect.getlineno',
                ['frame'],
                'Get the line number from a frame object, allowing for optimization.'),
               ('inspect.getouterframes',
                ['frame', 'context=1'],
                'Get a list of records for a frame and all higher (calling) frames.\n\n    Each record contains a frame object, filename, line number, function\n    name, a list of lines of context, and index within the context.'),
               ('inspect.getinnerframes',
                ['tb', 'context=1'],
                "Get a list of records for a traceback's frame and all lower frames.\n\n    Each record contains a frame object, filename, line number, function\n    name, a list of lines of context, and index within the context."),
               ('inspect.stack',
                ['context=1'],
                "Return a list of records for the stack above the caller's frame."),
               ('inspect.trace',
                ['context=1'],
                'Return a list of records for the stack below the current exception.'),
               ('keyword.main', [], ''),
               ('linecache.getline', ['filename', 'lineno', 'module_globals=None'], ''),
               ('linecache.clearcache', [], 'Clear the cache entirely.'),
               ('linecache.getlines',
                ['filename', 'module_globals=None'],
                "Get the lines for a file from the cache.\n    Update the cache if it doesn't contain an entry for this file already."),
               ('linecache.checkcache',
                ['filename=None'],
                'Discard cache entries that are out of date.\n    (This is not checked upon each call!)'),
               ('linecache.updatecache',
                ['filename', 'module_globals=None'],
                "Update a cache entry and return its list of lines.\n    If something's wrong, print a message, discard the cache entry,\n    and return an empty list."),
               ('locale.localeconv',
                [],
                ' localeconv() -> dict.\n            Returns numeric and monetary locale-specific parameters.\n        '),
               ('locale.setlocale',
                ['category', 'value=None'],
                ' setlocale(integer,string=None) -> string.\n            Activates/queries locale processing.\n        '),
               ('locale.strcoll',
                ['a', 'b'],
                ' strcoll(string,string) -> int.\n            Compares two strings according to the locale.\n        '),
               ('locale.strxfrm',
                ['s'],
                ' strxfrm(string) -> string.\n            Returns a string that behaves for cmp locale-aware.\n        '),
               ('locale.localeconv', [], ''),
               ('locale._grouping_intervals', ['grouping'], ''),
               ('locale._group', ['s', 'monetary=False'], ''),
               ('locale._strip_padding', ['s', 'amount'], ''),
               ('locale.format',
                ['percent', 'value', 'grouping=False', 'monetary=False', '*additional'],
                "Returns the locale-aware substitution of a %? specifier\n    (percent).\n\n    additional is for format strings which contain one or more\n    '*' modifiers."),
               ('locale._format',
                ['percent', 'value', 'grouping=False', 'monetary=False', '*additional'],
                ''),
               ('locale.format_string',
                ['f', 'val', 'grouping=False'],
                'Formats a string in the same way that the % formatting would use,\n    but takes the current locale into account.\n    Grouping is applied if the third parameter is true.'),
               ('locale.currency',
                ['val', 'symbol=True', 'grouping=False', 'international=False'],
                'Formats val according to the currency settings\n    in the current locale.'),
               ('locale.str',
                ['val'],
                'Convert float to integer, taking the locale into account.'),
               ('locale.atof',
                ['string', 'func=float'],
                'Parses a string as a float according to the locale settings.'),
               ('locale.atoi',
                ['str'],
                'Converts a string to an integer according to the locale settings.'),
               ('locale._test', [], ''),
               ('locale.normalize',
                ['localename'],
                ' Returns a normalized locale code for the given locale\n        name.\n\n        The returned locale code is formatted for use with\n        setlocale().\n\n        If normalization fails, the original name is returned\n        unchanged.\n\n        If the given encoding is not known, the function defaults to\n        the default encoding for the locale code just like setlocale()\n        does.\n\n    '),
               ('locale._parse_localename',
                ['localename'],
                ' Parses the locale code for localename and returns the\n        result as tuple (language code, encoding).\n\n        The localename is normalized and passed through the locale\n        alias engine. A ValueError is raised in case the locale name\n        cannot be parsed.\n\n        The language code corresponds to RFC 1766.  code and encoding\n        can be None in case the values cannot be determined or are\n        unknown to this implementation.\n\n    '),
               ('locale._build_localename',
                ['localetuple'],
                ' Builds a locale code from the given tuple (language code,\n        encoding).\n\n        No aliasing or normalizing takes place.\n\n    '),
               ('locale.getdefaultlocale',
                ["envvars=('LC_ALL', 'LC_CTYPE', 'LANG', 'LANGUAGE')"],
                ' Tries to determine the default locale settings and returns\n        them as tuple (language code, encoding).\n\n        According to POSIX, a program which has not called\n        setlocale(LC_ALL, "") runs using the portable \'C\' locale.\n        Calling setlocale(LC_ALL, "") lets it use the default locale as\n        defined by the LANG variable. Since we don\'t want to interfere\n        with the current locale setting we thus emulate the behavior\n        in the way described above.\n\n        To maintain compatibility with other platforms, not only the\n        LANG variable is tested, but a list of variables given as\n        envvars parameter. The first found to be defined will be\n        used. envvars defaults to the search path used in GNU gettext;\n        it must always contain the variable name \'LANG\'.\n\n        Except for the code \'C\', the language code corresponds to RFC\n        1766.  code and encoding can be None in case the values cannot\n        be determined.\n\n    '),
               ('locale.getlocale',
                ['category=LC_CTYPE'],
                " Returns the current setting for the given locale category as\n        tuple (language code, encoding).\n\n        category may be one of the LC_* value except LC_ALL. It\n        defaults to LC_CTYPE.\n\n        Except for the code 'C', the language code corresponds to RFC\n        1766.  code and encoding can be None in case the values cannot\n        be determined.\n\n    "),
               ('locale.setlocale',
                ['category', 'locale=None'],
                ' Set the locale for the given category.  The locale can be\n        a string, a locale tuple (language code, encoding), or None.\n\n        Locale tuples are converted to strings the locale aliasing\n        engine.  Locale strings are passed directly to the C lib.\n\n        category may be given as one of the LC_* values.\n\n    '),
               ('locale.resetlocale',
                ['category=LC_ALL'],
                ' Sets the locale for category to the default setting.\n\n        The default setting is determined by calling\n        getdefaultlocale(). category defaults to LC_ALL.\n\n    '),
               ('locale.getpreferredencoding',
                ['do_setlocale=True'],
                'Return the charset that the user is likely using.'),
               ('locale.getpreferredencoding',
                ['do_setlocale=True'],
                'Return the charset that the user is likely using,\n            by looking at environment variables.'),
               ('locale.getpreferredencoding',
                ['do_setlocale=True'],
                'Return the charset that the user is likely using,\n            according to the system configuration.'),
               ('locale._print_locale', [], ' Test function.\n    '),
               ('_LWPCookieJar.lwp_cookie_str',
                ['cookie'],
                'Return string representation of Cookie in an the LWP cookie file format.\n\n    Actually, the format is extended a bit -- see module docstring.\n\n    '),
               ('macpath.normcase', ['path'], ''),
               ('macpath.isabs',
                ['s'],
                'Return true if a path is absolute.\n    On the Mac, relative paths begin with a colon,\n    but as a special case, paths with no colons at all are also relative.\n    Anything else is absolute (the string up to the first colon is the\n    volume name).'),
               ('macpath.join', ['s', '*p'], ''),
               ('macpath.split',
                ['s'],
                'Split a pathname into two parts: the directory leading up to the final\n    bit, and the basename (the filename, without colons, in that directory).\n    The result (s, t) is such that join(s, t) yields the original argument.'),
               ('macpath.splitext', ['p'], ''),
               ('macpath.splitdrive',
                ['p'],
                "Split a pathname into a drive specification and the rest of the\n    path.  Useful on DOS/Windows/NT; on the Mac, the drive is always\n    empty (don't use the volume name -- it doesn't have the same\n    syntactic and semantic oddities as DOS drive letters, such as there\n    being a separate current directory per drive)."),
               ('macpath.dirname', ['s'], ''),
               ('macpath.basename', ['s'], ''),
               ('macpath.ismount', ['s'], ''),
               ('macpath.islink',
                ['s'],
                'Return true if the pathname refers to a symbolic link.'),
               ('macpath.lexists',
                ['path'],
                'Test whether a path exists.  Returns True for broken symbolic links'),
               ('macpath.expandvars',
                ['path'],
                'Dummy to retain interface-compatibility with other operating systems.'),
               ('macpath.expanduser',
                ['path'],
                'Dummy to retain interface-compatibility with other operating systems.'),
               ('macpath.normpath',
                ['s'],
                'Normalize a pathname.  Will return the same result for\n    equivalent paths.'),
               ('macpath.walk',
                ['top', 'func', 'arg'],
                "Directory tree walk with callback function.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).\n    dirname is the name of the directory, and fnames a list of the names of\n    the files and subdirectories in dirname (excluding '.' and '..').  func\n    may modify the fnames list in-place (e.g. via del or slice assignment),\n    and walk will only recurse into the subdirectories whose names remain in\n    fnames; this can be used to implement a filter, or to impose a specific\n    order of visiting.  No semantics are defined for, or required of, arg,\n    beyond that arg is always passed to func.  It can be used, e.g., to pass\n    a filename pattern, or a mutable object designed to accumulate\n    statistics.  Passing None for arg is common."),
               ('macpath.abspath', ['path'], 'Return an absolute path.'),
               ('macpath.realpath', ['path'], ''),
               ('macurl2path.url2pathname',
                ['pathname'],
                "OS-specific conversion from a relative URL of the 'file' scheme\n    to a file system path; not recommended for general use."),
               ('macurl2path.pathname2url',
                ['pathname'],
                "OS-specific conversion from a file system path to a relative URL\n    of the 'file' scheme; not recommended for general use."),
               ('macurl2path._pncomp2url', ['component'], ''),
               ('macurl2path.test', [], ''),
               ('mailbox._lock_file',
                ['f', 'dotlock=True'],
                'Lock file f using lockf and dot locking.'),
               ('mailbox._unlock_file', ['f'], 'Unlock file f using lockf and dot locking.'),
               ('mailbox._create_carefully',
                ['path'],
                "Create a file if it doesn't exist and open for reading and writing."),
               ('mailbox._create_temporary',
                ['path'],
                'Create a temp file based on path and open for reading and writing.'),
               ('mailbox._sync_flush', ['f'], 'Ensure changes to file f are physically on disk.'),
               ('mailbox._sync_close',
                ['f'],
                'Close file f, ensuring all changes are physically on disk.'),
               ('mailcap.getcaps',
                [],
                'Return a dictionary containing the mailcap database.\n\n    The dictionary maps a MIME type (in all lowercase, e.g. \'text/plain\')\n    to a list of dictionaries corresponding to mailcap entries.  The list\n    collects all the entries for that MIME type from all available mailcap\n    files.  Each dictionary contains key-value pairs for that MIME type,\n    where the viewing command is stored with the key "view".\n\n    '),
               ('mailcap.listmailcapfiles',
                [],
                'Return a list of all mailcap files found on the system.'),
               ('mailcap.readmailcapfile',
                ['fp'],
                'Read a mailcap file and return a dictionary keyed by MIME type.\n\n    Each MIME type is mapped to an entry consisting of a list of\n    dictionaries; the list will contain more than one such dictionary\n    if a given MIME type appears more than once in the mailcap file.\n    Each dictionary contains key-value pairs for that MIME type, where\n    the viewing command is stored with the key "view".\n    '),
               ('mailcap.parseline',
                ['line'],
                'Parse one entry in a mailcap file and return a dictionary.\n\n    The viewing command is stored as the value with the key "view",\n    and the rest of the fields produce key-value pairs in the dict.\n    '),
               ('mailcap.parsefield',
                ['line', 'i', 'n'],
                'Separate one key-value pair in a mailcap entry.'),
               ('mailcap.findmatch',
                ['caps', 'MIMEtype', "key='view'", "filename='/dev/null'", 'plist=[]'],
                "Find a match for a mailcap entry.\n\n    Return a tuple containing the command line, and the mailcap entry\n    used; (None, None) if no match is found.  This may invoke the\n    'test' command of several matching entries before deciding which\n    entry to use.\n\n    "),
               ('mailcap.lookup', ['caps', 'MIMEtype', 'key=None'], ''),
               ('mailcap.subst', ['field', 'MIMEtype', 'filename', 'plist=[]'], ''),
               ('mailcap.findparam', ['name', 'plist'], ''),
               ('mailcap.test', [], ''),
               ('mailcap.show', ['caps'], ''),
               ('mhlib.isnumeric', ['str'], ''),
               ('mhlib.pickline', ['file', 'key', 'casefold=1'], ''),
               ('mhlib.updateline', ['file', 'key', 'value', 'casefold=1'], ''),
               ('mhlib.test', [], ''),
               ('mimetools._get_next_counter', [], ''),
               ('mimetools.choose_boundary',
                [],
                "Return a string usable as a multipart boundary.\n\n    The string chosen is unique within a single program run, and\n    incorporates the user id (if available), process id (if available),\n    and current time.  So it's very unlikely the returned string appears\n    in message text, but there's no guarantee.\n\n    The boundary contains dots so you have to quote it in the header."),
               ('mimetools.decode',
                ['input', 'output', 'encoding'],
                'Decode common content-transfer-encodings (base64, quopri, uuencode).'),
               ('mimetools.encode',
                ['input', 'output', 'encoding'],
                'Encode common content-transfer-encodings (base64, quopri, uuencode).'),
               ('mimetools.pipeto', ['input', 'command'], ''),
               ('mimetools.pipethrough', ['input', 'command', 'output'], ''),
               ('mimetools.copyliteral', ['input', 'output'], ''),
               ('mimetools.copybinary', ['input', 'output'], ''),
               ('mimetypes.guess_type',
                ['url', 'strict=True'],
                'Guess the type of a file based on its URL.\n\n    Return value is a tuple (type, encoding) where type is None if the\n    type can\'t be guessed (no or unknown suffix) or a string of the\n    form type/subtype, usable for a MIME Content-type header; and\n    encoding is None for no encoding or the name of the program used\n    to encode (e.g. compress or gzip).  The mappings are table\n    driven.  Encoding suffixes are case sensitive; type suffixes are\n    first tried case sensitive, then case insensitive.\n\n    The suffixes .tgz, .taz and .tz (case sensitive!) are all mapped\n    to ".tar.gz".  (This is table-driven too, using the dictionary\n    suffix_map).\n\n    Optional `strict\' argument when false adds a bunch of commonly found, but\n    non-standard types.\n    '),
               ('mimetypes.guess_all_extensions',
                ['type', 'strict=True'],
                "Guess the extensions for a file based on its MIME type.\n\n    Return value is a list of strings giving the possible filename\n    extensions, including the leading dot ('.').  The extension is not\n    guaranteed to have been associated with any particular data\n    stream, but would be mapped to the MIME type `type' by\n    guess_type().  If no extension can be guessed for `type', None\n    is returned.\n\n    Optional `strict' argument when false adds a bunch of commonly found,\n    but non-standard types.\n    "),
               ('mimetypes.guess_extension',
                ['type', 'strict=True'],
                "Guess the extension for a file based on its MIME type.\n\n    Return value is a string giving a filename extension, including the\n    leading dot ('.').  The extension is not guaranteed to have been\n    associated with any particular data stream, but would be mapped to the\n    MIME type `type' by guess_type().  If no extension can be guessed for\n    `type', None is returned.\n\n    Optional `strict' argument when false adds a bunch of commonly found,\n    but non-standard types.\n    "),
               ('mimetypes.add_type',
                ['type', 'ext', 'strict=True'],
                'Add a mapping between a type and an extension.\n\n    When the extension is already known, the new\n    type will replace the old one. When the type\n    is already known the extension will be added\n    to the list of known extensions.\n\n    If strict is true, information will be added to\n    list of standard types, else to the list of non-standard\n    types.\n    '),
               ('mimetypes.init', ['files=None'], ''),
               ('mimetypes.read_mime_types', ['file'], ''),
               ('mimetypes._default_mime_types', [], ''),
               ('mimetypes.usage', ['code', "msg=''"], ''),
               ('mimify.mime_decode',
                ['line'],
                'Decode a single line of quoted-printable text to 8bit.'),
               ('mimify.mime_decode_header', ['line'], 'Decode a header line to 8bit.'),
               ('mimify.unmimify_part',
                ['ifile', 'ofile', 'decode_base64=0'],
                'Convert a quoted-printable part of a MIME mail message to 8bit.'),
               ('mimify.unmimify',
                ['infile', 'outfile', 'decode_base64=0'],
                'Convert quoted-printable parts of a MIME mail message to 8bit.'),
               ('mimify.mime_encode',
                ['line', 'header'],
                'Code a single line as quoted-printable.\n    If header is set, quote some extra characters.'),
               ('mimify.mime_encode_header',
                ['line'],
                'Code a single header line as quoted-printable.'),
               ('mimify.mimify_part',
                ['ifile', 'ofile', 'is_mime'],
                'Convert an 8bit part of a MIME mail message to quoted-printable.'),
               ('mimify.mimify',
                ['infile', 'outfile'],
                'Convert 8bit parts of a MIME mail message to quoted-printable.'),
               ('modulefinder.AddPackagePath', ['packagename', 'path'], ''),
               ('modulefinder.ReplacePackage', ['oldname', 'newname'], ''),
               ('modulefinder.test', [], ''),
               ('ntpath.normcase',
                ['s'],
                'Normalize case of pathname.\n\n    Makes all characters lowercase and all slashes into backslashes.'),
               ('ntpath.isabs', ['s'], 'Test whether a path is absolute'),
               ('ntpath.join',
                ['a', '*p'],
                'Join two or more pathname components, inserting "\\" as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.'),
               ('ntpath.splitdrive',
                ['p'],
                'Split a pathname into drive and path specifiers. Returns a 2-tuple\n"(drive,path)";  either part may be empty'),
               ('ntpath.splitunc',
                ['p'],
                "Split a pathname into UNC mount point and relative path specifiers.\n\n    Return a 2-tuple (unc, rest); either part may be empty.\n    If unc is not empty, it has the form '//host/mount' (or similar\n    using backslashes).  unc+rest is always the input path.\n    Paths containing drive letters never have an UNC part.\n    "),
               ('ntpath.split',
                ['p'],
                'Split a pathname.\n\n    Return tuple (head, tail) where tail is everything after the final slash.\n    Either part may be empty.'),
               ('ntpath.splitext', ['p'], ''),
               ('ntpath.basename', ['p'], 'Returns the final component of a pathname'),
               ('ntpath.dirname', ['p'], 'Returns the directory component of a pathname'),
               ('ntpath.islink',
                ['path'],
                'Test for symbolic link.\n    On WindowsNT/95 and OS/2 always returns false\n    '),
               ('ntpath.ismount',
                ['path'],
                'Test whether a path is a mount point (defined as root of drive)'),
               ('ntpath.walk',
                ['top', 'func', 'arg'],
                "Directory tree walk with callback function.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).\n    dirname is the name of the directory, and fnames a list of the names of\n    the files and subdirectories in dirname (excluding '.' and '..').  func\n    may modify the fnames list in-place (e.g. via del or slice assignment),\n    and walk will only recurse into the subdirectories whose names remain in\n    fnames; this can be used to implement a filter, or to impose a specific\n    order of visiting.  No semantics are defined for, or required of, arg,\n    beyond that arg is always passed to func.  It can be used, e.g., to pass\n    a filename pattern, or a mutable object designed to accumulate\n    statistics.  Passing None for arg is common."),
               ('ntpath.expanduser',
                ['path'],
                'Expand ~ and ~user constructs.\n\n    If user or $HOME is unknown, do nothing.'),
               ('ntpath.expandvars',
                ['path'],
                'Expand shell variables of the forms $var, ${var} and %var%.\n\n    Unknown variables are left unchanged.'),
               ('ntpath.normpath', ['path'], 'Normalize path, eliminating double slashes, etc.'),
               ('ntpath.abspath', ['path'], 'Return the absolute version of a path.'),
               ('ntpath.abspath', ['path'], 'Return the absolute version of a path.'),
               ('ntpath._abspath_split', ['path'], ''),
               ('ntpath.relpath',
                ['path', 'start=curdir'],
                'Return a relative version of a path'),
               ('nturl2path.url2pathname',
                ['url'],
                "OS-specific conversion from a relative URL of the 'file' scheme\n    to a file system path; not recommended for general use."),
               ('nturl2path.pathname2url',
                ['p'],
                "OS-specific conversion from a file system path to a relative URL\n    of the 'file' scheme; not recommended for general use."),
               ('opcode.def_op', ['name', 'op'], ''),
               ('opcode.name_op', ['name', 'op'], ''),
               ('opcode.jrel_op', ['name', 'op'], ''),
               ('opcode.jabs_op', ['name', 'op'], ''),
               ('optparse._repr', ['self'], ''),
               ('optparse.gettext', ['message'], ''),
               ('optparse._parse_num', ['val', 'type'], ''),
               ('optparse._parse_int', ['val'], ''),
               ('optparse._parse_long', ['val'], ''),
               ('optparse.check_builtin', ['option', 'opt', 'value'], ''),
               ('optparse.check_choice', ['option', 'opt', 'value'], ''),
               ('optparse.isbasestring', ['x'], ''),
               ('optparse.isbasestring', ['x'], ''),
               ('optparse._match_abbrev',
                ['s', 'wordmap'],
                "_match_abbrev(s : string, wordmap : {string : Option}) -> string\n\n    Return the string key in 'wordmap' for which 's' is an unambiguous\n    abbreviation.  If 's' is found to be ambiguous or doesn't match any of\n    'words', raise BadOptionError.\n    "),
               ('os2emxpath.normcase',
                ['s'],
                'Normalize case of pathname.\n\n    Makes all characters lowercase and all altseps into seps.'),
               ('os2emxpath.join',
                ['a', '*p'],
                'Join two or more pathname components, inserting sep as needed'),
               ('os2emxpath.splitunc',
                ['p'],
                "Split a pathname into UNC mount point and relative path specifiers.\n\n    Return a 2-tuple (unc, rest); either part may be empty.\n    If unc is not empty, it has the form '//host/mount' (or similar\n    using backslashes).  unc+rest is always the input path.\n    Paths containing drive letters never have an UNC part.\n    "),
               ('os2emxpath.basename', ['p'], 'Returns the final component of a pathname'),
               ('os2emxpath.dirname', ['p'], 'Returns the directory component of a pathname'),
               ('os2emxpath.ismount',
                ['path'],
                'Test whether a path is a mount point (defined as root of drive)'),
               ('os2emxpath.normpath',
                ['path'],
                'Normalize path, eliminating double slashes, etc.'),
               ('os2emxpath.abspath', ['path'], 'Return the absolute version of a path'),
               ('os._get_exports_list', ['module'], ''),
               ('os.makedirs',
                ['name', 'mode=511'],
                'makedirs(path [, mode=0777])\n\n    Super-mkdir; create a leaf directory and all intermediate ones.\n    Works like mkdir, except that any intermediate path segment (not\n    just the rightmost) will be created if it does not exist.  This is\n    recursive.\n\n    '),
               ('os.removedirs',
                ['name'],
                'removedirs(path)\n\n    Super-rmdir; remove a leaf directory and all empty intermediate\n    ones.  Works like rmdir except that, if the leaf directory is\n    successfully removed, directories corresponding to rightmost path\n    segments will be pruned away until either the whole path is\n    consumed or an error occurs.  Errors during this latter phase are\n    ignored -- they generally mean that a directory was not empty.\n\n    '),
               ('os.renames',
                ['old', 'new'],
                'renames(old, new)\n\n    Super-rename; create directories as necessary and delete any left\n    empty.  Works like rename, except creation of any intermediate\n    directories needed to make the new pathname good is attempted\n    first.  After the rename, directories corresponding to rightmost\n    path segments of the old name will be pruned way until either the\n    whole path is consumed or a nonempty directory is found.\n\n    Note: this function can fail with the new directory structure made\n    if you lack permissions needed to unlink the leaf directory or\n    file.\n\n    '),
               ('os.walk',
                ['top', 'topdown=True', 'onerror=None', 'followlinks=False'],
                'Directory tree generator.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding \'.\' and \'..\'), yields a 3-tuple\n\n        dirpath, dirnames, filenames\n\n    dirpath is a string, the path to the directory.  dirnames is a list of\n    the names of the subdirectories in dirpath (excluding \'.\' and \'..\').\n    filenames is a list of the names of the non-directory files in dirpath.\n    Note that the names in the lists are just names, with no path components.\n    To get a full path (which begins with top) to a file or directory in\n    dirpath, do os.path.join(dirpath, name).\n\n    If optional arg \'topdown\' is true or not specified, the triple for a\n    directory is generated before the triples for any of its subdirectories\n    (directories are generated top down).  If topdown is false, the triple\n    for a directory is generated after the triples for all of its\n    subdirectories (directories are generated bottom up).\n\n    When topdown is true, the caller can modify the dirnames list in-place\n    (e.g., via del or slice assignment), and walk will only recurse into the\n    subdirectories whose names remain in dirnames; this can be used to prune\n    the search, or to impose a specific order of visiting.  Modifying\n    dirnames when topdown is false is ineffective, since the directories in\n    dirnames have already been generated by the time dirnames itself is\n    generated.\n\n    By default errors from the os.listdir() call are ignored.  If\n    optional arg \'onerror\' is specified, it should be a function; it\n    will be called with one argument, an os.error instance.  It can\n    report the error to continue with the walk, or raise the exception\n    to abort the walk.  Note that the filename is available as the\n    filename attribute of the exception object.\n\n    By default, os.walk does not follow symbolic links to subdirectories on\n    systems that support them.  In order to get this functionality, set the\n    optional argument \'followlinks\' to true.\n\n    Caution:  if you pass a relative pathname for top, don\'t change the\n    current working directory between resumptions of walk.  walk never\n    changes the current directory, and assumes that the client doesn\'t\n    either.\n\n    Example:\n\n    import os\n    from os.path import join, getsize\n    for root, dirs, files in os.walk(\'python/Lib/email\'):\n        print root, "consumes",\n        print sum([getsize(join(root, name)) for name in files]),\n        print "bytes in", len(files), "non-directory files"\n        if \'CVS\' in dirs:\n            dirs.remove(\'CVS\')  # don\'t visit CVS directories\n    '),
               ('os.execl',
                ['file', '*args'],
                'execl(file, *args)\n\n    Execute the executable file with argument list args, replacing the\n    current process. '),
               ('os.execle',
                ['file', '*args'],
                'execle(file, *args, env)\n\n    Execute the executable file with argument list args and\n    environment env, replacing the current process. '),
               ('os.execlp',
                ['file', '*args'],
                'execlp(file, *args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process. '),
               ('os.execlpe',
                ['file', '*args'],
                'execlpe(file, *args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env, replacing the current\n    process. '),
               ('os.execvp',
                ['file', 'args'],
                'execvp(file, args)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args, replacing the current process.\n    args may be a list or tuple of strings. '),
               ('os.execvpe',
                ['file', 'args', 'env'],
                'execvpe(file, args, env)\n\n    Execute the executable file (which is searched for along $PATH)\n    with argument list args and environment env , replacing the\n    current process.\n    args may be a list or tuple of strings. '),
               ('os._execvpe', ['file', 'args', 'env=None'], ''),
               ('os.unsetenv', ['key'], ''),
               ('os.getenv',
                ['key', 'default=None'],
                "Get an environment variable, return None if it doesn't exist.\n    The optional second argument can specify an alternate default."),
               ('os._exists', ['name'], ''),
               ('os._spawnvef', ['mode', 'file', 'args', 'env', 'func'], ''),
               ('os.spawnv',
                ['mode', 'file', 'args'],
                "spawnv(mode, file, args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.spawnve',
                ['mode', 'file', 'args', 'env'],
                "spawnve(mode, file, args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nspecified environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.spawnvp',
                ['mode', 'file', 'args'],
                "spawnvp(mode, file, args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.spawnvpe',
                ['mode', 'file', 'args', 'env'],
                "spawnvpe(mode, file, args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.spawnl',
                ['mode', 'file', '*args'],
                "spawnl(mode, file, *args) -> integer\n\nExecute file with arguments from args in a subprocess.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.spawnle',
                ['mode', 'file', '*args'],
                "spawnle(mode, file, *args, env) -> integer\n\nExecute file with arguments from args in a subprocess with the\nsupplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.spawnlp',
                ['mode', 'file', '*args'],
                "spawnlp(mode, file, *args) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.spawnlpe',
                ['mode', 'file', '*args'],
                "spawnlpe(mode, file, *args, env) -> integer\n\nExecute file (which is looked for along $PATH) with arguments from\nargs in a subprocess with the supplied environment.\nIf mode == P_NOWAIT return the pid of the process.\nIf mode == P_WAIT return the process's exit code if it exits normally;\notherwise return -SIG, where SIG is the signal that killed it. "),
               ('os.popen2',
                ['cmd', "mode='t'", 'bufsize=-1'],
                "Execute the shell command 'cmd' in a sub-process.  On UNIX, 'cmd'\n            may be a sequence, in which case arguments will be passed directly to\n            the program without shell intervention (as with os.spawnv()).  If 'cmd'\n            is a string it will be passed to the shell (as with os.system()). If\n            'bufsize' is specified, it sets the buffer size for the I/O pipes.  The\n            file objects (child_stdin, child_stdout) are returned."),
               ('os.popen3',
                ['cmd', "mode='t'", 'bufsize=-1'],
                "Execute the shell command 'cmd' in a sub-process.  On UNIX, 'cmd'\n            may be a sequence, in which case arguments will be passed directly to\n            the program without shell intervention (as with os.spawnv()).  If 'cmd'\n            is a string it will be passed to the shell (as with os.system()). If\n            'bufsize' is specified, it sets the buffer size for the I/O pipes.  The\n            file objects (child_stdin, child_stdout, child_stderr) are returned."),
               ('os.popen4',
                ['cmd', "mode='t'", 'bufsize=-1'],
                "Execute the shell command 'cmd' in a sub-process.  On UNIX, 'cmd'\n            may be a sequence, in which case arguments will be passed directly to\n            the program without shell intervention (as with os.spawnv()).  If 'cmd'\n            is a string it will be passed to the shell (as with os.system()). If\n            'bufsize' is specified, it sets the buffer size for the I/O pipes.  The\n            file objects (child_stdin, child_stdout_stderr) are returned."),
               ('os._make_stat_result', ['tup', 'dict'], ''),
               ('os._pickle_stat_result', ['sr'], ''),
               ('os._make_statvfs_result', ['tup', 'dict'], ''),
               ('os._pickle_statvfs_result', ['sr'], ''),
               ('os.urandom',
                ['n'],
                'urandom(n) -> str\n\n        Return a string of n random bytes suitable for cryptographic use.\n\n        '),
               ('pdb.find_function', ['funcname', 'filename'], ''),
               ('pdb.run', ['statement', 'globals=None', 'locals=None'], ''),
               ('pdb.runeval', ['expression', 'globals=None', 'locals=None'], ''),
               ('pdb.runctx', ['statement', 'globals', 'locals'], ''),
               ('pdb.runcall', ['*args', '**kwds'], ''),
               ('pdb.set_trace', [], ''),
               ('pdb.post_mortem', ['t=None'], ''),
               ('pdb.pm', [], ''),
               ('pdb.test', [], ''),
               ('pdb.help', [], ''),
               ('pdb.main', [], ''),
               ('pickle._keep_alive',
                ['x', 'memo'],
                'Keeps a reference to the object x in the memo.\n\n    Because we remember objects by their id, we have\n    to assure that possibly temporary objects are kept\n    alive by referencing them.\n    We store a reference at the id of the memo, which should\n    normally not be used unless someone tries to deepcopy\n    the memo itself...\n    '),
               ('pickle.whichmodule',
                ['func', 'funcname'],
                'Figure out the module in which a function occurs.\n\n    Search sys.modules for the module.\n    Cache in classmap.\n    Return a module name.\n    If the function cannot be found, return "__main__".\n    '),
               ('pickle.encode_long',
                ['x'],
                "Encode a long to a two's complement little-endian binary string.\n    Note that 0L is a special case, returning an empty string, to save a\n    byte in the LONG1 pickling context.\n\n    >>> encode_long(0L)\n    ''\n    >>> encode_long(255L)\n    '\\xff\\x00'\n    >>> encode_long(32767L)\n    '\\xff\\x7f'\n    >>> encode_long(-256L)\n    '\\x00\\xff'\n    >>> encode_long(-32768L)\n    '\\x00\\x80'\n    >>> encode_long(-128L)\n    '\\x80'\n    >>> encode_long(127L)\n    '\\x7f'\n    >>>\n    "),
               ('pickle.decode_long',
                ['data'],
                'Decode a long from a two\'s complement little-endian binary string.\n\n    >>> decode_long(\'\')\n    0L\n    >>> decode_long("\\xff\\x00")\n    255L\n    >>> decode_long("\\xff\\x7f")\n    32767L\n    >>> decode_long("\\x00\\xff")\n    -256L\n    >>> decode_long("\\x00\\x80")\n    -32768L\n    >>> decode_long("\\x80")\n    -128L\n    >>> decode_long("\\x7f")\n    127L\n    '),
               ('pickle.dump', ['obj', 'file', 'protocol=None'], ''),
               ('pickle.dumps', ['obj', 'protocol=None'], ''),
               ('pickle.load', ['file'], ''),
               ('pickle.loads', ['str'], ''),
               ('pickle._test', [], ''),
               ('pickletools.read_uint1',
                ['f'],
                "\n    >>> import StringIO\n    >>> read_uint1(StringIO.StringIO('\\xff'))\n    255\n    "),
               ('pickletools.read_uint2',
                ['f'],
                "\n    >>> import StringIO\n    >>> read_uint2(StringIO.StringIO('\\xff\\x00'))\n    255\n    >>> read_uint2(StringIO.StringIO('\\xff\\xff'))\n    65535\n    "),
               ('pickletools.read_int4',
                ['f'],
                "\n    >>> import StringIO\n    >>> read_int4(StringIO.StringIO('\\xff\\x00\\x00\\x00'))\n    255\n    >>> read_int4(StringIO.StringIO('\\x00\\x00\\x00\\x80')) == -(2**31)\n    True\n    "),
               ('pickletools.read_stringnl',
                ['f', 'decode=True', 'stripquotes=True'],
                '\n    >>> import StringIO\n    >>> read_stringnl(StringIO.StringIO("\'abcd\'\\nefg\\n"))\n    \'abcd\'\n\n    >>> read_stringnl(StringIO.StringIO("\\n"))\n    Traceback (most recent call last):\n    ...\n    ValueError: no string quotes around \'\'\n\n    >>> read_stringnl(StringIO.StringIO("\\n"), stripquotes=False)\n    \'\'\n\n    >>> read_stringnl(StringIO.StringIO("\'\'\\n"))\n    \'\'\n\n    >>> read_stringnl(StringIO.StringIO(\'"abcd"\'))\n    Traceback (most recent call last):\n    ...\n    ValueError: no newline found when trying to read stringnl\n\n    Embedded escapes are undone in the result.\n    >>> read_stringnl(StringIO.StringIO(r"\'a\\n\\\\b\\x00c\\td\'" + "\\n\'e\'"))\n    \'a\\n\\\\b\\x00c\\td\'\n    '),
               ('pickletools.read_stringnl_noescape', ['f'], ''),
               ('pickletools.read_stringnl_noescape_pair',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_stringnl_noescape_pair(StringIO.StringIO("Queue\\nEmpty\\njunk"))\n    \'Queue Empty\'\n    '),
               ('pickletools.read_string4',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_string4(StringIO.StringIO("\\x00\\x00\\x00\\x00abc"))\n    \'\'\n    >>> read_string4(StringIO.StringIO("\\x03\\x00\\x00\\x00abcdef"))\n    \'abc\'\n    >>> read_string4(StringIO.StringIO("\\x00\\x00\\x00\\x03abcdef"))\n    Traceback (most recent call last):\n    ...\n    ValueError: expected 50331648 bytes in a string4, but only 6 remain\n    '),
               ('pickletools.read_string1',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_string1(StringIO.StringIO("\\x00"))\n    \'\'\n    >>> read_string1(StringIO.StringIO("\\x03abcdef"))\n    \'abc\'\n    '),
               ('pickletools.read_unicodestringnl',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_unicodestringnl(StringIO.StringIO("abc\\uabcd\\njunk"))\n    u\'abc\\uabcd\'\n    '),
               ('pickletools.read_unicodestring4',
                ['f'],
                "\n    >>> import StringIO\n    >>> s = u'abcd\\uabcd'\n    >>> enc = s.encode('utf-8')\n    >>> enc\n    'abcd\\xea\\xaf\\x8d'\n    >>> n = chr(len(enc)) + chr(0) * 3  # little-endian 4-byte length\n    >>> t = read_unicodestring4(StringIO.StringIO(n + enc + 'junk'))\n    >>> s == t\n    True\n\n    >>> read_unicodestring4(StringIO.StringIO(n + enc[:-1]))\n    Traceback (most recent call last):\n    ...\n    ValueError: expected 7 bytes in a unicodestring4, but only 6 remain\n    "),
               ('pickletools.read_decimalnl_short',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_decimalnl_short(StringIO.StringIO("1234\\n56"))\n    1234\n\n    >>> read_decimalnl_short(StringIO.StringIO("1234L\\n56"))\n    Traceback (most recent call last):\n    ...\n    ValueError: trailing \'L\' not allowed in \'1234L\'\n    '),
               ('pickletools.read_decimalnl_long',
                ['f'],
                '\n    >>> import StringIO\n\n    >>> read_decimalnl_long(StringIO.StringIO("1234\\n56"))\n    Traceback (most recent call last):\n    ...\n    ValueError: trailing \'L\' required in \'1234\'\n\n    Someday the trailing \'L\' will probably go away from this output.\n\n    >>> read_decimalnl_long(StringIO.StringIO("1234L\\n56"))\n    1234L\n\n    >>> read_decimalnl_long(StringIO.StringIO("123456789012345678901234L\\n6"))\n    123456789012345678901234L\n    '),
               ('pickletools.read_floatnl',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_floatnl(StringIO.StringIO("-1.25\\n6"))\n    -1.25\n    '),
               ('pickletools.read_float8',
                ['f'],
                '\n    >>> import StringIO, struct\n    >>> raw = struct.pack(">d", -1.25)\n    >>> raw\n    \'\\xbf\\xf4\\x00\\x00\\x00\\x00\\x00\\x00\'\n    >>> read_float8(StringIO.StringIO(raw + "\\n"))\n    -1.25\n    '),
               ('pickletools.read_long1',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_long1(StringIO.StringIO("\\x00"))\n    0L\n    >>> read_long1(StringIO.StringIO("\\x02\\xff\\x00"))\n    255L\n    >>> read_long1(StringIO.StringIO("\\x02\\xff\\x7f"))\n    32767L\n    >>> read_long1(StringIO.StringIO("\\x02\\x00\\xff"))\n    -256L\n    >>> read_long1(StringIO.StringIO("\\x02\\x00\\x80"))\n    -32768L\n    '),
               ('pickletools.read_long4',
                ['f'],
                '\n    >>> import StringIO\n    >>> read_long4(StringIO.StringIO("\\x02\\x00\\x00\\x00\\xff\\x00"))\n    255L\n    >>> read_long4(StringIO.StringIO("\\x02\\x00\\x00\\x00\\xff\\x7f"))\n    32767L\n    >>> read_long4(StringIO.StringIO("\\x02\\x00\\x00\\x00\\x00\\xff"))\n    -256L\n    >>> read_long4(StringIO.StringIO("\\x02\\x00\\x00\\x00\\x00\\x80"))\n    -32768L\n    >>> read_long1(StringIO.StringIO("\\x00\\x00\\x00\\x00"))\n    0L\n    '),
               ('pickletools.assure_pickle_consistency', ['verbose=False'], ''),
               ('pickletools.genops',
                ['pickle'],
                "Generate all the opcodes in a pickle.\n\n    'pickle' is a file-like object, or string, containing the pickle.\n\n    Each opcode in the pickle is generated, from the current pickle position,\n    stopping after a STOP opcode is delivered.  A triple is generated for\n    each opcode:\n\n        opcode, arg, pos\n\n    opcode is an OpcodeInfo record, describing the current opcode.\n\n    If the opcode has an argument embedded in the pickle, arg is its decoded\n    value, as a Python object.  If the opcode doesn't have an argument, arg\n    is None.\n\n    If the pickle has a tell() method, pos was the value of pickle.tell()\n    before reading the current opcode.  If the pickle is a string object,\n    it's wrapped in a StringIO object, and the latter's tell() result is\n    used.  Else (the pickle doesn't have a tell(), and it's not obvious how\n    to query its current position) pos is None.\n    "),
               ('pickletools.optimize',
                ['p'],
                'Optimize a pickle string by removing unused PUT opcodes'),
               ('pickletools.dis',
                ['pickle', 'out=None', 'memo=None', 'indentlevel=4'],
                'Produce a symbolic disassembly of a pickle.\n\n    \'pickle\' is a file-like object, or string, containing a (at least one)\n    pickle.  The pickle is disassembled from the current position, through\n    the first STOP opcode encountered.\n\n    Optional arg \'out\' is a file-like object to which the disassembly is\n    printed.  It defaults to sys.stdout.\n\n    Optional arg \'memo\' is a Python dict, used as the pickle\'s memo.  It\n    may be mutated by dis(), if the pickle contains PUT or BINPUT opcodes.\n    Passing the same memo object to another dis() call then allows disassembly\n    to proceed across multiple pickles that were all created by the same\n    pickler with the same memo.  Ordinarily you don\'t need to worry about this.\n\n    Optional arg indentlevel is the number of blanks by which to indent\n    a new MARK level.  It defaults to 4.\n\n    In addition to printing the disassembly, some sanity checks are made:\n\n    + All embedded opcode arguments "make sense".\n\n    + Explicit and implicit pop operations have enough items on the stack.\n\n    + When an opcode implicitly refers to a markobject, a markobject is\n      actually on the stack.\n\n    + A memo entry isn\'t referenced before it\'s defined.\n\n    + The markobject isn\'t stored in the memo.\n\n    + A memo entry isn\'t redefined.\n    '),
               ('pickletools._test', [], ''),
               ('pipes.makepipeline', ['infile', 'steps', 'outfile'], ''),
               ('pipes.quote', ['file'], 'Return a shell-escaped version of the file string.'),
               ('pkgutil.read_code', ['stream'], ''),
               ('pkgutil.simplegeneric',
                ['func'],
                'Make a trivial single-dispatch generic function'),
               ('pkgutil.walk_packages',
                ['path=None', "prefix=''", 'onerror=None'],
                "Yields (module_loader, name, ispkg) for all modules recursively\n    on path, or, if path is None, all accessible modules.\n\n    'path' should be either None or a list of paths to look for\n    modules in.\n\n    'prefix' is a string to output on the front of every module name\n    on output.\n\n    Note that this function must import all *packages* (NOT all\n    modules!) on the given path, in order to access the __path__\n    attribute to find submodules.\n\n    'onerror' is a function which gets called with one argument (the\n    name of the package which was being imported) if any exception\n    occurs while trying to import a package.  If no onerror function is\n    supplied, ImportErrors are caught and ignored, while all other\n    exceptions are propagated, terminating the search.\n\n    Examples:\n\n    # list all modules python can access\n    walk_packages()\n\n    # list all submodules of ctypes\n    walk_packages(ctypes.__path__, ctypes.__name__+'.')\n    "),
               ('pkgutil.iter_modules',
                ['path=None', "prefix=''"],
                "Yields (module_loader, name, ispkg) for all submodules on path,\n    or, if path is None, all top-level modules on sys.path.\n\n    'path' should be either None or a list of paths to look for\n    modules in.\n\n    'prefix' is a string to output on the front of every module name\n    on output.\n    "),
               ('pkgutil.iter_importer_modules', ['importer', "prefix=''"], ''),
               ('pkgutil.iter_zipimport_modules', ['importer', "prefix=''"], ''),
               ('pkgutil.get_importer',
                ['path_item'],
                'Retrieve a PEP 302 importer for the given path item\n\n    The returned importer is cached in sys.path_importer_cache\n    if it was newly created by a path hook.\n\n    If there is no importer, a wrapper around the basic import\n    machinery is returned. This wrapper is never inserted into\n    the importer cache (None is inserted instead).\n\n    The cache (or part of it) can be cleared manually if a\n    rescan of sys.path_hooks is necessary.\n    '),
               ('pkgutil.iter_importers',
                ["fullname=''"],
                'Yield PEP 302 importers for the given module name\n\n    If fullname contains a \'.\', the importers will be for the package\n    containing fullname, otherwise they will be importers for sys.meta_path,\n    sys.path, and Python\'s "classic" import machinery, in that order.  If\n    the named module is in a package, that package is imported as a side\n    effect of invoking this function.\n\n    Non PEP 302 mechanisms (e.g. the Windows registry) used by the\n    standard import machinery to find files in alternative locations\n    are partially supported, but are searched AFTER sys.path. Normally,\n    these locations are searched BEFORE sys.path, preventing sys.path\n    entries from shadowing them.\n\n    For this to cause a visible difference in behaviour, there must\n    be a module or package name that is accessible via both sys.path\n    and one of the non PEP 302 file system mechanisms. In this case,\n    the emulation will find the former version, while the builtin\n    import mechanism will find the latter.\n\n    Items of the following types can be affected by this discrepancy:\n        imp.C_EXTENSION, imp.PY_SOURCE, imp.PY_COMPILED, imp.PKG_DIRECTORY\n    '),
               ('pkgutil.get_loader',
                ['module_or_name'],
                'Get a PEP 302 "loader" object for module_or_name\n\n    If the module or package is accessible via the normal import\n    mechanism, a wrapper around the relevant part of that machinery\n    is returned.  Returns None if the module cannot be found or imported.\n    If the named module is not already imported, its containing package\n    (if any) is imported, in order to establish the package __path__.\n\n    This function uses iter_importers(), and is thus subject to the same\n    limitations regarding platform-specific special import locations such\n    as the Windows registry.\n    '),
               ('pkgutil.find_loader',
                ['fullname'],
                'Find a PEP 302 "loader" object for fullname\n\n    If fullname contains dots, path must be the containing package\'s __path__.\n    Returns None if the module cannot be found or imported. This function uses\n    iter_importers(), and is thus subject to the same limitations regarding\n    platform-specific special import locations such as the Windows registry.\n    '),
               ('pkgutil.extend_path',
                ['path', 'name'],
                "Extend a package's path.\n\n    Intended use is to place the following code in a package's __init__.py:\n\n        from pkgutil import extend_path\n        __path__ = extend_path(__path__, __name__)\n\n    This will add to the package's __path__ all subdirectories of\n    directories on sys.path named after the package.  This is useful\n    if one wants to distribute different parts of a single logical\n    package as multiple directories.\n\n    It also looks for *.pkg files beginning where * matches the name\n    argument.  This feature is similar to *.pth files (see site.py),\n    except that it doesn't special-case lines starting with 'import'.\n    A *.pkg file is trusted at face value: apart from checking for\n    duplicates, all entries found in a *.pkg file are added to the\n    path, regardless of whether they are exist the filesystem.  (This\n    is a feature.)\n\n    If the input path is not a list (as is the case for frozen\n    packages) it is returned unchanged.  The input path is not\n    modified; an extended copy is returned.  Items are only appended\n    to the copy at the end.\n\n    It is assumed that sys.path is a sequence.  Items of sys.path that\n    are not (unicode or 8-bit) strings referring to existing\n    directories are ignored.  Unicode items of sys.path that cause\n    errors when used as filenames may cause this function to raise an\n    exception (in line with os.path.isdir() behavior).\n    "),
               ('pkgutil.get_data',
                ['package', 'resource'],
                "Get a resource from a package.\n\n    This is a wrapper round the PEP 302 loader get_data API. The package\n    argument should be the name of a package, in standard module format\n    (foo.bar). The resource argument should be in the form of a relative\n    filename, using '/' as the path separator. The parent directory name '..'\n    is not allowed, and nor is a rooted name (starting with a '/').\n\n    The function returns a binary string, which is the contents of the\n    specified resource.\n\n    For packages located in the filesystem, which have already been imported,\n    this is the rough equivalent of\n\n        d = os.path.dirname(sys.modules[package].__file__)\n        data = open(os.path.join(d, resource), 'rb').read()\n\n    If the package cannot be located or loaded, or it uses a PEP 302 loader\n    which does not support get_data(), then None is returned.\n    "),
               ('platform.libc_ver',
                ['executable=sys.executable', "lib=''", "version=''", 'chunksize=2048'],
                ' Tries to determine the libc version that the file executable\n        (which defaults to the Python interpreter) is linked against.\n\n        Returns a tuple of strings (lib,version) which default to the\n        given parameters in case the lookup fails.\n\n        Note that the function has intimate knowledge of how different\n        libc versions add symbols to the executable and thus is probably\n        only useable for executables compiled using gcc.\n\n        The file is read and scanned in chunks of chunksize bytes.\n\n    '),
               ('platform._dist_try_harder',
                ['distname', 'version', 'id'],
                ' Tries some special tricks to get the distribution\n        information in case the default method fails.\n\n        Currently supports older SuSE Linux, Caldera OpenLinux and\n        Slackware Linux distributions.\n\n    '),
               ('platform._parse_release_file', ['firstline'], ''),
               ('platform.linux_distribution',
                ["distname=''",
                 "version=''",
                 "id=''",
                 'supported_dists=_supported_dists',
                 'full_distribution_name=1'],
                ' Tries to determine the name of the Linux OS distribution name.\n\n        The function first looks for a distribution release file in\n        /etc and then reverts to _dist_try_harder() in case no\n        suitable files are found.\n\n        supported_dists may be given to define the set of Linux\n        distributions to look for. It defaults to a list of currently\n        supported Linux distributions identified by their release file\n        name.\n\n        If full_distribution_name is true (default), the full\n        distribution read from the OS is returned. Otherwise the short\n        name taken from supported_dists is used.\n\n        Returns a tuple (distname,version,id) which default to the\n        args given as parameters.\n\n    '),
               ('platform.dist',
                ["distname=''", "version=''", "id=''", 'supported_dists=_supported_dists'],
                ' Tries to determine the name of the Linux OS distribution name.\n\n        The function first looks for a distribution release file in\n        /etc and then reverts to _dist_try_harder() in case no\n        suitable files are found.\n\n        Returns a tuple (distname,version,id) which default to the\n        args given as parameters.\n\n    '),
               ('platform.popen',
                ['cmd', "mode='r'", 'bufsize=None'],
                ' Portable popen() interface.\n    '),
               ('platform._norm_version',
                ['version', "build=''"],
                ' Normalize the version and build strings and return a single\n        version string using the format major.minor.build (or patchlevel).\n    '),
               ('platform._syscmd_ver',
                ["system=''",
                 "release=''",
                 "version=''",
                 "supported_platforms=('win32', 'win16', 'dos', 'os2')"],
                ' Tries to figure out the OS version used and returns\n        a tuple (system,release,version).\n\n        It uses the "ver" shell command for this which is known\n        to exists on Windows, DOS and OS/2. XXX Others too ?\n\n        In case this fails, the given parameters are used as\n        defaults.\n\n    '),
               ('platform._win32_getvalue',
                ['key', 'name', "default=''"],
                ' Read a value for name from the registry key.\n\n        In case this fails, default is returned.\n\n    '),
               ('platform.win32_ver',
                ["release=''", "version=''", "csd=''", "ptype=''"],
                " Get additional version information from the Windows Registry\n        and return a tuple (version,csd,ptype) referring to version\n        number, CSD level and OS type (multi/single\n        processor).\n\n        As a hint: ptype returns 'Uniprocessor Free' on single\n        processor NT machines and 'Multiprocessor Free' on multi\n        processor machines. The 'Free' refers to the OS version being\n        free of debugging code. It could also state 'Checked' which\n        means the OS version uses debugging code, i.e. code that\n        checks arguments, ranges, etc. (Thomas Heller).\n\n        Note: this function works best with Mark Hammond's win32\n        package installed, but also on Python 2.3 and later. It\n        obviously only runs on Win32 compatible platforms.\n\n    "),
               ('platform._mac_ver_lookup', ['selectors', 'default=None'], ''),
               ('platform._bcd2str', ['bcd'], ''),
               ('platform._mac_ver_gestalt',
                [],
                '\n        Thanks to Mark R. Levinson for mailing documentation links and\n        code examples for this function. Documentation for the\n        gestalt() API is available online at:\n\n           http://www.rgaros.nl/gestalt/\n    '),
               ('platform._mac_ver_xml', [], ''),
               ('platform.mac_ver',
                ["release=''", "versioninfo=('', '', '')", "machine=''"],
                " Get MacOS version information and return it as tuple (release,\n        versioninfo, machine) with versioninfo being a tuple (version,\n        dev_stage, non_release_version).\n\n        Entries which cannot be determined are set to the paramter values\n        which default to ''. All tuple entries are strings.\n    "),
               ('platform._java_getprop', ['name', 'default'], ''),
               ('platform.java_ver',
                ["release=''", "vendor=''", "vminfo=('', '', '')", "osinfo=('', '', '')"],
                " Version interface for Jython.\n\n        Returns a tuple (release,vendor,vminfo,osinfo) with vminfo being\n        a tuple (vm_name,vm_release,vm_vendor) and osinfo being a\n        tuple (os_name,os_version,os_arch).\n\n        Values which cannot be determined are set to the defaults\n        given as parameters (which all default to '').\n\n    "),
               ('platform.system_alias',
                ['system', 'release', 'version'],
                ' Returns (system,release,version) aliased to common\n        marketing names used for some systems.\n\n        It also does some reordering of the information in some cases\n        where it would otherwise cause confusion.\n\n    '),
               ('platform._platform',
                ['*args'],
                ' Helper to format the platform string in a filename\n        compatible format e.g. "system-version-machine".\n    '),
               ('platform._node',
                ["default=''"],
                ' Helper to determine the node name of this machine.\n    '),
               ('platform._abspath',
                ['path',
                 'isabs=os.path.isabs',
                 'join=os.path.join',
                 'getcwd=os.getcwd',
                 'normpath=os.path.normpath'],
                ''),
               ('platform._follow_symlinks',
                ['filepath'],
                ' In case filepath is a symlink, follow it until a\n        real file is reached.\n    '),
               ('platform._syscmd_uname',
                ['option', "default=''"],
                " Interface to the system's uname command.\n    "),
               ('platform._syscmd_file',
                ['target', "default=''"],
                " Interface to the system's file command.\n\n        The function uses the -b option of the file command to have it\n        ommit the filename in its output and if possible the -L option\n        to have the command follow symlinks. It returns default in\n        case the command should fail.\n\n    "),
               ('platform.architecture',
                ['executable=sys.executable', "bits=''", "linkage=''"],
                ' Queries the given executable (defaults to the Python interpreter\n        binary) for various architecture information.\n\n        Returns a tuple (bits,linkage) which contains information about\n        the bit architecture and the linkage format used for the\n        executable. Both values are returned as strings.\n\n        Values that cannot be determined are returned as given by the\n        parameter presets. If bits is given as \'\', the sizeof(pointer)\n        (or sizeof(long) on Python version < 1.5.2) is used as\n        indicator for the supported pointer size.\n\n        The function relies on the system\'s "file" command to do the\n        actual work. This is available on most if not all Unix\n        platforms. On some non-Unix platforms where the "file" command\n        does not exist and the executable is set to the Python interpreter\n        binary defaults from _default_architecture are used.\n\n    '),
               ('platform.uname',
                [],
                " Fairly portable uname interface. Returns a tuple\n        of strings (system,node,release,version,machine,processor)\n        identifying the underlying platform.\n\n        Note that unlike the os.uname function this also returns\n        possible processor information as an additional tuple entry.\n\n        Entries which cannot be determined are set to ''.\n\n    "),
               ('platform.system',
                [],
                " Returns the system/OS name, e.g. 'Linux', 'Windows' or 'Java'.\n\n        An empty string is returned if the value cannot be determined.\n\n    "),
               ('platform.node',
                [],
                " Returns the computer's network name (which may not be fully\n        qualified)\n\n        An empty string is returned if the value cannot be determined.\n\n    "),
               ('platform.release',
                [],
                " Returns the system's release, e.g. '2.2.0' or 'NT'\n\n        An empty string is returned if the value cannot be determined.\n\n    "),
               ('platform.version',
                [],
                " Returns the system's release version, e.g. '#3 on degas'\n\n        An empty string is returned if the value cannot be determined.\n\n    "),
               ('platform.machine',
                [],
                " Returns the machine type, e.g. 'i386'\n\n        An empty string is returned if the value cannot be determined.\n\n    "),
               ('platform.processor',
                [],
                " Returns the (true) processor name, e.g. 'amdk6'\n\n        An empty string is returned if the value cannot be\n        determined. Note that many platforms do not provide this\n        information or simply return the same value as for machine(),\n        e.g.  NetBSD does this.\n\n    "),
               ('platform._sys_version',
                ['sys_version=None'],
                " Returns a parsed version of Python's sys.version as tuple\n        (name, version, branch, revision, buildno, builddate, compiler)\n        referring to the Python implementation name, version, branch,\n        revision, build number, build date/time as string and the compiler\n        identification string.\n\n        Note that unlike the Python sys.version, the returned value\n        for the Python version will always include the patchlevel (it\n        defaults to '.0').\n\n        The function returns empty strings for tuple entries that\n        cannot be determined.\n\n        sys_version may be given to parse an alternative version\n        string, e.g. if the version was read from a different Python\n        interpreter.\n\n    "),
               ('platform.python_implementation',
                [],
                " Returns a string identifying the Python implementation.\n\n        Currently, the following implementations are identified:\n        'CPython' (C implementation of Python),\n        'IronPython' (.NET implementation of Python),\n        'Jython' (Java implementation of Python).\n\n    "),
               ('platform.python_version',
                [],
                " Returns the Python version as string 'major.minor.patchlevel'\n\n        Note that unlike the Python sys.version, the returned value\n        will always include the patchlevel (it defaults to 0).\n\n    "),
               ('platform.python_version_tuple',
                [],
                ' Returns the Python version as tuple (major, minor, patchlevel)\n        of strings.\n\n        Note that unlike the Python sys.version, the returned value\n        will always include the patchlevel (it defaults to 0).\n\n    '),
               ('platform.python_branch',
                [],
                ' Returns a string identifying the Python implementation\n        branch.\n\n        For CPython this is the Subversion branch from which the\n        Python binary was built.\n\n        If not available, an empty string is returned.\n\n    '),
               ('platform.python_revision',
                [],
                ' Returns a string identifying the Python implementation\n        revision.\n\n        For CPython this is the Subversion revision from which the\n        Python binary was built.\n\n        If not available, an empty string is returned.\n\n    '),
               ('platform.python_build',
                [],
                ' Returns a tuple (buildno, builddate) stating the Python\n        build number and date as strings.\n\n    '),
               ('platform.python_compiler',
                [],
                ' Returns a string identifying the compiler used for compiling\n        Python.\n\n    '),
               ('platform.platform',
                ['aliased=0', 'terse=0'],
                ' Returns a single string identifying the underlying platform\n        with as much useful information as possible (but no more :).\n\n        The output is intended to be human readable rather than\n        machine parseable. It may look different on different\n        platforms and this is intended.\n\n        If "aliased" is true, the function will use aliases for\n        various platforms that report system names which differ from\n        their common names, e.g. SunOS will be reported as\n        Solaris. The system_alias() function is used to implement\n        this.\n\n        Setting terse to true causes the function to return only the\n        absolute minimum information needed to identify the platform.\n\n    '),
               ('plistlib.readPlist',
                ['pathOrFile'],
                "Read a .plist file. 'pathOrFile' may either be a file name or a\n    (readable) file object. Return the unpacked root object (which\n    usually is a dictionary).\n    "),
               ('plistlib.writePlist',
                ['rootObject', 'pathOrFile'],
                "Write 'rootObject' to a .plist file. 'pathOrFile' may either be a\n    file name or a (writable) file object.\n    "),
               ('plistlib.readPlistFromString',
                ['data'],
                'Read a plist data from a string. Return the root object.\n    '),
               ('plistlib.writePlistToString',
                ['rootObject'],
                "Return 'rootObject' as a plist-formatted string.\n    "),
               ('plistlib.readPlistFromResource',
                ['path', "restype='plst'", 'resid=0'],
                'Read plst resource from the resource fork of path.\n    '),
               ('plistlib.writePlistToResource',
                ['rootObject', 'path', "restype='plst'", 'resid=0'],
                "Write 'rootObject' as a plst resource to the resource fork of path.\n    "),
               ('plistlib._dateFromString', ['s'], ''),
               ('plistlib._dateToString', ['d'], ''),
               ('plistlib._escapeAndEncode', ['text'], ''),
               ('plistlib._encodeBase64', ['s', 'maxlinelength=76'], ''),
               ('popen2._cleanup', [], ''),
               ('popen2.popen2',
                ['cmd', 'bufsize=-1', "mode='t'"],
                "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin) are returned."),
               ('popen2.popen3',
                ['cmd', 'bufsize=-1', "mode='t'"],
                "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin, child_stderr) are returned."),
               ('popen2.popen4',
                ['cmd', 'bufsize=-1', "mode='t'"],
                "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout_stderr, child_stdin) are returned."),
               ('popen2.popen2',
                ['cmd', 'bufsize=-1', "mode='t'"],
                "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin) are returned."),
               ('popen2.popen3',
                ['cmd', 'bufsize=-1', "mode='t'"],
                "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout, child_stdin, child_stderr) are returned."),
               ('popen2.popen4',
                ['cmd', 'bufsize=-1', "mode='t'"],
                "Execute the shell command 'cmd' in a sub-process. On UNIX, 'cmd' may\n        be a sequence, in which case arguments will be passed directly to the\n        program without shell intervention (as with os.spawnv()). If 'cmd' is a\n        string it will be passed to the shell (as with os.system()). If\n        'bufsize' is specified, it sets the buffer size for the I/O pipes. The\n        file objects (child_stdout_stderr, child_stdin) are returned."),
               ('posixfile.open',
                ['name', "mode='r'", 'bufsize=-1'],
                'Public routine to open a file as a posixfile object.'),
               ('posixfile.fileopen',
                ['file'],
                'Public routine to get a posixfile object from a Python file object.'),
               ('posixpath.normcase',
                ['s'],
                'Normalize case of pathname.  Has no effect under Posix'),
               ('posixpath.isabs', ['s'], 'Test whether a path is absolute'),
               ('posixpath.join',
                ['a', '*p'],
                "Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded."),
               ('posixpath.split',
                ['p'],
                'Split a pathname.  Returns tuple "(head, tail)" where "tail" is\n    everything after the final slash.  Either part may be empty.'),
               ('posixpath.splitext', ['p'], ''),
               ('posixpath.splitdrive',
                ['p'],
                'Split a pathname into drive and path. On Posix, drive is always\n    empty.'),
               ('posixpath.basename', ['p'], 'Returns the final component of a pathname'),
               ('posixpath.dirname', ['p'], 'Returns the directory component of a pathname'),
               ('posixpath.islink', ['path'], 'Test whether a path is a symbolic link'),
               ('posixpath.lexists',
                ['path'],
                'Test whether a path exists.  Returns True for broken symbolic links'),
               ('posixpath.samefile',
                ['f1', 'f2'],
                'Test whether two pathnames reference the same actual file'),
               ('posixpath.sameopenfile',
                ['fp1', 'fp2'],
                'Test whether two open file objects reference the same file'),
               ('posixpath.samestat',
                ['s1', 's2'],
                'Test whether two stat buffers reference the same file'),
               ('posixpath.ismount', ['path'], 'Test whether a path is a mount point'),
               ('posixpath.walk',
                ['top', 'func', 'arg'],
                "Directory tree walk with callback function.\n\n    For each directory in the directory tree rooted at top (including top\n    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).\n    dirname is the name of the directory, and fnames a list of the names of\n    the files and subdirectories in dirname (excluding '.' and '..').  func\n    may modify the fnames list in-place (e.g. via del or slice assignment),\n    and walk will only recurse into the subdirectories whose names remain in\n    fnames; this can be used to implement a filter, or to impose a specific\n    order of visiting.  No semantics are defined for, or required of, arg,\n    beyond that arg is always passed to func.  It can be used, e.g., to pass\n    a filename pattern, or a mutable object designed to accumulate\n    statistics.  Passing None for arg is common."),
               ('posixpath.expanduser',
                ['path'],
                'Expand ~ and ~user constructions.  If user or $HOME is unknown,\n    do nothing.'),
               ('posixpath.expandvars',
                ['path'],
                'Expand shell variables of form $var and ${var}.  Unknown variables\n    are left unchanged.'),
               ('posixpath.normpath',
                ['path'],
                'Normalize path, eliminating double slashes, etc.'),
               ('posixpath.abspath', ['path'], 'Return an absolute path.'),
               ('posixpath.realpath',
                ['filename'],
                'Return the canonical path of the specified filename, eliminating any\nsymbolic links encountered in the path.'),
               ('posixpath._resolve_link',
                ['path'],
                "Internal helper function.  Takes a path and follows symlinks\n    until we either arrive at something that isn't a symlink, or\n    encounter a path we've seen before (meaning that there's a loop).\n    "),
               ('posixpath.relpath',
                ['path', 'start=curdir'],
                'Return a relative version of a path'),
               ('pprint.pprint',
                ['object', 'stream=None', 'indent=1', 'width=80', 'depth=None'],
                'Pretty-print a Python object to a stream [default is sys.stdout].'),
               ('pprint.pformat',
                ['object', 'indent=1', 'width=80', 'depth=None'],
                'Format a Python object into a pretty-printed representation.'),
               ('pprint.saferepr',
                ['object'],
                'Version of repr() which can handle recursive data structures.'),
               ('pprint.isreadable',
                ['object'],
                'Determine if saferepr(object) is readable by eval().'),
               ('pprint.isrecursive',
                ['object'],
                'Determine if object requires a recursive representation.'),
               ('pprint._sorted', ['iterable'], ''),
               ('pprint._safe_repr', ['object', 'context', 'maxlevels', 'level'], ''),
               ('pprint._recursion', ['object'], ''),
               ('pprint._perfcheck', ['object=None'], ''),
               ('pty.openpty',
                [],
                'openpty() -> (master_fd, slave_fd)\n    Open a pty master/slave pair, using os.openpty() if possible.'),
               ('pty.master_open',
                [],
                'master_open() -> (master_fd, slave_name)\n    Open a pty master and return the fd, and the filename of the slave end.\n    Deprecated, use openpty() instead.'),
               ('pty._open_terminal',
                [],
                'Open pty master and return (master_fd, tty_name).\n    SGI and generic BSD version, for when openpty() fails.'),
               ('pty.slave_open',
                ['tty_name'],
                'slave_open(tty_name) -> slave_fd\n    Open the pty slave and acquire the controlling terminal, returning\n    opened filedescriptor.\n    Deprecated, use openpty() instead.'),
               ('pty.fork',
                [],
                'fork() -> (pid, master_fd)\n    Fork and make the child a session leader with a controlling terminal.'),
               ('pty._writen', ['fd', 'data'], 'Write all the data to a descriptor.'),
               ('pty._read', ['fd'], 'Default read function.'),
               ('pty._copy',
                ['master_fd', 'master_read=_read', 'stdin_read=_read'],
                'Parent copy loop.\n    Copies\n            pty master -> standard output   (master_read)\n            standard input -> pty master    (stdin_read)'),
               ('pty.spawn',
                ['argv', 'master_read=_read', 'stdin_read=_read'],
                'Create a spawned process.'),
               ('pyclbr.readmodule',
                ['module', 'path=None'],
                'Backwards compatible interface.\n\n    Call readmodule_ex() and then only keep Class objects from the\n    resulting dictionary.'),
               ('pyclbr.readmodule_ex',
                ['module', 'path=None'],
                'Read a module file and return a dictionary of classes.\n\n    Search for MODULE in PATH and sys.path, read and parse the\n    module and return a dictionary with one entry for each class\n    found in the module.\n    '),
               ('pyclbr._readmodule',
                ['module', 'path', 'inpackage=None'],
                'Do the hard work for readmodule[_ex].\n\n    If INPACKAGE is given, it must be the dotted name of the package in\n    which we are searching for a submodule, and then PATH must be the\n    package search path; otherwise, we are searching for a top-level\n    module, and PATH is combined with sys.path.\n    '),
               ('pyclbr._getnamelist', ['g'], ''),
               ('pyclbr._getname', ['g'], ''),
               ('pyclbr._main', [], ''),
               ('py_compile.wr_long',
                ['f', 'x'],
                'Internal; write a 32-bit int to a file in little-endian order.'),
               ('py_compile.compile',
                ['file', 'cfile=None', 'dfile=None', 'doraise=False'],
                "Byte-compile one Python source file to Python bytecode.\n\n    Arguments:\n\n    file:    source filename\n    cfile:   target filename; defaults to source with 'c' or 'o' appended\n             ('c' normally, 'o' in optimizing mode, giving .pyc or .pyo)\n    dfile:   purported filename; defaults to source (this is the filename\n             that will show up in error messages)\n    doraise: flag indicating whether or not an exception should be\n             raised when a compile error is found. If an exception\n             occurs and this flag is set to False, a string\n             indicating the nature of the exception will be printed,\n             and the function will return to the caller. If an\n             exception occurs and this flag is set to True, a\n             PyCompileError exception will be raised.\n\n    Note that it isn't necessary to byte-compile Python modules for\n    execution efficiency -- Python itself byte-compiles a module when\n    it is loaded, and if it can, writes out the bytecode to the\n    corresponding .pyc (or .pyo) file.\n\n    However, if a Python installation is shared between users, it is a\n    good idea to byte-compile all modules upon installation, since\n    other users may not be able to write in the source directories,\n    and thus they won't be able to write the .pyc/.pyo file, and then\n    they would be byte-compiling every module each time it is loaded.\n    This can slow down program start-up considerably.\n\n    See compileall.py for a script/module that uses this module to\n    byte-compile all installed files (or all files in selected\n    directories).\n\n    "),
               ('py_compile.main',
                ['args=None'],
                "Compile several source files.\n\n    The files named in 'args' (or on the command line, if 'args' is\n    not specified) are compiled and the resulting bytecode is cached\n    in the normal manner.  This function does not search a directory\n    structure to locate source files; it only compiles files named\n    explicitly.  If '-' is the only parameter in args, the list of\n    files is taken from standard input.\n\n    "),
               ('pydoc.pathdirs',
                [],
                'Convert sys.path into a list of absolute, existing, unique paths.'),
               ('pydoc.getdoc', ['object'], 'Get the doc string or comments for an object.'),
               ('pydoc.splitdoc',
                ['doc'],
                'Split a doc string into a synopsis line (if any) and the rest.'),
               ('pydoc.classname',
                ['object', 'modname'],
                'Get a class name and qualify it with a module name if necessary.'),
               ('pydoc.isdata',
                ['object'],
                "Check if an object is of a type that probably means it's data."),
               ('pydoc.replace',
                ['text', '*pairs'],
                'Do a series of global replacements on a string.'),
               ('pydoc.cram',
                ['text', 'maxlen'],
                'Omit part of a string if needed to make it fit in a maximum length.'),
               ('pydoc.stripid',
                ['text'],
                'Remove the hexadecimal id from a Python object representation.'),
               ('pydoc._is_some_method', ['obj'], ''),
               ('pydoc.allmethods', ['cl'], ''),
               ('pydoc._split_list',
                ['s', 'predicate'],
                'Split sequence s via predicate, and return pair ([true], [false]).\n\n    The return value is a 2-tuple of lists,\n        ([x for x in s if predicate(x)],\n         [x for x in s if not predicate(x)])\n    '),
               ('pydoc.visiblename',
                ['name', 'all=None'],
                'Decide whether to show documentation on a variable.'),
               ('pydoc.classify_class_attrs',
                ['object'],
                'Wrap inspect.classify_class_attrs, with fixup for data descriptors.'),
               ('pydoc.ispackage',
                ['path'],
                'Guess whether a path refers to a package directory.'),
               ('pydoc.source_synopsis', ['file'], ''),
               ('pydoc.synopsis',
                ['filename', 'cache={}'],
                'Get the one-line summary out of a module file.'),
               ('pydoc.importfile',
                ['path'],
                'Import a Python source file or compiled file given its path.'),
               ('pydoc.safeimport',
                ['path', 'forceload=0', 'cache={}'],
                "Import a module; handle errors; return None if the module isn't found.\n\n    If the module *is* found but an exception occurs, it's wrapped in an\n    ErrorDuringImport exception and reraised.  Unlike __import__, if a\n    package path is specified, the module at the end of the path is returned,\n    not the package at the beginning.  If the optional 'forceload' argument\n    is 1, we reload the module from disk (unless it's a dynamic extension)."),
               ('pydoc.pager',
                ['text'],
                'The first time this is called, determine what kind of pager to use.'),
               ('pydoc.getpager', [], 'Decide what method to use for paging through text.'),
               ('pydoc.plain', ['text'], 'Remove boldface formatting from text.'),
               ('pydoc.pipepager',
                ['text', 'cmd'],
                'Page through text by feeding it to another program.'),
               ('pydoc.tempfilepager',
                ['text', 'cmd'],
                'Page through text by invoking a program on a temporary file.'),
               ('pydoc.ttypager', ['text'], 'Page through text on a text terminal.'),
               ('pydoc.plainpager',
                ['text'],
                'Simply print unformatted text.  This is the ultimate fallback.'),
               ('pydoc.describe', ['thing'], 'Produce a short description of the given thing.'),
               ('pydoc.locate',
                ['path', 'forceload=0'],
                'Locate an object by name or dotted path, importing as necessary.'),
               ('pydoc.resolve',
                ['thing', 'forceload=0'],
                'Given an object or a path to an object, get the object and its name.'),
               ('pydoc.render_doc',
                ['thing', "title='Python Library Documentation: %s'", 'forceload=0'],
                'Render text documentation, given an object or a path to an object.'),
               ('pydoc.doc',
                ['thing', "title='Python Library Documentation: %s'", 'forceload=0'],
                'Display text documentation, given an object or a path to an object.'),
               ('pydoc.writedoc',
                ['thing', 'forceload=0'],
                'Write HTML documentation to a file in the current directory.'),
               ('pydoc.writedocs',
                ['dir', "pkgpath=''", 'done=None'],
                'Write out HTML documentation for all modules in a directory tree.'),
               ('pydoc.apropos',
                ['key'],
                'Print all the one-line module summaries that contain a substring.'),
               ('pydoc.serve', ['port', 'callback=None', 'completer=None'], ''),
               ('pydoc.gui',
                [],
                'Graphical interface (starts web server and pops up a control window).'),
               ('pydoc.ispath', ['x'], ''),
               ('pydoc.cli',
                [],
                'Command-line interface (looks at sys.argv to decide what to do).'),
               ('_pyio.open',
                ['file',
                 "mode='r'",
                 'buffering=-1',
                 'encoding=None',
                 'errors=None',
                 'newline=None',
                 'closefd=True'],
                'Open file and return a stream.  Raise IOError upon failure.\n\n    file is either a text or byte string giving the name (and the path\n    if the file isn\'t in the current working directory) of the file to\n    be opened or an integer file descriptor of the file to be\n    wrapped. (If a file descriptor is given, it is closed when the\n    returned I/O object is closed, unless closefd is set to False.)\n\n    mode is an optional string that specifies the mode in which the file\n    is opened. It defaults to \'r\' which means open for reading in text\n    mode.  Other common values are \'w\' for writing (truncating the file if\n    it already exists), and \'a\' for appending (which on some Unix systems,\n    means that all writes append to the end of the file regardless of the\n    current seek position). In text mode, if encoding is not specified the\n    encoding used is platform dependent. (For reading and writing raw\n    bytes use binary mode and leave encoding unspecified.) The available\n    modes are:\n\n    ========= ===============================================================\n    Character Meaning\n    --------- ---------------------------------------------------------------\n    \'r\'       open for reading (default)\n    \'w\'       open for writing, truncating the file first\n    \'a\'       open for writing, appending to the end of the file if it exists\n    \'b\'       binary mode\n    \'t\'       text mode (default)\n    \'+\'       open a disk file for updating (reading and writing)\n    \'U\'       universal newline mode (for backwards compatibility; unneeded\n              for new code)\n    ========= ===============================================================\n\n    The default mode is \'rt\' (open for reading text). For binary random\n    access, the mode \'w+b\' opens and truncates the file to 0 bytes, while\n    \'r+b\' opens the file without truncation.\n\n    Python distinguishes between files opened in binary and text modes,\n    even when the underlying operating system doesn\'t. Files opened in\n    binary mode (appending \'b\' to the mode argument) return contents as\n    bytes objects without any decoding. In text mode (the default, or when\n    \'t\' is appended to the mode argument), the contents of the file are\n    returned as strings, the bytes having been first decoded using a\n    platform-dependent encoding or using the specified encoding if given.\n\n    buffering is an optional integer used to set the buffering policy.\n    Pass 0 to switch buffering off (only allowed in binary mode), 1 to select\n    line buffering (only usable in text mode), and an integer > 1 to indicate\n    the size of a fixed-size chunk buffer.  When no buffering argument is\n    given, the default buffering policy works as follows:\n\n    * Binary files are buffered in fixed-size chunks; the size of the buffer\n      is chosen using a heuristic trying to determine the underlying device\'s\n      "block size" and falling back on `io.DEFAULT_BUFFER_SIZE`.\n      On many systems, the buffer will typically be 4096 or 8192 bytes long.\n\n    * "Interactive" text files (files for which isatty() returns True)\n      use line buffering.  Other text files use the policy described above\n      for binary files.\n\n    encoding is the name of the encoding used to decode or encode the\n    file. This should only be used in text mode. The default encoding is\n    platform dependent, but any encoding supported by Python can be\n    passed.  See the codecs module for the list of supported encodings.\n\n    errors is an optional string that specifies how encoding errors are to\n    be handled---this argument should not be used in binary mode. Pass\n    \'strict\' to raise a ValueError exception if there is an encoding error\n    (the default of None has the same effect), or pass \'ignore\' to ignore\n    errors. (Note that ignoring encoding errors can lead to data loss.)\n    See the documentation for codecs.register for a list of the permitted\n    encoding error strings.\n\n    newline controls how universal newlines works (it only applies to text\n    mode). It can be None, \'\', \'\\n\', \'\\r\', and \'\\r\\n\'.  It works as\n    follows:\n\n    * On input, if newline is None, universal newlines mode is\n      enabled. Lines in the input can end in \'\\n\', \'\\r\', or \'\\r\\n\', and\n      these are translated into \'\\n\' before being returned to the\n      caller. If it is \'\', universal newline mode is enabled, but line\n      endings are returned to the caller untranslated. If it has any of\n      the other legal values, input lines are only terminated by the given\n      string, and the line ending is returned to the caller untranslated.\n\n    * On output, if newline is None, any \'\\n\' characters written are\n      translated to the system default line separator, os.linesep. If\n      newline is \'\', no translation takes place. If newline is any of the\n      other legal values, any \'\\n\' characters written are translated to\n      the given string.\n\n    If closefd is False, the underlying file descriptor will be kept open\n    when the file is closed. This does not work when a file name is given\n    and must be True in that case.\n\n    open() returns a file object whose type depends on the mode, and\n    through which the standard file operations such as reading and writing\n    are performed. When open() is used to open a file in a text mode (\'w\',\n    \'r\', \'wt\', \'rt\', etc.), it returns a TextIOWrapper. When used to open\n    a file in a binary mode, the returned class varies: in read binary\n    mode, it returns a BufferedReader; in write binary and append binary\n    modes, it returns a BufferedWriter, and in read/write mode, it returns\n    a BufferedRandom.\n\n    It is also possible to use a string or bytearray as a file for both\n    reading and writing. For strings StringIO can be used like a file\n    opened in a text mode, and for bytes a BytesIO can be used like a file\n    opened in a binary mode.\n    '),
               ('quopri.needsquoting',
                ['c', 'quotetabs', 'header'],
                "Decide whether a particular character needs to be quoted.\n\n    The 'quotetabs' flag indicates whether embedded tabs and spaces should be\n    quoted.  Note that line-ending tabs and spaces are always encoded, as per\n    RFC 1521.\n    "),
               ('quopri.quote', ['c'], 'Quote a single character.'),
               ('quopri.encode',
                ['input', 'output', 'quotetabs', 'header=0'],
                "Read 'input', apply quoted-printable encoding, and write to 'output'.\n\n    'input' and 'output' are files with readline() and write() methods.\n    The 'quotetabs' flag indicates whether embedded tabs and spaces should be\n    quoted.  Note that line-ending tabs and spaces are always encoded, as per\n    RFC 1521.\n    The 'header' flag indicates whether we are encoding spaces as _ as per\n    RFC 1522.\n    "),
               ('quopri.encodestring', ['s', 'quotetabs=0', 'header=0'], ''),
               ('quopri.decode',
                ['input', 'output', 'header=0'],
                "Read 'input', apply quoted-printable decoding, and write to 'output'.\n    'input' and 'output' are files with readline() and write() methods.\n    If 'header' is true, decode underscore as space (per RFC 1522)."),
               ('quopri.decodestring', ['s', 'header=0'], ''),
               ('quopri.ishex',
                ['c'],
                "Return true if the character 'c' is a hexadecimal digit."),
               ('quopri.unhex', ['s'], 'Get the integer value of a hexadecimal number.'),
               ('quopri.main', [], ''),
               ('random._test_generator', ['n', 'func', 'args'], ''),
               ('random._test', ['N=2000'], ''),
               ('repr._possibly_sorted', ['x'], ''),
               ('re.match',
                ['pattern', 'string', 'flags=0'],
                'Try to apply the pattern at the start of the string, returning\n    a match object, or None if no match was found.'),
               ('re.search',
                ['pattern', 'string', 'flags=0'],
                'Scan through string looking for a match to the pattern, returning\n    a match object, or None if no match was found.'),
               ('re.sub',
                ['pattern', 'repl', 'string', 'count=0', 'flags=0'],
                "Return the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in string by the\n    replacement repl.  repl can be either a string or a callable;\n    if a string, backslash escapes in it are processed.  If it is\n    a callable, it's passed the match object and must return\n    a replacement string to be used."),
               ('re.subn',
                ['pattern', 'repl', 'string', 'count=0', 'flags=0'],
                "Return a 2-tuple containing (new_string, number).\n    new_string is the string obtained by replacing the leftmost\n    non-overlapping occurrences of the pattern in the source\n    string by the replacement repl.  number is the number of\n    substitutions that were made. repl can be either a string or a\n    callable; if a string, backslash escapes in it are processed.\n    If it is a callable, it's passed the match object and must\n    return a replacement string to be used."),
               ('re.split',
                ['pattern', 'string', 'maxsplit=0', 'flags=0'],
                'Split the source string by the occurrences of the pattern,\n    returning a list containing the resulting substrings.'),
               ('re.findall',
                ['pattern', 'string', 'flags=0'],
                'Return a list of all non-overlapping matches in the string.\n\n    If one or more groups are present in the pattern, return a\n    list of groups; this will be a list of tuples if the pattern\n    has more than one group.\n\n    Empty matches are included in the result.'),
               ('re.finditer',
                ['pattern', 'string', 'flags=0'],
                'Return an iterator over all non-overlapping matches in the\n        string.  For each match, the iterator returns a match object.\n\n        Empty matches are included in the result.'),
               ('re.compile',
                ['pattern', 'flags=0'],
                'Compile a regular expression pattern, returning a pattern object.'),
               ('re.purge', [], 'Clear the regular expression cache'),
               ('re.template',
                ['pattern', 'flags=0'],
                'Compile a template pattern, returning a pattern object'),
               ('re.escape', ['pattern'], 'Escape all non-alphanumeric characters in pattern.'),
               ('re._compile', ['*key'], ''),
               ('re._compile_repl', ['*key'], ''),
               ('re._expand', ['pattern', 'match', 'template'], ''),
               ('re._subx', ['pattern', 'template'], ''),
               ('re._pickle', ['p'], ''),
               ('rexec.test', [], ''),
               ('rfc822.unquote', ['s'], 'Remove quotes from a string.'),
               ('rfc822.quote', ['s'], 'Add quotes around a string.'),
               ('rfc822.parseaddr',
                ['address'],
                'Parse an address into a (realname, mailaddr) tuple.'),
               ('rfc822.dump_address_pair',
                ['pair'],
                'Dump a (name, address) pair in a canonicalized form.'),
               ('rfc822.parsedate_tz',
                ['data'],
                'Convert a date string to a time tuple.\n\n    Accounts for military timezones.\n    '),
               ('rfc822.parsedate', ['data'], 'Convert a time string to a time tuple.'),
               ('rfc822.mktime_tz',
                ['data'],
                'Turn a 10-tuple as returned by parsedate_tz() into a UTC timestamp.'),
               ('rfc822.formatdate',
                ['timeval=None'],
                "Returns time format preferred for Internet standards.\n\n    Sun, 06 Nov 1994 08:49:37 GMT  ; RFC 822, updated by RFC 1123\n\n    According to RFC 1123, day and month names must always be in\n    English.  If not for that, this code could use strftime().  It\n    can't because strftime() honors the locale and could generated\n    non-English names.\n    "),
               ('rlcompleter.get_class_members', ['klass'], ''),
               ('runpy._run_code',
                ['code',
                 'run_globals',
                 'init_globals=None',
                 'mod_name=None',
                 'mod_fname=None',
                 'mod_loader=None',
                 'pkg_name=None'],
                'Helper to run code in nominated namespace'),
               ('runpy._run_module_code',
                ['code',
                 'init_globals=None',
                 'mod_name=None',
                 'mod_fname=None',
                 'mod_loader=None',
                 'pkg_name=None'],
                'Helper to run code in new namespace with sys modified'),
               ('runpy._get_filename', ['loader', 'mod_name'], ''),
               ('runpy._get_module_details', ['mod_name'], ''),
               ('runpy._get_main_module_details', [], ''),
               ('runpy._run_module_as_main',
                ['mod_name', 'alter_argv=True'],
                'Runs the designated module in the __main__ namespace\n\n       Note that the executed module will have full access to the\n       __main__ namespace. If this is not desirable, the run_module()\n       function should be used to run the module code in a fresh namespace.\n\n       At the very least, these variables in __main__ will be overwritten:\n           __name__\n           __file__\n           __loader__\n           __package__\n    '),
               ('runpy.run_module',
                ['mod_name', 'init_globals=None', 'run_name=None', 'alter_sys=False'],
                "Execute a module's code without importing it\n\n       Returns the resulting top level namespace dictionary\n    "),
               ('runpy._get_importer',
                ['path_name'],
                'Python version of PyImport_GetImporter C API function'),
               ('runpy._get_code_from_file', ['fname'], ''),
               ('runpy.run_path',
                ['path_name', 'init_globals=None', 'run_name=None'],
                'Execute code located at the specified filesystem location\n\n       Returns the resulting top level namespace dictionary\n\n       The file path may refer directly to a Python script (i.e.\n       one that could be directly executed with execfile) or else\n       it may refer to a zipfile or directory containing a top\n       level __main__.py script.\n    '),
               ('sgmllib.test', ['args=None'], ''),
               ('shelve.open',
                ['filename', "flag='c'", 'protocol=None', 'writeback=False'],
                "Open a persistent dictionary for reading and writing.\n\n    The filename parameter is the base filename for the underlying\n    database.  As a side-effect, an extension may be added to the\n    filename and more than one file may be created.  The optional flag\n    parameter has the same interpretation as the flag parameter of\n    anydbm.open(). The optional protocol parameter specifies the\n    version of the pickle protocol (0, 1, or 2).\n\n    See the module's __doc__ string for an overview of the interface.\n    "),
               ('shlex.split', ['s', 'comments=False', 'posix=True'], ''),
               ('shutil.copyfileobj',
                ['fsrc', 'fdst', 'length=16*1024'],
                'copy data from file-like object fsrc to file-like object fdst'),
               ('shutil._samefile', ['src', 'dst'], ''),
               ('shutil.copyfile', ['src', 'dst'], 'Copy data from src to dst'),
               ('shutil.copymode', ['src', 'dst'], 'Copy mode bits from src to dst'),
               ('shutil.copystat',
                ['src', 'dst'],
                'Copy all stat info (mode bits, atime, mtime, flags) from src to dst'),
               ('shutil.copy',
                ['src', 'dst'],
                'Copy data and mode bits ("cp src dst").\n\n    The destination may be a directory.\n\n    '),
               ('shutil.copy2',
                ['src', 'dst'],
                'Copy data and all stat info ("cp -p src dst").\n\n    The destination may be a directory.\n\n    '),
               ('shutil.ignore_patterns',
                ['*patterns'],
                'Function that can be used as copytree() ignore parameter.\n\n    Patterns is a sequence of glob-style patterns\n    that are used to exclude files'),
               ('shutil.copytree',
                ['src', 'dst', 'symlinks=False', 'ignore=None'],
                'Recursively copy a directory tree using copy2().\n\n    The destination directory must not already exist.\n    If exception(s) occur, an Error is raised with a list of reasons.\n\n    If the optional symlinks flag is true, symbolic links in the\n    source tree result in symbolic links in the destination tree; if\n    it is false, the contents of the files pointed to by symbolic\n    links are copied.\n\n    The optional ignore argument is a callable. If given, it\n    is called with the `src` parameter, which is the directory\n    being visited by copytree(), and `names` which is the list of\n    `src` contents, as returned by os.listdir():\n\n        callable(src, names) -> ignored_names\n\n    Since copytree() is called recursively, the callable will be\n    called once for each directory that is copied. It returns a\n    list of names relative to the `src` directory that should\n    not be copied.\n\n    XXX Consider this example code rather than the ultimate tool.\n\n    '),
               ('shutil.rmtree',
                ['path', 'ignore_errors=False', 'onerror=None'],
                'Recursively delete a directory tree.\n\n    If ignore_errors is set, errors are ignored; otherwise, if onerror\n    is set, it is called to handle the error with arguments (func,\n    path, exc_info) where func is os.listdir, os.remove, or os.rmdir;\n    path is the argument to that function that caused it to fail; and\n    exc_info is a tuple returned by sys.exc_info().  If ignore_errors\n    is false and onerror is None, an exception is raised.\n\n    '),
               ('shutil._basename', ['path'], ''),
               ('shutil.move',
                ['src', 'dst'],
                'Recursively move a file or directory to another location. This is\n    similar to the Unix "mv" command.\n\n    If the destination is a directory or a symlink to a directory, the source\n    is moved inside the directory. The destination path must not already\n    exist.\n\n    If the destination already exists but is not a directory, it may be\n    overwritten depending on os.rename() semantics.\n\n    If the destination is on our current filesystem, then rename() is used.\n    Otherwise, src is copied to the destination and then removed.\n    A lot more could be done here...  A look at a mv.c shows a lot of\n    the issues this implementation glosses over.\n\n    '),
               ('shutil._destinsrc', ['src', 'dst'], ''),
               ('shutil._get_gid', ['name'], 'Returns a gid, given a group name.'),
               ('shutil._get_uid', ['name'], 'Returns an uid, given a user name.'),
               ('shutil._make_tarball',
                ['base_name',
                 'base_dir',
                 "compress='gzip'",
                 'verbose=0',
                 'dry_run=0',
                 'owner=None',
                 'group=None',
                 'logger=None'],
                'Create a (possibly compressed) tar file from all the files under\n    \'base_dir\'.\n\n    \'compress\' must be "gzip" (the default), "bzip2", or None.\n\n    \'owner\' and \'group\' can be used to define an owner and a group for the\n    archive that is being built. If not provided, the current owner and group\n    will be used.\n\n    The output tar file will be named \'base_name\' +  ".tar", possibly plus\n    the appropriate compression extension (".gz", or ".bz2").\n\n    Returns the output filename.\n    '),
               ('shutil._call_external_zip',
                ['base_dir', 'zip_filename', 'verbose=False', 'dry_run=False'],
                ''),
               ('shutil._make_zipfile',
                ['base_name', 'base_dir', 'verbose=0', 'dry_run=0', 'logger=None'],
                'Create a zip file from all the files under \'base_dir\'.\n\n    The output zip file will be named \'base_name\' + ".zip".  Uses either the\n    "zipfile" Python module (if available) or the InfoZIP "zip" utility\n    (if installed and found on the default search path).  If neither tool is\n    available, raises ExecError.  Returns the name of the output zip\n    file.\n    '),
               ('shutil.get_archive_formats',
                [],
                'Returns a list of supported formats for archiving and unarchiving.\n\n    Each element of the returned sequence is a tuple (name, description)\n    '),
               ('shutil.register_archive_format',
                ['name', 'function', 'extra_args=None', "description=''"],
                'Registers an archive format.\n\n    name is the name of the format. function is the callable that will be\n    used to create archives. If provided, extra_args is a sequence of\n    (name, value) tuples that will be passed as arguments to the callable.\n    description can be provided to describe the format, and will be returned\n    by the get_archive_formats() function.\n    '),
               ('shutil.unregister_archive_format', ['name'], ''),
               ('shutil.make_archive',
                ['base_name',
                 'format',
                 'root_dir=None',
                 'base_dir=None',
                 'verbose=0',
                 'dry_run=0',
                 'owner=None',
                 'group=None',
                 'logger=None'],
                'Create an archive file (eg. zip or tar).\n\n    \'base_name\' is the name of the file to create, minus any format-specific\n    extension; \'format\' is the archive format: one of "zip", "tar", "bztar"\n    or "gztar".\n\n    \'root_dir\' is a directory that will be the root directory of the\n    archive; ie. we typically chdir into \'root_dir\' before creating the\n    archive.  \'base_dir\' is the directory where we start archiving from;\n    ie. \'base_dir\' will be the common prefix of all files and\n    directories in the archive.  \'root_dir\' and \'base_dir\' both default\n    to the current directory.  Returns the name of the archive file.\n\n    \'owner\' and \'group\' are used when creating a tar archive. By default,\n    uses the current owner and group.\n    '),
               ('SimpleHTTPServer.test',
                ['HandlerClass=SimpleHTTPRequestHandler',
                 'ServerClass=BaseHTTPServer.HTTPServer'],
                ''),
               ('SimpleXMLRPCServer.resolve_dotted_attribute',
                ['obj', 'attr', 'allow_dotted_names=True'],
                "resolve_dotted_attribute(a, 'b.c.d') => a.b.c.d\n\n    Resolves a dotted attribute name to an object.  Raises\n    an AttributeError if any attribute in the chain starts with a '_'.\n\n    If the optional allow_dotted_names argument is false, dots are not\n    supported and this function operates similar to getattr(obj, attr).\n    "),
               ('SimpleXMLRPCServer.list_public_methods',
                ['obj'],
                'Returns a list of attribute strings, found in the specified\n    object, which represent callable attributes'),
               ('SimpleXMLRPCServer.remove_duplicates',
                ['lst'],
                'remove_duplicates([2,2,2,1,3,3]) => [3,1,2]\n\n    Returns a copy of a list without duplicates. Every list\n    item must be hashable and the order of the items in the\n    resulting list is not defined.\n    '),
               ('site.makepath', ['*paths'], ''),
               ('site.abs__file__', [], "Set all module' __file__ attribute to an absolute path"),
               ('site.removeduppaths',
                [],
                ' Remove duplicate entries from sys.path along with making them\n    absolute'),
               ('site._init_pathinfo',
                [],
                'Return a set containing all existing directory entries from sys.path'),
               ('site.addpackage',
                ['sitedir', 'name', 'known_paths'],
                "Process a .pth file within the site-packages directory:\n       For each line in the file, either combine it with sitedir to a path\n       and add that to known_paths, or execute it if it starts with 'import '.\n    "),
               ('site.addsitedir',
                ['sitedir', 'known_paths=None'],
                "Add 'sitedir' argument to sys.path if missing and handle .pth files in\n    'sitedir'"),
               ('site.check_enableusersite',
                [],
                'Check if user site directory is safe for inclusion\n\n    The function tests for the command line flag (including environment var),\n    process uid/gid equal to effective uid/gid.\n\n    None: Disabled for security reasons\n    False: Disabled by user (command line option)\n    True: Safe and enabled\n    '),
               ('site.getuserbase',
                [],
                'Returns the `user base` directory path.\n\n    The `user base` directory can be used to store data. If the global\n    variable ``USER_BASE`` is not initialized yet, this function will also set\n    it.\n    '),
               ('site.getusersitepackages',
                [],
                'Returns the user-specific site-packages directory path.\n\n    If the global variable ``USER_SITE`` is not initialized yet, this\n    function will also set it.\n    '),
               ('site.addusersitepackages',
                ['known_paths'],
                'Add a per user site-package to sys.path\n\n    Each user has its own python directory with site-packages in the\n    home directory.\n    '),
               ('site.getsitepackages',
                [],
                'Returns a list containing all global site-packages directories\n    (and possibly site-python).\n\n    For each directory present in the global ``PREFIXES``, this function\n    will find its `site-packages` subdirectory depending on the system\n    environment, and will return a list of full paths.\n    '),
               ('site.addsitepackages',
                ['known_paths'],
                'Add site-packages (and possibly site-python) to sys.path'),
               ('site.setBEGINLIBPATH',
                [],
                'The OS/2 EMX port has optional extension modules that do double duty\n    as DLLs (and must use the .DLL file extension) for other extensions.\n    The library search path needs to be amended so these will be found\n    during module import.  Use BEGINLIBPATH so that these are at the start\n    of the library search path.\n\n    '),
               ('site.setquit',
                [],
                "Define new builtins 'quit' and 'exit'.\n\n    These are objects which make the interpreter exit when called.\n    The repr of each object contains a hint at how it works.\n\n    "),
               ('site.setcopyright', [], "Set 'copyright' and 'credits' in __builtin__"),
               ('site.sethelper', [], ''),
               ('site.aliasmbcs',
                [],
                'On Windows, some default encodings are not provided by Python,\n    while they are always available as "mbcs" in each locale. Make\n    them usable by aliasing to "mbcs" in such a case.'),
               ('site.setencoding',
                [],
                "Set the string encoding used by the Unicode implementation.  The\n    default is 'ascii', but if you're willing to experiment, you can\n    change this."),
               ('site.execsitecustomize', [], 'Run custom site specific code, if available.'),
               ('site.execusercustomize', [], 'Run custom user specific code, if available.'),
               ('site.main', [], ''),
               ('site._script', [], ''),
               ('smtpd.usage', ['code', "msg=''"], ''),
               ('smtpd.parseargs', [], ''),
               ('smtplib.quoteaddr',
                ['addr'],
                'Quote a subset of the email addresses defined by RFC 821.\n\n    Should be able to handle anything rfc822.parseaddr can handle.\n    '),
               ('smtplib.quotedata',
                ['data'],
                "Quote data for email.\n\n    Double leading '.', and change Unix newline '\\n', or Mac '\\r' into\n    Internet CRLF end-of-line.\n    "),
               ('smtplib.prompt', ['prompt'], ''),
               ('sndhdr.what', ['filename'], 'Guess the type of a sound file'),
               ('sndhdr.whathdr', ['filename'], 'Recognize sound headers'),
               ('sndhdr.test_aifc', ['h', 'f'], ''),
               ('sndhdr.test_au', ['h', 'f'], ''),
               ('sndhdr.test_hcom', ['h', 'f'], ''),
               ('sndhdr.test_voc', ['h', 'f'], ''),
               ('sndhdr.test_wav', ['h', 'f'], ''),
               ('sndhdr.test_8svx', ['h', 'f'], ''),
               ('sndhdr.test_sndt', ['h', 'f'], ''),
               ('sndhdr.test_sndr', ['h', 'f'], ''),
               ('sndhdr.get_long_be', ['s'], ''),
               ('sndhdr.get_long_le', ['s'], ''),
               ('sndhdr.get_short_be', ['s'], ''),
               ('sndhdr.get_short_le', ['s'], ''),
               ('sndhdr.test', [], ''),
               ('sndhdr.testall', ['list', 'recursive', 'toplevel'], ''),
               ('socket.ssl', ['sock', 'keyfile=None', 'certfile=None'], ''),
               ('socket.getfqdn',
                ["name=''"],
                'Get fully qualified domain name from name.\n\n    An empty argument is interpreted as meaning the local host.\n\n    First the hostname returned by gethostbyaddr() is checked, then\n    possibly existing aliases. In case no FQDN is available, hostname\n    from gethostname() is returned.\n    '),
               ('socket.meth', ['name', 'self', '*args'], ''),
               ('socket.create_connection',
                ['address', 'timeout=_GLOBAL_DEFAULT_TIMEOUT', 'source_address=None'],
                "Connect to *address* and return the socket object.\n\n    Convenience function.  Connect to *address* (a 2-tuple ``(host,\n    port)``) and return the socket object.  Passing the optional\n    *timeout* parameter will set the timeout on the socket instance\n    before attempting to connect.  If no *timeout* is supplied, the\n    global default timeout setting returned by :func:`getdefaulttimeout`\n    is used.  If *source_address* is set it must be a tuple of (host, port)\n    for the socket to bind as a source address before making the connection.\n    An host of '' or port 0 tells the OS to use the default.\n    "),
               ('sre_compile._identityfunction', ['x'], ''),
               ('sre_compile._compile', ['code', 'pattern', 'flags'], ''),
               ('sre_compile._compile_charset', ['charset', 'flags', 'code', 'fixup=None'], ''),
               ('sre_compile._optimize_charset', ['charset', 'fixup'], ''),
               ('sre_compile._mk_bitmap', ['bits'], ''),
               ('sre_compile._optimize_unicode', ['charset', 'fixup'], ''),
               ('sre_compile._simple', ['av'], ''),
               ('sre_compile._compile_info', ['code', 'pattern', 'flags'], ''),
               ('sre_compile.isstring', ['obj'], ''),
               ('sre_compile._code', ['p', 'flags'], ''),
               ('sre_compile.compile', ['p', 'flags=0'], ''),
               ('sre_constants.makedict', ['list'], ''),
               ('sre_constants.dump', ['f', 'd', 'prefix'], ''),
               ('sre_parse.isident', ['char'], ''),
               ('sre_parse.isdigit', ['char'], ''),
               ('sre_parse.isname', ['name'], ''),
               ('sre_parse._class_escape', ['source', 'escape'], ''),
               ('sre_parse._escape', ['source', 'escape', 'state'], ''),
               ('sre_parse._parse_sub', ['source', 'state', 'nested=1'], ''),
               ('sre_parse._parse_sub_cond', ['source', 'state', 'condgroup'], ''),
               ('sre_parse._parse', ['source', 'state'], ''),
               ('sre_parse.parse', ['str', 'flags=0', 'pattern=None'], ''),
               ('sre_parse.parse_template', ['source', 'pattern'], ''),
               ('sre_parse.expand_template', ['template', 'match'], ''),
               ('ssl.wrap_socket',
                ['sock',
                 'keyfile=None',
                 'certfile=None',
                 'server_side=False',
                 'cert_reqs=CERT_NONE',
                 'ssl_version=PROTOCOL_SSLv23',
                 'ca_certs=None',
                 'do_handshake_on_connect=True',
                 'suppress_ragged_eofs=True',
                 'ciphers=None'],
                ''),
               ('ssl.cert_time_to_seconds',
                ['cert_time'],
                'Takes a date-time string in standard ASN1_print form\n    ("MON DAY 24HOUR:MINUTE:SEC YEAR TIMEZONE") and return\n    a Python time value in seconds past the epoch.'),
               ('ssl.DER_cert_to_PEM_cert',
                ['der_cert_bytes'],
                'Takes a certificate in binary DER format and returns the\n    PEM version of it as a string.'),
               ('ssl.PEM_cert_to_DER_cert',
                ['pem_cert_string'],
                'Takes a certificate in ASCII PEM format and returns the\n    DER-encoded version of it as a byte sequence'),
               ('ssl.get_server_certificate',
                ['addr', 'ssl_version=PROTOCOL_SSLv3', 'ca_certs=None'],
                "Retrieve the certificate from the server at the specified address,\n    and return it as a PEM-encoded string.\n    If 'ca_certs' is specified, validate the server cert against it.\n    If 'ssl_version' is specified, use it in the connection attempt."),
               ('ssl.get_protocol_name', ['protocol_code'], ''),
               ('ssl.sslwrap_simple',
                ['sock', 'keyfile=None', 'certfile=None'],
                'A replacement for the old socket.ssl function.  Designed\n    for compability with Python 2.5 and earlier.  Will disappear in\n    Python 3.0.'),
               ('stat.S_IMODE', ['mode'], ''),
               ('stat.S_IFMT', ['mode'], ''),
               ('stat.S_ISDIR', ['mode'], ''),
               ('stat.S_ISCHR', ['mode'], ''),
               ('stat.S_ISBLK', ['mode'], ''),
               ('stat.S_ISREG', ['mode'], ''),
               ('stat.S_ISFIFO', ['mode'], ''),
               ('stat.S_ISLNK', ['mode'], ''),
               ('stat.S_ISSOCK', ['mode'], ''),
               ('StringIO._complain_ifclosed', ['closed'], ''),
               ('StringIO.test', [], ''),
               ('stringold.lower',
                ['s'],
                'lower(s) -> string\n\n    Return a copy of the string s converted to lowercase.\n\n    '),
               ('stringold.upper',
                ['s'],
                'upper(s) -> string\n\n    Return a copy of the string s converted to uppercase.\n\n    '),
               ('stringold.swapcase',
                ['s'],
                'swapcase(s) -> string\n\n    Return a copy of the string s with upper case characters\n    converted to lowercase and vice versa.\n\n    '),
               ('stringold.strip',
                ['s'],
                'strip(s) -> string\n\n    Return a copy of the string s with leading and trailing\n    whitespace removed.\n\n    '),
               ('stringold.lstrip',
                ['s'],
                'lstrip(s) -> string\n\n    Return a copy of the string s with leading whitespace removed.\n\n    '),
               ('stringold.rstrip',
                ['s'],
                'rstrip(s) -> string\n\n    Return a copy of the string s with trailing whitespace\n    removed.\n\n    '),
               ('stringold.split',
                ['s', 'sep=None', 'maxsplit=0'],
                'split(str [,sep [,maxsplit]]) -> list of strings\n\n    Return a list of the words in the string s, using sep as the\n    delimiter string.  If maxsplit is nonzero, splits into at most\n    maxsplit words If sep is not specified, any whitespace string\n    is a separator.  Maxsplit defaults to 0.\n\n    (split and splitfields are synonymous)\n\n    '),
               ('stringold.join',
                ['words', "sep=' '"],
                'join(list [,sep]) -> string\n\n    Return a string composed of the words in list, with\n    intervening occurrences of sep.  The default separator is a\n    single space.\n\n    (joinfields and join are synonymous)\n\n    '),
               ('stringold.index',
                ['s', '*args'],
                'index(s, sub [,start [,end]]) -> int\n\n    Like find but raises ValueError when the substring is not found.\n\n    '),
               ('stringold.rindex',
                ['s', '*args'],
                'rindex(s, sub [,start [,end]]) -> int\n\n    Like rfind but raises ValueError when the substring is not found.\n\n    '),
               ('stringold.count',
                ['s', '*args'],
                'count(s, sub[, start[,end]]) -> int\n\n    Return the number of occurrences of substring sub in string\n    s[start:end].  Optional arguments start and end are\n    interpreted as in slice notation.\n\n    '),
               ('stringold.find',
                ['s', '*args'],
                'find(s, sub [,start [,end]]) -> in\n\n    Return the lowest index in s where substring sub is found,\n    such that sub is contained within s[start,end].  Optional\n    arguments start and end are interpreted as in slice notation.\n\n    Return -1 on failure.\n\n    '),
               ('stringold.rfind',
                ['s', '*args'],
                'rfind(s, sub [,start [,end]]) -> int\n\n    Return the highest index in s where substring sub is found,\n    such that sub is contained within s[start,end].  Optional\n    arguments start and end are interpreted as in slice notation.\n\n    Return -1 on failure.\n\n    '),
               ('stringold.atof',
                ['s'],
                'atof(s) -> float\n\n    Return the floating point number represented by the string s.\n\n    '),
               ('stringold.atoi',
                ['*args'],
                'atoi(s [,base]) -> int\n\n    Return the integer represented by the string s in the given\n    base, which defaults to 10.  The string s must consist of one\n    or more digits, possibly preceded by a sign.  If base is 0, it\n    is chosen from the leading characters of s, 0 for octal, 0x or\n    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is\n    accepted.\n\n    '),
               ('stringold.atol',
                ['*args'],
                'atol(s [,base]) -> long\n\n    Return the long integer represented by the string s in the\n    given base, which defaults to 10.  The string s must consist\n    of one or more digits, possibly preceded by a sign.  If base\n    is 0, it is chosen from the leading characters of s, 0 for\n    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding\n    0x or 0X is accepted.  A trailing L or l is not accepted,\n    unless base is 0.\n\n    '),
               ('stringold.ljust',
                ['s', 'width'],
                'ljust(s, width) -> string\n\n    Return a left-justified version of s, in a field of the\n    specified width, padded with spaces as needed.  The string is\n    never truncated.\n\n    '),
               ('stringold.rjust',
                ['s', 'width'],
                'rjust(s, width) -> string\n\n    Return a right-justified version of s, in a field of the\n    specified width, padded with spaces as needed.  The string is\n    never truncated.\n\n    '),
               ('stringold.center',
                ['s', 'width'],
                'center(s, width) -> string\n\n    Return a center version of s, in a field of the specified\n    width. padded with spaces as needed.  The string is never\n    truncated.\n\n    '),
               ('stringold.zfill',
                ['x', 'width'],
                'zfill(x, width) -> string\n\n    Pad a numeric string x with zeros on the left, to fill a field\n    of the specified width.  The string x is never truncated.\n\n    '),
               ('stringold.expandtabs',
                ['s', 'tabsize=8'],
                'expandtabs(s [,tabsize]) -> string\n\n    Return a copy of the string s with all tab characters replaced\n    by the appropriate number of spaces, depending on the current\n    column, and the tabsize (default 8).\n\n    '),
               ('stringold.translate',
                ['s', 'table', "deletions=''"],
                'translate(s,table [,deletechars]) -> string\n\n    Return a copy of the string s, where all characters occurring\n    in the optional argument deletechars are removed, and the\n    remaining characters have been mapped through the given\n    translation table, which must be a string of length 256.\n\n    '),
               ('stringold.capitalize',
                ['s'],
                'capitalize(s) -> string\n\n    Return a copy of the string s with only its first character\n    capitalized.\n\n    '),
               ('stringold.capwords',
                ['s', 'sep=None'],
                'capwords(s, [sep]) -> string\n\n    Split the argument into words using split, capitalize each\n    word using capitalize, and join the capitalized words using\n    join. Note that this replaces runs of whitespace characters by\n    a single space.\n\n    '),
               ('stringold.maketrans',
                ['fromstr', 'tostr'],
                'maketrans(frm, to) -> string\n\n    Return a translation table (a string of 256 bytes long)\n    suitable for use in string.translate.  The strings frm and to\n    must be of the same length.\n\n    '),
               ('stringold.replace',
                ['s', 'old', 'new', 'maxsplit=0'],
                'replace (str, old, new[, maxsplit]) -> string\n\n    Return a copy of string str with all occurrences of substring\n    old replaced by new. If the optional argument maxsplit is\n    given, only the first maxsplit occurrences are replaced.\n\n    '),
               ('stringprep.in_table_a1', ['code'], ''),
               ('stringprep.in_table_b1', ['code'], ''),
               ('stringprep.map_table_b3', ['code'], ''),
               ('stringprep.map_table_b2', ['a'], ''),
               ('stringprep.in_table_c11', ['code'], ''),
               ('stringprep.in_table_c12', ['code'], ''),
               ('stringprep.in_table_c11_c12', ['code'], ''),
               ('stringprep.in_table_c21', ['code'], ''),
               ('stringprep.in_table_c22', ['code'], ''),
               ('stringprep.in_table_c21_c22', ['code'], ''),
               ('stringprep.in_table_c3', ['code'], ''),
               ('stringprep.in_table_c4', ['code'], ''),
               ('stringprep.in_table_c5', ['code'], ''),
               ('stringprep.in_table_c6', ['code'], ''),
               ('stringprep.in_table_c7', ['code'], ''),
               ('stringprep.in_table_c8', ['code'], ''),
               ('stringprep.in_table_c9', ['code'], ''),
               ('stringprep.in_table_d1', ['code'], ''),
               ('stringprep.in_table_d2', ['code'], ''),
               ('string.capwords',
                ['s', 'sep=None'],
                'capwords(s [,sep]) -> string\n\n    Split the argument into words using split, capitalize each\n    word using capitalize, and join the capitalized words using\n    join.  If the optional second argument sep is absent or None,\n    runs of whitespace characters are replaced by a single space\n    and leading and trailing whitespace are removed, otherwise\n    sep is used to split and join the words.\n\n    '),
               ('string.maketrans',
                ['fromstr', 'tostr'],
                'maketrans(frm, to) -> string\n\n    Return a translation table (a string of 256 bytes long)\n    suitable for use in string.translate.  The strings frm and to\n    must be of the same length.\n\n    '),
               ('string.lower',
                ['s'],
                'lower(s) -> string\n\n    Return a copy of the string s converted to lowercase.\n\n    '),
               ('string.upper',
                ['s'],
                'upper(s) -> string\n\n    Return a copy of the string s converted to uppercase.\n\n    '),
               ('string.swapcase',
                ['s'],
                'swapcase(s) -> string\n\n    Return a copy of the string s with upper case characters\n    converted to lowercase and vice versa.\n\n    '),
               ('string.strip',
                ['s', 'chars=None'],
                'strip(s [,chars]) -> string\n\n    Return a copy of the string s with leading and trailing\n    whitespace removed.\n    If chars is given and not None, remove characters in chars instead.\n    If chars is unicode, S will be converted to unicode before stripping.\n\n    '),
               ('string.lstrip',
                ['s', 'chars=None'],
                'lstrip(s [,chars]) -> string\n\n    Return a copy of the string s with leading whitespace removed.\n    If chars is given and not None, remove characters in chars instead.\n\n    '),
               ('string.rstrip',
                ['s', 'chars=None'],
                'rstrip(s [,chars]) -> string\n\n    Return a copy of the string s with trailing whitespace removed.\n    If chars is given and not None, remove characters in chars instead.\n\n    '),
               ('string.split',
                ['s', 'sep=None', 'maxsplit=-1'],
                'split(s [,sep [,maxsplit]]) -> list of strings\n\n    Return a list of the words in the string s, using sep as the\n    delimiter string.  If maxsplit is given, splits at no more than\n    maxsplit places (resulting in at most maxsplit+1 words).  If sep\n    is not specified or is None, any whitespace string is a separator.\n\n    (split and splitfields are synonymous)\n\n    '),
               ('string.rsplit',
                ['s', 'sep=None', 'maxsplit=-1'],
                'rsplit(s [,sep [,maxsplit]]) -> list of strings\n\n    Return a list of the words in the string s, using sep as the\n    delimiter string, starting at the end of the string and working\n    to the front.  If maxsplit is given, at most maxsplit splits are\n    done. If sep is not specified or is None, any whitespace string\n    is a separator.\n    '),
               ('string.join',
                ['words', "sep=' '"],
                'join(list [,sep]) -> string\n\n    Return a string composed of the words in list, with\n    intervening occurrences of sep.  The default separator is a\n    single space.\n\n    (joinfields and join are synonymous)\n\n    '),
               ('string.index',
                ['s', '*args'],
                'index(s, sub [,start [,end]]) -> int\n\n    Like find but raises ValueError when the substring is not found.\n\n    '),
               ('string.rindex',
                ['s', '*args'],
                'rindex(s, sub [,start [,end]]) -> int\n\n    Like rfind but raises ValueError when the substring is not found.\n\n    '),
               ('string.count',
                ['s', '*args'],
                'count(s, sub[, start[,end]]) -> int\n\n    Return the number of occurrences of substring sub in string\n    s[start:end].  Optional arguments start and end are\n    interpreted as in slice notation.\n\n    '),
               ('string.find',
                ['s', '*args'],
                'find(s, sub [,start [,end]]) -> in\n\n    Return the lowest index in s where substring sub is found,\n    such that sub is contained within s[start,end].  Optional\n    arguments start and end are interpreted as in slice notation.\n\n    Return -1 on failure.\n\n    '),
               ('string.rfind',
                ['s', '*args'],
                'rfind(s, sub [,start [,end]]) -> int\n\n    Return the highest index in s where substring sub is found,\n    such that sub is contained within s[start,end].  Optional\n    arguments start and end are interpreted as in slice notation.\n\n    Return -1 on failure.\n\n    '),
               ('string.atof',
                ['s'],
                'atof(s) -> float\n\n    Return the floating point number represented by the string s.\n\n    '),
               ('string.atoi',
                ['s', 'base=10'],
                'atoi(s [,base]) -> int\n\n    Return the integer represented by the string s in the given\n    base, which defaults to 10.  The string s must consist of one\n    or more digits, possibly preceded by a sign.  If base is 0, it\n    is chosen from the leading characters of s, 0 for octal, 0x or\n    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is\n    accepted.\n\n    '),
               ('string.atol',
                ['s', 'base=10'],
                'atol(s [,base]) -> long\n\n    Return the long integer represented by the string s in the\n    given base, which defaults to 10.  The string s must consist\n    of one or more digits, possibly preceded by a sign.  If base\n    is 0, it is chosen from the leading characters of s, 0 for\n    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding\n    0x or 0X is accepted.  A trailing L or l is not accepted,\n    unless base is 0.\n\n    '),
               ('string.ljust',
                ['s', 'width', '*args'],
                'ljust(s, width[, fillchar]) -> string\n\n    Return a left-justified version of s, in a field of the\n    specified width, padded with spaces as needed.  The string is\n    never truncated.  If specified the fillchar is used instead of spaces.\n\n    '),
               ('string.rjust',
                ['s', 'width', '*args'],
                'rjust(s, width[, fillchar]) -> string\n\n    Return a right-justified version of s, in a field of the\n    specified width, padded with spaces as needed.  The string is\n    never truncated.  If specified the fillchar is used instead of spaces.\n\n    '),
               ('string.center',
                ['s', 'width', '*args'],
                'center(s, width[, fillchar]) -> string\n\n    Return a center version of s, in a field of the specified\n    width. padded with spaces as needed.  The string is never\n    truncated.  If specified the fillchar is used instead of spaces.\n\n    '),
               ('string.zfill',
                ['x', 'width'],
                'zfill(x, width) -> string\n\n    Pad a numeric string x with zeros on the left, to fill a field\n    of the specified width.  The string x is never truncated.\n\n    '),
               ('string.expandtabs',
                ['s', 'tabsize=8'],
                'expandtabs(s [,tabsize]) -> string\n\n    Return a copy of the string s with all tab characters replaced\n    by the appropriate number of spaces, depending on the current\n    column, and the tabsize (default 8).\n\n    '),
               ('string.translate',
                ['s', 'table', "deletions=''"],
                'translate(s,table [,deletions]) -> string\n\n    Return a copy of the string s, where all characters occurring\n    in the optional argument deletions are removed, and the\n    remaining characters have been mapped through the given\n    translation table, which must be a string of length 256.  The\n    deletions argument is not allowed for Unicode strings.\n\n    '),
               ('string.capitalize',
                ['s'],
                'capitalize(s) -> string\n\n    Return a copy of the string s with only its first character\n    capitalized.\n\n    '),
               ('string.replace',
                ['s', 'old', 'new', 'maxreplace=-1'],
                'replace (str, old, new[, maxreplace]) -> string\n\n    Return a copy of string str with all occurrences of substring\n    old replaced by new. If the optional argument maxreplace is\n    given, only the first maxreplace occurrences are replaced.\n\n    '),
               ('_strptime._getlang', [], ''),
               ('_strptime._calc_julian_from_U_or_W',
                ['year', 'week_of_year', 'day_of_week', 'week_starts_Mon'],
                'Calculate the Julian day based on the year, week of the year, and day of\n    the week, with week_start_day representing whether the week of the year\n    assumes the week starts on Sunday or Monday (6 or 0).'),
               ('_strptime._strptime',
                ['data_string', "format='%a %b %d %H:%M:%S %Y'"],
                'Return a time struct based on the input string and the format string.'),
               ('_strptime._strptime_time', ['data_string', "format='%a %b %d %H:%M:%S %Y'"], ''),
               ('subprocess._cleanup', [], ''),
               ('subprocess._eintr_retry_call', ['func', '*args'], ''),
               ('subprocess.call',
                ['*popenargs', '**kwargs'],
                'Run command with arguments.  Wait for command to complete, then\n    return the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    retcode = call(["ls", "-l"])\n    '),
               ('subprocess.check_call',
                ['*popenargs', '**kwargs'],
                'Run command with arguments.  Wait for command to complete.  If\n    the exit code was zero then return, otherwise raise\n    CalledProcessError.  The CalledProcessError object will have the\n    return code in the returncode attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    check_call(["ls", "-l"])\n    '),
               ('subprocess.check_output',
                ['*popenargs', '**kwargs'],
                'Run command with arguments and return its output as a byte string.\n\n    If the exit code was non-zero it raises a CalledProcessError.  The\n    CalledProcessError object will have the return code in the returncode\n    attribute and output in the output attribute.\n\n    The arguments are the same as for the Popen constructor.  Example:\n\n    >>> check_output(["ls", "-l", "/dev/null"])\n    \'crw-rw-rw- 1 root root 1, 3 Oct 18  2007 /dev/null\\n\'\n\n    The stdout argument is not allowed as it is used internally.\n    To capture standard error in the result, use stderr=STDOUT.\n\n    >>> check_output(["/bin/sh", "-c",\n    ...               "ls -l non_existent_file ; exit 0"],\n    ...              stderr=STDOUT)\n    \'ls: non_existent_file: No such file or directory\\n\'\n    '),
               ('subprocess.list2cmdline',
                ['seq'],
                '\n    Translate a sequence of arguments into a command line\n    string, using the same rules as the MS C runtime:\n\n    1) Arguments are delimited by white space, which is either a\n       space or a tab.\n\n    2) A string surrounded by double quotation marks is\n       interpreted as a single argument, regardless of white space\n       contained within.  A quoted string can be embedded in an\n       argument.\n\n    3) A double quotation mark preceded by a backslash is\n       interpreted as a literal double quotation mark.\n\n    4) Backslashes are interpreted literally, unless they\n       immediately precede a double quotation mark.\n\n    5) If backslashes immediately precede a double quotation mark,\n       every pair of backslashes is interpreted as a literal\n       backslash.  If the number of backslashes is odd, the last\n       backslash escapes the next double quotation mark as\n       described in rule 3.\n    '),
               ('subprocess._demo_posix', [], ''),
               ('subprocess._demo_windows', [], ''),
               ('sunaudio.get_long_be', ['s'], 'Convert a 4-char value to integer.'),
               ('sunaudio.gethdr', ['fp'], 'Read a sound header from an open file.'),
               ('sunaudio.printhdr',
                ['file'],
                'Read and print the sound header of a named file.'),
               ('sunau._read_u32', ['file'], ''),
               ('sunau._write_u32', ['file', 'x'], ''),
               ('sunau.open', ['f', 'mode=None'], ''),
               ('symbol.main', [], ''),
               ('symtable.symtable', ['code', 'filename', 'compile_type'], ''),
               ('sysconfig._safe_realpath', ['path'], ''),
               ('sysconfig.is_python_build', [], ''),
               ('sysconfig._subst_vars', ['s', 'local_vars'], ''),
               ('sysconfig._extend_dict', ['target_dict', 'other_dict'], ''),
               ('sysconfig._expand_vars', ['scheme', 'vars'], ''),
               ('sysconfig._get_default_scheme', [], ''),
               ('sysconfig._getuserbase', [], ''),
               ('sysconfig._parse_makefile',
                ['filename', 'vars=None'],
                'Parse a Makefile-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    '),
               ('sysconfig._get_makefile_filename', [], ''),
               ('sysconfig._init_posix',
                ['vars'],
                'Initialize the module as appropriate for POSIX systems.'),
               ('sysconfig._init_non_posix',
                ['vars'],
                'Initialize the module as appropriate for NT'),
               ('sysconfig.parse_config_h',
                ['fp', 'vars=None'],
                'Parse a config.h-style file.\n\n    A dictionary containing name/value pairs is returned.  If an\n    optional dictionary is passed in as the second argument, it is\n    used instead of a new dictionary.\n    '),
               ('sysconfig.get_config_h_filename', [], 'Returns the path of pyconfig.h.'),
               ('sysconfig.get_scheme_names',
                [],
                'Returns a tuple containing the schemes names.'),
               ('sysconfig.get_path_names', [], 'Returns a tuple containing the paths names.'),
               ('sysconfig.get_paths',
                ['scheme=_get_default_scheme()', 'vars=None', 'expand=True'],
                'Returns a mapping containing an install scheme.\n\n    ``scheme`` is the install scheme name. If not provided, it will\n    return the default scheme for the current platform.\n    '),
               ('sysconfig.get_path',
                ['name', 'scheme=_get_default_scheme()', 'vars=None', 'expand=True'],
                'Returns a path corresponding to the scheme.\n\n    ``scheme`` is the install scheme name.\n    '),
               ('sysconfig.get_config_vars',
                ['*args'],
                "With no arguments, return a dictionary of all configuration\n    variables relevant for the current platform.\n\n    On Unix, this means every variable defined in Python's installed Makefile;\n    On Windows and Mac OS it's a much smaller set.\n\n    With arguments, return a list of values that result from looking up\n    each argument in the configuration variable dictionary.\n    "),
               ('sysconfig.get_config_var',
                ['name'],
                "Return the value of a single variable using the dictionary returned by\n    'get_config_vars()'.\n\n    Equivalent to get_config_vars().get(name)\n    "),
               ('sysconfig.get_platform',
                [],
                "Return a string that identifies the current platform.\n\n    This is used mainly to distinguish platform-specific build directories and\n    platform-specific built distributions.  Typically includes the OS name\n    and version and the architecture (as supplied by 'os.uname()'),\n    although the exact information included depends on the OS; eg. for IRIX\n    the architecture isn't particularly important (IRIX only runs on SGI\n    hardware), but for Linux the kernel version isn't particularly\n    important.\n\n    Examples of returned values:\n       linux-i586\n       linux-alpha (?)\n       solaris-2.6-sun4u\n       irix-5.3\n       irix64-6.2\n\n    Windows will return one of:\n       win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T, etc)\n       win-ia64 (64bit Windows on Itanium)\n       win32 (all others - specifically, sys.platform is returned)\n\n    For other non-POSIX platforms, currently just returns 'sys.platform'.\n    "),
               ('sysconfig.get_python_version', [], ''),
               ('tabnanny.errprint', ['*args'], ''),
               ('tabnanny.main', [], ''),
               ('tabnanny.check',
                ['file'],
                'check(file_or_dir)\n\n    If file_or_dir is a directory and not a symbolic link, then recursively\n    descend the directory tree named by file_or_dir, checking all .py files\n    along the way. If file_or_dir is an ordinary Python source file, it is\n    checked for whitespace related problems. The diagnostic messages are\n    written to standard output using the print statement.\n    '),
               ('tabnanny.format_witnesses', ['w'], ''),
               ('tabnanny.process_tokens', ['tokens'], ''),
               ('tarfile.stn',
                ['s', 'length'],
                'Convert a python string to a null-terminated string buffer.\n    '),
               ('tarfile.nts',
                ['s'],
                'Convert a null-terminated string field to a python string.\n    '),
               ('tarfile.nti', ['s'], 'Convert a number field to a python number.\n    '),
               ('tarfile.itn',
                ['n', 'digits=8', 'format=DEFAULT_FORMAT'],
                'Convert a python number to a number field.\n    '),
               ('tarfile.uts',
                ['s', 'encoding', 'errors'],
                'Convert a unicode object to a string.\n    '),
               ('tarfile.calc_chksums',
                ['buf'],
                "Calculate the checksum for a member's header by summing up all\n       characters except for the chksum field which is treated as if\n       it was filled with spaces. According to the GNU tar sources,\n       some tars (Sun and NeXT) calculate chksum with signed char,\n       which will be different if there are chars in the buffer with\n       the high bit set. So we calculate two checksums, unsigned and\n       signed.\n    "),
               ('tarfile.copyfileobj',
                ['src', 'dst', 'length=None'],
                'Copy length bytes from fileobj src to fileobj dst.\n       If length is None, copy the entire content.\n    '),
               ('tarfile.filemode',
                ['mode'],
                "Convert a file's mode to a string of the form\n       -rwxrwxrwx.\n       Used by TarFile.list()\n    "),
               ('tarfile.is_tarfile',
                ['name'],
                'Return True if name points to a tar archive that we\n       are able to handle, else return False.\n    '),
               ('telnetlib.test',
                [],
                'Test program for telnetlib.\n\n    Usage: python telnetlib.py [-d] ... [host [port]]\n\n    Default host is localhost; default port is 23.\n\n    '),
               ('tempfile._set_cloexec', ['fd'], ''),
               ('tempfile._set_cloexec', ['fd'], ''),
               ('tempfile._stat', ['fn'], ''),
               ('tempfile._exists', ['fn'], ''),
               ('tempfile._candidate_tempdir_list',
                [],
                'Generate a list of candidate temporary directories which\n    _get_default_tempdir will try.'),
               ('tempfile._get_default_tempdir',
                [],
                'Calculate the default directory to use for temporary files.\n    This routine should be called exactly once.\n\n    We determine whether or not a candidate temp dir is usable by\n    trying to create and write to a file in that directory.  If this\n    is successful, the test file is deleted.  To prevent denial of\n    service, the name of the test file must be randomized.'),
               ('tempfile._get_candidate_names',
                [],
                'Common setup sequence for all user-callable interfaces.'),
               ('tempfile._mkstemp_inner',
                ['dir', 'pre', 'suf', 'flags'],
                'Code common to mkstemp, TemporaryFile, and NamedTemporaryFile.'),
               ('tempfile.gettempprefix', [], 'Accessor for tempdir.template.'),
               ('tempfile.gettempdir', [], 'Accessor for tempfile.tempdir.'),
               ('tempfile.mkstemp',
                ["suffix=''", 'prefix=template', 'dir=None', 'text=False'],
                "User-callable function to create and return a unique temporary\n    file.  The return value is a pair (fd, name) where fd is the\n    file descriptor returned by os.open, and name is the filename.\n\n    If 'suffix' is specified, the file name will end with that suffix,\n    otherwise there will be no suffix.\n\n    If 'prefix' is specified, the file name will begin with that prefix,\n    otherwise a default prefix is used.\n\n    If 'dir' is specified, the file will be created in that directory,\n    otherwise a default directory is used.\n\n    If 'text' is specified and true, the file is opened in text\n    mode.  Else (the default) the file is opened in binary mode.  On\n    some operating systems, this makes no difference.\n\n    The file is readable and writable only by the creating user ID.\n    If the operating system uses permission bits to indicate whether a\n    file is executable, the file is executable by no one. The file\n    descriptor is not inherited by children of this process.\n\n    Caller is responsible for deleting the file when done with it.\n    "),
               ('tempfile.mkdtemp',
                ["suffix=''", 'prefix=template', 'dir=None'],
                "User-callable function to create and return a unique temporary\n    directory.  The return value is the pathname of the directory.\n\n    Arguments are as for mkstemp, except that the 'text' argument is\n    not accepted.\n\n    The directory is readable, writable, and searchable only by the\n    creating user.\n\n    Caller is responsible for deleting the directory when done with it.\n    "),
               ('tempfile.mktemp',
                ["suffix=''", 'prefix=template', 'dir=None'],
                "User-callable function to return a unique temporary file name.  The\n    file is not created.\n\n    Arguments are as for mkstemp, except that the 'text' argument is\n    not accepted.\n\n    This function is unsafe and should not be used.  The file name\n    refers to a file that did not exist at some point, but by the time\n    you get around to creating it, someone else may have beaten you to\n    the punch.\n    "),
               ('tempfile.NamedTemporaryFile',
                ["mode='w+b'",
                 'bufsize=-1',
                 "suffix=''",
                 'prefix=template',
                 'dir=None',
                 'delete=True'],
                'Create and return a temporary file.\n    Arguments:\n    \'prefix\', \'suffix\', \'dir\' -- as for mkstemp.\n    \'mode\' -- the mode argument to os.fdopen (default "w+b").\n    \'bufsize\' -- the buffer size argument to os.fdopen (default -1).\n    \'delete\' -- whether the file is deleted on close (default True).\n    The file is created as mkstemp() would do it.\n\n    Returns an object with a file-like interface; the name of the file\n    is accessible as file.name.  The file will be automatically deleted\n    when it is closed unless the \'delete\' argument is set to False.\n    '),
               ('tempfile.TemporaryFile',
                ["mode='w+b'", 'bufsize=-1', "suffix=''", 'prefix=template', 'dir=None'],
                'Create and return a temporary file.\n        Arguments:\n        \'prefix\', \'suffix\', \'dir\' -- as for mkstemp.\n        \'mode\' -- the mode argument to os.fdopen (default "w+b").\n        \'bufsize\' -- the buffer size argument to os.fdopen (default -1).\n        The file is created as mkstemp() would do it.\n\n        Returns an object with a file-like interface.  The file has no\n        name, and will cease to exist when it is closed.\n        '),
               ('textwrap.wrap',
                ['text', 'width=70', '**kwargs'],
                "Wrap a single paragraph of text, returning a list of wrapped lines.\n\n    Reformat the single paragraph in 'text' so it fits in lines of no\n    more than 'width' columns, and return a list of wrapped lines.  By\n    default, tabs in 'text' are expanded with string.expandtabs(), and\n    all other whitespace characters (including newline) are converted to\n    space.  See TextWrapper class for available keyword args to customize\n    wrapping behaviour.\n    "),
               ('textwrap.fill',
                ['text', 'width=70', '**kwargs'],
                "Fill a single paragraph of text, returning a new string.\n\n    Reformat the single paragraph in 'text' to fit in lines of no more\n    than 'width' columns, and return a new string containing the entire\n    wrapped paragraph.  As with wrap(), tabs are expanded and other\n    whitespace characters converted to space.  See TextWrapper class for\n    available keyword args to customize wrapping behaviour.\n    "),
               ('textwrap.dedent',
                ['text'],
                'Remove any common leading whitespace from every line in `text`.\n\n    This can be used to make triple-quoted strings line up with the left\n    edge of the display, while still presenting them in the source code\n    in indented form.\n\n    Note that tabs and spaces are both treated as whitespace, but they\n    are not equal: the lines "  hello" and "\thello" are\n    considered to have no common leading whitespace.  (This behaviour is\n    new in Python 2.5; older versions of this module incorrectly\n    expanded tabs before searching for common leading whitespace.)\n    '),
               ('_threading_local._patch', ['self'], ''),
               ('threading.setprofile', ['func'], ''),
               ('threading.settrace', ['func'], ''),
               ('threading.RLock', ['*args', '**kwargs'], ''),
               ('threading.Condition', ['*args', '**kwargs'], ''),
               ('threading.Semaphore', ['*args', '**kwargs'], ''),
               ('threading.BoundedSemaphore', ['*args', '**kwargs'], ''),
               ('threading.Event', ['*args', '**kwargs'], ''),
               ('threading._newname', ["template='Thread-%d'"], ''),
               ('threading.Timer', ['*args', '**kwargs'], ''),
               ('threading._pickSomeNonDaemonThread', [], ''),
               ('threading.currentThread', [], ''),
               ('threading.activeCount', [], ''),
               ('threading._enumerate', [], ''),
               ('threading.enumerate', [], ''),
               ('threading._after_fork', [], ''),
               ('threading._test', [], ''),
               ('timeit.reindent',
                ['src', 'indent'],
                'Helper to reindent a multi-line statement.'),
               ('timeit._template_func',
                ['setup', 'func'],
                'Create a timer function. Used if the "statement" is a callable.'),
               ('timeit.timeit',
                ["stmt='pass'", "setup='pass'", 'timer=default_timer', 'number=default_number'],
                'Convenience function to create Timer object and call timeit method.'),
               ('timeit.repeat',
                ["stmt='pass'",
                 "setup='pass'",
                 'timer=default_timer',
                 'repeat=default_repeat',
                 'number=default_number'],
                'Convenience function to create Timer object and call repeat method.'),
               ('timeit.main',
                ['args=None'],
                'Main program, used when run as a script.\n\n    The optional argument specifies the command line to be parsed,\n    defaulting to sys.argv[1:].\n\n    The return value is an exit code to be passed to sys.exit(); it\n    may be None to indicate success.\n\n    When an exception happens during timing, a traceback is printed to\n    stderr and the return value is 1.  Exceptions at other times\n    (including the template compilation) are not caught.\n    '),
               ('toaiff.toaiff', ['filename'], ''),
               ('toaiff._toaiff', ['filename', 'temps'], ''),
               ('tokenize.group', ['*choices'], ''),
               ('tokenize.any', ['*choices'], ''),
               ('tokenize.maybe', ['*choices'], ''),
               ('tokenize.printtoken', ['type', 'token', 'srow_scol', 'erow_ecol', 'line'], ''),
               ('tokenize.tokenize',
                ['readline', 'tokeneater=printtoken'],
                '\n    The tokenize() function accepts two parameters: one representing the\n    input stream, and one providing an output mechanism for tokenize().\n\n    The first parameter, readline, must be a callable object which provides\n    the same interface as the readline() method of built-in file objects.\n    Each call to the function should return one line of input as a string.\n\n    The second parameter, tokeneater, must also be a callable object. It is\n    called once for each token, with five arguments, corresponding to the\n    tuples generated by generate_tokens().\n    '),
               ('tokenize.tokenize_loop', ['readline', 'tokeneater'], ''),
               ('tokenize.untokenize',
                ['iterable'],
                'Transform tokens back into Python source code.\n\n    Each element returned by the iterable must be a token sequence\n    with at least two elements, a token number and token value.  If\n    only two tokens are passed, the resulting output is poor.\n\n    Round-trip invariant for full input:\n        Untokenized source will match input source exactly\n\n    Round-trip invariant for limited intput:\n        # Output text will tokenize the back to the input\n        t1 = [tok[:2] for tok in generate_tokens(f.readline)]\n        newcode = untokenize(t1)\n        readline = iter(newcode.splitlines(1)).next\n        t2 = [tok[:2] for tok in generate_tokens(readline)]\n        assert t1 == t2\n    '),
               ('tokenize.generate_tokens',
                ['readline'],
                '\n    The generate_tokens() generator requires one argment, readline, which\n    must be a callable object which provides the same interface as the\n    readline() method of built-in file objects. Each call to the function\n    should return one line of input as a string.  Alternately, readline\n    can be a callable function terminating with StopIteration:\n        readline = open(myfile).next    # Example of alternate readline\n\n    The generator produces 5-tuples with these members: the token type; the\n    token string; a 2-tuple (srow, scol) of ints specifying the row and\n    column where the token begins in the source; a 2-tuple (erow, ecol) of\n    ints specifying the row and column where the token ends in the source;\n    and the line on which the token was found. The line passed is the\n    logical line; continuation lines are included.\n    '),
               ('token.ISTERMINAL', ['x'], ''),
               ('token.ISNONTERMINAL', ['x'], ''),
               ('token.ISEOF', ['x'], ''),
               ('token.main', [], ''),
               ('traceback._print', ['file', "str=''", "terminator='\\n'"], ''),
               ('traceback.print_list',
                ['extracted_list', 'file=None'],
                'Print the list of tuples as returned by extract_tb() or\n    extract_stack() as a formatted stack trace to the given file.'),
               ('traceback.format_list',
                ['extracted_list'],
                'Format a list of traceback entry tuples for printing.\n\n    Given a list of tuples as returned by extract_tb() or\n    extract_stack(), return a list of strings ready for printing.\n    Each string in the resulting list corresponds to the item with the\n    same index in the argument list.  Each string ends in a newline;\n    the strings may contain internal newlines as well, for those items\n    whose source text line is not None.\n    '),
               ('traceback.print_tb',
                ['tb', 'limit=None', 'file=None'],
                "Print up to 'limit' stack trace entries from the traceback 'tb'.\n\n    If 'limit' is omitted or None, all entries are printed.  If 'file'\n    is omitted or None, the output goes to sys.stderr; otherwise\n    'file' should be an open file or file-like object with a write()\n    method.\n    "),
               ('traceback.format_tb',
                ['tb', 'limit=None'],
                "A shorthand for 'format_list(extract_stack(f, limit))."),
               ('traceback.extract_tb',
                ['tb', 'limit=None'],
                "Return list of up to limit pre-processed entries from traceback.\n\n    This is useful for alternate formatting of stack traces.  If\n    'limit' is omitted or None, all entries are extracted.  A\n    pre-processed stack trace entry is a quadruple (filename, line\n    number, function name, text) representing the information that is\n    usually printed for a stack trace.  The text is a string with\n    leading and trailing whitespace stripped; if the source is not\n    available it is None.\n    "),
               ('traceback.print_exception',
                ['etype', 'value', 'tb', 'limit=None', 'file=None'],
                'Print exception up to \'limit\' stack trace entries from \'tb\' to \'file\'.\n\n    This differs from print_tb() in the following ways: (1) if\n    traceback is not None, it prints a header "Traceback (most recent\n    call last):"; (2) it prints the exception type and value after the\n    stack trace; (3) if type is SyntaxError and value has the\n    appropriate format, it prints the line where the syntax error\n    occurred with a caret on the next line indicating the approximate\n    position of the error.\n    '),
               ('traceback.format_exception',
                ['etype', 'value', 'tb', 'limit=None'],
                'Format a stack trace and the exception information.\n\n    The arguments have the same meaning as the corresponding arguments\n    to print_exception().  The return value is a list of strings, each\n    ending in a newline and some containing internal newlines.  When\n    these lines are concatenated and printed, exactly the same text is\n    printed as does print_exception().\n    '),
               ('traceback.format_exception_only',
                ['etype', 'value'],
                'Format the exception part of a traceback.\n\n    The arguments are the exception type and value such as given by\n    sys.last_type and sys.last_value. The return value is a list of\n    strings, each ending in a newline.\n\n    Normally, the list contains a single string; however, for\n    SyntaxError exceptions, it contains several lines that (when\n    printed) display detailed information about where the syntax\n    error occurred.\n\n    The message indicating which exception occurred is always the last\n    string in the list.\n\n    '),
               ('traceback._format_final_exc_line',
                ['etype', 'value'],
                'Return a list of a single line -- normal case for format_exception_only'),
               ('traceback._some_str', ['value'], ''),
               ('traceback.print_exc',
                ['limit=None', 'file=None'],
                "Shorthand for 'print_exception(sys.exc_type, sys.exc_value, sys.exc_traceback, limit, file)'.\n    (In fact, it uses sys.exc_info() to retrieve the same information\n    in a thread-safe way.)"),
               ('traceback.format_exc', ['limit=None'], 'Like print_exc() but return a string.'),
               ('traceback.print_last',
                ['limit=None', 'file=None'],
                "This is a shorthand for 'print_exception(sys.last_type,\n    sys.last_value, sys.last_traceback, limit, file)'."),
               ('traceback.print_stack',
                ['f=None', 'limit=None', 'file=None'],
                "Print a stack trace from its invocation point.\n\n    The optional 'f' argument can be used to specify an alternate\n    stack frame at which to start. The optional 'limit' and 'file'\n    arguments have the same meaning as for print_exception().\n    "),
               ('traceback.format_stack',
                ['f=None', 'limit=None'],
                "Shorthand for 'format_list(extract_stack(f, limit))'."),
               ('traceback.extract_stack',
                ['f=None', 'limit=None'],
                "Extract the raw traceback from the current stack frame.\n\n    The return value has the same format as for extract_tb().  The\n    optional 'f' and 'limit' arguments have the same meaning as for\n    print_stack().  Each item in the list is a quadruple (filename,\n    line number, function name, text), and the entries are in order\n    from oldest to newest stack frame.\n    "),
               ('traceback.tb_lineno',
                ['tb'],
                'Calculate correct line number of traceback given in tb.\n\n    Obsolete in 2.3.\n    '),
               ('trace._unsettrace', [], ''),
               ('trace._settrace', ['func'], ''),
               ('trace._unsettrace', [], ''),
               ('trace.usage', ['outfile'], ''),
               ('trace.modname', ['path'], 'Return a plausible module name for the patch.'),
               ('trace.fullmodname', ['path'], 'Return a plausible module name for the path.'),
               ('trace.find_lines_from_code',
                ['code', 'strs'],
                'Return dict where keys are lines in the line number table.'),
               ('trace.find_lines',
                ['code', 'strs'],
                'Return lineno dict for all code objects reachable from code.'),
               ('trace.find_strings',
                ['filename'],
                'Return a dict of possible docstring positions.\n\n    The dict maps line numbers to strings.  There is an entry for\n    line that contains only a string or a part of a triple-quoted\n    string.\n    '),
               ('trace.find_executable_linenos',
                ['filename'],
                'Return dict where keys are line numbers in the line number table.'),
               ('trace._err_exit', ['msg'], ''),
               ('trace.main', ['argv=None'], ''),
               ('tty.setraw', ['fd', 'when=TCSAFLUSH'], 'Put terminal into a raw mode.'),
               ('tty.setcbreak', ['fd', 'when=TCSAFLUSH'], 'Put terminal into a cbreak mode.'),
               ('types._f', [], ''),
               ('types._g', [], ''),
               ('urllib2.urlopen',
                ['url', 'data=None', 'timeout=socket._GLOBAL_DEFAULT_TIMEOUT'],
                ''),
               ('urllib2.install_opener', ['opener'], ''),
               ('urllib2.request_host',
                ['request'],
                'Return request-host, as defined by RFC 2965.\n\n    Variation from RFC: returned value is lowercased, for convenient\n    comparison.\n\n    '),
               ('urllib2.build_opener',
                ['*handlers'],
                'Create an opener object from a list of handlers.\n\n    The opener will use several default handlers, including support\n    for HTTP, FTP and when applicable, HTTPS.\n\n    If any of the handlers passed as arguments are subclasses of the\n    default handlers, the default handlers will not be used.\n    '),
               ('urllib2._parse_proxy',
                ['proxy'],
                "Return (scheme, user, password, host/port) given a URL or an authority.\n\n    If a URL is supplied, it must have an authority (host:port) component.\n    According to RFC 3986, having an authority component means the URL must\n    have two slashes after the scheme:\n\n    >>> _parse_proxy('file:/ftp.example.com/')\n    Traceback (most recent call last):\n    ValueError: proxy URL with no authority: 'file:/ftp.example.com/'\n\n    The first three items of the returned tuple may be None.\n\n    Examples of authority parsing:\n\n    >>> _parse_proxy('proxy.example.com')\n    (None, None, None, 'proxy.example.com')\n    >>> _parse_proxy('proxy.example.com:3128')\n    (None, None, None, 'proxy.example.com:3128')\n\n    The authority component may optionally include userinfo (assumed to be\n    username:password):\n\n    >>> _parse_proxy('joe:password@proxy.example.com')\n    (None, 'joe', 'password', 'proxy.example.com')\n    >>> _parse_proxy('joe:password@proxy.example.com:3128')\n    (None, 'joe', 'password', 'proxy.example.com:3128')\n\n    Same examples, but with URLs instead:\n\n    >>> _parse_proxy('http://proxy.example.com/')\n    ('http', None, None, 'proxy.example.com')\n    >>> _parse_proxy('http://proxy.example.com:3128/')\n    ('http', None, None, 'proxy.example.com:3128')\n    >>> _parse_proxy('http://joe:password@proxy.example.com/')\n    ('http', 'joe', 'password', 'proxy.example.com')\n    >>> _parse_proxy('http://joe:password@proxy.example.com:3128')\n    ('http', 'joe', 'password', 'proxy.example.com:3128')\n\n    Everything after the authority is ignored:\n\n    >>> _parse_proxy('ftp://joe:password@proxy.example.com/rubbish:3128')\n    ('ftp', 'joe', 'password', 'proxy.example.com')\n\n    Test for no trailing '/' case:\n\n    >>> _parse_proxy('http://joe:password@proxy.example.com')\n    ('http', 'joe', 'password', 'proxy.example.com')\n\n    "),
               ('urllib2.randombytes', ['n'], 'Return n random bytes.'),
               ('urllib2.parse_keqv_list',
                ['l'],
                'Parse list of key=value strings where keys are not duplicated.'),
               ('urllib2.parse_http_list',
                ['s'],
                'Parse lists as described by RFC 2068 Section 2.\n\n    In particular, parse comma-separated lists where the elements of\n    the list may include quoted-strings.  A quoted-string could\n    contain a comma.  A non-quoted string could have quotes in the\n    middle.  Neither commas nor quotes count if they are escaped.\n    Only double-quotes count, not single-quotes.\n    '),
               ('urllib2._safe_gethostbyname', ['host'], ''),
               ('urllib.url2pathname',
                ['pathname'],
                "OS-specific conversion from a relative URL of the 'file' scheme\n        to a file system path; not recommended for general use."),
               ('urllib.pathname2url',
                ['pathname'],
                "OS-specific conversion from a file system path to a relative URL\n        of the 'file' scheme; not recommended for general use."),
               ('urllib.urlopen',
                ['url', 'data=None', 'proxies=None'],
                'Create a file-like object for the specified URL to read from.'),
               ('urllib.urlretrieve',
                ['url', 'filename=None', 'reporthook=None', 'data=None'],
                ''),
               ('urllib.urlcleanup', [], ''),
               ('urllib.localhost',
                [],
                "Return the IP address of the magic hostname 'localhost'."),
               ('urllib.thishost', [], 'Return the IP address of the current host.'),
               ('urllib.ftperrors', [], 'Return the set of errors raised by the FTP class.'),
               ('urllib.noheaders', [], 'Return an empty mimetools.Message object.'),
               ('urllib._is_unicode', ['x'], ''),
               ('urllib._is_unicode', ['x'], ''),
               ('urllib.toBytes', ['url'], 'toBytes(u"URL") --> \'URL\'.'),
               ('urllib.unwrap',
                ['url'],
                "unwrap('<URL:type://host/path>') --> 'type://host/path'."),
               ('urllib.splittype',
                ['url'],
                "splittype('type:opaquestring') --> 'type', 'opaquestring'."),
               ('urllib.splithost',
                ['url'],
                "splithost('//host[:port]/path') --> 'host[:port]', '/path'."),
               ('urllib.splituser',
                ['host'],
                "splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'."),
               ('urllib.splitpasswd',
                ['user'],
                "splitpasswd('user:passwd') -> 'user', 'passwd'."),
               ('urllib.splitport', ['host'], "splitport('host:port') --> 'host', 'port'."),
               ('urllib.splitnport',
                ['host', 'defport=-1'],
                "Split host and port, returning numeric port.\n    Return given default port if no ':' found; defaults to -1.\n    Return numerical port if a valid number are found after ':'.\n    Return None if ':' but not a valid number."),
               ('urllib.splitquery', ['url'], "splitquery('/path?query') --> '/path', 'query'."),
               ('urllib.splittag', ['url'], "splittag('/path#tag') --> '/path', 'tag'."),
               ('urllib.splitattr',
                ['url'],
                "splitattr('/path;attr1=value1;attr2=value2;...') ->\n        '/path', ['attr1=value1', 'attr2=value2', ...]."),
               ('urllib.splitvalue', ['attr'], "splitvalue('attr=value') --> 'attr', 'value'."),
               ('urllib.unquote', ['s'], "unquote('abc%20def') -> 'abc def'."),
               ('urllib.unquote_plus', ['s'], "unquote('%7e/abc+def') -> '~/abc def'"),
               ('urllib.quote',
                ['s', "safe='/'"],
                'quote(\'abc def\') -> \'abc%20def\'\n\n    Each part of a URL, e.g. the path info, the query, etc., has a\n    different set of reserved characters that must be quoted.\n\n    RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax lists\n    the following reserved characters.\n\n    reserved    = ";" | "/" | "?" | ":" | "@" | "&" | "=" | "+" |\n                  "$" | ","\n\n    Each of these characters is reserved in some component of a URL,\n    but not necessarily in all of them.\n\n    By default, the quote function is intended for quoting the path\n    section of a URL.  Thus, it will not encode \'/\'.  This character\n    is reserved, but in typical usage the quote function is being\n    called on a path where the existing slash characters are used as\n    reserved characters.\n    '),
               ('urllib.quote_plus',
                ['s', "safe=''"],
                "Quote the query fragment of a URL; replacing ' ' with '+'"),
               ('urllib.urlencode',
                ['query', 'doseq=0'],
                'Encode a sequence of two-element tuples or dictionary into a URL query string.\n\n    If any values in the query arg are sequences and doseq is true, each\n    sequence element is converted to a separate parameter.\n\n    If the query arg is a sequence of two-element tuples, the order of the\n    parameters in the output will match the order of parameters in the\n    input.\n    '),
               ('urllib.getproxies_environment',
                [],
                'Return a dictionary of scheme -> proxy server URL mappings.\n\n    Scan the environment for variables named <scheme>_proxy;\n    this seems to be the standard convention.  If you need a\n    different way, you can pass a proxies dictionary to the\n    [Fancy]URLopener constructor.\n\n    '),
               ('urllib.proxy_bypass_environment',
                ['host'],
                "Test if proxies should not be used for a particular host.\n\n    Checks the environment for a variable named no_proxy, which should\n    be a list of DNS suffixes separated by commas, or '*' for all hosts.\n    "),
               ('urllib.proxy_bypass_macosx_sysconf',
                ['host'],
                "\n        Return True iff this host shouldn't be accessed using a proxy\n\n        This function uses the MacOSX framework SystemConfiguration\n        to fetch the proxy information.\n        "),
               ('urllib.getproxies_macosx_sysconf',
                [],
                'Return a dictionary of scheme -> proxy server URL mappings.\n\n        This function uses the MacOSX framework SystemConfiguration\n        to fetch the proxy information.\n        '),
               ('urllib.proxy_bypass', ['host'], ''),
               ('urllib.getproxies', [], ''),
               ('urllib.getproxies_registry',
                [],
                'Return a dictionary of scheme -> proxy server URL mappings.\n\n        Win32 uses the registry to store proxies.\n\n        '),
               ('urllib.getproxies',
                [],
                'Return a dictionary of scheme -> proxy server URL mappings.\n\n        Returns settings gathered from the environment, if specified,\n        or the registry.\n\n        '),
               ('urllib.proxy_bypass_registry', ['host'], ''),
               ('urllib.proxy_bypass',
                ['host'],
                'Return a dictionary of scheme -> proxy server URL mappings.\n\n        Returns settings gathered from the environment, if specified,\n        or the registry.\n\n        '),
               ('urllib.test1', [], ''),
               ('urllib.reporthook', ['blocknum', 'blocksize', 'totalsize'], ''),
               ('urllib.test', ['args=[]'], ''),
               ('urllib.main', [], ''),
               ('urlparse.clear_cache', [], 'Clear the parse cache.'),
               ('urlparse.urlparse',
                ['url', "scheme=''", 'allow_fragments=True'],
                "Parse a URL into 6 components:\n    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>\n    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).\n    Note that we don't break the components up in smaller bits\n    (e.g. netloc is a single string) and we don't expand % escapes."),
               ('urlparse._splitparams', ['url'], ''),
               ('urlparse._splitnetloc', ['url', 'start=0'], ''),
               ('urlparse.urlsplit',
                ['url', "scheme=''", 'allow_fragments=True'],
                "Parse a URL into 5 components:\n    <scheme>://<netloc>/<path>?<query>#<fragment>\n    Return a 5-tuple: (scheme, netloc, path, query, fragment).\n    Note that we don't break the components up in smaller bits\n    (e.g. netloc is a single string) and we don't expand % escapes."),
               ('urlparse.urlunparse',
                ['data'],
                'Put a parsed URL back together again.  This may result in a\n    slightly different, but equivalent URL, if the URL that was parsed\n    originally had redundant delimiters, e.g. a ? with an empty query\n    (the draft states that these are equivalent).'),
               ('urlparse.urlunsplit',
                ['data'],
                'Combine the elements of a tuple as returned by urlsplit() into a\n    complete URL as a string. The data argument can be any five-item iterable.\n    This may result in a slightly different, but equivalent URL, if the URL that\n    was parsed originally had unnecessary delimiters (for example, a ? with an\n    empty query; the RFC states that these are equivalent).'),
               ('urlparse.urljoin',
                ['base', 'url', 'allow_fragments=True'],
                'Join a base URL and a possibly relative URL to form an absolute\n    interpretation of the latter.'),
               ('urlparse.urldefrag',
                ['url'],
                'Removes any existing fragment from URL.\n\n    Returns a tuple of the defragmented URL and the fragment.  If\n    the URL contained no fragments, the second element is the\n    empty string.\n    '),
               ('urlparse.unquote', ['s'], "unquote('abc%20def') -> 'abc def'."),
               ('urlparse.parse_qs',
                ['qs', 'keep_blank_values=0', 'strict_parsing=0'],
                'Parse a query given as a string argument.\n\n        Arguments:\n\n        qs: percent-encoded query string to be parsed\n\n        keep_blank_values: flag indicating whether blank values in\n            percent-encoded queries should be treated as blank strings.\n            A true value indicates that blanks should be retained as\n            blank strings.  The default false value indicates that\n            blank values are to be ignored and treated as if they were\n            not included.\n\n        strict_parsing: flag indicating what to do with parsing errors.\n            If false (the default), errors are silently ignored.\n            If true, errors raise a ValueError exception.\n    '),
               ('urlparse.parse_qsl',
                ['qs', 'keep_blank_values=0', 'strict_parsing=0'],
                'Parse a query given as a string argument.\n\n    Arguments:\n\n    qs: percent-encoded query string to be parsed\n\n    keep_blank_values: flag indicating whether blank values in\n        percent-encoded queries should be treated as blank strings.  A\n        true value indicates that blanks should be retained as blank\n        strings.  The default false value indicates that blank values\n        are to be ignored and treated as if they were  not included.\n\n    strict_parsing: flag indicating what to do with parsing errors. If\n        false (the default), errors are silently ignored. If true,\n        errors raise a ValueError exception.\n\n    Returns a list, as G-d intended.\n    '),
               ('uuid._find_mac', ['command', 'args', 'hw_identifiers', 'get_index'], ''),
               ('uuid._ifconfig_getnode',
                [],
                'Get the hardware address on Unix by running ifconfig.'),
               ('uuid._ipconfig_getnode',
                [],
                'Get the hardware address on Windows by running ipconfig.exe.'),
               ('uuid._netbios_getnode',
                [],
                'Get the hardware address on Windows using NetBIOS calls.\n    See http://support.microsoft.com/kb/118623 for details.'),
               ('uuid._unixdll_getnode', [], 'Get the hardware address on Unix using ctypes.'),
               ('uuid._windll_getnode', [], 'Get the hardware address on Windows using ctypes.'),
               ('uuid._random_getnode',
                [],
                'Get a random node ID, with eighth bit set as suggested by RFC 4122.'),
               ('uuid.getnode',
                [],
                'Get the hardware address as a 48-bit positive integer.\n\n    The first time this runs, it may launch a separate program, which could\n    be quite slow.  If all attempts to obtain the hardware address fail, we\n    choose a random 48-bit number with its eighth bit set to 1 as recommended\n    in RFC 4122.\n    '),
               ('uuid.uuid1',
                ['node=None', 'clock_seq=None'],
                "Generate a UUID from a host ID, sequence number, and the current time.\n    If 'node' is not given, getnode() is used to obtain the hardware\n    address.  If 'clock_seq' is given, it is used as the sequence number;\n    otherwise a random 14-bit sequence number is chosen."),
               ('uuid.uuid3',
                ['namespace', 'name'],
                'Generate a UUID from the MD5 hash of a namespace UUID and a name.'),
               ('uuid.uuid4', [], 'Generate a random UUID.'),
               ('uuid.uuid5',
                ['namespace', 'name'],
                'Generate a UUID from the SHA-1 hash of a namespace UUID and a name.'),
               ('uu.encode', ['in_file', 'out_file', 'name=None', 'mode=None'], 'Uuencode file'),
               ('uu.decode',
                ['in_file', 'out_file=None', 'mode=None', 'quiet=0'],
                'Decode uuencoded file'),
               ('uu.test', [], 'uuencode/uudecode main program'),
               ('warnings.warnpy3k',
                ['message', 'category=None', 'stacklevel=1'],
                'Issue a deprecation warning for Python 3.x related changes.\n\n    Warnings are omitted unless Python is started with the -3 option.\n    '),
               ('warnings._show_warning',
                ['message', 'category', 'filename', 'lineno', 'file=None', 'line=None'],
                'Hook to write a warning to a file; replace if you like.'),
               ('warnings.formatwarning',
                ['message', 'category', 'filename', 'lineno', 'line=None'],
                'Function to format a warning the standard way.'),
               ('warnings.filterwarnings',
                ['action',
                 "message=''",
                 'category=Warning',
                 "module=''",
                 'lineno=0',
                 'append=0'],
                'Insert an entry into the list of warnings filters (at the front).\n\n    \'action\' -- one of "error", "ignore", "always", "default", "module",\n                or "once"\n    \'message\' -- a regex that the warning message must match\n    \'category\' -- a class that the warning must be a subclass of\n    \'module\' -- a regex that the module name must match\n    \'lineno\' -- an integer line number, 0 matches all warnings\n    \'append\' -- if true, append to the list of filters\n    '),
               ('warnings.simplefilter',
                ['action', 'category=Warning', 'lineno=0', 'append=0'],
                'Insert a simple entry into the list of warnings filters (at the front).\n\n    A simple filter matches all modules and messages.\n    \'action\' -- one of "error", "ignore", "always", "default", "module",\n                or "once"\n    \'category\' -- a class that the warning must be a subclass of\n    \'lineno\' -- an integer line number, 0 matches all warnings\n    \'append\' -- if true, append to the list of filters\n    '),
               ('warnings.resetwarnings',
                [],
                'Clear the list of warning filters, so that no filters are active.'),
               ('warnings._processoptions', ['args'], ''),
               ('warnings._setoption', ['arg'], ''),
               ('warnings._getaction', ['action'], ''),
               ('warnings._getcategory', ['category'], ''),
               ('warnings.warn',
                ['message', 'category=None', 'stacklevel=1'],
                'Issue a warning, or maybe ignore it or raise an exception.'),
               ('warnings.warn_explicit',
                ['message',
                 'category',
                 'filename',
                 'lineno',
                 'module=None',
                 'registry=None',
                 'module_globals=None'],
                ''),
               ('wave.open', ['f', 'mode=None'], ''),
               ('webbrowser.register',
                ['name', 'klass', 'instance=None', 'update_tryorder=1'],
                'Register a browser connector and, optionally, connection.'),
               ('webbrowser.get',
                ['using=None'],
                'Return a browser launcher instance appropriate for the environment.'),
               ('webbrowser.open', ['url', 'new=0', 'autoraise=True'], ''),
               ('webbrowser.open_new', ['url'], ''),
               ('webbrowser.open_new_tab', ['url'], ''),
               ('webbrowser._synthesize',
                ['browser', 'update_tryorder=1'],
                "Attempt to synthesize a controller base on existing controllers.\n\n    This is useful to create a controller when a user specifies a path to\n    an entry in the BROWSER environment variable -- we can copy a general\n    controller to operate using a specific installation of the desired\n    browser in this way.\n\n    If we can't create a controller in this way, or if there is no\n    executable for the requested browser, return [None, None].\n\n    "),
               ('webbrowser._isexecutable', ['cmd'], ''),
               ('webbrowser._isexecutable', ['cmd'], ''),
               ('webbrowser._iscommand',
                ['cmd'],
                'Return True if cmd is executable or can be found on the executable\n    search path.'),
               ('webbrowser.register_X_browsers', [], ''),
               ('webbrowser.main', [], ''),
               ('whichdb.whichdb',
                ['filename'],
                'Guess which db package to use to open a db file.\n\n    Return values:\n\n    - None if the database file can\'t be read;\n    - empty string if the file can be read but can\'t be recognized\n    - the module name (e.g. "dbm" or "gdbm") if recognized.\n\n    Importing the given module may still fail, and opening the\n    database using that module may still fail.\n    '),
               ('xmllib.test', ['args=None'], ''),
               ('xmlrpclib._decode',
                ['data', 'encoding', "is8bit=re.compile('[\\x80-\\xff]').search"],
                ''),
               ('xmlrpclib.escape', ['s', 'replace=string.replace'], ''),
               ('xmlrpclib._stringify', ['string'], ''),
               ('xmlrpclib._stringify', ['string'], ''),
               ('xmlrpclib.boolean',
                ['value', '_truefalse=(False, True)'],
                "Convert any Python value to XML-RPC 'boolean'."),
               ('xmlrpclib._strftime', ['value'], ''),
               ('xmlrpclib._datetime', ['data'], ''),
               ('xmlrpclib._datetime_type', ['data'], ''),
               ('xmlrpclib._binary', ['data'], ''),
               ('xmlrpclib.getparser',
                ['use_datetime=0'],
                'getparser() -> parser, unmarshaller\n\n    Create an instance of the fastest available parser, and attach it\n    to an unmarshalling object.  Return both objects.\n    '),
               ('xmlrpclib.dumps',
                ['params',
                 'methodname=None',
                 'methodresponse=None',
                 'encoding=None',
                 'allow_none=0'],
                'data [,options] -> marshalled data\n\n    Convert an argument tuple or a Fault instance to an XML-RPC\n    request (or response, if the methodresponse option is used).\n\n    In addition to the data object, the following options can be given\n    as keyword arguments:\n\n        methodname: the method name for a methodCall packet\n\n        methodresponse: true to create a methodResponse packet.\n        If this option is used with a tuple, the tuple must be\n        a singleton (i.e. it can contain only one element).\n\n        encoding: the packet encoding (default is UTF-8)\n\n    All 8-bit strings in the data structure are assumed to use the\n    packet encoding.  Unicode strings are automatically converted,\n    where necessary.\n    '),
               ('xmlrpclib.loads',
                ['data', 'use_datetime=0'],
                'data -> unmarshalled data, method name\n\n    Convert an XML-RPC packet to unmarshalled data plus a method\n    name (None if not present).\n\n    If the XML-RPC packet represents a fault condition, this function\n    raises a Fault exception.\n    '),
               ('xmlrpclib.gzip_encode',
                ['data'],
                'data -> gzip encoded data\n\n    Encode data using the gzip content encoding as described in RFC 1952\n    '),
               ('xmlrpclib.gzip_decode',
                ['data'],
                'gzip encoded data -> unencoded data\n\n    Decode data using the gzip content encoding as described in RFC 1952\n    '),
               ('zipfile._check_zipfile', ['fp'], ''),
               ('zipfile.is_zipfile',
                ['filename'],
                'Quickly see if a file is a ZIP file by checking the magic number.\n\n    The filename argument may be a file or file-like object too.\n    '),
               ('zipfile._EndRecData64',
                ['fpin', 'offset', 'endrec'],
                '\n    Read the ZIP64 end-of-archive records and use that to update endrec\n    '),
               ('zipfile._EndRecData',
                ['fpin'],
                'Return data from the "End of Central Directory" record, or None.\n\n    The data is a list of the nine items in the ZIP "End of central dir"\n    record followed by a tenth item, the file seek offset of this record.'),
               ('zipfile.main', ['args=None'], '')],
 'HIERARCHY': ['_abcoll',
               'abc',
               'aifc',
               'antigravity',
               'anydbm',
               'argparse',
               'ast',
               'asynchat',
               'asyncore',
               'atexit',
               'audiodev',
               'base64',
               'BaseHTTPServer',
               'Bastion',
               'bdb',
               'binhex',
               'bisect',
               'calendar',
               'CGIHTTPServer',
               'cgi',
               'cgitb',
               'chunk',
               'cmd',
               'codecs',
               'codeop',
               'code',
               'collections',
               'colorsys',
               'commands',
               'compileall',
               'ConfigParser',
               'contextlib',
               'cookielib',
               'Cookie',
               'copy',
               'copy_reg',
               'cProfile',
               'csv',
               'dbhash',
               'decimal',
               'difflib',
               'dircache',
               'dis',
               'doctest',
               'DocXMLRPCServer',
               'dumbdbm',
               'dummy_threading',
               'dummy_thread',
               'filecmp',
               'fileinput',
               'fnmatch',
               'formatter',
               'fpformat',
               'fractions',
               'ftplib',
               'functools',
               '__future__',
               'genericpath',
               'getopt',
               'getpass',
               'gettext',
               'glob',
               'gzip',
               'hashlib',
               'heapq',
               'hmac',
               'htmlentitydefs',
               'htmllib',
               'HTMLParser',
               'httplib',
               'ihooks',
               'imaplib',
               'imghdr',
               'imputil',
               'inspect',
               'io',
               'keyword',
               'linecache',
               'locale',
               '_LWPCookieJar',
               'macpath',
               'macurl2path',
               'mailbox',
               'mailcap',
               'markupbase',
               'md5',
               'mhlib',
               'mimetools',
               'mimetypes',
               'MimeWriter',
               'mimify',
               'modulefinder',
               '_MozillaCookieJar',
               'multifile',
               'mutex',
               'netrc',
               'new',
               'nntplib',
               'ntpath',
               'nturl2path',
               'numbers',
               'opcode',
               'optparse',
               'os2emxpath',
               'os',
               'pdb',
               '__phello__.foo',
               'pickle',
               'pickletools',
               'pipes',
               'pkgutil',
               'platform',
               'plistlib',
               'popen2',
               'poplib',
               'posixfile',
               'posixpath',
               'pprint',
               'pty',
               'pyclbr',
               'py_compile',
               'pydoc',
               '_pyio',
               'Queue',
               'quopri',
               'random',
               'repr',
               're',
               'rexec',
               'rfc822',
               'rlcompleter',
               'robotparser',
               'runpy',
               'sched',
               'sets',
               'sgmllib',
               'sha',
               'shelve',
               'shlex',
               'shutil',
               'SimpleHTTPServer',
               'SimpleXMLRPCServer',
               'sitecustomize',
               'site',
               'smtpd',
               'smtplib',
               'sndhdr',
               'socket',
               'SocketServer',
               'sre_compile',
               'sre_constants',
               'sre_parse',
               'sre',
               'ssl',
               'stat',
               'statvfs',
               'StringIO',
               'stringold',
               'stringprep',
               'string',
               '_strptime',
               'struct',
               'subprocess',
               'sunaudio',
               'sunau',
               'symbol',
               'symtable',
               'sysconfig',
               'tabnanny',
               'tarfile',
               'telnetlib',
               'tempfile',
               'textwrap',
               'this',
               '_threading_local',
               'threading',
               'timeit',
               'toaiff',
               'tokenize',
               'token',
               'traceback',
               'trace',
               'tty',
               'types',
               'urllib2',
               'urllib',
               'urlparse',
               'UserDict',
               'UserList',
               'user',
               'UserString',
               'uuid',
               'uu',
               'warnings',
               'wave',
               'weakref',
               '_weakrefset',
               'webbrowser',
               'whichdb',
               'xdrlib',
               'xmllib',
               'xmlrpclib',
               'zipfile'],
 'POINTERS': {'BaseHTTPServer.SocketServer': 'SocketServer',
              'BaseHTTPServer.catch_warnings': 'warnings.catch_warnings',
              'BaseHTTPServer.filterwarnings': 'warnings.filterwarnings',
              'BaseHTTPServer.mimetools': 'mimetools',
              'BaseHTTPServer.socket': 'socket',
              'BaseHTTPServer.sys': 'sys',
              'BaseHTTPServer.time': 'time',
              'Bastion.MethodType': 'types.MethodType',
              'Bastion.rexec': 'rexec',
              'Bastion.warnpy3k': 'warnings.warnpy3k',
              'CGIHTTPServer.BaseHTTPServer': 'BaseHTTPServer',
              'CGIHTTPServer.SimpleHTTPServer': 'SimpleHTTPServer',
              'CGIHTTPServer.base64': 'base64',
              'CGIHTTPServer.binascii': 'binascii',
              'CGIHTTPServer.copy': 'copy',
              'CGIHTTPServer.os': 'os',
              'CGIHTTPServer.pwd': 'pwd',
              'CGIHTTPServer.select': 'select',
              'CGIHTTPServer.subprocess': 'subprocess',
              'CGIHTTPServer.sys': 'sys',
              'CGIHTTPServer.urllib': 'urllib',
              'ConfigParser._UserDict': 'UserDict',
              'ConfigParser._default_dict': 'collections.OrderedDict',
              'ConfigParser.re': 're',
              'Cookie.Cookie': 'Cookie',
              'Cookie.doctest': 'doctest',
              'Cookie.dumps': 'pickle.dumps',
              'Cookie.gmtime': 'time.gmtime',
              'Cookie.loads': 'pickle.loads',
              'Cookie.re': 're',
              'Cookie.string': 'string',
              'Cookie.time': 'time.time',
              'Cookie.warnings': 'warnings',
              'DocXMLRPCServer.CGIXMLRPCRequestHandler': 'SimpleXMLRPCServer.CGIXMLRPCRequestHandler',
              'DocXMLRPCServer.SimpleXMLRPCRequestHandler': 'SimpleXMLRPCServer.SimpleXMLRPCRequestHandler',
              'DocXMLRPCServer.SimpleXMLRPCServer': 'SimpleXMLRPCServer.SimpleXMLRPCServer',
              'DocXMLRPCServer.inspect': 'inspect',
              'DocXMLRPCServer.pydoc': 'pydoc',
              'DocXMLRPCServer.re': 're',
              'DocXMLRPCServer.resolve_dotted_attribute': 'SimpleXMLRPCServer.resolve_dotted_attribute',
              'DocXMLRPCServer.sys': 'sys',
              'HTMLParser.htmlentitydefs': 'htmlentitydefs',
              'HTMLParser.markupbase': 'markupbase',
              'HTMLParser.re': 're',
              'MimeWriter.mimetools': 'mimetools',
              'MimeWriter.test.test_MimeWriter': 'test.test_MimeWriter',
              'MimeWriter.warnings': 'warnings',
              'Queue._threading': 'dummy_threading',
              'Queue._time': 'time.time',
              'Queue.deque': 'collections.deque',
              'Queue.heapq': 'heapq',
              'SimpleHTTPServer.BaseHTTPServer': 'BaseHTTPServer',
              'SimpleHTTPServer.StringIO': 'StringIO.StringIO',
              'SimpleHTTPServer.cgi': 'cgi',
              'SimpleHTTPServer.mimetypes': 'mimetypes',
              'SimpleHTTPServer.os': 'os',
              'SimpleHTTPServer.posixpath': 'posixpath',
              'SimpleHTTPServer.shutil': 'shutil',
              'SimpleHTTPServer.urllib': 'urllib',
              'SimpleXMLRPCServer.BaseHTTPServer': 'BaseHTTPServer',
              'SimpleXMLRPCServer.Fault': 'xmlrpclib.Fault',
              'SimpleXMLRPCServer.SocketServer': 'SocketServer',
              'SimpleXMLRPCServer.fcntl': 'fcntl',
              'SimpleXMLRPCServer.os': 'os',
              'SimpleXMLRPCServer.pydoc': 'pydoc',
              'SimpleXMLRPCServer.re': 're',
              'SimpleXMLRPCServer.sys': 'sys',
              'SimpleXMLRPCServer.traceback': 'traceback',
              'SimpleXMLRPCServer.xmlrpclib': 'xmlrpclib',
              'SocketServer.StringIO': 'StringIO.StringIO',
              'SocketServer.os': 'os',
              'SocketServer.select': 'select',
              'SocketServer.socket': 'socket',
              'SocketServer.sys': 'sys',
              'SocketServer.threading': 'dummy_threading',
              'SocketServer.traceback': 'traceback',
              'StringIO.EINVAL': 'errno.EINVAL',
              'StringIO.sys': 'sys',
              'UserDict._abcoll': '_abcoll',
              'UserDict.copy': 'copy',
              'UserList.collections': 'collections',
              'UserString.collections': 'collections',
              'UserString.os': 'os',
              'UserString.sys': 'sys',
              'UserString.test_support': 'test.test_support',
              'UserString.warnpy3k': 'warnings.warnpy3k',
              '_LWPCookieJar.Cookie': 'cookielib.Cookie',
              '_LWPCookieJar.FileCookieJar': 'cookielib.FileCookieJar',
              '_LWPCookieJar.LoadError': 'cookielib.LoadError',
              '_LWPCookieJar.MISSING_FILENAME_TEXT': 'cookielib.MISSING_FILENAME_TEXT',
              '_LWPCookieJar._warn_unhandled_exception': 'cookielib._warn_unhandled_exception',
              '_LWPCookieJar.iso2time': 'cookielib.iso2time',
              '_LWPCookieJar.join_header_words': 'cookielib.join_header_words',
              '_LWPCookieJar.re': 're',
              '_LWPCookieJar.split_header_words': 'cookielib.split_header_words',
              '_LWPCookieJar.time': 'time',
              '_LWPCookieJar.time2isoz': 'cookielib.time2isoz',
              '_MozillaCookieJar.Cookie': 'cookielib.Cookie',
              '_MozillaCookieJar.FileCookieJar': 'cookielib.FileCookieJar',
              '_MozillaCookieJar.LoadError': 'cookielib.LoadError',
              '_MozillaCookieJar.MISSING_FILENAME_TEXT': 'cookielib.MISSING_FILENAME_TEXT',
              '_MozillaCookieJar._warn_unhandled_exception': 'cookielib._warn_unhandled_exception',
              '_MozillaCookieJar.re': 're',
              '_MozillaCookieJar.time': 'time',
              '_abcoll.ABCMeta': 'abc.ABCMeta',
              '_abcoll.abstractmethod': 'abc.abstractmethod',
              '_abcoll.sys': 'sys',
              '_pyio.FileIO': '_io.FileIO',
              '_pyio.Lock': 'dummy_thread.allocate_lock',
              '_pyio.SEEK_CUR': 'io.SEEK_CUR',
              '_pyio.SEEK_END': 'io.SEEK_END',
              '_pyio.SEEK_SET': 'io.SEEK_SET',
              '_pyio.__all__': 'io.__all__',
              '_pyio.abc': 'abc',
              '_pyio.array': 'array',
              '_pyio.codecs': 'codecs',
              '_pyio.io': 'io',
              '_pyio.locale': 'locale',
              '_pyio.os': 'os',
              '_pyio.print_function': '__future__.print_function',
              '_pyio.unicode_literals': '__future__.unicode_literals',
              '_pyio.warnings': 'warnings',
              '_strptime.IGNORECASE': 're.IGNORECASE',
              '_strptime._thread_allocate_lock': 'dummy_thread.allocate_lock',
              '_strptime.calendar': 'calendar',
              '_strptime.datetime_date': 'datetime.date',
              '_strptime.locale': 'locale',
              '_strptime.re_compile': 're.compile',
              '_strptime.re_escape': 're.escape',
              '_strptime.time': 'time',
              '_threading_local.RLock': 'threading.RLock',
              '_threading_local.current_thread': 'threading.current_thread',
              '_threading_local.threading': 'threading',
              '_weakrefset.ref': '_weakref.ref',
              'abc.WeakSet': '_weakrefset.WeakSet',
              'abc.types': 'types',
              'aifc.Chunk': 'chunk.Chunk',
              'aifc.__builtin__': '__builtin__',
              'aifc.audioop': 'audioop',
              'aifc.cl': 'cl',
              'aifc.math': 'math',
              'aifc.struct': 'struct',
              'aifc.sys': 'sys',
              'antigravity.webbrowser': 'webbrowser',
              'anydbm.whichdb': 'whichdb.whichdb',
              'argparse._': 'gettext.gettext',
              'argparse._copy': 'copy',
              'argparse._os': 'os',
              'argparse._re': 're',
              'argparse._sys': 'sys',
              'argparse._textwrap': 'textwrap',
              'argparse.warnings': 'warnings',
              'ast.*': '_ast.*',
              'ast.__version__': '_ast.__version__',
              'ast.deque': 'collections.deque',
              'ast.inspect': 'inspect',
              'asynchat.asyncore': 'asyncore',
              'asynchat.catch_warnings': 'warnings.catch_warnings',
              'asynchat.deque': 'collections.deque',
              'asynchat.filterwarnings': 'warnings.filterwarnings',
              'asynchat.py3kwarning': 'sys.py3kwarning',
              'asynchat.socket': 'socket',
              'asyncore.EALREADY': 'errno.EALREADY',
              'asyncore.EBADF': 'errno.EBADF',
              'asyncore.ECONNABORTED': 'errno.ECONNABORTED',
              'asyncore.ECONNRESET': 'errno.ECONNRESET',
              'asyncore.EINPROGRESS': 'errno.EINPROGRESS',
              'asyncore.EINTR': 'errno.EINTR',
              'asyncore.EINVAL': 'errno.EINVAL',
              'asyncore.EISCONN': 'errno.EISCONN',
              'asyncore.ENOTCONN': 'errno.ENOTCONN',
              'asyncore.ESHUTDOWN': 'errno.ESHUTDOWN',
              'asyncore.EWOULDBLOCK': 'errno.EWOULDBLOCK',
              'asyncore.errorcode': 'errno.errorcode',
              'asyncore.fcntl': 'fcntl',
              'asyncore.os': 'os',
              'asyncore.select': 'select',
              'asyncore.socket': 'socket',
              'asyncore.sys': 'sys',
              'asyncore.time': 'time',
              'asyncore.warnings': 'warnings',
              'atexit.sys': 'sys',
              'atexit.traceback': 'traceback',
              'audiodev.AL': 'AL',
              'audiodev.Audio_mac': 'Audio_mac',
              'audiodev.SUNAUDIODEV': 'SUNAUDIODEV',
              'audiodev.aifc': 'aifc',
              'audiodev.al': 'al',
              'audiodev.audioop': 'audioop',
              'audiodev.sunaudiodev': 'sunaudiodev',
              'audiodev.sys': 'sys',
              'audiodev.time': 'time',
              'audiodev.warnpy3k': 'warnings.warnpy3k',
              'base64.binascii': 'binascii',
              'base64.getopt': 'getopt',
              'base64.re': 're',
              'base64.struct': 'struct',
              'base64.sys': 'sys',
              'bdb.__main__': '__main__',
              'bdb.fnmatch': 'fnmatch',
              'bdb.linecache': 'linecache',
              'bdb.os': 'os',
              'bdb.repr': 'repr',
              'bdb.sys': 'sys',
              'bdb.types': 'types',
              'binhex.FInfo': 'Carbon.File.FInfo',
              'binhex.FSSpec': 'Carbon.File.FSSpec',
              'binhex.binascii': 'binascii',
              'binhex.openrf': 'MacOS.openrf',
              'binhex.os': 'os',
              'binhex.struct': 'struct',
              'binhex.sys': 'sys',
              'bisect.*': '_bisect.*',
              'cProfile.OptionParser': 'optparse.OptionParser',
              'cProfile.__main__': '__main__',
              'cProfile._lsprof': '_lsprof',
              'cProfile.marshal': 'marshal',
              'cProfile.os': 'os',
              'cProfile.pstats': 'pstats',
              'cProfile.sys': 'sys',
              'calendar._locale': 'locale',
              'calendar.datetime': 'datetime',
              'calendar.optparse': 'optparse',
              'calendar.sys': 'sys',
              'cgi.StringIO': 'StringIO.StringIO',
              'cgi.UserDict': 'UserDict',
              'cgi.attrgetter': 'operator.attrgetter',
              'cgi.catch_warnings': 'warnings.catch_warnings',
              'cgi.filterwarnings': 'warnings.filterwarnings',
              'cgi.mimetools': 'mimetools',
              'cgi.os': 'os',
              'cgi.re': 're',
              'cgi.rfc822': 'rfc822',
              'cgi.sys': 'sys',
              'cgi.tempfile': 'tempfile',
              'cgi.traceback': 'traceback',
              'cgi.urllib': 'urllib',
              'cgi.urlparse': 'urlparse',
              'cgi.warn': 'warnings.warn',
              'cgitb.inspect': 'inspect',
              'cgitb.keyword': 'keyword',
              'cgitb.linecache': 'linecache',
              'cgitb.os': 'os',
              'cgitb.pydoc': 'pydoc',
              'cgitb.sys': 'sys',
              'cgitb.tempfile': 'tempfile',
              'cgitb.time': 'time',
              'cgitb.tokenize': 'tokenize',
              'cgitb.traceback': 'traceback',
              'cgitb.types': 'types',
              'chunk.struct': 'struct',
              'cmd.readline': 'readline',
              'cmd.string': 'string',
              'cmd.sys': 'sys',
              'code.CommandCompiler': 'codeop.CommandCompiler',
              'code.compile_command': 'codeop.compile_command',
              'code.readline': 'readline',
              'code.sys': 'sys',
              'code.traceback': 'traceback',
              'codecs.*': '_codecs.*',
              'codecs.__builtin__': '__builtin__',
              'codecs.encodings': 'encodings',
              'codecs.sys': 'sys',
              'codeop.__future__': '__future__',
              'collections.*': '_abcoll.*',
              'collections._abcoll': '_abcoll',
              'collections._chain': 'itertools.chain',
              'collections._eq': 'operator.eq',
              'collections._heapq': 'heapq',
              'collections._ifilter': 'itertools.ifilter',
              'collections._imap': 'itertools.imap',
              'collections._iskeyword': 'keyword.iskeyword',
              'collections._itemgetter': 'operator.itemgetter',
              'collections._repeat': 'itertools.repeat',
              'collections._starmap': 'itertools.starmap',
              'collections._sys': 'sys',
              'collections.defaultdict': '_collections.defaultdict',
              'collections.deque': '_collections.deque',
              'collections.doctest': 'doctest',
              'collections.dumps': 'cPickle.dumps',
              'collections.get_ident': 'dummy_thread.get_ident',
              'collections.loads': 'cPickle.loads',
              'commands.os': 'os',
              'commands.warnings': 'warnings',
              'commands.warnpy3k': 'warnings.warnpy3k',
              'compileall.getopt': 'getopt',
              'compileall.imp': 'imp',
              'compileall.os': 'os',
              'compileall.py_compile': 'py_compile',
              'compileall.re': 're',
              'compileall.struct': 'struct',
              'compileall.sys': 'sys',
              'contextlib.sys': 'sys',
              'contextlib.warn': 'warnings.warn',
              'contextlib.wraps': 'functools.wraps',
              'cookielib.LWPCookieJar': '_LWPCookieJar.LWPCookieJar',
              'cookielib.MozillaCookieJar': '_MozillaCookieJar.MozillaCookieJar',
              'cookielib.StringIO': 'StringIO',
              'cookielib._threading': 'dummy_threading',
              'cookielib.copy': 'copy',
              'cookielib.httplib': 'httplib',
              'cookielib.logging': 'logging',
              'cookielib.lwp_cookie_str': '_LWPCookieJar.lwp_cookie_str',
              'cookielib.re': 're',
              'cookielib.time': 'time',
              'cookielib.timegm': 'calendar.timegm',
              'cookielib.traceback': 'traceback',
              'cookielib.urllib': 'urllib',
              'cookielib.urlparse': 'urlparse',
              'cookielib.warnings': 'warnings',
              'copy.PyStringMap': 'org.python.core.PyStringMap',
              'copy.dispatch_table': 'copy_reg.dispatch_table',
              'copy.repr': 'repr',
              'copy.sys': 'sys',
              'copy.types': 'types',
              'copy.weakref': 'weakref',
              'copy_reg._ClassType': 'types.ClassType',
              'csv.Error': '_csv.Error',
              'csv.QUOTE_ALL': '_csv.QUOTE_ALL',
              'csv.QUOTE_MINIMAL': '_csv.QUOTE_MINIMAL',
              'csv.QUOTE_NONE': '_csv.QUOTE_NONE',
              'csv.QUOTE_NONNUMERIC': '_csv.QUOTE_NONNUMERIC',
              'csv.StringIO': 'StringIO.StringIO',
              'csv._Dialect': '_csv.Dialect',
              'csv.__doc__': '_csv.__doc__',
              'csv.__version__': '_csv.__version__',
              'csv.field_size_limit': '_csv.field_size_limit',
              'csv.get_dialect': '_csv.get_dialect',
              'csv.list_dialects': '_csv.list_dialects',
              'csv.re': 're',
              'csv.reader': '_csv.reader',
              'csv.reduce': 'functools.reduce',
              'csv.register_dialect': '_csv.register_dialect',
              'csv.unregister_dialect': '_csv.unregister_dialect',
              'csv.writer': '_csv.writer',
              'dbhash.bsddb': 'bsddb',
              'dbhash.sys': 'sys',
              'dbhash.warnings': 'warnings',
              'decimal._copy': 'copy',
              'decimal._locale': 'locale',
              'decimal._math': 'math',
              'decimal._namedtuple': 'collections.namedtuple',
              'decimal._numbers': 'numbers',
              'decimal.chain': 'itertools.chain',
              'decimal.doctest': 'doctest',
              'decimal.re': 're',
              'decimal.repeat': 'itertools.repeat',
              'decimal.sys': 'sys',
              'decimal.threading': 'threading',
              'difflib._namedtuple': 'collections.namedtuple',
              'difflib.difflib': 'difflib',
              'difflib.doctest': 'doctest',
              'difflib.heapq': 'heapq',
              'difflib.re': 're',
              'difflib.reduce': 'functools.reduce',
              'dircache.os': 'os',
              'dircache.warnpy3k': 'warnings.warnpy3k',
              'dis.*': 'opcode.*',
              'dis._opcodes_all': 'opcode.__all__',
              'dis.sys': 'sys',
              'dis.types': 'types',
              'doctest.StringIO': 'StringIO.StringIO',
              'doctest.__future__': '__future__',
              'doctest.difflib': 'difflib',
              'doctest.inspect': 'inspect',
              'doctest.linecache': 'linecache',
              'doctest.namedtuple': 'collections.namedtuple',
              'doctest.os': 'os',
              'doctest.pdb': 'pdb',
              'doctest.re': 're',
              'doctest.sys': 'sys',
              'doctest.tempfile': 'tempfile',
              'doctest.traceback': 'traceback',
              'doctest.types': 'types',
              'doctest.unittest': 'unittest',
              'doctest.warnings': 'warnings',
              'dumbdbm.UserDict': 'UserDict',
              'dumbdbm.__builtin__': '__builtin__',
              'dumbdbm._os': 'os',
              'dummy_thread._traceback': 'traceback',
              'dummy_threading.*': '_dummy_threading.*',
              'dummy_threading.__all__': '_dummy_threading.__all__',
              'dummy_threading.dummy_thread': 'dummy_thread',
              'dummy_threading.sys_modules': 'sys.modules',
              'dummy_threading.threading': 'threading',
              'filecmp.getopt': 'getopt',
              'filecmp.ifilter': 'itertools.ifilter',
              'filecmp.ifilterfalse': 'itertools.ifilterfalse',
              'filecmp.imap': 'itertools.imap',
              'filecmp.izip': 'itertools.izip',
              'filecmp.os': 'os',
              'filecmp.stat': 'stat',
              'filecmp.sys': 'sys',
              'fileinput.bz2': 'bz2',
              'fileinput.codecs': 'codecs',
              'fileinput.getopt': 'getopt',
              'fileinput.gzip': 'gzip',
              'fileinput.os': 'os',
              'fileinput.sys': 'sys',
              'fnmatch.os': 'os',
              'fnmatch.posixpath': 'posixpath',
              'fnmatch.re': 're',
              'formatter.sys': 'sys',
              'fpformat.re': 're',
              'fpformat.warnpy3k': 'warnings.warnpy3k',
              'fractions.Decimal': 'decimal.Decimal',
              'fractions.division': '__future__.division',
              'fractions.math': 'math',
              'fractions.numbers': 'numbers',
              'fractions.operator': 'operator',
              'fractions.re': 're',
              'ftplib.SOCKS': 'SOCKS',
              'ftplib._GLOBAL_DEFAULT_TIMEOUT': 'socket._GLOBAL_DEFAULT_TIMEOUT',
              'ftplib.getfqdn': 'socket.getfqdn',
              'ftplib.os': 'os',
              'ftplib.re': 're',
              'ftplib.socket': 'socket',
              'ftplib.ssl': 'ssl',
              'ftplib.sys': 'sys',
              'functools.partial': '_functools.partial',
              'functools.reduce': '_functools.reduce',
              'genericpath.os': 'os',
              'genericpath.stat': 'stat',
              'getopt.os': 'os',
              'getopt.sys': 'sys',
              'getpass.AskPassword': 'EasyDialogs.AskPassword',
              'getpass.msvcrt': 'msvcrt',
              'getpass.os': 'os',
              'getpass.pwd': 'pwd',
              'getpass.sys': 'sys',
              'getpass.termios': 'termios',
              'getpass.warnings': 'warnings',
              'gettext.ENOENT': 'errno.ENOENT',
              'gettext.StringIO': 'StringIO.StringIO',
              'gettext.__builtin__': '__builtin__',
              'gettext.copy': 'copy',
              'gettext.locale': 'locale',
              'gettext.normalize': 'locale.normalize',
              'gettext.os': 'os',
              'gettext.re': 're',
              'gettext.struct': 'struct',
              'gettext.sys': 'sys',
              'gettext.token': 'token',
              'gettext.tokenize': 'tokenize',
              'glob.fnmatch': 'fnmatch',
              'glob.os': 'os',
              'glob.re': 're',
              'glob.sys': 'sys',
              'gzip.__builtin__': '__builtin__',
              'gzip.errno': 'errno',
              'gzip.io': 'io',
              'gzip.os': 'os',
              'gzip.struct': 'struct',
              'gzip.sys': 'sys',
              'gzip.time': 'time',
              'gzip.warnings': 'warnings',
              'gzip.zlib': 'zlib',
              'hashlib._hashlib': '_hashlib',
              'hashlib._md5': '_md5',
              'hashlib._sha': '_sha',
              'hashlib._sha256': '_sha256',
              'hashlib._sha512': '_sha512',
              'hashlib.logging': 'logging',
              'heapq.*': '_heapq.*',
              'heapq.bisect': 'bisect',
              'heapq.chain': 'itertools.chain',
              'heapq.count': 'itertools.count',
              'heapq.doctest': 'doctest',
              'heapq.imap': 'itertools.imap',
              'heapq.islice': 'itertools.islice',
              'heapq.itemgetter': 'operator.itemgetter',
              'heapq.izip': 'itertools.izip',
              'heapq.repeat': 'itertools.repeat',
              'heapq.tee': 'itertools.tee',
              'hmac._warnings': 'warnings',
              'hmac.hashlib': 'hashlib',
              'htmllib.AS_IS': 'formatter.AS_IS',
              'htmllib.entitydefs': 'htmlentitydefs.entitydefs',
              'htmllib.formatter': 'formatter',
              'htmllib.sgmllib': 'sgmllib',
              'htmllib.sys': 'sys',
              'htmllib.warnpy3k': 'warnings.warnpy3k',
              'httplib.StringIO': 'StringIO.StringIO',
              'httplib.array': 'array.array',
              'httplib.getopt': 'getopt',
              'httplib.mimetools': 'mimetools',
              'httplib.os': 'os',
              'httplib.py3kwarning': 'sys.py3kwarning',
              'httplib.socket': 'socket',
              'httplib.ssl': 'ssl',
              'httplib.sys': 'sys',
              'httplib.urlsplit': 'urlparse.urlsplit',
              'httplib.warnings': 'warnings',
              'ihooks.C_BUILTIN': 'imp.C_BUILTIN',
              'ihooks.C_EXTENSION': 'imp.C_EXTENSION',
              'ihooks.PKG_DIRECTORY': 'imp.PKG_DIRECTORY',
              'ihooks.PY_COMPILED': 'imp.PY_COMPILED',
              'ihooks.PY_FROZEN': 'imp.PY_FROZEN',
              'ihooks.PY_SOURCE': 'imp.PY_SOURCE',
              'ihooks.__builtin__': '__builtin__',
              'ihooks.imp': 'imp',
              'ihooks.marshal': 'marshal',
              'ihooks.os': 'os',
              'ihooks.sys': 'sys',
              'ihooks.warn': 'warnings.warn',
              'ihooks.warnpy3k': 'warnings.warnpy3k',
              'imaplib.binascii': 'binascii',
              'imaplib.errno': 'errno',
              'imaplib.getopt': 'getopt',
              'imaplib.getpass': 'getpass',
              'imaplib.hmac': 'hmac',
              'imaplib.random': 'random',
              'imaplib.re': 're',
              'imaplib.socket': 'socket',
              'imaplib.ssl': 'ssl',
              'imaplib.subprocess': 'subprocess',
              'imaplib.sys': 'sys',
              'imaplib.time': 'time',
              'imghdr.glob': 'glob',
              'imghdr.os': 'os',
              'imghdr.sys': 'sys',
              'imputil.__builtin__': '__builtin__',
              'imputil.imp': 'imp',
              'imputil.marshal': 'marshal',
              'imputil.stat': 'os2.stat',
              'imputil.struct': 'struct',
              'imputil.sys': 'sys',
              'imputil.warnpy3k': 'warnings.warnpy3k',
              'inspect.attrgetter': 'operator.attrgetter',
              'inspect.dis': 'dis',
              'inspect.imp': 'imp',
              'inspect.linecache': 'linecache',
              'inspect.namedtuple': 'collections.namedtuple',
              'inspect.os': 'os',
              'inspect.re': 're',
              'inspect.string': 'string',
              'inspect.sys': 'sys',
              'inspect.tokenize': 'tokenize',
              'inspect.types': 'types',
              'io.BlockingIOError': '_io.BlockingIOError',
              'io.BufferedRWPair': '_io.BufferedRWPair',
              'io.BufferedRandom': '_io.BufferedRandom',
              'io.BufferedReader': '_io.BufferedReader',
              'io.BufferedWriter': '_io.BufferedWriter',
              'io.BytesIO': '_io.BytesIO',
              'io.DEFAULT_BUFFER_SIZE': '_io.DEFAULT_BUFFER_SIZE',
              'io.FileIO': '_io.FileIO',
              'io.IncrementalNewlineDecoder': '_io.IncrementalNewlineDecoder',
              'io.StringIO': '_io.StringIO',
              'io.TextIOWrapper': '_io.TextIOWrapper',
              'io.UnsupportedOperation': '_io.UnsupportedOperation',
              'io._io': '_io',
              'io.abc': 'abc',
              'io.open': '_io.open',
              'keyword.re': 're',
              'keyword.sys': 'sys',
              'linecache.os': 'os',
              'linecache.sys': 'sys',
              'locale.*': '_locale.*',
              'locale._locale': '_locale',
              'locale.encodings': 'encodings',
              'locale.encodings.aliases': 'encodings.aliases',
              'locale.functools': 'functools',
              'locale.operator': 'operator',
              'locale.os': 'os',
              'locale.re': 're',
              'locale.sys': 'sys',
              'macpath.*': 'genericpath.*',
              'macpath.Carbon.File': 'Carbon.File',
              'macpath.genericpath': 'genericpath',
              'macpath.os': 'os',
              'macpath.warnings': 'warnings',
              'macurl2path.os': 'os',
              'macurl2path.urllib': 'urllib',
              'mailbox.StringIO': 'StringIO',
              'mailbox.calendar': 'calendar',
              'mailbox.copy': 'copy',
              'mailbox.email': 'email',
              'mailbox.email.generator': 'email.generator',
              'mailbox.email.message': 'email.message',
              'mailbox.errno': 'errno',
              'mailbox.fcntl': 'fcntl',
              'mailbox.os': 'os',
              'mailbox.re': 're',
              'mailbox.rfc822': 'rfc822',
              'mailbox.socket': 'socket',
              'mailbox.sys': 'sys',
              'mailbox.time': 'time',
              'mailbox.warnings': 'warnings',
              'mailcap.os': 'os',
              'mailcap.sys': 'sys',
              'markupbase.re': 're',
              'md5.md5': 'hashlib.md5',
              'md5.warnings': 'warnings',
              'mhlib.StringIO': 'StringIO.StringIO',
              'mhlib.bisect': 'bisect.bisect',
              'mhlib.mimetools': 'mimetools',
              'mhlib.multifile': 'multifile',
              'mhlib.os': 'os',
              'mhlib.re': 're',
              'mhlib.shutil': 'shutil',
              'mhlib.sys': 'sys',
              'mhlib.warnpy3k': 'warnings.warnpy3k',
              'mimetools.base64': 'base64',
              'mimetools.catch_warnings': 'warnings.catch_warnings',
              'mimetools.filterwarnings': 'warnings.filterwarnings',
              'mimetools.os': 'os',
              'mimetools.quopri': 'quopri',
              'mimetools.rfc822': 'rfc822',
              'mimetools.socket': 'socket',
              'mimetools.sys': 'sys',
              'mimetools.tempfile': 'tempfile',
              'mimetools.thread': 'dummy_thread',
              'mimetools.time': 'time',
              'mimetools.uu': 'uu',
              'mimetools.warnpy3k': 'warnings.warnpy3k',
              'mimetypes._winreg': '_winreg',
              'mimetypes.getopt': 'getopt',
              'mimetypes.os': 'os',
              'mimetypes.posixpath': 'posixpath',
              'mimetypes.sys': 'sys',
              'mimetypes.urllib': 'urllib',
              'mimify.base64': 'base64',
              'mimify.getopt': 'getopt',
              'mimify.os': 'os',
              'mimify.re': 're',
              'mimify.sys': 'sys',
              'mimify.warnings': 'warnings',
              'modulefinder.dis': 'dis',
              'modulefinder.generators': '__future__.generators',
              'modulefinder.getopt': 'getopt',
              'modulefinder.imp': 'imp',
              'modulefinder.marshal': 'marshal',
              'modulefinder.os': 'os',
              'modulefinder.struct': 'struct',
              'modulefinder.sys': 'sys',
              'modulefinder.types': 'types',
              'multifile.warn': 'warnings.warn',
              'mutex.deque': 'collections.deque',
              'mutex.warnpy3k': 'warnings.warnpy3k',
              'netrc.os': 'os',
              'netrc.shlex': 'shlex',
              'new.classobj': 'types.ClassType',
              'new.code': 'types.CodeType',
              'new.function': 'types.FunctionType',
              'new.instance': 'types.InstanceType',
              'new.instancemethod': 'types.MethodType',
              'new.module': 'types.ModuleType',
              'new.warnpy3k': 'warnings.warnpy3k',
              'nntplib.netrc': 'netrc',
              'nntplib.os': 'os',
              'nntplib.re': 're',
              'nntplib.socket': 'socket',
              'ntpath.*': 'genericpath.*',
              'ntpath._getfullpathname': 'nt._getfullpathname',
              'ntpath.genericpath': 'genericpath',
              'ntpath.os': 'os',
              'ntpath.stat': 'stat',
              'ntpath.string': 'string',
              'ntpath.sys': 'sys',
              'ntpath.warnings': 'warnings',
              'nturl2path.string': 'string',
              'nturl2path.urllib': 'urllib',
              'numbers.ABCMeta': 'abc.ABCMeta',
              'numbers.abstractmethod': 'abc.abstractmethod',
              'numbers.abstractproperty': 'abc.abstractproperty',
              'numbers.division': '__future__.division',
              'optparse.__builtin__': '__builtin__',
              'optparse.gettext': 'gettext.gettext',
              'optparse.os': 'os',
              'optparse.sys': 'sys',
              'optparse.textwrap': 'textwrap',
              'optparse.types': 'types',
              'os.*': 'riscos.*',
              'os.UserDict': 'UserDict',
              'os._Environ': 'riscosenviron._Environ',
              'os._copy_reg': 'copy_reg',
              'os._exit': 'riscos._exit',
              'os.altsep': 'os.path.altsep',
              'os.ce': 'ce',
              'os.curdir': 'os.path.curdir',
              'os.defpath': 'os.path.defpath',
              'os.devnull': 'os.path.devnull',
              'os.errno': 'errno',
              'os.extsep': 'os.path.extsep',
              'os.link': '_emx_link.link',
              'os.nt': 'nt',
              'os.os2': 'os2',
              'os.pardir': 'os.path.pardir',
              'os.path': 'riscospath',
              'os.pathsep': 'os.path.pathsep',
              'os.posix': 'posix',
              'os.riscos': 'riscos',
              'os.sep': 'os.path.sep',
              'os.subprocess': 'subprocess',
              'os.sys': 'sys',
              'os.warnings': 'warnings',
              'os2emxpath.*': 'genericpath.*',
              'os2emxpath.expanduser': 'ntpath.expanduser',
              'os2emxpath.expandvars': 'ntpath.expandvars',
              'os2emxpath.isabs': 'ntpath.isabs',
              'os2emxpath.islink': 'ntpath.islink',
              'os2emxpath.os': 'os',
              'os2emxpath.split': 'ntpath.split',
              'os2emxpath.splitdrive': 'ntpath.splitdrive',
              'os2emxpath.splitext': 'ntpath.splitext',
              'os2emxpath.stat': 'stat',
              'os2emxpath.walk': 'ntpath.walk',
              'pdb.Repr': 'repr.Repr',
              'pdb.__main__': '__main__',
              'pdb.bdb': 'bdb',
              'pdb.cmd': 'cmd',
              'pdb.linecache': 'linecache',
              'pdb.os': 'os',
              'pdb.pdb': 'pdb',
              'pdb.pprint': 'pprint',
              'pdb.re': 're',
              'pdb.readline': 'readline',
              'pdb.shlex': 'shlex',
              'pdb.sys': 'sys',
              'pdb.traceback': 'traceback',
              'pickle.*': 'types.*',
              'pickle.PyStringMap': 'org.python.core.PyStringMap',
              'pickle.StringIO': 'StringIO.StringIO',
              'pickle._binascii': 'binascii',
              'pickle._extension_cache': 'copy_reg._extension_cache',
              'pickle._extension_registry': 'copy_reg._extension_registry',
              'pickle._inverted_registry': 'copy_reg._inverted_registry',
              'pickle.dispatch_table': 'copy_reg.dispatch_table',
              'pickle.doctest': 'doctest',
              'pickle.marshal': 'marshal',
              'pickle.re': 're',
              'pickle.struct': 'struct',
              'pickle.sys': 'sys',
              'pickletools.StringIO': 'cStringIO',
              'pickletools._unpack': 'struct.unpack',
              'pickletools.decode_long': 'pickle.decode_long',
              'pickletools.doctest': 'doctest',
              'pickletools.pickle': 'pickle',
              'pickletools.re': 're',
              'pipes.os': 'os',
              'pipes.re': 're',
              'pipes.string': 'string',
              'pipes.tempfile': 'tempfile',
              'pkgutil.ModuleType': 'types.ModuleType',
              'pkgutil.imp': 'imp',
              'pkgutil.inspect': 'inspect',
              'pkgutil.marshal': 'marshal',
              'pkgutil.os': 'os',
              'pkgutil.os.path': 'os.path',
              'pkgutil.sys': 'sys',
              'pkgutil.zipimport': 'zipimport',
              'pkgutil.zipimporter': 'zipimport.zipimporter',
              'platform.GetVersionEx': 'win32api.GetVersionEx',
              'platform.HKEY_LOCAL_MACHINE': 'win32con.HKEY_LOCAL_MACHINE',
              'platform.MacOS': 'MacOS',
              'platform.RegCloseKey': 'win32api.RegCloseKey',
              'platform.RegOpenKeyEx': 'win32api.RegOpenKeyEx',
              'platform.RegQueryValueEx': 'win32api.RegQueryValueEx',
              'platform.System': 'java.lang.System',
              'platform.VER_NT_WORKSTATION': 'win32con.VER_NT_WORKSTATION',
              'platform.VER_PLATFORM_WIN32_NT': 'win32con.VER_PLATFORM_WIN32_NT',
              'platform.VER_PLATFORM_WIN32_WINDOWS': 'win32con.VER_PLATFORM_WIN32_WINDOWS',
              'platform._winreg': '_winreg',
              'platform.gestalt': 'gestalt',
              'platform.java.lang': 'java.lang',
              'platform.os': 'os',
              'platform.plistlib': 'plistlib',
              'platform.re': 're',
              'platform.socket': 'socket',
              'platform.string': 'string',
              'platform.struct': 'struct',
              'platform.sys': 'sys',
              'platform.tempfile': 'tempfile',
              'platform.vms_lib': 'vms_lib',
              'platform.win32api': 'win32api',
              'platform.win32pipe': 'win32pipe',
              'plistlib.FSGetResourceForkName': 'Carbon.File.FSGetResourceForkName',
              'plistlib.FSRef': 'Carbon.File.FSRef',
              'plistlib.ParserCreate': 'xml.parsers.expat.ParserCreate',
              'plistlib.Res': 'Carbon.Res',
              'plistlib.StringIO': 'cStringIO.StringIO',
              'plistlib.binascii': 'binascii',
              'plistlib.datetime': 'datetime',
              'plistlib.fsRdPerm': 'Carbon.Files.fsRdPerm',
              'plistlib.fsRdWrPerm': 'Carbon.Files.fsRdWrPerm',
              'plistlib.re': 're',
              'plistlib.warn': 'warnings.warn',
              'plistlib.warnings': 'warnings',
              'popen2.os': 'os',
              'popen2.sys': 'sys',
              'popen2.warnings': 'warnings',
              'poplib.hashlib': 'hashlib',
              'poplib.re': 're',
              'poplib.socket': 'socket',
              'poplib.ssl': 'ssl',
              'poplib.sys': 'sys',
              'posixfile.__builtin__': '__builtin__',
              'posixfile.fcntl': 'fcntl',
              'posixfile.os': 'os',
              'posixfile.posix': 'posix',
              'posixfile.struct': 'struct',
              'posixfile.sys': 'sys',
              'posixfile.types': 'types',
              'posixfile.warnings': 'warnings',
              'posixpath.*': 'genericpath.*',
              'posixpath.genericpath': 'genericpath',
              'posixpath.os': 'os',
              'posixpath.pwd': 'pwd',
              'posixpath.re': 're',
              'posixpath.stat': 'stat',
              'posixpath.sys': 'sys',
              'posixpath.warnings': 'warnings',
              'pprint._StringIO': 'cStringIO.StringIO',
              'pprint._sys': 'sys',
              'pprint.time': 'time',
              'pprint.warnings': 'warnings',
              'pty.I_PUSH': 'fcntl.I_PUSH',
              'pty.ioctl': 'fcntl.ioctl',
              'pty.os': 'os',
              'pty.select': 'select.select',
              'pty.sgi': 'sgi',
              'pty.tty': 'tty',
              'py_compile.__builtin__': '__builtin__',
              'py_compile.imp': 'imp',
              'py_compile.marshal': 'marshal',
              'py_compile.os': 'os',
              'py_compile.sys': 'sys',
              'py_compile.traceback': 'traceback',
              'pyclbr.DEDENT': 'token.DEDENT',
              'pyclbr.NAME': 'token.NAME',
              'pyclbr.OP': 'token.OP',
              'pyclbr.imp': 'imp',
              'pyclbr.itemgetter': 'operator.itemgetter',
              'pyclbr.os': 'os',
              'pyclbr.sys': 'sys',
              'pyclbr.tokenize': 'tokenize',
              'pydoc.BaseHTTPServer': 'BaseHTTPServer',
              'pydoc.Repr': 'repr.Repr',
              'pydoc.StringIO': 'StringIO',
              'pydoc.Tkinter': 'Tkinter',
              'pydoc.__builtin__': '__builtin__',
              'pydoc.deque': 'collections.deque',
              'pydoc.expandtabs': 'string.expandtabs',
              'pydoc.extract_tb': 'traceback.extract_tb',
              'pydoc.find': 'string.find',
              'pydoc.formatter': 'formatter',
              'pydoc.getopt': 'getopt',
              'pydoc.imp': 'imp',
              'pydoc.inspect': 'inspect',
              'pydoc.join': 'string.join',
              'pydoc.lower': 'string.lower',
              'pydoc.mimetools': 'mimetools',
              'pydoc.nturl2path': 'nturl2path',
              'pydoc.os': 'os',
              'pydoc.pkgutil': 'pkgutil',
              'pydoc.pydoc_data.topics': 'pydoc_data.topics',
              'pydoc.re': 're',
              'pydoc.rfind': 'string.rfind',
              'pydoc.rstrip': 'string.rstrip',
              'pydoc.select': 'select',
              'pydoc.split': 'string.split',
              'pydoc.strip': 'string.strip',
              'pydoc.sys': 'sys',
              'pydoc.tempfile': 'tempfile',
              'pydoc.threading': 'threading',
              'pydoc.tty': 'tty',
              'pydoc.types': 'types',
              'pydoc.warnings': 'warnings',
              'pydoc.webbrowser': 'webbrowser',
              'quopri.StringIO': 'cStringIO.StringIO',
              'quopri.a2b_qp': 'binascii.a2b_qp',
              'quopri.b2a_qp': 'binascii.b2a_qp',
              'quopri.getopt': 'getopt',
              'quopri.sys': 'sys',
              'random._BuiltinMethodType': 'types.BuiltinMethodType',
              'random._MethodType': 'types.MethodType',
              'random._acos': 'math.acos',
              'random._ceil': 'math.ceil',
              'random._cos': 'math.cos',
              'random._e': 'math.e',
              'random._exp': 'math.exp',
              'random._hashlib': 'hashlib',
              'random._hexlify': 'binascii.hexlify',
              'random._log': 'math.log',
              'random._pi': 'math.pi',
              'random._random': '_random',
              'random._sin': 'math.sin',
              'random._sqrt': 'math.sqrt',
              'random._urandom': 'os.urandom',
              'random._warn': 'warnings.warn',
              'random.division': '__future__.division',
              'random.time': 'time',
              're.BRANCH': 'sre_constants.BRANCH',
              're.SUBPATTERN': 'sre_constants.SUBPATTERN',
              're.copy_reg': 'copy_reg',
              're.sre_compile': 'sre_compile',
              're.sre_parse': 'sre_parse',
              're.sys': 'sys',
              'repr.__builtin__': '__builtin__',
              'repr.islice': 'itertools.islice',
              'rexec.__builtin__': '__builtin__',
              'rexec.code': 'code',
              'rexec.getopt': 'getopt',
              'rexec.ihooks': 'ihooks',
              'rexec.imp': 'imp',
              'rexec.os': 'os',
              'rexec.readline': 'readline',
              'rexec.sys': 'sys',
              'rexec.traceback': 'traceback',
              'rexec.warnpy3k': 'warnings.warnpy3k',
              'rfc822.os': 'os',
              'rfc822.sys': 'sys',
              'rfc822.time': 'time',
              'rfc822.warnpy3k': 'warnings.warnpy3k',
              'rlcompleter.__builtin__': '__builtin__',
              'rlcompleter.__main__': '__main__',
              'rlcompleter.keyword': 'keyword',
              'rlcompleter.re': 're',
              'rlcompleter.readline': 'readline',
              'robotparser.time': 'time',
              'robotparser.urllib': 'urllib',
              'robotparser.urlparse': 'urlparse',
              'runpy.get_loader': 'pkgutil.get_loader',
              'runpy.imp': 'imp',
              'runpy.read_code': 'pkgutil.read_code',
              'runpy.sys': 'sys',
              'sched.heapq': 'heapq',
              'sched.namedtuple': 'collections.namedtuple',
              'sets.deepcopy': 'copy.deepcopy',
              'sets.ifilter': 'itertools.ifilter',
              'sets.ifilterfalse': 'itertools.ifilterfalse',
              'sets.warnings': 'warnings',
              'sgmllib.markupbase': 'markupbase',
              'sgmllib.re': 're',
              'sgmllib.sys': 'sys',
              'sgmllib.warnpy3k': 'warnings.warnpy3k',
              'sha.sha': 'hashlib.sha1',
              'sha.warnings': 'warnings',
              'shelve.Pickler': 'pickle.Pickler',
              'shelve.StringIO': 'StringIO.StringIO',
              'shelve.Unpickler': 'pickle.Unpickler',
              'shelve.UserDict': 'UserDict',
              'shelve.anydbm': 'anydbm',
              'shlex.StringIO': 'StringIO.StringIO',
              'shlex.deque': 'collections.deque',
              'shlex.os.path': 'os.path',
              'shlex.sys': 'sys',
              'shutil.DistutilsExecError': 'distutils.errors.DistutilsExecError',
              'shutil.abspath': 'os.path.abspath',
              'shutil.collections': 'collections',
              'shutil.errno': 'errno',
              'shutil.fnmatch': 'fnmatch',
              'shutil.getgrnam': 'grp.getgrnam',
              'shutil.getpwnam': 'pwd.getpwnam',
              'shutil.os': 'os',
              'shutil.spawn': 'distutils.spawn.spawn',
              'shutil.stat': 'stat',
              'shutil.sys': 'sys',
              'shutil.tarfile': 'tarfile',
              'shutil.zipfile': 'zipfile',
              'site.__builtin__': '__builtin__',
              'site.codecs': 'codecs',
              'site.encodings': 'encodings',
              'site.get_config_var': 'sysconfig.get_config_var',
              'site.get_path': 'sysconfig.get_path',
              'site.locale': 'locale',
              'site.os': 'os',
              'site.pydoc': 'pydoc',
              'site.sitecustomize': 'sitecustomize',
              'site.sys': 'sys',
              'site.textwrap': 'textwrap',
              'site.traceback': 'traceback',
              'site.usercustomize': 'usercustomize',
              'sitecustomize.apport_python_hook': 'apport_python_hook',
              'smtpd.MailList': 'Mailman.MailList',
              'smtpd.Message': 'Mailman.Message',
              'smtpd.StringIO': 'cStringIO.StringIO',
              'smtpd.Utils': 'Mailman.Utils',
              'smtpd.asynchat': 'asynchat',
              'smtpd.asyncore': 'asyncore',
              'smtpd.errno': 'errno',
              'smtpd.getopt': 'getopt',
              'smtpd.mod': '__main__',
              'smtpd.os': 'os',
              'smtpd.pwd': 'pwd',
              'smtpd.smtplib': 'smtplib',
              'smtpd.socket': 'socket',
              'smtpd.sys': 'sys',
              'smtpd.time': 'time',
              'smtplib.base64': 'base64',
              'smtplib.email.utils': 'email.utils',
              'smtplib.encode_base64': 'email.base64mime.encode',
              'smtplib.hmac': 'hmac',
              'smtplib.re': 're',
              'smtplib.socket': 'socket',
              'smtplib.ssl': 'ssl',
              'smtplib.stderr': 'sys.stderr',
              'smtplib.sys': 'sys',
              'sndhdr.aifc': 'aifc',
              'sndhdr.glob': 'glob',
              'sndhdr.os': 'os',
              'sndhdr.sys': 'sys',
              'socket.*': '_socket.*',
              'socket.MethodType': 'types.MethodType',
              'socket.RAND_add': '_ssl.RAND_add',
              'socket.RAND_egd': '_ssl.RAND_egd',
              'socket.RAND_status': '_ssl.RAND_status',
              'socket.SSL_ERROR_EOF': '_ssl.SSL_ERROR_EOF',
              'socket.SSL_ERROR_INVALID_ERROR_CODE': '_ssl.SSL_ERROR_INVALID_ERROR_CODE',
              'socket.SSL_ERROR_SSL': '_ssl.SSL_ERROR_SSL',
              'socket.SSL_ERROR_SYSCALL': '_ssl.SSL_ERROR_SYSCALL',
              'socket.SSL_ERROR_WANT_CONNECT': '_ssl.SSL_ERROR_WANT_CONNECT',
              'socket.SSL_ERROR_WANT_READ': '_ssl.SSL_ERROR_WANT_READ',
              'socket.SSL_ERROR_WANT_WRITE': '_ssl.SSL_ERROR_WANT_WRITE',
              'socket.SSL_ERROR_WANT_X509_LOOKUP': '_ssl.SSL_ERROR_WANT_X509_LOOKUP',
              'socket.SSL_ERROR_ZERO_RETURN': '_ssl.SSL_ERROR_ZERO_RETURN',
              'socket.StringIO': 'StringIO.StringIO',
              'socket._realssl': 'ssl',
              'socket._socket': '_socket',
              'socket._ssl': '_ssl',
              'socket.errno': 'errno',
              'socket.os': 'os',
              'socket.partial': 'functools.partial',
              'socket.sslerror': '_ssl.SSLError',
              'socket.sys': 'sys',
              'socket.warnings': 'warnings',
              'sre.*': 're.*',
              'sre.__all__': 're.__all__',
              'sre._compile': 're._compile',
              'sre.warnings': 'warnings',
              'sre_compile.*': 'sre_constants.*',
              'sre_compile._sre': '_sre',
              'sre_compile.array': 'array',
              'sre_compile.sre_parse': 'sre_parse',
              'sre_compile.sys': 'sys',
              'sre_parse.*': 'sre_constants.*',
              'sre_parse.sys': 'sys',
              'ssl.CERT_NONE': '_ssl.CERT_NONE',
              'ssl.CERT_OPTIONAL': '_ssl.CERT_OPTIONAL',
              'ssl.CERT_REQUIRED': '_ssl.CERT_REQUIRED',
              'ssl.OPENSSL_VERSION': '_ssl.OPENSSL_VERSION',
              'ssl.OPENSSL_VERSION_INFO': '_ssl.OPENSSL_VERSION_INFO',
              'ssl.OPENSSL_VERSION_NUMBER': '_ssl.OPENSSL_VERSION_NUMBER',
              'ssl.PROTOCOL_SSLv2': '_ssl.PROTOCOL_SSLv2',
              'ssl.PROTOCOL_SSLv23': '_ssl.PROTOCOL_SSLv23',
              'ssl.PROTOCOL_SSLv3': '_ssl.PROTOCOL_SSLv3',
              'ssl.PROTOCOL_TLSv1': '_ssl.PROTOCOL_TLSv1',
              'ssl.RAND_add': '_ssl.RAND_add',
              'ssl.RAND_egd': '_ssl.RAND_egd',
              'ssl.RAND_status': '_ssl.RAND_status',
              'ssl.SSLError': '_ssl.SSLError',
              'ssl.SSL_ERROR_EOF': '_ssl.SSL_ERROR_EOF',
              'ssl.SSL_ERROR_INVALID_ERROR_CODE': '_ssl.SSL_ERROR_INVALID_ERROR_CODE',
              'ssl.SSL_ERROR_SSL': '_ssl.SSL_ERROR_SSL',
              'ssl.SSL_ERROR_SYSCALL': '_ssl.SSL_ERROR_SYSCALL',
              'ssl.SSL_ERROR_WANT_CONNECT': '_ssl.SSL_ERROR_WANT_CONNECT',
              'ssl.SSL_ERROR_WANT_READ': '_ssl.SSL_ERROR_WANT_READ',
              'ssl.SSL_ERROR_WANT_WRITE': '_ssl.SSL_ERROR_WANT_WRITE',
              'ssl.SSL_ERROR_WANT_X509_LOOKUP': '_ssl.SSL_ERROR_WANT_X509_LOOKUP',
              'ssl.SSL_ERROR_ZERO_RETURN': '_ssl.SSL_ERROR_ZERO_RETURN',
              'ssl._delegate_methods': 'socket._delegate_methods',
              'ssl._fileobject': 'socket._fileobject',
              'ssl._getnameinfo': 'socket.getnameinfo',
              'ssl._ssl': '_ssl',
              'ssl.base64': 'base64',
              'ssl.errno': 'errno',
              'ssl.socket': 'socket.socket',
              'ssl.socket_error': 'socket.error',
              'ssl.textwrap': 'textwrap',
              'ssl.time': 'time',
              'statvfs.warnpy3k': 'warnings.warnpy3k',
              'string._re': 're',
              'string.lowercase': 'strop.lowercase',
              'string.maketrans': 'strop.maketrans',
              'string.uppercase': 'strop.uppercase',
              'string.whitespace': 'strop.whitespace',
              'stringold.*': 'stringold.*',
              'stringold.lowercase': 'strop.lowercase',
              'stringold.maketrans': 'strop.maketrans',
              'stringold.uppercase': 'strop.uppercase',
              'stringold.warnpy3k': 'warnings.warnpy3k',
              'stringold.whitespace': 'strop.whitespace',
              'stringprep.unicodedata': 'unicodedata.ucd_3_2_0',
              'struct.*': '_struct.*',
              'struct.__doc__': '_struct.__doc__',
              'struct._clearcache': '_struct._clearcache',
              'subprocess.CREATE_NEW_CONSOLE': '_subprocess.CREATE_NEW_CONSOLE',
              'subprocess.CREATE_NEW_PROCESS_GROUP': '_subprocess.CREATE_NEW_PROCESS_GROUP',
              'subprocess._subprocess': '_subprocess',
              'subprocess.errno': 'errno',
              'subprocess.fcntl': 'fcntl',
              'subprocess.gc': 'gc',
              'subprocess.msvcrt': 'msvcrt',
              'subprocess.os': 'os',
              'subprocess.pickle': 'pickle',
              'subprocess.select': 'select',
              'subprocess.signal': 'signal',
              'subprocess.sys': 'sys',
              'subprocess.threading': 'threading',
              'subprocess.traceback': 'traceback',
              'subprocess.types': 'types',
              'sunau.__builtin__': '__builtin__',
              'sunau.audioop': 'audioop',
              'sunaudio.warnpy3k': 'warnings.warnpy3k',
              'symbol.sys': 'sys',
              'symbol.token': 'token',
              'symtable.CELL': '_symtable.CELL',
              'symtable.DEF_BOUND': '_symtable.DEF_BOUND',
              'symtable.DEF_GLOBAL': '_symtable.DEF_GLOBAL',
              'symtable.DEF_IMPORT': '_symtable.DEF_IMPORT',
              'symtable.DEF_LOCAL': '_symtable.DEF_LOCAL',
              'symtable.DEF_PARAM': '_symtable.DEF_PARAM',
              'symtable.FREE': '_symtable.FREE',
              'symtable.GLOBAL_EXPLICIT': '_symtable.GLOBAL_EXPLICIT',
              'symtable.GLOBAL_IMPLICIT': '_symtable.GLOBAL_IMPLICIT',
              'symtable.LOCAL': '_symtable.LOCAL',
              'symtable.OPT_BARE_EXEC': '_symtable.OPT_BARE_EXEC',
              'symtable.OPT_EXEC': '_symtable.OPT_EXEC',
              'symtable.OPT_IMPORT_STAR': '_symtable.OPT_IMPORT_STAR',
              'symtable.SCOPE_MASK': '_symtable.SCOPE_MASK',
              'symtable.SCOPE_OFF': '_symtable.SCOPE_OFF',
              'symtable.USE': '_symtable.USE',
              'symtable._symtable': '_symtable',
              'symtable.os': 'os',
              'symtable.sys': 'sys',
              'symtable.weakref': 'weakref',
              'sysconfig.os': 'os',
              'sysconfig.pardir': 'os.path.pardir',
              'sysconfig.re': 're',
              'sysconfig.realpath': 'os.path.realpath',
              'sysconfig.sys': 'sys',
              'tabnanny.getopt': 'getopt',
              'tabnanny.os': 'os',
              'tabnanny.sys': 'sys',
              'tabnanny.tokenize': 'tokenize',
              'tarfile.StringIO': 'StringIO.StringIO',
              'tarfile.bz2': 'bz2',
              'tarfile.calendar': 'calendar',
              'tarfile.copy': 'copy',
              'tarfile.errno': 'errno',
              'tarfile.grp': 'grp',
              'tarfile.gzip': 'gzip',
              'tarfile.operator': 'operator',
              'tarfile.os': 'os',
              'tarfile.pwd': 'pwd',
              'tarfile.re': 're',
              'tarfile.shutil': 'shutil',
              'tarfile.stat': 'stat',
              'tarfile.struct': 'struct',
              'tarfile.sys': 'sys',
              'tarfile.time': 'time',
              'tarfile.warnings': 'warnings',
              'tarfile.warnpy3k': 'warnings.warnpy3k',
              'tarfile.zlib': 'zlib',
              'telnetlib.re': 're',
              'telnetlib.select': 'select',
              'telnetlib.socket': 'socket',
              'telnetlib.sys': 'sys',
              'telnetlib.thread': 'thread',
              'telnetlib.time': 'time.time',
              'tempfile._Random': 'random.Random',
              'tempfile._StringIO': 'StringIO.StringIO',
              'tempfile._errno': 'errno',
              'tempfile._fcntl': 'fcntl',
              'tempfile._os': 'os',
              'tempfile._thread': 'dummy_thread',
              'textwrap.re': 're',
              'textwrap.string': 'string',
              'threading._format_exc': 'traceback.format_exc',
              'threading._sleep': 'time.sleep',
              'threading._sys': 'sys',
              'threading._time': 'time.time',
              'threading.deque': 'collections.deque',
              'threading.local': '_threading_local.local',
              'threading.random': 'random.random',
              'threading.stack_size': 'thread.stack_size',
              'threading.thread': 'thread',
              'threading.warnings': 'warnings',
              'timeit.gc': 'gc',
              'timeit.getopt': 'getopt',
              'timeit.itertools': 'itertools',
              'timeit.linecache': 'linecache',
              'timeit.os': 'os',
              'timeit.sys': 'sys',
              'timeit.time': 'time',
              'timeit.traceback': 'traceback',
              'toaiff.os': 'os',
              'toaiff.pipes': 'pipes',
              'toaiff.sndhdr': 'sndhdr',
              'toaiff.tempfile': 'tempfile',
              'toaiff.warnpy3k': 'warnings.warnpy3k',
              'token.re': 're',
              'token.sys': 'sys',
              'tokenize.*': 'token.*',
              'tokenize.re': 're',
              'tokenize.string': 'string',
              'tokenize.sys': 'sys',
              'tokenize.token': 'token',
              'trace.__main__': '__main__',
              'trace.cPickle': 'cPickle',
              'trace.dis': 'dis',
              'trace.gc': 'gc',
              'trace.getopt': 'getopt',
              'trace.inspect': 'inspect',
              'trace.linecache': 'linecache',
              'trace.os': 'os',
              'trace.pickle': 'pickle',
              'trace.re': 're',
              'trace.sys': 'sys',
              'trace.threading': 'threading',
              'trace.time': 'time',
              'trace.token': 'token',
              'trace.tokenize': 'tokenize',
              'traceback.linecache': 'linecache',
              'traceback.sys': 'sys',
              'traceback.types': 'types',
              'tty.*': 'termios.*',
              'types.sys': 'sys',
              'urllib.StringIO': 'StringIO.StringIO',
              'urllib._get_proxies': '_scproxy._get_proxies',
              'urllib._get_proxy_settings': '_scproxy._get_proxy_settings',
              'urllib._winreg': '_winreg',
              'urllib.base64': 'base64',
              'urllib.basejoin': 'urlparse.urljoin',
              'urllib.email.utils': 'email.utils',
              'urllib.fnmatch': 'fnmatch.fnmatch',
              'urllib.ftplib': 'ftplib',
              'urllib.getopt': 'getopt',
              'urllib.getpass': 'getpass',
              'urllib.httplib': 'httplib',
              'urllib.mimetools': 'mimetools',
              'urllib.mimetypes': 'mimetypes',
              'urllib.os': 'os',
              'urllib.pathname2url': 'rourl2path.pathname2url',
              'urllib.re': 're',
              'urllib.socket': 'socket',
              'urllib.ssl': 'ssl',
              'urllib.string': 'string',
              'urllib.sys': 'sys',
              'urllib.tempfile': 'tempfile',
              'urllib.time': 'time',
              'urllib.url2pathname': 'rourl2path.url2pathname',
              'urllib.warnpy3k': 'warnings.warnpy3k',
              'urllib2.StringIO': 'StringIO.StringIO',
              'urllib2.addinfourl': 'urllib.addinfourl',
              'urllib2.base64': 'base64',
              'urllib2.bisect': 'bisect',
              'urllib2.cookielib': 'cookielib',
              'urllib2.email.utils': 'email.utils',
              'urllib2.ftplib': 'ftplib',
              'urllib2.ftpwrapper': 'urllib.ftpwrapper',
              'urllib2.getproxies': 'urllib.getproxies',
              'urllib2.hashlib': 'hashlib',
              'urllib2.httplib': 'httplib',
              'urllib2.localhost': 'urllib.localhost',
              'urllib2.mimetools': 'mimetools',
              'urllib2.mimetypes': 'mimetypes',
              'urllib2.os': 'os',
              'urllib2.posixpath': 'posixpath',
              'urllib2.proxy_bypass': 'urllib.proxy_bypass',
              'urllib2.quote': 'urllib.quote',
              'urllib2.random': 'random',
              'urllib2.re': 're',
              'urllib2.socket': 'socket',
              'urllib2.splitattr': 'urllib.splitattr',
              'urllib2.splithost': 'urllib.splithost',
              'urllib2.splitpasswd': 'urllib.splitpasswd',
              'urllib2.splitport': 'urllib.splitport',
              'urllib2.splittag': 'urllib.splittag',
              'urllib2.splittype': 'urllib.splittype',
              'urllib2.splituser': 'urllib.splituser',
              'urllib2.splitvalue': 'urllib.splitvalue',
              'urllib2.sys': 'sys',
              'urllib2.time': 'time',
              'urllib2.types': 'types',
              'urllib2.unquote': 'urllib.unquote',
              'urllib2.unwrap': 'urllib.unwrap',
              'urllib2.url2pathname': 'urllib.url2pathname',
              'urllib2.urlparse': 'urlparse',
              'urlparse.namedtuple': 'collections.namedtuple',
              'user.os': 'os',
              'user.warnpy3k': 'warnings.warnpy3k',
              'uu.binascii': 'binascii',
              'uu.optparse': 'optparse',
              'uu.os': 'os',
              'uu.sys': 'sys',
              'uuid.ctypes': 'ctypes',
              'uuid.ctypes.util': 'ctypes.util',
              'uuid.md5': 'hashlib.md5',
              'uuid.netbios': 'netbios',
              'uuid.os': 'os',
              'uuid.random': 'random',
              'uuid.re': 're',
              'uuid.sha1': 'hashlib.sha1',
              'uuid.socket': 'socket',
              'uuid.sys': 'sys',
              'uuid.time': 'time',
              'uuid.win32wnet': 'win32wnet',
              'warnings.default_action': '_warnings.default_action',
              'warnings.filters': '_warnings.filters',
              'warnings.linecache': 'linecache',
              'warnings.once_registry': '_warnings.once_registry',
              'warnings.re': 're',
              'warnings.sys': 'sys',
              'warnings.types': 'types',
              'warnings.warn': '_warnings.warn',
              'warnings.warn_explicit': '_warnings.warn_explicit',
              'wave.Chunk': 'chunk.Chunk',
              'wave.__builtin__': '__builtin__',
              'wave.array': 'array',
              'wave.struct': 'struct',
              'weakref.CallableProxyType': '_weakref.CallableProxyType',
              'weakref.ProxyType': '_weakref.ProxyType',
              'weakref.ReferenceError': 'exceptions.ReferenceError',
              'weakref.ReferenceType': '_weakref.ReferenceType',
              'weakref.UserDict': 'UserDict',
              'weakref.WeakSet': '_weakrefset.WeakSet',
              'weakref.deepcopy': 'copy.deepcopy',
              'weakref.getweakrefcount': '_weakref.getweakrefcount',
              'weakref.getweakrefs': '_weakref.getweakrefs',
              'weakref.proxy': '_weakref.proxy',
              'weakref.ref': '_weakref.ref',
              'webbrowser.copy': 'copy',
              'webbrowser.getopt': 'getopt',
              'webbrowser.glob': 'glob',
              'webbrowser.os': 'os',
              'webbrowser.pwd': 'pwd',
              'webbrowser.shlex': 'shlex',
              'webbrowser.socket': 'socket',
              'webbrowser.stat': 'stat',
              'webbrowser.subprocess': 'subprocess',
              'webbrowser.sys': 'sys',
              'webbrowser.tempfile': 'tempfile',
              'webbrowser.time': 'time',
              'whichdb.dbm': 'dbm',
              'whichdb.os': 'os',
              'whichdb.struct': 'struct',
              'whichdb.sys': 'sys',
              'xdrlib._StringIO': 'StringIO.StringIO',
              'xdrlib.struct': 'struct',
              'xmllib.getopt': 'getopt',
              'xmllib.re': 're',
              'xmllib.string': 'string',
              'xmllib.sys': 'sys',
              'xmllib.time': 'time.time',
              'xmllib.warnings': 'warnings',
              'xmlrpclib.*': 'types.*',
              'xmlrpclib.StringIO': 'StringIO',
              'xmlrpclib._xmlrpclib': '_xmlrpclib',
              'xmlrpclib.base64': 'base64',
              'xmlrpclib.datetime': 'datetime',
              'xmlrpclib.errno': 'errno',
              'xmlrpclib.expat': 'xml.parsers.expat',
              'xmlrpclib.gzip': 'gzip',
              'xmlrpclib.httplib': 'httplib',
              'xmlrpclib.modules': 'sys.modules',
              'xmlrpclib.operator': 'operator',
              'xmlrpclib.re': 're',
              'xmlrpclib.socket': 'socket',
              'xmlrpclib.string': 'string',
              'xmlrpclib.time': 'time',
              'xmlrpclib.urllib': 'urllib',
              'xmlrpclib.xmllib': 'xmllib',
              'zipfile.binascii': 'binascii',
              'zipfile.cStringIO': 'cStringIO',
              'zipfile.io': 'io',
              'zipfile.os': 'os',
              'zipfile.py_compile': 'py_compile',
              'zipfile.re': 're',
              'zipfile.shutil': 'shutil',
              'zipfile.stat': 'stat',
              'zipfile.struct': 'struct',
              'zipfile.sys': 'sys',
              'zipfile.textwrap': 'textwrap',
              'zipfile.time': 'time',
              'zipfile.zlib': 'zlib'}}
