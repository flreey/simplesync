{'CLASSES': {'gevent.backdoor.BackdoorServer': {'bases': ['gevent.server.StreamServer'],
                                                'constructor': ['listener',
                                                                'locals=None',
                                                                '**server_args'],
                                                'docstring': '',
                                                'methods': [('handle', ['conn', 'address'], '')],
                                                'properties': ['locals']},
             'gevent.backdoor.SocketConsole': {'bases': ['gevent.greenlet.Greenlet'],
                                               'constructor': ['locals', 'conn'],
                                               'docstring': '',
                                               'methods': [('finalize', [], ''),
                                                           ('switch', ['*args', '**kw'], ''),
                                                           ('switch_out', [], ''),
                                                           ('_run', [], '')],
                                               'properties': ['locals', 'desc', 'saved']},
             'gevent.backdoor._fileobject': {'bases': ['gevent.socket._fileobject'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('write', ['data'], ''),
                                                         ('isatty', [], ''),
                                                         ('flush', [], ''),
                                                         ('readline', ['*a'], '')],
                                             'properties': []},
             'gevent.baseserver.BaseServer': {'bases': ['object'],
                                              'constructor': ['listener',
                                                              'handle=None',
                                                              'backlog=None',
                                                              "spawn='default'"],
                                              'docstring': 'An abstract base class that implements some common functionality for the servers in gevent.\n\n    *listener* can either be an address that the server should bind on or a :class:`gevent.socket.socket`\n    instance that is already bound and put into listening mode. In the former case, *backlog* argument specifies the\n    length of the backlog queue. If not provided, the default (256) is used.\n\n    *spawn*, if provided, is called to create a new greenlet to run the handler. By default, :func:`gevent.spawn` is used.\n\n    Possible values for *spawn*:\n\n    * a :class:`gevent.pool.Pool` instance -- *handle* will be executed using :meth:`Pool.spawn` method only if the\n      pool is not full. While it is full, all the connection are dropped;\n    * :func:`gevent.spawn_raw` -- *handle* will be executed in a raw greenlet which have a little less overhead then\n      :class:`gevent.Greenlet` instances spawned by default;\n    * ``None`` -- *handle* will be executed right away, in the :class:`Hub` greenlet. *handle* cannot use any blocking\n      functions as it means switching to the :class:`Hub`.\n    * an integer -- a shortcut for ``gevent.pool.Pool(integer)``\n    ',
                                              'methods': [('set_listener',
                                                           ['listener', 'backlog=None'],
                                                           ''),
                                                          ('set_spawn', ['spawn'], ''),
                                                          ('set_handle', ['handle'], ''),
                                                          ('full', [], ''),
                                                          ('__repr__', [], ''),
                                                          ('__str__', [], ''),
                                                          ('_formatinfo', [], ''),
                                                          ('pre_start',
                                                           [],
                                                           'If the user initialized the server with an address rather than socket,\n        then this function will create a socket, bind it and put it into listening mode.\n\n        It is not supposed to be called by the user, it is called by :meth:`start` before starting\n        the accept loop.'),
                                                          ('start',
                                                           [],
                                                           'Start accepting the connections.\n\n        If an address was provided in the constructor, then also create a socket, bind it and put it into the listening mode.\n        '),
                                                          ('kill',
                                                           [],
                                                           'Close the listener socket and stop accepting.'),
                                                          ('stop',
                                                           ['timeout=None'],
                                                           'Stop accepting the connections and close the listening socket.\n\n        If the server uses a pool to spawn the requests, then :meth:`stop` also waits\n        for all the handlers to exit. If there are still handlers executing after *timeout*\n        has expired (default 1 second), then the currently running handlers in the pool are killed.'),
                                                          ('post_stop', [], ''),
                                                          ('serve_forever',
                                                           ['stop_timeout=None'],
                                                           "Start the server if it hasn't been already started and wait until it's stopped.")],
                                              'properties': ['_spawn',
                                                             'backlog',
                                                             'reuse_addr',
                                                             'stop_timeout',
                                                             '_stopped_event',
                                                             'started',
                                                             'address',
                                                             'socket',
                                                             'pool',
                                                             'full',
                                                             'handle',
                                                             'server_host',
                                                             'server_port']},
             'gevent.coros.BoundedSemaphore': {'bases': ['gevent.coros.Semaphore'],
                                               'constructor': ['value=1'],
                                               'docstring': "A bounded semaphore checks to make sure its current value doesn't exceed its initial value.\n    If it does, ``ValueError`` is raised. In most situations semaphores are used to guard resources\n    with limited capacity. If the semaphore is released too many times it's a sign of a bug.\n\n    If not given, *value* defaults to 1.",
                                               'methods': [('release', [], '')],
                                               'properties': ['_initial_value']},
             'gevent.coros.DummySemaphore': {'bases': ['object'],
                                             'constructor': [],
                                             'docstring': 'A Semaphore initialized with "infinite" initial value. Neither of its methods ever block.',
                                             'methods': [('__str__', [], ''),
                                                         ('locked', [], ''),
                                                         ('release', [], ''),
                                                         ('rawlink', ['callback'], ''),
                                                         ('unlink', ['callback'], ''),
                                                         ('wait', ['timeout=None'], ''),
                                                         ('acquire',
                                                          ['blocking=True', 'timeout=None'],
                                                          ''),
                                                         ('__enter__', [], ''),
                                                         ('__exit__', ['typ', 'val', 'tb'], '')],
                                             'properties': []},
             'gevent.coros.RLock': {'bases': ['object'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('__repr__', [], ''),
                                                ('acquire', ['blocking=1'], ''),
                                                ('__enter__', [], ''),
                                                ('release', [], ''),
                                                ('__exit__', ['typ', 'value', 'tb'], ''),
                                                ('_acquire_restore', ['count_owner'], ''),
                                                ('_release_save', [], ''),
                                                ('_is_owned', [], '')],
                                    'properties': ['_block', '_owner', '_count']},
             'gevent.coros.Semaphore': {'bases': ['object'],
                                        'constructor': ['value=1'],
                                        'docstring': 'A semaphore manages a counter representing the number of release() calls minus the number of acquire() calls,\n    plus an initial value. The acquire() method blocks if necessary until it can return without making the counter\n    negative.\n\n    If not given, value defaults to 1.',
                                        'methods': [('__str__', [], ''),
                                                    ('locked', [], ''),
                                                    ('release', [], ''),
                                                    ('_notify_links', ['links'], ''),
                                                    ('rawlink',
                                                     ['callback'],
                                                     'Register a callback to call when a counter is more than zero.\n\n        *callback* will be called in the :class:`Hub <gevent.hub.Hub>`, so it must not use blocking gevent API.\n        *callback* will be passed one argument: this instance.\n        '),
                                                    ('unlink',
                                                     ['callback'],
                                                     'Remove the callback set by :meth:`rawlink`'),
                                                    ('wait', ['timeout=None'], ''),
                                                    ('acquire',
                                                     ['blocking=True', 'timeout=None'],
                                                     ''),
                                                    ('__enter__', [], ''),
                                                    ('__exit__', ['typ', 'val', 'tb'], '')],
                                        'properties': ['_links', 'counter', '_notifier']},
             'gevent.dns.DNSError': {'bases': ['_socket.gaierror'],
                                     'constructor': ['*args'],
                                     'docstring': "A subclass of :class:`socket.gaierror` used by :mod:`evdns` functions to report errors.\n\n    It uses evdns-specific error codes that are different from the standard socket errors.\n\n        >>> resolve_ipv4('aaaaaaaaaaa')\n        Traceback (most recent call last):\n         ...\n        DNSError: [Errno 3] name does not exist\n    ",
                                     'methods': [],
                                     'properties': []},
             'gevent.event.AsyncResult': {'bases': ['object'],
                                          'constructor': [],
                                          'docstring': "A one-time event that stores a value or an exception.\n\n    Like :class:`Event` it wakes up all the waiters when :meth:`set` or :meth:`set_exception` method\n    is called. Waiters may receive the passed value or exception by calling :meth:`get`\n    method instead of :meth:`wait`. An :class:`AsyncResult` instance cannot be reset.\n\n    To pass a value call :meth:`set`. Calls to :meth:`get` (those that currently blocking as well as\n    those made in the future) will return the value:\n\n        >>> result = AsyncResult()\n        >>> result.set(100)\n        >>> result.get()\n        100\n\n    To pass an exception call :meth:`set_exception`. This will cause :meth:`get` to raise that exception:\n\n        >>> result = AsyncResult()\n        >>> result.set_exception(RuntimeError('failure'))\n        >>> result.get()\n        Traceback (most recent call last):\n         ...\n        RuntimeError: failure\n\n    :class:`AsyncResult` implements :meth:`__call__` and thus can be used as :meth:`link` target:\n\n        >>> result = AsyncResult()\n        >>> gevent.spawn(lambda : 1/0).link(result)\n        >>> result.get()\n        Traceback (most recent call last):\n         ...\n        ZeroDivisionError: integer division or modulo by zero\n    ",
                                          'methods': [('ready',
                                                       [],
                                                       'Return true if and only if it holds a value or an exception'),
                                                      ('successful',
                                                       [],
                                                       'Return true if and only if it is ready and holds a value'),
                                                      ('set',
                                                       ['value=None'],
                                                       'Store the value. Wake up the waiters.\n\n        All greenlets blocking on :meth:`get` or :meth:`wait` are woken up.\n        Sequential calls to :meth:`wait` and :meth:`get` will not block at all.\n        '),
                                                      ('set_exception',
                                                       ['exception'],
                                                       'Store the exception. Wake up the waiters.\n\n        All greenlets blocking on :meth:`get` or :meth:`wait` are woken up.\n        Sequential calls to :meth:`wait` and :meth:`get` will not block at all.\n        '),
                                                      ('get',
                                                       ['block=True', 'timeout=None'],
                                                       'Return the stored value or raise the exception.\n\n        If this instance already holds a value / an exception, return / raise it immediatelly.\n        Otherwise, block until another greenlet calls :meth:`set` or :meth:`set_exception` or\n        until the optional timeout occurs.\n\n        When the *timeout* argument is present and not ``None``, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n        '),
                                                      ('get_nowait',
                                                       [],
                                                       'Return the value or raise the exception without blocking.\n\n        If nothing is available, raise :class:`gevent.Timeout` immediatelly.\n        '),
                                                      ('wait',
                                                       ['timeout=None'],
                                                       'Block until the instance is ready.\n\n        If this instance already holds a value / an exception, return immediatelly.\n        Otherwise, block until another thread calls :meth:`set` or :meth:`set_exception` or\n        until the optional timeout occurs.\n\n        When the *timeout* argument is present and not ``None``, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n\n        Return :attr:`value`.\n        '),
                                                      ('_notify_links', [], ''),
                                                      ('rawlink',
                                                       ['callback'],
                                                       'Register a callback to call when a value or an exception is set.\n\n        *callback* will be called in the :class:`Hub <gevent.hub.Hub>`, so it must not use blocking gevent API.\n        *callback* will be passed one argument: this instance.\n        '),
                                                      ('unlink',
                                                       ['callback'],
                                                       'Remove the callback set by :meth:`rawlink`'),
                                                      ('__call__', ['source'], '')],
                                          'properties': ['_links',
                                                         'value',
                                                         '_exception',
                                                         '_notifier',
                                                         'exception']},
             'gevent.event.Event': {'bases': ['object'],
                                    'constructor': [],
                                    'docstring': 'A synchronization primitive that allows one greenlet to wake up one or more others.\n    It has the same interface as :class:`threading.Event` but works across greenlets.\n\n    An event object manages an internal flag that can be set to true with the\n    :meth:`set` method and reset to false with the :meth:`clear` method. The :meth:`wait` method\n    blocks until the flag is true.\n    ',
                                    'methods': [('__str__', [], ''),
                                                ('is_set',
                                                 [],
                                                 'Return true if and only if the internal flag is true.'),
                                                ('set',
                                                 [],
                                                 'Set the internal flag to true. All greenlets waiting for it to become true are awakened.\n        Greenlets that call :meth:`wait` once the flag is true will not block at all.\n        '),
                                                ('clear',
                                                 [],
                                                 'Reset the internal flag to false.\n        Subsequently, threads calling :meth:`wait`\n        will block until :meth:`set` is called to set the internal flag to true again.\n        '),
                                                ('wait',
                                                 ['timeout=None'],
                                                 'Block until the internal flag is true.\n        If the internal flag is true on entry, return immediately. Otherwise,\n        block until another thread calls :meth:`set` to set the flag to true,\n        or until the optional timeout occurs.\n\n        When the *timeout* argument is present and not ``None``, it should be a\n        floating point number specifying a timeout for the operation in seconds\n        (or fractions thereof).\n\n        Return the value of the internal flag (``True`` or ``False``).\n        '),
                                                ('rawlink',
                                                 ['callback'],
                                                 'Register a callback to call when the internal flag is set to true.\n\n        *callback* will be called in the :class:`Hub <gevent.hub.Hub>`, so it must not use blocking gevent API.\n        *callback* will be passed one argument: this instance.\n        '),
                                                ('unlink',
                                                 ['callback'],
                                                 'Remove the callback set by :meth:`rawlink`'),
                                                ('_notify_links', ['links'], '')],
                                    'properties': ['_links', '_flag', 'isSet', 'ready']},
             'gevent.greenlet.FailureGreenletLink': {'bases': ['gevent.greenlet.GreenletLink'],
                                                     'constructor': [],
                                                     'docstring': 'A wrapper around greenlet that raises a LinkedExited exception when called\n    if source has failed.\n\n    Can be called only from main loop.\n    ',
                                                     'methods': [('__call__', ['source'], '')],
                                                     'properties': ['__slots__']},
             'gevent.greenlet.FailureSpawnedLink': {'bases': ['gevent.greenlet.SpawnedLink'],
                                                    'constructor': [],
                                                    'docstring': 'A wrapper around link that calls it in another greenlet only if source failed.\n\n    Can be called only from main loop.\n    ',
                                                    'methods': [('__call__', ['source'], '')],
                                                    'properties': ['__slots__']},
             'gevent.greenlet.Greenlet': {'bases': ['gevent.hub.greenlet'],
                                          'constructor': ['run=None', '*args', '**kwargs'],
                                          'docstring': 'A light-weight cooperatively-scheduled execution unit.',
                                          'methods': [('ready',
                                                       [],
                                                       'Return true if and only if the greenlet has finished execution.'),
                                                      ('successful',
                                                       [],
                                                       'Return true if and only if the greenlet has finished execution successfully,\n        that is, without raising an error.'),
                                                      ('__repr__', [], ''),
                                                      ('_formatinfo', [], ''),
                                                      ('throw',
                                                       ['*args'],
                                                       'Immediatelly switch into the greenlet and raise an exception in it.\n\n        Should only be called from the HUB, otherwise the current greenlet is left unscheduled forever.\n        To raise an exception in a safely manner from any greenlet, use :meth:`kill`.\n\n        If a greenlet was started but never switched to yet, then also\n        a) cancel the event that will start it\n        b) fire the notifications as if an exception was raised in a greenlet\n        '),
                                                      ('start',
                                                       [],
                                                       'Schedule the greenlet to run in this loop iteration'),
                                                      ('start_later',
                                                       ['seconds'],
                                                       'Schedule the greenlet to run in the future loop iteration *seconds* later'),
                                                      ('spawn',
                                                       ['*args', '**kwargs'],
                                                       'Return a new :class:`Greenlet` object, scheduled to start.\n\n        The arguments are passed to :meth:`Greenlet.__init__`.\n        '),
                                                      ('spawn_later',
                                                       ['seconds', '*args', '**kwargs'],
                                                       'Return a Greenlet object, scheduled to start *seconds* later.\n\n        The arguments are passed to :meth:`Greenlet.__init__`.\n        '),
                                                      ('spawn_link', ['*args', '**kwargs'], ''),
                                                      ('spawn_link_value',
                                                       ['*args', '**kwargs'],
                                                       ''),
                                                      ('spawn_link_exception',
                                                       ['*args', '**kwargs'],
                                                       ''),
                                                      ('kill',
                                                       ['exception=GreenletExit',
                                                        'block=True',
                                                        'timeout=None'],
                                                       'Raise the exception in the greenlet.\n\n        If block is ``True`` (the default), wait until the greenlet dies or the optional timeout expires.\n        If block is ``False``, the current greenlet is not unscheduled.\n\n        The function always returns ``None`` and never raises an error.\n\n        `Changed in version 0.13.0:` *block* is now ``True`` by default.\n        '),
                                                      ('get',
                                                       ['block=True', 'timeout=None'],
                                                       'Return the result the greenlet has returned or re-raise the exception it has raised.\n\n        If block is ``False``, raise :class:`gevent.Timeout` if the greenlet is still alive.\n        If block is ``True``, unschedule the current greenlet until the result is available\n        or the timeout expires. In the latter case, :class:`gevent.Timeout` is raised.\n        '),
                                                      ('join',
                                                       ['timeout=None'],
                                                       'Wait until the greenlet finishes or *timeout* expires.\n        Return ``None`` regardless.\n        '),
                                                      ('_report_result', ['result'], ''),
                                                      ('_report_error', ['exc_info'], ''),
                                                      ('run', [], ''),
                                                      ('rawlink',
                                                       ['callback'],
                                                       'Register a callable to be executed when the greenlet finishes the execution.\n\n        WARNING: the callable will be called in the HUB greenlet.\n        '),
                                                      ('link',
                                                       ['receiver=None',
                                                        'GreenletLink=GreenletLink',
                                                        'SpawnedLink=SpawnedLink'],
                                                       "Link greenlet's completion to callable or another greenlet.\n\n        If *receiver* is a callable then it will be called with this instance as an argument\n        once this greenlet's dead. A callable is called in its own greenlet.\n\n        If *receiver* is a greenlet then an :class:`LinkedExited` exception will be\n        raised in it once this greenlet's dead.\n\n        If *receiver* is ``None``, link to the current greenlet.\n\n        Always asynchronous, unless receiver is a current greenlet and the result is ready.\n        If this greenlet is already dead, then notification will performed in this loop\n        iteration as soon as this greenlet switches to the hub.\n        "),
                                                      ('unlink',
                                                       ['receiver=None'],
                                                       'Remove the receiver set by :meth:`link` or :meth:`rawlink`'),
                                                      ('link_value',
                                                       ['receiver=None',
                                                        'GreenletLink=SuccessGreenletLink',
                                                        'SpawnedLink=SuccessSpawnedLink'],
                                                       'Like :meth:`link` but *receiver* is only notified when the greenlet has completed successfully'),
                                                      ('link_exception',
                                                       ['receiver=None',
                                                        'GreenletLink=FailureGreenletLink',
                                                        'SpawnedLink=FailureSpawnedLink'],
                                                       'Like :meth:`link` but *receiver* is only notified when the greenlet dies because of unhandled exception'),
                                                      ('_notify_links', [], '')],
                                          'properties': ['_run',
                                                         'args',
                                                         'kwargs',
                                                         '_links',
                                                         'value',
                                                         '_exception',
                                                         '_notifier',
                                                         '_start_event',
                                                         'started',
                                                         '_formatted_info',
                                                         'exception']},
             'gevent.greenlet.GreenletLink': {'bases': ['object'],
                                              'constructor': ['greenlet'],
                                              'docstring': 'A wrapper around greenlet that raises a LinkedExited exception when called.\n\n    Can be called only from main loop.\n    ',
                                              'methods': [('__call__', ['source'], ''),
                                                          ('__hash__', [], ''),
                                                          ('__eq__', ['other'], ''),
                                                          ('__str__', [], ''),
                                                          ('__repr__', [], '')],
                                              'properties': ['__slots__', 'greenlet']},
             'gevent.greenlet.LinkedCompleted': {'bases': ['gevent.greenlet.LinkedExited'],
                                                 'constructor': ['source'],
                                                 'docstring': 'Raised when a linked greenlet finishes the execution cleanly',
                                                 'methods': [],
                                                 'properties': ['msg']},
             'gevent.greenlet.LinkedExited': {'bases': ['Exception'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'gevent.greenlet.LinkedFailed': {'bases': ['gevent.greenlet.LinkedExited'],
                                              'constructor': ['source'],
                                              'docstring': 'Raised when a linked greenlet dies because of unhandled exception',
                                              'methods': [],
                                              'properties': ['msg']},
             'gevent.greenlet.LinkedKilled': {'bases': ['gevent.greenlet.LinkedCompleted'],
                                              'constructor': ['source'],
                                              'docstring': 'Raised when a linked greenlet returns GreenletExit instance',
                                              'methods': [],
                                              'properties': ['msg']},
             'gevent.greenlet.SpawnedLink': {'bases': ['object'],
                                             'constructor': ['callback'],
                                             'docstring': 'A wrapper around link that calls it in another greenlet.\n\n    Can be called only from main loop.\n    ',
                                             'methods': [('__call__', ['source'], ''),
                                                         ('__hash__', [], ''),
                                                         ('__eq__', ['other'], ''),
                                                         ('__str__', [], ''),
                                                         ('__repr__', [], ''),
                                                         ('__getattr__', ['item'], '')],
                                             'properties': ['__slots__', 'callback']},
             'gevent.greenlet.SuccessGreenletLink': {'bases': ['gevent.greenlet.GreenletLink'],
                                                     'constructor': [],
                                                     'docstring': 'A wrapper around greenlet that raises a LinkedExited exception when called\n    if source has succeed.\n\n    Can be called only from main loop.\n    ',
                                                     'methods': [('__call__', ['source'], '')],
                                                     'properties': ['__slots__']},
             'gevent.greenlet.SuccessSpawnedLink': {'bases': ['gevent.greenlet.SpawnedLink'],
                                                    'constructor': [],
                                                    'docstring': 'A wrapper around link that calls it in another greenlet only if source succeed.\n\n    Can be called only from main loop.\n    ',
                                                    'methods': [('__call__', ['source'], '')],
                                                    'properties': ['__slots__']},
             'gevent.http.HTTPServer': {'bases': ['gevent.baseserver.BaseServer'],
                                        'constructor': ['listener',
                                                        'handle=None',
                                                        'backlog=None',
                                                        "spawn='default'",
                                                        "default_response_headers='default'"],
                                        'docstring': 'An HTTP server based on libevent-http.\n\n    *handle* is called with one argument: an :class:`gevent.core.http_request` instance.\n    ',
                                        'methods': [('_on_request', ['request'], ''),
                                                    ('_on_full', ['request'], ''),
                                                    ('start_accepting', [], ''),
                                                    ('stop_accepting', [], '')],
                                        'properties': ['default_response_headers', 'http']},
             'gevent.httplib.HTTPConnection': {'bases': ['object'],
                                               'constructor': ['host',
                                                               'port=None',
                                                               'timeout=None'],
                                               'docstring': '',
                                               'methods': [('_set_hostport',
                                                            ['host', 'port'],
                                                            ''),
                                                           ('set_debuglevel', ['level'], ''),
                                                           ('request',
                                                            ['method',
                                                             'uri',
                                                             'body=None',
                                                             'headers=None'],
                                                            ''),
                                                           ('getresponse', [], ''),
                                                           ('_callback', ['request'], ''),
                                                           ('connect', [], ''),
                                                           ('close', [], ''),
                                                           ('putrequest',
                                                            ['request',
                                                             'selector',
                                                             'skip_host=None',
                                                             'skip_accept_encoding=None'],
                                                            ''),
                                                           ('putheader',
                                                            ['header', '*args'],
                                                            ''),
                                                           ('endheaders', [], ''),
                                                           ('send', ['data'], '')],
                                               'properties': ['response_class',
                                                              'default_port',
                                                              'debuglevel',
                                                              'timeout',
                                                              'conn',
                                                              'resp',
                                                              '_waiter',
                                                              'host',
                                                              'port',
                                                              'req',
                                                              'method',
                                                              'uri']},
             'gevent.httplib.HTTPMessage': {'bases': ['object'],
                                            'constructor': ['headers'],
                                            'docstring': '',
                                            'methods': [('getheaders', ['name'], ''),
                                                        ('__len__',
                                                         [],
                                                         'Get the number of headers in a message.'),
                                                        ('__getitem__',
                                                         ['name'],
                                                         'Get a specific header, as from a dictionary.'),
                                                        ('get', ['name', 'default=None'], ''),
                                                        ('has_key',
                                                         ['name'],
                                                         'Determine whether a message contains the named header.'),
                                                        ('__contains__',
                                                         ['name'],
                                                         'Determine whether a message contains the named header.'),
                                                        ('__iter__', [], ''),
                                                        ('keys',
                                                         [],
                                                         "Get all of a message's header field names."),
                                                        ('values',
                                                         [],
                                                         "Get all of a message's header field values."),
                                                        ('items', [], ''),
                                                        ('__str__', [], '')],
                                            'properties': ['_headers', 'dict', 'headers']},
             'gevent.httplib.HTTPResponse': {'bases': ['object'],
                                             'constructor': ['request', 'debuglevel=0'],
                                             'docstring': '',
                                             'methods': [('read', ['amt=-1'], ''),
                                                         ('getheader',
                                                          ['name', 'default=None'],
                                                          ''),
                                                         ('getheaders', [], ''),
                                                         ('close', [], '')],
                                             'properties': ['_request',
                                                            'debuglevel',
                                                            'version',
                                                            'status',
                                                            'reason',
                                                            'headers',
                                                            'msg']},
             'gevent.httplib.RequestFailed': {'bases': ['gevent.httplib.HTTPException'],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'gevent.hub.DispatchExit': {'bases': ['Exception'],
                                         'constructor': ['code'],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': ['code']},
             'gevent.hub.Hub': {'bases': ['py.magic.greenlet'],
                                'constructor': [],
                                'docstring': 'A greenlet that runs the event loop.\n\n    It is created automatically by :func:`get_hub`.\n    ',
                                'methods': [('switch', [], ''),
                                            ('run', [], ''),
                                            ('shutdown', [], '')],
                                'properties': ['keyboard_interrupt_signal', 'run']},
             'gevent.hub.Waiter': {'bases': ['object'],
                                   'constructor': [],
                                   'docstring': "A low level communication utility for greenlets.\n\n    Wrapper around greenlet's ``switch()`` and ``throw()`` calls that makes them somewhat safer:\n\n    * switching will occur only if the waiting greenlet is executing :meth:`get` method currently;\n    * any error raised in the greenlet is handled inside :meth:`switch` and :meth:`throw`\n    * if :meth:`switch`/:meth:`throw` is called before the receiver calls :meth:`get`, then :class:`Waiter`\n      will store the value/exception. The following :meth:`get` will return the value/raise the exception.\n\n    The :meth:`switch` and :meth:`throw` methods must only be called from the :class:`Hub` greenlet.\n    The :meth:`get` method must be called from a greenlet other than :class:`Hub`.\n\n        >>> result = Waiter()\n        >>> _ = core.timer(0.1, result.switch, 'hello from Waiter')\n        >>> result.get() # blocks for 0.1 seconds\n        'hello from Waiter'\n\n    If switch is called before the greenlet gets a chance to call :meth:`get` then\n    :class:`Waiter` stores the value.\n\n        >>> result = Waiter()\n        >>> _ = core.timer(0.1, result.switch, 'hi from Waiter')\n        >>> sleep(0.2)\n        >>> result.get() # returns immediatelly without blocking\n        'hi from Waiter'\n\n    .. warning::\n\n        This a limited and dangerous way to communicate between greenlets. It can easily\n        leave a greenlet unscheduled forever if used incorrectly. Consider using safer\n        :class:`Event`/:class:`AsyncResult`/:class:`Queue` classes.\n    ",
                                   'methods': [('__str__', [], ''),
                                               ('ready',
                                                [],
                                                'Return true if and only if it holds a value or an exception'),
                                               ('successful',
                                                [],
                                                'Return true if and only if it is ready and holds a value'),
                                               ('switch',
                                                ['value=None'],
                                                "Switch to the greenlet if one's available. Otherwise store the value."),
                                               ('switch_args', ['*args'], ''),
                                               ('throw',
                                                ['*throw_args'],
                                                "Switch to the greenlet with the exception. If there's no greenlet, store the exception."),
                                               ('get',
                                                [],
                                                'If a value/an exception is stored, return/raise it. Otherwise until switch() or throw() is called.'),
                                               ('__call__', ['source'], '')],
                                   'properties': ['__slots__',
                                                  'greenlet',
                                                  'value',
                                                  '_exception',
                                                  'exc_info',
                                                  'wait']},
             'gevent.hub._NONE': {'bases': ['object'],
                                  'constructor': [],
                                  'docstring': 'A special thingy you must never pass to any of gevent API',
                                  'methods': [('__repr__', [], '')],
                                  'properties': ['__slots__']},
             'gevent.local._localbase': {'bases': ['object'],
                                         'constructor': [],
                                         'docstring': '',
                                         'methods': [('__new__', ['*args', '**kw'], '')],
                                         'properties': ['__slots__']},
             'gevent.local.local': {'bases': ['gevent.local._localbase'],
                                    'constructor': [],
                                    'docstring': '',
                                    'methods': [('__getattribute__', ['name'], ''),
                                                ('__setattr__', ['name', 'value'], ''),
                                                ('__delattr__', ['name'], ''),
                                                ('__copy__', [], '')],
                                    'properties': []},
             'gevent.pool.Group': {'bases': ['object'],
                                   'constructor': ['*args'],
                                   'docstring': 'Maintain a group of greenlets that are still running.\n\n    Links to each item and removes it upon notification.\n    ',
                                   'methods': [('__repr__', [], ''),
                                               ('__len__', [], ''),
                                               ('__contains__', ['item'], ''),
                                               ('__iter__', [], ''),
                                               ('add', ['greenlet'], ''),
                                               ('discard', ['greenlet'], ''),
                                               ('start', ['greenlet'], ''),
                                               ('spawn', ['*args', '**kwargs'], ''),
                                               ('spawn_link', ['*args', '**kwargs'], ''),
                                               ('spawn_link_value', ['*args', '**kwargs'], ''),
                                               ('spawn_link_exception',
                                                ['*args', '**kwargs'],
                                                ''),
                                               ('join',
                                                ['timeout=None', 'raise_error=False'],
                                                ''),
                                               ('kill',
                                                ['exception=GreenletExit',
                                                 'block=True',
                                                 'timeout=None'],
                                                ''),
                                               ('killone',
                                                ['greenlet',
                                                 'exception=GreenletExit',
                                                 'block=True',
                                                 'timeout=None'],
                                                ''),
                                               ('apply',
                                                ['func', 'args=None', 'kwds=None'],
                                                'Equivalent of the apply() builtin function. It blocks till the result is ready.'),
                                               ('apply_cb',
                                                ['func',
                                                 'args=None',
                                                 'kwds=None',
                                                 'callback=None'],
                                                ''),
                                               ('apply_async',
                                                ['func',
                                                 'args=None',
                                                 'kwds=None',
                                                 'callback=None'],
                                                'A variant of the apply() method which returns a Greenlet object.\n\n        If callback is specified then it should be a callable which accepts a single argument. When the result becomes ready\n        callback is applied to it (unless the call failed).'),
                                               ('map', ['func', 'iterable'], ''),
                                               ('map_cb',
                                                ['func', 'iterable', 'callback=None'],
                                                ''),
                                               ('map_async',
                                                ['func', 'iterable', 'callback=None'],
                                                '\n        A variant of the map() method which returns a Greenlet object.\n\n        If callback is specified then it should be a callable which accepts a\n        single argument.\n        '),
                                               ('imap',
                                                ['func', 'iterable'],
                                                'An equivalent of itertools.imap()\n\n        **TODO**: Fix this.\n        '),
                                               ('imap_unordered',
                                                ['func', 'iterable'],
                                                'The same as imap() except that the ordering of the results from the\n        returned iterator should be considered in arbitrary order.'),
                                               ('full', [], ''),
                                               ('wait_available', [], '')],
                                   'properties': ['greenlet_class',
                                                  'greenlets',
                                                  'dying',
                                                  '_empty_event']},
             'gevent.pool.IMapUnordered': {'bases': ['gevent.greenlet.Greenlet'],
                                           'constructor': ['spawn', 'func', 'iterable'],
                                           'docstring': '',
                                           'methods': [('__iter__', [], ''),
                                                       ('_run', [], ''),
                                                       ('_on_result', ['greenlet'], '')],
                                           'properties': ['spawn',
                                                          'func',
                                                          'iterable',
                                                          'queue',
                                                          'count']},
             'gevent.pool.Pool': {'bases': ['gevent.pool.Group'],
                                  'constructor': ['size=None', 'greenlet_class=None'],
                                  'docstring': '',
                                  'methods': [('wait_available', [], ''),
                                              ('full', [], ''),
                                              ('free_count', [], ''),
                                              ('start', ['greenlet'], ''),
                                              ('spawn', ['*args', '**kwargs'], ''),
                                              ('spawn_link', ['*args', '**kwargs'], ''),
                                              ('spawn_link_value', ['*args', '**kwargs'], ''),
                                              ('spawn_link_exception',
                                               ['*args', '**kwargs'],
                                               ''),
                                              ('discard', ['greenlet'], '')],
                                  'properties': ['size', 'greenlet_class', '_semaphore']},
             'gevent.pool.pass_value': {'bases': ['object'],
                                        'constructor': ['callback'],
                                        'docstring': '',
                                        'methods': [('__call__', ['source'], ''),
                                                    ('__hash__', [], ''),
                                                    ('__eq__', ['other'], ''),
                                                    ('__str__', [], ''),
                                                    ('__repr__', [], ''),
                                                    ('__getattr__', ['item'], '')],
                                        'properties': ['__slots__', 'callback']},
             'gevent.pywsgi.Input': {'bases': ['object'],
                                     'constructor': ['rfile',
                                                     'content_length',
                                                     'socket=None',
                                                     'chunked_input=False'],
                                     'docstring': '',
                                     'methods': [('_discard', [], ''),
                                                 ('_send_100_continue', [], ''),
                                                 ('_do_read', ['reader', 'length=None'], ''),
                                                 ('_chunked_read',
                                                  ['rfile',
                                                   'length=None',
                                                   'use_readline=False'],
                                                  ''),
                                                 ('read', ['length=None'], ''),
                                                 ('readline', ['size=None'], ''),
                                                 ('readlines', ['hint=None'], ''),
                                                 ('__iter__', [], ''),
                                                 ('next', [], '')],
                                     'properties': ['rfile',
                                                    'content_length',
                                                    'socket',
                                                    'position',
                                                    'chunked_input',
                                                    'chunk_length',
                                                    'sendall']},
             'gevent.pywsgi.WSGIHandler': {'bases': ['object'],
                                           'constructor': ['socket',
                                                           'address',
                                                           'server',
                                                           'rfile=None'],
                                           'docstring': '',
                                           'methods': [('handle', [], ''),
                                                       ('_check_http_version', [], ''),
                                                       ('read_request',
                                                        ['raw_requestline'],
                                                        ''),
                                                       ('log_error', ['msg', '*args'], ''),
                                                       ('read_requestline', [], ''),
                                                       ('handle_one_request', [], ''),
                                                       ('write', ['data'], ''),
                                                       ('start_response',
                                                        ['status', 'headers', 'exc_info=None'],
                                                        ''),
                                                       ('log_request', [], ''),
                                                       ('format_request', [], ''),
                                                       ('process_result', [], ''),
                                                       ('run_application', [], ''),
                                                       ('handle_one_response', [], ''),
                                                       ('get_environ', [], '')],
                                           'properties': ['protocol_version',
                                                          'MessageClass',
                                                          'socket',
                                                          'client_address',
                                                          'server',
                                                          'rfile',
                                                          'wfile',
                                                          '_wfile',
                                                          'time_start',
                                                          'time_finish',
                                                          'status',
                                                          'requestline',
                                                          'command',
                                                          'path',
                                                          'request_version',
                                                          'headers',
                                                          'content_length',
                                                          'close_connection',
                                                          'response_length',
                                                          'environ',
                                                          'application',
                                                          'response_use_chunked',
                                                          'headers_sent',
                                                          'code',
                                                          'response_headers',
                                                          'response_headers_list',
                                                          'result',
                                                          'wsgi_input']},
             'gevent.pywsgi.WSGIServer': {'bases': ['gevent.server.StreamServer'],
                                          'constructor': ['listener',
                                                          'application=None',
                                                          'backlog=None',
                                                          "spawn='default'",
                                                          "log='default'",
                                                          'handler_class=None',
                                                          'environ=None',
                                                          '**ssl_args'],
                                          'docstring': 'A WSGI server based on :class:`StreamServer` that supports HTTPS.',
                                          'methods': [('set_environ', ['environ=None'], ''),
                                                      ('get_environ', [], ''),
                                                      ('pre_start', [], ''),
                                                      ('update_environ', [], ''),
                                                      ('handle', ['socket', 'address'], '')],
                                          'properties': ['handler_class',
                                                         'base_env',
                                                         'application',
                                                         'log',
                                                         'environ']},
             'gevent.queue.ItemWaiter': {'bases': ['gevent.hub.Waiter'],
                                         'constructor': ['item'],
                                         'docstring': '',
                                         'methods': [],
                                         'properties': ['__slots__', 'item']},
             'gevent.queue.JoinableQueue': {'bases': ['gevent.queue.Queue'],
                                            'constructor': ['maxsize=None'],
                                            'docstring': 'A subclass of :class:`Queue` that additionally has :meth:`task_done` and :meth:`join` methods.',
                                            'methods': [('_format', [], ''),
                                                        ('_put', ['item'], ''),
                                                        ('task_done',
                                                         [],
                                                         'Indicate that a formerly enqueued task is complete. Used by queue consumer threads.\n        For each :meth:`get <Queue.get>` used to fetch a task, a subsequent call to :meth:`task_done` tells the queue\n        that the processing on the task is complete.\n\n        If a :meth:`join` is currently blocking, it will resume when all items have been processed\n        (meaning that a :meth:`task_done` call was received for every item that had been\n        :meth:`put <Queue.put>` into the queue).\n\n        Raises a :exc:`ValueError` if called more times than there were items placed in the queue.\n        '),
                                                        ('join',
                                                         [],
                                                         'Block until all items in the queue have been gotten and processed.\n\n        The count of unfinished tasks goes up whenever an item is added to the queue.\n        The count goes down whenever a consumer thread calls :meth:`task_done` to indicate\n        that the item was retrieved and all work on it is complete. When the count of\n        unfinished tasks drops to zero, :meth:`join` unblocks.\n        ')],
                                            'properties': ['unfinished_tasks', '_cond']},
             'gevent.queue.LifoQueue': {'bases': ['gevent.queue.Queue'],
                                        'constructor': [],
                                        'docstring': 'A subclass of :class:`Queue` that retrieves most recently added entries first.',
                                        'methods': [('_init', ['maxsize'], ''),
                                                    ('_put', ['item'], ''),
                                                    ('_get', [], '')],
                                        'properties': ['queue']},
             'gevent.queue.PriorityQueue': {'bases': ['gevent.queue.Queue'],
                                            'constructor': [],
                                            'docstring': 'A subclass of :class:`Queue` that retrieves entries in priority order (lowest first).\n\n    Entries are typically tuples of the form: ``(priority number, data)``.\n    ',
                                            'methods': [('_init', ['maxsize'], ''),
                                                        ('_put',
                                                         ['item', 'heappush=heapq.heappush'],
                                                         ''),
                                                        ('_get', ['heappop=heapq.heappop'], '')],
                                            'properties': ['queue']},
             'gevent.queue.Queue': {'bases': ['object'],
                                    'constructor': ['maxsize=None'],
                                    'docstring': 'Create a queue object with a given maximum size.\n\n    If *maxsize* is less than zero or ``None``, the queue size is infinite.\n\n    ``Queue(0)`` is a channel, that is, its :meth:`put` method always blocks until the\n    item is delivered. (This is unlike the standard :class:`Queue`, where 0 means\n    infinite size).\n    ',
                                    'methods': [('_init', ['maxsize'], ''),
                                                ('_get', [], ''),
                                                ('_put', ['item'], ''),
                                                ('__repr__', [], ''),
                                                ('__str__', [], ''),
                                                ('_format', [], ''),
                                                ('qsize', [], 'Return the size of the queue.'),
                                                ('empty',
                                                 [],
                                                 'Return ``True`` if the queue is empty, ``False`` otherwise.'),
                                                ('full',
                                                 [],
                                                 'Return ``True`` if the queue is full, ``False`` otherwise.\n\n        ``Queue(None)`` is never full.\n        '),
                                                ('put',
                                                 ['item', 'block=True', 'timeout=None'],
                                                 'Put an item into the queue.\n\n        If optional arg *block* is true and *timeout* is ``None`` (the default),\n        block if necessary until a free slot is available. If *timeout* is\n        a positive number, it blocks at most *timeout* seconds and raises\n        the :class:`Full` exception if no free slot was available within that time.\n        Otherwise (*block* is false), put an item on the queue if a free slot\n        is immediately available, else raise the :class:`Full` exception (*timeout*\n        is ignored in that case).\n        '),
                                                ('put_nowait',
                                                 ['item'],
                                                 'Put an item into the queue without blocking.\n\n        Only enqueue the item if a free slot is immediately available.\n        Otherwise raise the :class:`Full` exception.\n        '),
                                                ('get',
                                                 ['block=True', 'timeout=None'],
                                                 'Remove and return an item from the queue.\n\n        If optional args *block* is true and *timeout* is ``None`` (the default),\n        block if necessary until an item is available. If *timeout* is a positive number,\n        it blocks at most *timeout* seconds and raises the :class:`Empty` exception\n        if no item was available within that time. Otherwise (*block* is false), return\n        an item if one is immediately available, else raise the :class:`Empty` exception\n        (*timeout* is ignored in that case).\n        '),
                                                ('get_nowait',
                                                 [],
                                                 'Remove and return an item from the queue without blocking.\n\n        Only get an item if one is immediately available. Otherwise\n        raise the :class:`Empty` exception.\n        '),
                                                ('_unlock', [], ''),
                                                ('_schedule_unlock', [], ''),
                                                ('__iter__', [], ''),
                                                ('next', [], '')],
                                    'properties': ['maxsize',
                                                   'getters',
                                                   'putters',
                                                   '_event_unlock',
                                                   'queue']},
             'gevent.select.SelectResult': {'bases': ['object'],
                                            'constructor': [],
                                            'docstring': '',
                                            'methods': [('update', ['event', 'evtype'], '')],
                                            'properties': ['__slots__',
                                                           'read',
                                                           'write',
                                                           'event',
                                                           'timer']},
             'gevent.server.StreamServer': {'bases': ['gevent.baseserver.BaseServer'],
                                            'constructor': ['listener',
                                                            'handle=None',
                                                            'backlog=None',
                                                            "spawn='default'",
                                                            '**ssl_args'],
                                            'docstring': 'A generic TCP server. Accepts connections on a listening socket and spawns user-provided *handle*\n    for each connection with 2 arguments: the client socket and the client address.\n\n    If any of the following keyword arguments are present, then the server assumes SSL mode and uses these arguments\n    to create an SSL wrapper for the client socket before passing it to *handle*:\n\n    - keyfile\n    - certfile\n    - cert_reqs\n    - ssl_version\n    - ca_certs\n    - suppress_ragged_eofs\n    - do_handshake_on_connect\n    - ciphers\n\n    Note that although the errors in a successfully spawned handler will not affect the server or other connections,\n    the errors raised by :func:`accept` and *spawn* cause the server to stop accepting for a short amount of time. The\n    exact period depends on the values of :attr:`min_delay` and :attr:`max_delay` attributes.\n\n    The delay starts with :attr:`min_delay` and doubles with each successive error until it reaches :attr:`max_delay`.\n    A successful :func:`accept` resets the delay to :attr:`min_delay` again.\n    ',
                                            'methods': [('set_listener',
                                                         ['listener', 'backlog=None'],
                                                         ''),
                                                        ('set_spawn', ['spawn'], ''),
                                                        ('kill', [], ''),
                                                        ('pre_start', [], ''),
                                                        ('start_accepting', [], ''),
                                                        ('_start_accepting_if_started',
                                                         ['_event=None'],
                                                         ''),
                                                        ('stop_accepting', [], ''),
                                                        ('_do_accept',
                                                         ['event', '_evtype'],
                                                         ''),
                                                        ('is_fatal_error', ['ex'], ''),
                                                        ('wrap_socket_and_handle',
                                                         ['client_socket', 'address'],
                                                         '')],
                                            'properties': ['max_accept',
                                                           'min_delay',
                                                           'max_delay',
                                                           'wrap_socket',
                                                           'ssl_args',
                                                           'ssl_enabled',
                                                           'delay',
                                                           '_accept_event',
                                                           '_start_accepting_timer',
                                                           'socket',
                                                           '_handle']},
             'gevent.socket._closedsocket': {'bases': ['object'],
                                             'constructor': [],
                                             'docstring': '',
                                             'methods': [('_dummy', [], '')],
                                             'properties': ['__slots__',
                                                            'send',
                                                            'recv',
                                                            'recv_into',
                                                            'sendto',
                                                            'recvfrom',
                                                            'recvfrom_into',
                                                            '__getattr__']},
             'gevent.socket._fileobject': {'bases': ['realfileobject'],
                                           'constructor': ['*args', '**kwargs'],
                                           'docstring': '',
                                           'methods': [('close', [], '')],
                                           'properties': ['__slots__', '_close', '_sock']},
             'gevent.socket.socket': {'bases': ['object'],
                                      'constructor': ['family=AF_INET',
                                                      'type=SOCK_STREAM',
                                                      'proto=0',
                                                      '_sock=None'],
                                      'docstring': '',
                                      'methods': [('__repr__', [], ''),
                                                  ('__str__', [], ''),
                                                  ('_formatinfo', [], ''),
                                                  ('accept', [], ''),
                                                  ('close', [], ''),
                                                  ('connect', ['address'], ''),
                                                  ('connect_ex', ['address'], ''),
                                                  ('dup',
                                                   [],
                                                   'dup() -> socket object\n\n        Return a new socket object connected to the same system resource.\n        Note, that the new socket does not inherit the timeout.'),
                                                  ('makefile', ["mode='r'", 'bufsize=-1'], ''),
                                                  ('recv', ['*args'], ''),
                                                  ('recvfrom', ['*args'], ''),
                                                  ('recvfrom_into', ['*args'], ''),
                                                  ('recv_into', ['*args'], ''),
                                                  ('send',
                                                   ['data',
                                                    'flags=0',
                                                    'timeout=timeout_default'],
                                                   ''),
                                                  ('sendall', ['data', 'flags=0'], ''),
                                                  ('sendto', ['*args'], ''),
                                                  ('setblocking', ['flag'], ''),
                                                  ('settimeout', ['howlong'], ''),
                                                  ('gettimeout', [], ''),
                                                  ('shutdown', ['how'], '')],
                                      'properties': ['_sock',
                                                     'timeout',
                                                     '_read_event',
                                                     '_write_event',
                                                     '_rw_event',
                                                     'family',
                                                     'type',
                                                     'proto',
                                                     '_s',
                                                     '_m']},
             'gevent.ssl.SSLSocket': {'bases': ['gevent.socket.socket'],
                                      'constructor': ['sock',
                                                      'keyfile=None',
                                                      'certfile=None',
                                                      'server_side=False',
                                                      'cert_reqs=CERT_NONE',
                                                      'ssl_version=PROTOCOL_SSLv23',
                                                      'ca_certs=None',
                                                      'do_handshake_on_connect=True',
                                                      'suppress_ragged_eofs=True',
                                                      'ciphers=None'],
                                      'docstring': '',
                                      'methods': [('read',
                                                   ['len=1024'],
                                                   'Read up to LEN bytes and return them.\n        Return zero-length string on EOF.'),
                                                  ('write',
                                                   ['data'],
                                                   'Write DATA to the underlying SSL channel.  Returns\n        number of bytes of DATA actually transmitted.'),
                                                  ('getpeercert',
                                                   ['binary_form=False'],
                                                   'Returns a formatted version of the data in the\n        certificate provided by the other end of the SSL channel.\n        Return None if no certificate was provided, {} if a\n        certificate was provided, but not validated.'),
                                                  ('cipher', [], ''),
                                                  ('send',
                                                   ['data',
                                                    'flags=0',
                                                    'timeout=timeout_default'],
                                                   ''),
                                                  ('sendto', ['*args'], ''),
                                                  ('recv', ['buflen=1024', 'flags=0'], ''),
                                                  ('recv_into',
                                                   ['buffer', 'nbytes=None', 'flags=0'],
                                                   ''),
                                                  ('recvfrom', ['*args'], ''),
                                                  ('recvfrom_into', ['*args'], ''),
                                                  ('pending', [], ''),
                                                  ('_sslobj_shutdown', [], ''),
                                                  ('unwrap', [], ''),
                                                  ('shutdown', ['how'], ''),
                                                  ('close', [], ''),
                                                  ('do_handshake',
                                                   [],
                                                   'Perform a TLS/SSL handshake.'),
                                                  ('connect',
                                                   ['addr'],
                                                   'Connects to remote ADDR, and then wraps the connection in\n        an SSL channel.'),
                                                  ('accept',
                                                   [],
                                                   'Accepts a new connection from a remote client, and returns\n        a tuple containing that new connection wrapped with a server-side\n        SSL channel, and the address of the remote client.'),
                                                  ('makefile',
                                                   ["mode='r'", 'bufsize=-1'],
                                                   'Make and return a file-like object that\n        works with the SSL connection.  Just use the code\n        from the socket module.')],
                                      'properties': ['_sslobj',
                                                     'keyfile',
                                                     'certfile',
                                                     'cert_reqs',
                                                     'ssl_version',
                                                     'ca_certs',
                                                     'ciphers',
                                                     'do_handshake_on_connect',
                                                     'suppress_ragged_eofs',
                                                     '_makefile_refs']},
             'gevent.sslold.SSLObject': {'bases': ['gevent.socket.socket'],
                                         'constructor': ['sock', 'server_side=False'],
                                         'docstring': '',
                                         'methods': [('__getattr__', ['item'], ''),
                                                     ('_formatinfo', [], ''),
                                                     ('accept', [], ''),
                                                     ('do_handshake', [], ''),
                                                     ('connect', ['*args'], ''),
                                                     ('send',
                                                      ['data',
                                                       'flags=0',
                                                       'timeout=timeout_default'],
                                                      ''),
                                                     ('recv', ['buflen'], ''),
                                                     ('read',
                                                      ['buflen=1024'],
                                                      '\n        NOTE: read() in SSLObject does not have the semantics of file.read\n        reading here until we have buflen bytes or hit EOF is an error\n        '),
                                                     ('write', ['data'], ''),
                                                     ('makefile',
                                                      ["mode='r'", 'bufsize=-1'],
                                                      ''),
                                                     ('close', [], '')],
                                         'properties': ['_makefile_refs']},
             'gevent.sslold.sslerror': {'bases': ['gevent.socket.error'],
                                        'constructor': [],
                                        'docstring': '',
                                        'methods': [],
                                        'properties': []},
             'gevent.timeout.BaseException': {'bases': [],
                                              'constructor': [],
                                              'docstring': '',
                                              'methods': [],
                                              'properties': []},
             'gevent.timeout.Timeout': {'bases': ['BaseException'],
                                        'constructor': ['seconds=None', 'exception=None'],
                                        'docstring': "Raise *exception* in the current greenlet after given time period::\n\n        timeout = Timeout(seconds, exception)\n        timeout.start()\n        try:\n            ...  # exception will be raised here, after *seconds* passed since start() call\n        finally:\n            timeout.cancel()\n\n    When *exception* is omitted or ``None``, the :class:`Timeout` instance itself is raised:\n\n        >>> Timeout(0.1).start()\n        >>> gevent.sleep(0.2)\n        Traceback (most recent call last):\n         ...\n        Timeout: 0.1 seconds\n\n    For Python 2.5 and newer ``with`` statement can be used::\n\n        with Timeout(seconds, exception) as timeout:\n            pass  # ... code block ...\n\n    This is equivalent to try/finally block above with one additional feature:\n    if *exception* is ``False``, the timeout is still raised, but context manager\n    suppresses it, so the code outside the with-block won't see it.\n\n    This is handy for adding a timeout to the functions that don't support *timeout* parameter themselves::\n\n        data = None\n        with Timeout(5, False):\n            data = mysock.makefile().readline()\n        if data is None:\n            ...  # 5 seconds passed without reading a line\n        else:\n            ...  # a line was read within 5 seconds\n\n    Note that, if ``readline()`` above catches and doesn't re-raise :class:`BaseException`\n    (for example, with ``except:``), then your timeout is screwed.\n\n    When catching timeouts, keep in mind that the one you catch maybe not the\n    one you have set; if you going to silent a timeout, always check that it's\n    the one you need::\n\n        timeout = Timeout(1)\n        timeout.start()\n        try:\n            ...\n        except Timeout, t:\n            if t is not timeout:\n                raise # not my timeout\n    ",
                                        'methods': [('start', [], 'Schedule the timeout.'),
                                                    ('start_new',
                                                     ['timeout=None', 'exception=None'],
                                                     "Create a started :class:`Timeout`.\n\n        This is a shortcut, the exact action depends on *timeout*'s type:\n\n        * If *timeout* is a :class:`Timeout`, then call its :meth:`start` method.\n        * Otherwise, create a new :class:`Timeout` instance, passing (*timeout*, *exception*) as\n          arguments, then call its :meth:`start` method.\n\n        Returns the :class:`Timeout` instance.\n        "),
                                                    ('cancel',
                                                     [],
                                                     'If the timeout is pending, cancel it. Otherwise, do nothing.'),
                                                    ('__repr__', [], ''),
                                                    ('__str__',
                                                     [],
                                                     '\n        >>> raise Timeout\n        Traceback (most recent call last):\n            ...\n        Timeout\n        '),
                                                    ('__enter__', [], ''),
                                                    ('__exit__', ['typ', 'value', 'tb'], '')],
                                        'properties': ['seconds',
                                                       'exception',
                                                       'timer',
                                                       'pending']},
             'gevent.util.lazy_property': {'bases': ['object'],
                                           'constructor': ['function'],
                                           'docstring': 'A decorator similar to :meth:`property` that only calls the *function* once.',
                                           'methods': [('__get__', ['obj', '_=None'], '')],
                                           'properties': ['_calculate']},
             'gevent.util.wrap_errors': {'bases': ['object'],
                                         'constructor': ['errors', 'func'],
                                         'docstring': 'Helper to make function return an exception, rather than raise it.\n\n    Because every exception that is unhandled by greenlet will be logged,\n    it is desirable to prevent non-error exceptions from leaving a greenlet.\n    This can done with simple ``try``/``except`` construct::\n\n        def wrapped_func(*args, **kwargs):\n            try:\n                return func(*args, **kwargs)\n            except (A, B, C), ex:\n                return ex\n\n    :class:`wrap_errors` provides a shortcut to write that in one line::\n\n        wrapped_func = wrap_errors((A, B, C), func)\n\n    It also preserves ``__str__`` and ``__repr__`` of the original function.\n    ',
                                         'methods': [('__call__', ['*args', '**kwargs'], ''),
                                                     ('__str__', [], ''),
                                                     ('__repr__', [], ''),
                                                     ('__getattr__', ['item'], '')],
                                         'properties': ['errors', 'func']},
             'gevent.win32util._ErrorFormatter': {'bases': ['object'],
                                                  'constructor': ['WinError',
                                                                  'FormatMessage',
                                                                  'errorTab'],
                                                  'docstring': '\n    Formatter for Windows error messages.\n\n    @ivar winError: A callable which takes one integer error number argument\n        and returns an L{exceptions.WindowsError} instance for that error (like\n        L{ctypes.WinError}).\n\n    @ivar formatMessage: A callable which takes one integer error number\n        argument and returns a C{str} giving the message for that error (like\n        L{win32api.FormatMessage}).\n\n    @ivar errorTab: A mapping from integer error numbers to C{str} messages\n        which correspond to those erorrs (like L{socket.errorTab}).\n    ',
                                                  'methods': [('fromEnvironment',
                                                               [],
                                                               '\n        Get as many of the platform-specific error translation objects as\n        possible and return an instance of C{cls} created with them.\n        '),
                                                              ('formatError',
                                                               ['errorcode'],
                                                               '\n        Returns the string associated with a Windows error message, such as the\n        ones found in socket.error.\n\n        Attempts direct lookup against the win32 API via ctypes and then\n        pywin32 if available), then in the error table in the socket module,\n        then finally defaulting to C{os.strerror}.\n\n        @param errorcode: the Windows error code\n        @type errorcode: C{int}\n\n        @return: The error message string\n        @rtype: C{str}\n        ')],
                                                  'properties': ['winError',
                                                                 'formatMessage',
                                                                 'errorTab',
                                                                 'fromEnvironment']},
             'gevent.wsgi.WSGIHandler': {'bases': ['object'],
                                         'constructor': ['request', 'server'],
                                         'docstring': '',
                                         'methods': [('start_response',
                                                      ['status', 'headers', 'exc_info=None'],
                                                      ''),
                                                     ('write', ['data'], ''),
                                                     ('end', ['env'], ''),
                                                     ('format_request', ["length='-'"], ''),
                                                     ('log_request', ['*args'], ''),
                                                     ('prepare_env', [], ''),
                                                     ('handle', [], ''),
                                                     ('_reply500', [], '')],
                                         'properties': ['request',
                                                        'server',
                                                        'code',
                                                        'reason',
                                                        'headers',
                                                        'data']},
             'gevent.wsgi.WSGIServer': {'bases': ['gevent.http.HTTPServer'],
                                        'constructor': ['listener',
                                                        'application=None',
                                                        'backlog=None',
                                                        "spawn='default'",
                                                        "log='default'",
                                                        'handler_class=None',
                                                        'environ=None'],
                                        'docstring': 'A fast WSGI server based on :class:`HTTPServer`.',
                                        'methods': [('set_environ', ['environ=None'], ''),
                                                    ('get_environ', [], ''),
                                                    ('pre_start', [], ''),
                                                    ('kill', [], ''),
                                                    ('handle', ['req'], '')],
                                        'properties': ['handler_class',
                                                       'base_env',
                                                       'application',
                                                       'log',
                                                       'environ']}},
 'CONSTANTS': ['gevent.backdoor.__all__',
               'gevent.sslold.__all__',
               'gevent.sslold.sslerror',
               'gevent.sslold.SysCallError_code_mapping',
               'gevent.pywsgi.__all__',
               'gevent.pywsgi.MAX_REQUEST_LINE',
               'gevent.pywsgi._WEEKDAYNAME',
               'gevent.pywsgi._MONTHNAME',
               'gevent.pywsgi._INTERNAL_ERROR_STATUS',
               'gevent.pywsgi._INTERNAL_ERROR_BODY',
               'gevent.pywsgi._INTERNAL_ERROR_HEADERS',
               'gevent.pywsgi._REQUEST_TOO_LONG_RESPONSE',
               'gevent.pywsgi._BAD_REQUEST_RESPONSE',
               'gevent.pywsgi._CONTINUE_RESPONSE',
               'gevent.socket.__implements__',
               'gevent.socket.__extensions__',
               'gevent.socket.__imports__',
               'gevent.socket.is_windows',
               'gevent.socket.EAGAIN',
               'gevent.socket.EBADF',
               'gevent.socket._realsocket',
               'gevent.socket.__socket__',
               'gevent.socket._fileobject',
               'gevent.socket.name',
               'gevent.socket.value',
               'gevent.socket.name',
               'gevent.socket.value',
               'gevent.socket.name',
               'gevent.socket.value',
               'gevent.socket._ip4_re',
               'gevent.socket.realfileobject',
               'gevent.socket._get_memory',
               'gevent.socket._delegate_methods',
               'gevent.socket.timeout_default',
               'gevent.socket.SocketType',
               'gevent.socket._GLOBAL_DEFAULT_TIMEOUT',
               'gevent.socket._GLOBAL_DEFAULT_TIMEOUT',
               'gevent.socket._have_ssl',
               'gevent.socket._have_ssl',
               'gevent.socket._have_ssl',
               'gevent.socket.__all__',
               'gevent.pool.__all__',
               'gevent.http.__all__',
               'gevent.queue.__all__',
               'gevent.greenlet.__all__',
               'gevent.greenlet._NONE',
               'gevent.monkey.__all__',
               'gevent.monkey.modules',
               'gevent.monkey.x',
               'gevent.monkey.script_help',
               'gevent.monkey.m',
               'gevent.monkey.args',
               'gevent.monkey.argv',
               'gevent.monkey.verbose',
               'gevent.monkey.option',
               'gevent.monkey.verbose',
               'gevent.monkey.item',
               'gevent.monkey.__package__',
               'gevent.hub.__all__',
               'gevent.hub.greenlet',
               'gevent.hub.greenlet',
               'gevent.hub.getcurrent',
               'gevent.hub.GreenletExit',
               'gevent.hub.MAIN',
               'gevent.hub.thread',
               'gevent.hub.threadlocal',
               'gevent.hub._threadlocal',
               'gevent.hub._original_fork',
               'gevent.hub._original_fork',
               'gevent.hub._NONE',
               'gevent.wsgi.socket',
               'gevent.wsgi.__all__',
               'gevent.wsgi.USAGE',
               'gevent.wsgi.parser',
               'gevent.wsgi.options',
               'gevent.wsgi.args',
               'gevent.wsgi.filename',
               'gevent.wsgi.application',
               'gevent.wsgi.server',
               'gevent.select.__implements__',
               'gevent.select.__all__',
               'gevent.select.__select__',
               'gevent.select.error',
               'gevent.util.__all__',
               'gevent.baseserver.__all__',
               'gevent.version_info',
               'gevent.__version__',
               'gevent.__changeset__',
               'gevent.__all__',
               'gevent.sys',
               'gevent.spawn',
               'gevent.spawn_later',
               'gevent.spawn_link',
               'gevent.spawn_link_value',
               'gevent.spawn_link_exception',
               'gevent.httplib.__httplib__',
               'gevent.httplib.__implements__',
               'gevent.httplib.__imports__',
               'gevent.httplib.__all__',
               'gevent.httplib.InvalidURL',
               'gevent.httplib.HTTP_PORT',
               'gevent.httplib.HTTPException',
               'gevent.httplib.HTTPSConnection',
               'gevent.httplib.EV_METHOD_TYPES',
               'gevent.httplib.id',
               'gevent.httplib.name',
               'gevent.thread.__implements__',
               'gevent.thread.__imports__',
               'gevent.thread.__thread__',
               'gevent.thread.error',
               'gevent.thread._original_stack_size',
               'gevent.thread.__all__',
               'gevent.server.__all__',
               'gevent.win32util.__all__',
               'gevent.win32util.formatError',
               'gevent.local.__all__',
               'gevent.event.__all__',
               'gevent.rawgreenlet.__all__',
               'gevent.timeout.__all__',
               'gevent.coros.__all__',
               'gevent.ssl.__ssl__',
               'gevent.ssl._ssl',
               'gevent.ssl._ssl',
               'gevent.ssl.__implements__',
               'gevent.ssl.__imports__',
               'gevent.ssl.name',
               'gevent.ssl.value',
               'gevent.ssl.name',
               'gevent.ssl.value',
               'gevent.ssl.name',
               'gevent.ssl.value',
               'gevent.ssl.__all__',
               'gevent.ssl._SSLErrorReadTimeout',
               'gevent.ssl._SSLErrorWriteTimeout',
               'gevent.ssl._SSLErrorHandshakeTimeout',
               'gevent.dns.__all__'],
 'FUNCTIONS': [('gevent.sslold.ssl', ['sock', 'keyfile=None', 'certfile=None'], ''),
               ('gevent.sslold.wrap_socket',
                ['sock',
                 'keyfile=None',
                 'certfile=None',
                 'server_side=None',
                 'cert_reqs=None',
                 'ssl_version=None',
                 'ca_certs=None',
                 'do_handshake_on_connect=None',
                 'suppress_ragged_eofs=None'],
                'Create a new :class:`SSLObject` instance.\n\n    For compatibility with :mod:`gevent.ssl` the function accepts all the arguments that :func:`gevent.ssl.wrap_socket`\n    accepts. However, it only understands what *sock*, *keyfile* and *certfile* mean, so it will raise\n    :exc:`ImportError` if you pass anything else.\n    '),
               ('gevent.pywsgi.format_date_time', ['timestamp'], ''),
               ('gevent.socket.inet_ntop', ['address_family', 'packed_ip'], ''),
               ('gevent.socket._wait_helper', ['ev', 'evtype'], ''),
               ('gevent.socket.wait_read',
                ['fileno', 'timeout=None', "timeout_exc=timeout('timed out')", 'event=None'],
                "Block the current greenlet until *fileno* is ready to read.\n\n    If *timeout* is non-negative, then *timeout_exc* is raised after *timeout* second has passed.\n    By default *timeout_exc* is ``socket.timeout('timed out')``.\n\n    If :func:`cancel_wait` is called, raise ``socket.error(EBADF, 'File descriptor was closed in another greenlet')``.\n    "),
               ('gevent.socket.wait_write',
                ['fileno', 'timeout=None', "timeout_exc=timeout('timed out')", 'event=None'],
                "Block the current greenlet until *fileno* is ready to write.\n\n    If *timeout* is non-negative, then *timeout_exc* is raised after *timeout* second has passed.\n    By default *timeout_exc* is ``socket.timeout('timed out')``.\n\n    If :func:`cancel_wait` is called, raise ``socket.error(EBADF, 'File descriptor was closed in another greenlet')``.\n    "),
               ('gevent.socket.wait_readwrite',
                ['fileno', 'timeout=None', "timeout_exc=timeout('timed out')", 'event=None'],
                "Block the current greenlet until *fileno* is ready to read or write.\n\n    If *timeout* is non-negative, then *timeout_exc* is raised after *timeout* second has passed.\n    By default *timeout_exc* is ``socket.timeout('timed out')``.\n\n    If :func:`cancel_wait` is called, raise ``socket.error(EBADF, 'File descriptor was closed in another greenlet')``.\n    "),
               ('gevent.socket.__cancel_wait', ['event'], ''),
               ('gevent.socket.cancel_wait', ['event'], ''),
               ('gevent.socket._get_memory', ['string', 'offset'], ''),
               ('gevent.socket.socketpair', ['*args'], ''),
               ('gevent.socket.fromfd', ['*args'], ''),
               ('gevent.socket.bind_and_listen',
                ['descriptor', "address=('', 0)", 'backlog=50', 'reuse_addr=True'],
                ''),
               ('gevent.socket.tcp_listener',
                ['address', 'backlog=50', 'reuse_addr=True'],
                'A shortcut to create a TCP socket, bind it and put it into listening state.'),
               ('gevent.socket.create_connection',
                ['address', 'timeout=_GLOBAL_DEFAULT_TIMEOUT', 'source_address=None'],
                "Connect to *address* and return the socket object.\n\n    Convenience function.  Connect to *address* (a 2-tuple ``(host,\n    port)``) and return the socket object.  Passing the optional\n    *timeout* parameter will set the timeout on the socket instance\n    before attempting to connect.  If no *timeout* is supplied, the\n    global default timeout setting returned by :func:`getdefaulttimeout`\n    is used. If *source_address* is set it must be a tuple of (host, port)\n    for the socket to bind as a source address before making the connection.\n    An host of '' or port 0 tells the OS to use the default.\n    "),
               ('gevent.socket.gethostbyname',
                ['hostname'],
                ':func:`socket.gethostbyname` implemented using :mod:`gevent.dns`.\n\n        Differs in the following ways:\n\n        * raises :class:`DNSError` (a subclass of :class:`socket.gaierror`) with dns error\n          codes instead of standard socket error codes\n        * does not support ``/etc/hosts`` but calls the original :func:`socket.gethostbyname`\n          if *hostname* has no dots\n        * does not iterate through all addresses, instead picks a random one each time\n        '),
               ('gevent.socket.getaddrinfo',
                ['host',
                 'port',
                 'family=0',
                 'socktype=0',
                 'proto=0',
                 'flags=0',
                 'evdns_flags=0'],
                '*Some* approximation of :func:`socket.getaddrinfo` implemented using :mod:`gevent.dns`.\n\n        If *host* is not a string, does not has any dots or is a numeric IP address, then\n        the standard :func:`socket.getaddrinfo` is called.\n\n        Otherwise, calls :func:`resolve_ipv4` (for ``AF_INET``) or :func:`resolve_ipv6` (for ``AF_INET6``) or\n        both (for ``AF_UNSPEC``) and formats the result the way :func:`socket.getaddrinfo` does it.\n\n        Differs in the following ways:\n\n        * raises :class:`DNSError` (a subclass of :class:`gaierror`) with libevent-dns error\n          codes instead of standard socket error codes\n        * *flags* argument is ignored\n        * for IPv6, flow info and scope id are always 0\n\n        Additionally, supports *evdns_flags* keyword arguments (default ``0``) that is passed\n        to :mod:`dns` functions.\n        '),
               ('gevent.pool.GreenletSet', ['*args', '**kwargs'], ''),
               ('gevent.pool.get_values', ['greenlets'], ''),
               ('gevent.core.__bootstrap__', [], ''),
               ('gevent.greenlet._kill', ['greenlet', 'exception', 'waiter'], ''),
               ('gevent.greenlet.joinall',
                ['greenlets', 'timeout=None', 'raise_error=False'],
                ''),
               ('gevent.greenlet._killall3', ['greenlets', 'exception', 'waiter'], ''),
               ('gevent.greenlet._killall', ['greenlets', 'exception'], ''),
               ('gevent.greenlet.killall',
                ['greenlets', 'exception=GreenletExit', 'block=True', 'timeout=None'],
                ''),
               ('gevent.greenlet.getfuncname', ['func'], ''),
               ('gevent.monkey.patch_os',
                [],
                'Replace :func:`os.fork` with :func:`gevent.fork`.'),
               ('gevent.monkey.patch_time',
                [],
                'Replace :func:`time.sleep` with :func:`gevent.sleep`.'),
               ('gevent.monkey.patch_thread',
                ['threading=True', '_threading_local=True'],
                'Replace the standard :mod:`thread` module to make it greenlet-based.\n    If *threading* is true (the default), also patch ``threading.local``.\n    If *_threading_local* is true (the default), also patch ``_threading_local.local``.\n    '),
               ('gevent.monkey.patch_socket',
                ['dns=True', 'aggressive=True'],
                "Replace the standard socket object with gevent's cooperative sockets.\n\n    If *dns* is true, also patch dns functions in :mod:`socket`.\n    "),
               ('gevent.monkey.patch_dns', [], ''),
               ('gevent.monkey.patch_ssl', [], ''),
               ('gevent.monkey.patch_select',
                ['aggressive=False'],
                'Replace :func:`select.select` with :func:`gevent.select.select`.\n\n    If aggressive is true (the default), also remove other blocking functions the :mod:`select`.\n    '),
               ('gevent.monkey.patch_httplib', [], ''),
               ('gevent.monkey.patch_all',
                ['socket=True',
                 'dns=True',
                 'time=True',
                 'select=True',
                 'thread=True',
                 'os=True',
                 'ssl=True',
                 'httplib=False',
                 'aggressive=True'],
                'Do all of the default monkey patching (calls every other function in this module.'),
               ('gevent.hub.__import_py_magic_greenlet', [], ''),
               ('gevent.hub._switch_helper', ['function', 'args', 'kwargs'], ''),
               ('gevent.hub.spawn_raw', ['function', '*args', '**kwargs'], ''),
               ('gevent.hub.sleep',
                ['seconds=0'],
                'Put the current greenlet to sleep for at least *seconds*.\n\n    *seconds* may be specified as an integer, or a float if fractional seconds\n    are desired. Calling sleep with *seconds* of 0 is the canonical way of\n    expressing a cooperative yield.\n    '),
               ('gevent.hub.kill',
                ['greenlet', 'exception=GreenletExit'],
                'Kill greenlet asynchronously. The current greenlet is not unscheduled.\n\n    Note, that :meth:`gevent.Greenlet.kill` method does the same and more. However,\n    MAIN greenlet - the one that exists initially - does not have ``kill()`` method\n    so you have to use this function.\n    '),
               ('gevent.hub._wrap_signal_handler', ['handler', 'args', 'kwargs'], ''),
               ('gevent.hub.signal', ['signalnum', 'handler', '*args', '**kwargs'], ''),
               ('gevent.hub.fork', [], ''),
               ('gevent.hub.shutdown',
                [],
                'Cancel our CTRL-C handler and wait for core.dispatch() to return.'),
               ('gevent.hub.get_hub', [], ''),
               ('gevent.wsgi.extract_application', ['filename'], ''),
               ('gevent.select.get_fileno', ['obj'], ''),
               ('gevent.select.select',
                ['rlist', 'wlist', 'xlist', 'timeout=None'],
                'An implementation of :meth:`select.select` that blocks only the current greenlet.\n\n    Note: *xlist* is ignored.\n    '),
               ('gevent.baseserver._tcp_listener',
                ['address', 'backlog=50', 'reuse_addr=None'],
                'A shortcut to create a TCP socket, bind it and put it into listening state.\n\n    The difference from :meth:`gevent.socket.tcp_listener` is that this function returns\n    an unwrapped :class:`_socket.socket` instance.\n    '),
               ('gevent.thread.get_ident', ['gr=None'], ''),
               ('gevent.thread.start_new_thread', ['function', 'args=()', 'kwargs={}'], ''),
               ('gevent.thread.allocate_lock', [], ''),
               ('gevent.thread.exit', [], ''),
               ('gevent.thread.stack_size', ['size=None'], ''),
               ('gevent.server._import_sslold_wrap_socket', [], ''),
               ('gevent.local._init_locals', ['self'], ''),
               ('gevent.event.waitall', ['events'], ''),
               ('gevent.rawgreenlet._kill', ['greenlet', 'exception', 'waiter'], ''),
               ('gevent.rawgreenlet.kill',
                ['greenlet', 'exception=GreenletExit', 'block=True', 'polling_period=0.2'],
                'Kill greenlet with exception (GreenletExit by default).\n    Wait for it to die if block is true.\n    '),
               ('gevent.rawgreenlet._killall', ['greenlets', 'exception', 'waiter'], ''),
               ('gevent.rawgreenlet.killall',
                ['greenlets', 'exception=GreenletExit', 'block=True', 'polling_period=0.2'],
                'Kill all the greenlets with exception (GreenletExit by default).\n    Wait for them to die if block is true.\n    '),
               ('gevent.rawgreenlet.join',
                ['greenlet', 'polling_period=0.2'],
                'Wait for a greenlet to finish by polling its status'),
               ('gevent.rawgreenlet.joinall',
                ['greenlets', 'polling_period=0.2'],
                'Wait for the greenlets to finish by polling their status'),
               ('gevent.timeout.with_timeout',
                ['seconds', 'function', '*args', '**kwds'],
                'Wrap a call to *function* with a timeout; if the called\n    function fails to return before the timeout, cancel it and return a\n    flag value, provided by *timeout_value* keyword argument.\n\n    If timeout expires but *timeout_value* is not provided, raise :class:`Timeout`.\n\n    Keyword argument *timeout_value* is not passed to *function*.\n    '),
               ('gevent.ssl.wrap_socket',
                ['sock',
                 'keyfile=None',
                 'certfile=None',
                 'server_side=False',
                 'cert_reqs=CERT_NONE',
                 'ssl_version=PROTOCOL_SSLv23',
                 'ca_certs=None',
                 'do_handshake_on_connect=True',
                 'suppress_ragged_eofs=True',
                 'ciphers=None'],
                'Create a new :class:`SSLSocket` instance.'),
               ('gevent.ssl.get_server_certificate',
                ['addr', 'ssl_version=PROTOCOL_SSLv3', 'ca_certs=None'],
                "Retrieve the certificate from the server at the specified address,\n    and return it as a PEM-encoded string.\n    If 'ca_certs' is specified, validate the server cert against it.\n    If 'ssl_version' is specified, use it in the connection attempt."),
               ('gevent.ssl.sslwrap_simple',
                ['sock', 'keyfile=None', 'certfile=None'],
                'A replacement for the old socket.ssl function.  Designed\n    for compability with Python 2.5 and earlier.  Will disappear in\n    Python 3.0.'),
               ('gevent.dns.resolve_ipv4',
                ['name', 'flags=0'],
                "Lookup an A record for a given *name*.\n    To disable searching for this query, set *flags* to ``QUERY_NO_SEARCH``.\n\n    Returns (ttl, list of packed IPs).\n\n        >>> resolve_ipv4('www.python.org')\n        (10000, ['R^\\xa4\\xa2'])\n    "),
               ('gevent.dns.resolve_ipv6',
                ['name', 'flags=0'],
                'Lookup an AAAA record for a given *name*.\n    To disable searching for this query, set *flags* to ``QUERY_NO_SEARCH``.\n\n    Returns (ttl, list of packed IPs).\n    '),
               ('gevent.dns.resolve_reverse',
                ['packed_ip', 'flags=0'],
                "Lookup a PTR record for a given IP address.\n    To disable searching for this query, set *flags* to ``QUERY_NO_SEARCH``.\n\n        >>> packed_ip = socket.inet_aton('82.94.164.162')\n        >>> resolve_reverse(packed_ip)\n        (10000, 'www.python.org')\n    "),
               ('gevent.dns.resolve_reverse_ipv6',
                ['packed_ip', 'flags=0'],
                'Lookup a PTR record for a given IPv6 address.\n    To disable searching for this query, set *flags* to ``QUERY_NO_SEARCH``.\n    ')],
 'HIERARCHY': ['gevent.backdoor',
               'gevent.sslold',
               'gevent.pywsgi',
               'gevent.socket',
               'gevent.pool',
               'gevent.http',
               'gevent.core',
               'gevent.queue',
               'gevent.greenlet',
               'gevent.monkey',
               'gevent.hub',
               'gevent.wsgi',
               'gevent.select',
               'gevent.util',
               'gevent.baseserver',
               'gevent',
               'gevent.httplib',
               'gevent.thread',
               'gevent.server',
               'gevent.win32util',
               'gevent.local',
               'gevent.event',
               'gevent.rawgreenlet',
               'gevent.timeout',
               'gevent.coros',
               'gevent.ssl',
               'gevent.dns'],
 'POINTERS': {'gevent.Greenlet': 'gevent.greenlet.Greenlet',
              'gevent.GreenletExit': 'gevent.hub.GreenletExit',
              'gevent.Timeout': 'gevent.timeout.Timeout',
              'gevent.backdoor.Greenlet': 'gevent.greenlet.Greenlet',
              'gevent.backdoor.InteractiveConsole': 'code.InteractiveConsole',
              'gevent.backdoor.StreamServer': 'gevent.server.StreamServer',
              'gevent.backdoor.socket': 'gevent.socket',
              'gevent.backdoor.sys': 'sys',
              'gevent.baseserver.Event': 'gevent.event.Event',
              'gevent.baseserver.Greenlet': 'gevent.greenlet.Greenlet',
              'gevent.baseserver.Pool': 'gevent.pool.Pool',
              'gevent.baseserver._socket': '_socket',
              'gevent.baseserver.getfuncname': 'gevent.greenlet.getfuncname',
              'gevent.core': 'gevent.core',
              'gevent.core.imp': 'imp',
              'gevent.core.pkg_resources': 'pkg_resources',
              'gevent.core.sys': 'sys',
              'gevent.coros.Timeout': 'gevent.timeout.Timeout',
              'gevent.coros.active_event': 'gevent.core.active_event',
              'gevent.coros.get_hub': 'gevent.hub.get_hub',
              'gevent.coros.getcurrent': 'gevent.hub.getcurrent',
              'gevent.coros.sys': 'sys',
              'gevent.coros.traceback': 'traceback',
              'gevent.dns.QUERY_NO_SEARCH': 'gevent.core.DNS_QUERY_NO_SEARCH',
              'gevent.dns.Waiter': 'gevent.hub.Waiter',
              'gevent.dns.core': 'gevent.core',
              'gevent.dns.gaierror': '_socket.gaierror',
              'gevent.event.Queue': 'gevent.queue.Queue',
              'gevent.event.Timeout': 'gevent.timeout.Timeout',
              'gevent.event._NONE': 'gevent.hub._NONE',
              'gevent.event.core': 'gevent.core',
              'gevent.event.get_hub': 'gevent.hub.get_hub',
              'gevent.event.getcurrent': 'gevent.hub.getcurrent',
              'gevent.event.sys': 'sys',
              'gevent.event.traceback': 'traceback',
              'gevent.fork': 'gevent.hub.fork',
              'gevent.getcurrent': 'gevent.hub.getcurrent',
              'gevent.greenlet.GreenletExit': 'gevent.hub.GreenletExit',
              'gevent.greenlet.Queue': 'gevent.queue.Queue',
              'gevent.greenlet.Timeout': 'gevent.timeout.Timeout',
              'gevent.greenlet.Waiter': 'gevent.hub.Waiter',
              'gevent.greenlet.core': 'gevent.core',
              'gevent.greenlet.get_hub': 'gevent.hub.get_hub',
              'gevent.greenlet.getcurrent': 'gevent.hub.getcurrent',
              'gevent.greenlet.greenlet': 'gevent.hub.greenlet',
              'gevent.greenlet.sys': 'sys',
              'gevent.greenlet.traceback': 'traceback',
              'gevent.http.BaseServer': 'gevent.baseserver.BaseServer',
              'gevent.http.core': 'gevent.core',
              'gevent.httplib.Waiter': 'gevent.hub.Waiter',
              'gevent.httplib.core': 'gevent.core',
              'gevent.httplib.imp': 'imp',
              'gevent.hub.core': 'gevent.core',
              'gevent.hub.greenlet': 'py.magic.greenlet',
              'gevent.hub.os': 'os',
              'gevent.hub.sys': 'sys',
              'gevent.hub.traceback': 'traceback',
              'gevent.joinall': 'gevent.greenlet.joinall',
              'gevent.kill': 'gevent.hub.kill',
              'gevent.killall': 'gevent.greenlet.killall',
              'gevent.local.RLock': 'gevent.coros.RLock',
              'gevent.local.WeakKeyDictionary': 'weakref.WeakKeyDictionary',
              'gevent.local.copy': 'copy.copy',
              'gevent.local.getcurrent': 'gevent.hub.getcurrent',
              'gevent.monkey.HTTPConnection': 'gevent.httplib.HTTPConnection',
              'gevent.monkey.HTTPSConnection': 'gevent.httplib.HTTPSConnection',
              'gevent.monkey.SSLSocket': 'gevent.ssl.SSLSocket',
              'gevent.monkey.fork': 'gevent.hub.fork',
              'gevent.monkey.get_server_certificate': 'gevent.ssl.get_server_certificate',
              'gevent.monkey.getaddrinfo': 'gevent.socket.getaddrinfo',
              'gevent.monkey.gethostbyname': 'gevent.socket.gethostbyname',
              'gevent.monkey.green_thread': 'gevent.thread',
              'gevent.monkey.local': 'gevent.local.local',
              'gevent.monkey.os': 'os',
              'gevent.monkey.pprint': 'pprint',
              'gevent.monkey.select': 'gevent.select.select',
              'gevent.monkey.sleep': 'gevent.hub.sleep',
              'gevent.monkey.socket': 'gevent.socket',
              'gevent.monkey.ssl': 'gevent.socket.ssl',
              'gevent.monkey.sslerror': 'gevent.socket.sslerror',
              'gevent.monkey.sslwrap_simple': 'gevent.ssl.sslwrap_simple',
              'gevent.monkey.sys': 'sys',
              'gevent.monkey.wrap_socket': 'gevent.ssl.wrap_socket',
              'gevent.pool.DummySemaphore': 'gevent.coros.DummySemaphore',
              'gevent.pool.Event': 'gevent.event.Event',
              'gevent.pool.Greenlet': 'gevent.greenlet.Greenlet',
              'gevent.pool.GreenletExit': 'gevent.hub.GreenletExit',
              'gevent.pool.Queue': 'gevent.queue.Queue',
              'gevent.pool.Semaphore': 'gevent.coros.Semaphore',
              'gevent.pool.Timeout': 'gevent.timeout.Timeout',
              'gevent.pool.getcurrent': 'gevent.hub.getcurrent',
              'gevent.pool.joinall': 'gevent.greenlet.joinall',
              'gevent.pool.warnings': 'warnings',
              'gevent.pywsgi.GreenletExit': 'gevent.hub.GreenletExit',
              'gevent.pywsgi.StreamServer': 'gevent.server.StreamServer',
              'gevent.pywsgi.datetime': 'datetime.datetime',
              'gevent.pywsgi.errno': 'errno',
              'gevent.pywsgi.gevent': 'gevent',
              'gevent.pywsgi.mimetools': 'mimetools',
              'gevent.pywsgi.socket': 'gevent.socket',
              'gevent.pywsgi.sys': 'sys',
              'gevent.pywsgi.time': 'time',
              'gevent.pywsgi.traceback': 'traceback',
              'gevent.pywsgi.unquote': 'urllib.unquote',
              'gevent.queue.Empty': 'Queue.Empty',
              'gevent.queue.Event': 'gevent.event.Event',
              'gevent.queue.Full': 'Queue.Full',
              'gevent.queue.Timeout': 'gevent.timeout.Timeout',
              'gevent.queue.Waiter': 'gevent.hub.Waiter',
              'gevent.queue._NONE': 'gevent.hub._NONE',
              'gevent.queue.collections': 'collections',
              'gevent.queue.core': 'gevent.core',
              'gevent.queue.get_hub': 'gevent.hub.get_hub',
              'gevent.queue.getcurrent': 'gevent.hub.getcurrent',
              'gevent.queue.heapq': 'heapq',
              'gevent.queue.sys': 'sys',
              'gevent.rawgreenlet.GreenletExit': 'gevent.hub.GreenletExit',
              'gevent.rawgreenlet.Waiter': 'gevent.hub.Waiter',
              'gevent.rawgreenlet.core': 'gevent.core',
              'gevent.rawgreenlet.sleep': 'gevent.hub.sleep',
              'gevent.rawgreenlet.traceback': 'traceback',
              'gevent.rawgreenlet.warnings': 'warnings',
              'gevent.reinit': 'gevent.core.reinit',
              'gevent.select.Event': 'gevent.event.Event',
              'gevent.select.Timeout': 'gevent.timeout.Timeout',
              'gevent.select.core': 'gevent.core',
              'gevent.server.BaseServer': 'gevent.baseserver.BaseServer',
              'gevent.server.EWOULDBLOCK': 'gevent.socket.EWOULDBLOCK',
              'gevent.server.core': 'gevent.core',
              'gevent.server.errno': 'errno',
              'gevent.server.socket': 'gevent.socket',
              'gevent.server.sys': 'sys',
              'gevent.server.traceback': 'traceback',
              'gevent.server.wrap_socket': 'gevent.sslold.wrap_socket',
              'gevent.shutdown': 'gevent.hub.shutdown',
              'gevent.signal': 'gevent.hub.signal',
              'gevent.sleep': 'gevent.hub.sleep',
              'gevent.socket.EAGAIN': 'errno.EAGAIN',
              'gevent.socket.EALREADY': 'errno.EALREADY',
              'gevent.socket.EBADF': 'errno.EBADF',
              'gevent.socket.EINPROGRESS': 'errno.EINPROGRESS',
              'gevent.socket.EINVAL': 'errno.EINVAL',
              'gevent.socket.EISCONN': 'errno.EISCONN',
              'gevent.socket.EWOULDBLOCK': 'errno.EWOULDBLOCK',
              'gevent.socket.SSLType': 'gevent.sslold.SSLObject',
              'gevent.socket._socket': '_socket',
              'gevent.socket.core': 'gevent.core',
              'gevent.socket.get_hub': 'gevent.hub.get_hub',
              'gevent.socket.getcurrent': 'gevent.hub.getcurrent',
              'gevent.socket.random': 'random',
              'gevent.socket.re': 're',
              'gevent.socket.resolve_ipv4': 'gevent.dns.resolve_ipv4',
              'gevent.socket.resolve_ipv6': 'gevent.dns.resolve_ipv6',
              'gevent.socket.spawn': 'gevent.spawn',
              'gevent.socket.ssl': 'gevent.sslold.ssl',
              'gevent.socket.sslerror': 'gevent.sslold.sslerror',
              'gevent.socket.strerror': 'os.strerror',
              'gevent.socket.sys': 'sys',
              'gevent.socket.time': 'time',
              'gevent.socket.traceback': 'traceback',
              'gevent.socket.wrap_errors': 'gevent.util.wrap_errors',
              'gevent.spawn_raw': 'gevent.hub.spawn_raw',
              'gevent.ssl.EBADF': 'gevent.socket.EBADF',
              'gevent.ssl._fileobject': 'gevent.socket._fileobject',
              'gevent.ssl.errno': 'errno',
              'gevent.ssl.socket': 'gevent.socket.socket',
              'gevent.ssl.socket_error': 'gevent.socket.error',
              'gevent.ssl.sys': 'sys',
              'gevent.ssl.timeout_default': 'gevent.socket.timeout_default',
              'gevent.ssl.wait_read': 'gevent.socket.wait_read',
              'gevent.ssl.wait_write': 'gevent.socket.wait_write',
              'gevent.sslold.EWOULDBLOCK': 'gevent.socket.EWOULDBLOCK',
              'gevent.sslold.SSL': 'OpenSSL.SSL',
              'gevent.sslold.__socket__': 'gevent.socket.__socket__',
              'gevent.sslold._fileobject': 'gevent.socket._fileobject',
              'gevent.sslold.error': 'gevent.socket.error',
              'gevent.sslold.socket': 'gevent.socket.socket',
              'gevent.sslold.sys': 'sys',
              'gevent.sslold.timeout': 'gevent.socket.timeout',
              'gevent.sslold.timeout_default': 'gevent.socket.timeout_default',
              'gevent.sslold.wait_read': 'gevent.socket.wait_read',
              'gevent.sslold.wait_write': 'gevent.socket.wait_write',
              'gevent.sslold.warnings': 'warnings',
              'gevent.sys': 'sys',
              'gevent.thread.Greenlet': 'gevent.greenlet.Greenlet',
              'gevent.thread.GreenletExit': 'gevent.hub.GreenletExit',
              'gevent.thread.LockType': 'gevent.coros.Semaphore',
              'gevent.thread.getcurrent': 'gevent.hub.getcurrent',
              'gevent.timeout._NONE': 'gevent.hub._NONE',
              'gevent.timeout.core': 'gevent.core',
              'gevent.timeout.getcurrent': 'gevent.hub.getcurrent',
              'gevent.util.warnings': 'warnings',
              'gevent.win32util.FormatMessage': 'win32api.FormatMessage',
              'gevent.win32util.WinError': 'ctypes.WinError',
              'gevent.win32util.errorTab': 'gevent.socket.errorTab',
              'gevent.win32util.os': 'os',
              'gevent.with_timeout': 'gevent.timeout.with_timeout',
              'gevent.wsgi.GreenletExit': 'gevent.hub.GreenletExit',
              'gevent.wsgi.HTTPServer': 'gevent.http.HTTPServer',
              'gevent.wsgi.datetime': 'datetime.datetime',
              'gevent.wsgi.gevent': 'gevent',
              'gevent.wsgi.imp': 'imp',
              'gevent.wsgi.optparse': 'optparse',
              'gevent.wsgi.os': 'os',
              'gevent.wsgi.sys': 'sys',
              'gevent.wsgi.traceback': 'traceback',
              'gevent.wsgi.unquote': 'urllib.unquote'}}
